


this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170724095914//logs//


This keyword return the time stamp, default format is: 'yyyymmddhhmmss'


${timestamp}


${timestamp} = 20170724095916




Replaces ``pattern`` in the given ``string`` with ``replace_with``.


${SUITE_NAME[:50]}

\\s+$

${EMPTY}



${FILE_NAME}


${FILE_NAME} = FZHQ T2 Throughput UDP 20M TM4 4X2 2 7




Catenates the given items together and returns the resulted string.


SEPARATOR=${/}

${OUTPUT_DIR}

ev_logs

${FILE_NAME}_${timestamp}



${SUITE_LOG_DIRECTORY}


${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ T2 Throughput UDP 20M TM4 4X2 2 7_20170724095916




Replaces ``search_for`` in the given ``string`` with ``replace_with``.


${SUITE_LOG_DIRECTORY}

${SPACE}

_



${SUITE_LOG_DIRECTORY}


${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916




Makes a variable available everywhere within the scope of the current suite.


${SUITE_LOG_DIRECTORY}


${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916




Creates the specified directory.


${SUITE_LOG_DIRECTORY}


Created directory '
<
a href="file://D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916"
>
D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916
<
/a
>
'.




Logs the given message with the given level.


save log dir:${SUITE_LOG_DIRECTORY}


save log dir:D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916




Makes a variable available everywhere within the scope of the current suite.


${snapshot_flag}

0


${snapshot_flag} = 0




This keyword return useable LOG directory.


Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${TEST LOG DIR}



${case_dir_exist}



Fails unless the given variable exists within the current scope.


${TEST LOG DIR}


Variable ${TEST LOG DIR} does not exist.



${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')




Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${SUITE LOG DIRECTORY}



${suite_dir_exist}



Fails unless the given variable exists within the current scope.


${SUITE LOG DIRECTORY}




${suite_dir_exist} = ('PASS', None)




Sets variable based on the given condition.


'PASS'=='${case_dir_exist[0]}'

${TEST LOG DIR}

'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'

${SUITE LOG DIRECTORY}

'FAIL'=='${suite_dir_exist[0]}'

${OUTPUT_DIR}



${log dir}



Sets variable based on the given condition.


'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'

${SUITE LOG DIRECTORY}

'FAIL'=='${suite_dir_exist[0]}'

${OUTPUT_DIR}




${log dir} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916




Makes a variable available everywhere within the scope of the current suite.


${SAVE LOG DIRECTORY}

${log dir}


${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916






Runs the given keyword with the given arguments and ignores possible error.


Make Sure FCT Ping Ok




This function is used for check whether ping host success, if yes, return 1, else return 0


${FCMD_IP}



${status}


[ping_control.py@189]

Pinging 192.168.255.1 with 32 bytes of data:

Reply from 192.168.255.1: bytes=32 time
<
1ms TTL=255


Ping statistics for 192.168.255.1:

Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),

Approximate round trip times in milli-seconds:

Minimum = 0ms, Maximum = 0ms, Average = 0ms

${status} = True




Runs the given keyword with the given arguments, if ``condition`` is false.


${status}

Wait Until Units Startup

300

${FTM_IP}





Runs the given keyword with the given arguments, if ``condition`` is false.


${status}

Btscli Disable Bts Port Security





Runs the given keyword with the given arguments, if ``condition`` is false.


${status}

Wait Until Units Startup

60

${FCMD_IP}





Displays the given messages in the log file as keyword arguments.


Wait Until Keyword Succeeds

5min

5s

_make sure fctb connect ok









Runs the given keyword with the given arguments and ignores possible error.


get_enb_infomation



This keyword will print bts sw version, bbu type and RRU type.

[ping_control.py@189]

Pinging 192.168.255.1 with 32 bytes of data:

Reply from 192.168.255.1: bytes=32 time
<
1ms TTL=255


Ping statistics for 192.168.255.1:

Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),

Approximate round trip times in milli-seconds:

Minimum = 0ms, Maximum = 0ms, Average = 0ms

[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Mon Jul 24 09:56:21 CST 2017 from 192.168.255.126 on pts/0

root@fctj-4a:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05341E90
>

[ssh_common.py@258] Execute command: readlink /ffs/run

[ssh_common.py@314] Get Response: readlink /ffs/run

/ffs/fs1

root@fctj-4a:~
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05341E90
>

[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Mon Jul 24 09:59:18 CST 2017 from 192.168.255.126 on pts/0

root@fctj-4a:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9328
>

[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml

[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml

TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml

root@fctj-4a:/ffs/fs1
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9328
>

[ftm_control.py@299] SRAN don't need to enable ssh and rdport

[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Mon Jul 24 09:59:28 CST 2017 from 192.168.255.126 on pts/0

root@fctj-4a:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05356F80
>

[ssh_common.py@258] Execute command: readlink /ffs/run

[ssh_common.py@314] Get Response: readlink /ffs/run

/ffs/fs1

root@fctj-4a:~
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05356F80
>

[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Mon Jul 24 09:59:39 CST 2017 from 192.168.255.126 on pts/0

root@fctj-4a:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9288
>

[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml

[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml

TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml

root@fctj-4a:/ffs/fs1
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9288
>

[enb_resource.py@1139]

****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****

[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754

[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Mon Jul 24 09:59:50 CST 2017 from 192.168.255.126 on pts/0

root@fctj-4a:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9288
>

[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml

[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml

ls: cannot access /ram/SiteConf.xml: No such file or directory

root@fctj-4a:~
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9288
>

[enb_resource.py@1139]

****Not find /ram/SiteConf.xml *****

[ping_control.py@189]

Pinging 192.168.255.20 with 32 bytes of data:

Reply from 192.168.255.126: Destination host unreachable.


Ping statistics for 192.168.255.20:

Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),






Sets the resolution order to use when a name matches multiple keywords.


tdd_ev_robotws

OperatingSystem






used to get operation system platform version, can be used to judge if


with_connection=${false}



${platform_version}


${platform_version} = Windows-7-6.1.7601-SP1




Sets variable based on the given condition.


"Windows" in "${platform_version}"

${TELNET_PORT}

${SSH_PORT}



${conn_port}


${conn_port} = 23




Sets variable based on the given condition.


"Windows" in "${platform_version}"

TELNET

SSH



${conn_type}


${conn_type} = TELNET




Sets variable based on the given condition.


"Windows" in "${platform_version}"

30

5



${timeout}


${timeout} = 30




Used to connect to host, either TELNET or SSH


${BTS_PC_INFO.IP}

port=${conn_port}

username=${BTS_PC_INFO.USERNAME}

password=${BTS_PC_INFO.PASSWORD}

conn_type=${conn_type}

timeout=${timeout}



${BTS_PC_CONNECTION}


[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service



login:

[telnet_common.py@276] Execute command: tdlte-tester

[telnet_common.py@306] Get Response:  tdlte-tester


password:

[telnet_common.py@276] Execute command: btstest

[telnet_common.py@246]


*===============================================================

Microsoft Telnet Server.

*===============================================================

C:\Users\tdlte-tester
>

${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00
>




Makes a variable available everywhere within the scope of the current suite.


${BTS_PC_CONNECTION}


${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00
>




Runs the given keyword with the given arguments, if ``condition`` is true.


"Windows" in "${platform_version}"

Execute Shell Command

tlntadmn config timeoutactive\=no



Execute a command on the remote system.


tlntadmn config timeoutactive\=no


[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00
>

[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no

[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no

The settings were successfully updated.


C:\Users\tdlte-tester
>








Switch to the connection identified by 'conn'.


${BTS_PC_CONNECTION}


[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00
>
.







Runs the given keyword with the given arguments, if ``condition`` is true.


'${REMOVE_LOGS}'=='on'

Run Keyword If All Tests Passed

Remove Directory

${SUITE_LOG_DIRECTORY}

${True}





Closes all existing telnet connections to remote hosts.

[telnet_common.py@188]

[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00
>

[telnet_common.py@188]

[telnet_common.py@189] Disconnect from 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If All Tests Passed

Zip File

${SUITE_LOG_DIRECTORY}

${SUITE_LOG_DIRECTORY}.zip



Runs the given keyword with the given arguments, if all tests passed.


Zip File

${SUITE_LOG_DIRECTORY}

${SUITE_LOG_DIRECTORY}.zip







Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If All Tests Passed

Remove Directory

${SUITE_LOG_DIRECTORY}

${True}



Runs the given keyword with the given arguments, if all tests passed.


Remove Directory

${SUITE_LOG_DIRECTORY}

${True}











this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170724095914//ev_logs//D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916//


This keyword return the time stamp, default format is: 'yyyymmddhhmmss'


${timestamp}


${timestamp} = 20170724100036




Catenates the given items together and returns the resulted string.


SEPARATOR=${/}

${SUITE_LOG_DIRECTORY}

${TEST_NAME[:50]}



${TEST_LOG_DIR}


${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7




Replaces ``search_for`` in the given ``string`` with ``replace_with``.


${TEST_LOG_DIR}

${SPACE}

_



${TEST_LOG_DIR}


${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7




Makes a variable available everywhere within the scope of the current suite.


${TEST_LOG_DIR}


${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7




Creates the specified directory.


${TEST_LOG_DIR}


Created directory '
<
a href="file://D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7"
>
D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7
<
/a
>
'.




Logs the given message with the given level.


save log dir:${TEST_LOG_DIR}


save log dir:D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7




Runs the given keyword with the given arguments, if ``condition`` is false.


${BTS PC CONNECTION.connected}

Initial Connection With BTS PC





This keyword return useable LOG directory.


Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${TEST LOG DIR}



${case_dir_exist}



Fails unless the given variable exists within the current scope.


${TEST LOG DIR}




${case_dir_exist} = ('PASS', None)




Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${SUITE LOG DIRECTORY}



${suite_dir_exist}



Fails unless the given variable exists within the current scope.


${SUITE LOG DIRECTORY}




${suite_dir_exist} = ('PASS', None)




Sets variable based on the given condition.


'PASS'=='${case_dir_exist[0]}'

${TEST LOG DIR}

'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'

${SUITE LOG DIRECTORY}

'FAIL'=='${suite_dir_exist[0]}'

${OUTPUT_DIR}



${log dir}


${log dir} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7




Makes a variable available everywhere within the scope of the current suite.


${SAVE LOG DIRECTORY}

${log dir}


${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7








Setup Admin API.


bts_host=192.168.255.129

bts_port=9002

use_ssl=False


D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=39894 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpo8im1q --insecure

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection opened.

Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 16429, "parameters": {"name": "lnbtsState", "parameters": {}}}}

Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 16429, "requestMessage": "Waiting for response"}}

Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 16429, "requestMessage": "onAir"}}







2

${earfcn_b}



Example


${cellid}

attach_earfcn=${earfcn}

detach_ue=NO



Splits the ``string`` using ``separator`` as a delimiter string.


${cell_id}

:



@{cell_list}


@{cell_list} = [ 2 ]




Returns and logs the length of the given item as an integer.


${cell_list}



${cell_list_length}


Length is 1

${cell_list_length} = 1




Runs the given keyword with the given arguments, if ``condition`` is true.


'${attach_earfcn}'!=''

Split String

${attach_earfcn}

:



${earfcn_list1}



Splits the ``string`` using ``separator`` as a delimiter string.


${attach_earfcn}

:




${earfcn_list1} = [u'40940']




Runs the given keyword with the given arguments, if ``condition`` is true.


'${attach_earfcn}'!=''

Change_Earfcn_To_Freqency

${earfcn_list1}



${freqency_list1}

${band_list1}




${earfcn_list1}



Returns a list containing given items.


${freqency_list}


${freqency_list} = []




Returns a list containing given items.


${band_list}


${band_list} = []




Creates and returns a dictionary based on given items.


@{BAND_OFFSET}



${offset_dict}


Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.

${offset_dict} = {u'38': u'1205', u'40': u'1565', u'39': u'1945', u'41': u'1469', u'42': u'759', u'43': u'759', u'37': u'1845', u'36': u'1765', u'35': u'1785', u'34': u'1610', u'33': u'1700'}







${index}



${attach_band}



Creates and returns a dictionary based on given items.


@{BAND_RANGE}



${band_dict}


Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.

${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}




Returns keys of the given ``dictionary``.


${band_dict}



@{keys}


@{keys} = [ 38 | 39 | 40 | 41 | 42 ]






Splits the ``string`` using ``separator`` as a delimiter string.


${band_dict['${index}']}

-



@{temp1}


@{temp1} = [ 37750 | 38249 ]




Evaluates the given expression in Python and returns the results.


${temp1[1]}
>
=${earfcn}
>
=${temp1[0]}



${result}


${result} = False




Stops executing the enclosing for loop if the ``condition`` is true.


${result}








Splits the ``string`` using ``separator`` as a delimiter string.


${band_dict['${index}']}

-



@{temp1}


@{temp1} = [ 38250 | 38649 ]




Evaluates the given expression in Python and returns the results.


${temp1[1]}
>
=${earfcn}
>
=${temp1[0]}



${result}


${result} = False




Stops executing the enclosing for loop if the ``condition`` is true.


${result}








Splits the ``string`` using ``separator`` as a delimiter string.


${band_dict['${index}']}

-



@{temp1}


@{temp1} = [ 38650 | 39649 ]




Evaluates the given expression in Python and returns the results.


${temp1[1]}
>
=${earfcn}
>
=${temp1[0]}



${result}


${result} = False




Stops executing the enclosing for loop if the ``condition`` is true.


${result}








Splits the ``string`` using ``separator`` as a delimiter string.


${band_dict['${index}']}

-



@{temp1}


@{temp1} = [ 39650 | 41589 ]




Evaluates the given expression in Python and returns the results.


${temp1[1]}
>
=${earfcn}
>
=${temp1[0]}



${result}


${result} = True




Stops executing the enclosing for loop if the ``condition`` is true.


${result}


Exiting for loop altogether.








Runs the given keyword with the given arguments, if ``condition`` is true.


'${result}'=='False'

Fail

no corresponding bts band find





Evaluates the given expression in Python and returns the results.


${index}



${bts_band}


${bts_band} = 41



${attach_band} = 41




Converts the given item to a Unicode string.


${attach_band}



${attach_band}


${attach_band} = 41




Adds ``values`` to the end of ``list``.


${band_list}

${attach_band}





Returns a value from the given ``dictionary`` based on the given ``key``.


${offset_dict}

${attach_band}



${offset}


${offset} = 1469




Evaluates the given expression in Python and returns the results.


(${index}*0.1-${offset})*10



${freq}


${freq} = 26250.0




Converts the given item to an integer number.


${freq}



${fq}


${fq} = 26250




Converts the given item to a Unicode string.


${fq}



${freqency}


${freqency} = 26250




Adds ``values`` to the end of ``list``.


${freqency_list}

${freqency}










${freqency_list1} = [u'26250']

${band_list1} = [u'41']




Runs the given keyword with the given arguments, if ``condition`` is false.


'${attach_earfcn}'!=''

Get_Earfcn_From_Infomodel



${earfcn_list2}

${freqency_list2}

${band_list2}


${earfcn_list2} = None

${freqency_list2} = None

${band_list2} = None




Sets variable based on the given condition.


'${attach_earfcn}'!=''

${earfcn_list1}

'${attach_earfcn}'==''

${earfcn_list2}



${earfcn_list}


${earfcn_list} = [u'40940']




Sets variable based on the given condition.


'${attach_earfcn}'!=''

${freqency_list1}

'${attach_earfcn}'==''

${freqency_list2}



${freqency_list}


${freqency_list} = [u'26250']




Sets variable based on the given condition.


'${attach_earfcn}'!=''

${band_list1}

'${attach_earfcn}'==''

${band_list2}



${band_list}


${band_list} = [u'41']




Returns the given values which can then be assigned to a variables.


0



${cell_index1}


${cell_index1} = 0






Runs the given keyword with the given arguments, if ``condition`` is true.


'${attach_earfcn}'!=''

Evaluate

${cell_index1}

ELSE

Evaluate

${cell_index2}-1



${cell_index}



Evaluates the given expression in Python and returns the results.


${cell_index1}




${cell_index} = 0




Runs the given keyword with the given arguments, if ``condition`` is true.


'${UE_TYPE}'!='CPE'

Run Keyword If

'${UE_TYPE}'!='TM500'

Fail

The keyword doesn't yet support this type of UE



Runs the given keyword with the given arguments, if ``condition`` is true.


'${UE_TYPE}'!='TM500'

Fail

The keyword doesn't yet support this type of UE







Runs the given keyword with the given arguments, if ``condition`` is true.


'${UE_TYPE}'=='CPE'

CPE_Attach_SISO1_src

${earfcn_list[${cell_index}]}

${cell_index2}

${band_list[${cell_index}]}





Runs the given keyword with the given arguments, if ``condition`` is true.


'${UE_TYPE}'=='TM500'

TM500_Attach_SISO1_src

${freqency_list[${cell_index}]}

${cell_index2}

${modify_tm500_script}

${attach_scripts}




${freqency_list[${cell_index}]}

${cell_index2}

${modify_tm500_script}

${attach_scripts}



tm500 setup.

${TM500_PC_CONNECTION} = 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[robot_func.py@29] Can't get variable '${TM500_PC_CONNECTION}' ! details: 'Variable '${TM500_PC_CONNECTION}' not found.'

[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service



login:

[telnet_common.py@276] Execute command: tdlte-tester

[telnet_common.py@306] Get Response:  tdlte-tester


password:

[telnet_common.py@276] Execute command: btstest

[telnet_common.py@246]


*===============================================================

Microsoft Telnet Server.

*===============================================================

C:\Users\tdlte-tester
>

[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>
.

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',tdd_ev_robotws.__version__"

[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',tdd_ev_robotws.__version__"

*SEP* 1.0.1


C:\Users\tdlte-tester
>

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"

[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"

*SEP* D:\TA\trunk_soam\tdd_ev_robotws


C:\Users\tdlte-tester
>

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"

[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"

*SEP* D:\TA\trunk_soam\tdd_ev_robotws


C:\Users\tdlte-tester
>

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[telnet_common.py@276] Execute command: "D:\TA\trunk_soam\tdd_ev_robotws\tools\psexec.exe" -i -d python "D:\TA\trunk_soam\tdd_ev_robotws\tools\robotremoteserver.py"  -l tdd_ev_robotws -i 0.0.0.0 -p 8277 -s True

[telnet_common.py@306] Get Response: "D:\TA\trunk_soam\tdd_ev_robotws\tools\psexec.exe" -i -d python "D:\TA\trunk_soam\tdd_ev_robotws\tools\robotremoteserver.py"  -l tdd_ev_robotws -i 0.0.0.0 -p 8277 -s True


PsExec v1.98 - Execute processes remotely

Copyright (C) 2001-2010 Mark Russinovich

Sysinternals - www.sysinternals.com


python started with process ID 5860.


C:\Users\tdlte-tester
>

[process_control.py@74] Process start successed ! process id: 5860

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[remote_lib_control.py@62] start remote server succeed !

[tm500.py@108] have setup Remotelib instance: RemoteLibInstance: 10.69.71.199:8277

[tm500.py@408] Request TM500 Resource:

sent -
>
"request:15:1"

received
<
- "Welcome! Please use it, You are No.1 in 1 user queue.


"

[tm500.py@412] Get TM500 resource success!

[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>
.

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[telnet_common.py@276] Execute command: ls "C:\Program Files\FileZilla Server"

[telnet_common.py@306] Get Response: ls "C:\Program Files\FileZilla Server"

ls: cannot access 'C:\Program Files\FileZilla Server': No such file or directory


C:\Users\tdlte-tester
>

[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00
>
.

[file_control.py@332] copyfile2local command: 'D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FileZilla server.xml"'

[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:10 minutes
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00
>

[telnet_common.py@276] Execute command: D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FileZilla server.xml"

[telnet_common.py@306] Get Response: D:\TA\trunk_soam\tdd_ev_robotws\tools\p
scp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FileZilla server.xml"


C:\Users\tdlte-tester
>

[telnet_common.py@276] Execute command: echo ERRORCODE is: %ERRORLEVEL%

[telnet_common.py@306] Get Response: echo ERRORCODE is: %ERRORLEVEL%

ERRORCODE is: 0


C:\Users\tdlte-tester
>

[file_common.py@168] Copy file "D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FileZilla server.xml" to "D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FileZilla server.xml.change_bak" succeeded.

[filezilla_control.py@182] Filezilla configed right, no need to change TM500 version.

[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>
.

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[tm500.py@1728] TM500 command to be sent: #$$CLOSE

[tm500.py@1736] TM500 command reply: C: CLOSE 0x00 ok.

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[telnet_common.py@276] Execute command: TASKKILL /F /T /IM TmaApplication.exe

[telnet_common.py@306] Get Response: TASKKILL /F /T /IM TmaApplication.exe

ERROR: The process "TmaApplication.exe" not found.


C:\Users\tdlte-tester
>

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"

[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"

*SEP* D:\TA\trunk_soam\tdd_ev_robotws


C:\Users\tdlte-tester
>

[connection_mgr.py@278] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[telnet_common.py@276] Execute command: "D:\TA\trunk_soam\tdd_ev_robotws\tools\Server_Client\client.exe" localhost "C:\Program Files (x86)\Aeroflex\TM500\LTE - LSC 1.2.0\Test Mobile Application\TmaApplication.exe" /u \"Default User\" /c y /p 5003 /a n

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[telnet_common.py@276] Execute command: Ctrl-C

[telnet_common.py@306] Get Response: Server Keep Alive Message Interval is [12 bytes]: '3'

Keep Alive Message from Server Received [3 bytes]: '(be 0 3)'

^C

C:\Users\tdlte-tester
>

[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8
>

[tm500.py@591] Prev msg:

[tm500.py@1728] TM500 command to be sent: #$$DISCONNECT

[tm500.py@1736] TM500 command reply: C: DISCONNECT 0x00 OK

[tm500.py@1728] TM500 command to be sent: #$$CONNECT

[tm500.py@1736] TM500 command reply: C: CONNECT 0x00 ok. Waiting for User to Configure Test Mobile

[tm500.py@1728] TM500 command to be sent: GSTS

[tm500.py@1736] TM500 command reply: C: GSTS 0x00 Ok Reset

[tm500.py@1728] TM500 command to be sent: ABOT 0 0 1

[tm500.py@1736] TM500 command reply: C: ABOT 0x00 Ok 0x0000001e

[tm500.py@1728] TM500 command to be sent: SELR 0 0 RC1 COMBINED

[tm500.py@1736] TM500 command reply: C: SELR 0x00 Ok

[tm500.py@1728] TM500 command to be sent: EREF 0 0 0

[tm500.py@1736] TM500 command reply: C: EREF 0x00 Ok

[tm500.py@1728] TM500 command to be sent: GETR

[tm500.py@1736] TM500 command reply: C: GETR 0x00 Ok

Radio cards

==============

*  Card   : UMBRA2 LTE (20MHz)

Slot   : RC1

Chassis: 0

Context: 0

RF     : type 200

A:  DL : 400.0 - 4000.0 MHz

UL : 400.0 - 4000.0 MHz

B:  DL : 0.0 - 0.0 MHz

UL : 0.0 - 0.0 MHz

==============

Card   : UMBRA2 LTE (20MHz)

Slot   : RC2

Chassis: 0

Context: -

RF     : type 17

A:  DL : 2110.0 - 2170.0 MHz

UL : 1920.0 - 1980.0 MHz

B:  DL : 1880.0 - 1920.0 MHz

UL : 1880.0 - 1920.0 MHz

[tm500.py@1728] TM500 command to be sent: SCFG NAS_MODE

[tm500.py@1736] TM500 command reply: C: SCFG 0x00 Ok NAS_MODE

[tm500.py@1728] TM500 command to be sent: STRT

[tm500.py@1736] TM500 command reply: C: STRT 0x00 Ok

[tm500.py@1728] TM500 command to be sent: #$$DATA_LOG_FOLDER 1 "C:\TM500_log\"

[tm500.py@1736] TM500 command reply: C: DATA_LOG_FOLDER 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$DATA_LOG_OPTIONS 0 1 0

[tm500.py@1736] TM500 command reply: C: DATA_LOG_OPTIONS 0x00 ok.




Makes a variable available everywhere within the scope of the current test.


${TM500_Use_Tag}

used


${TM500_Use_Tag} = used




This keyword set attenuation value for one eNB cell.


${CELL${cell_id}_ATT_INFO}


$TA,C,080A*

[attenuator_control.py@445] send-
>
'$TA,C,080A*', Receive
<
-'$TA,C,080A*'

[attenuator_control.py@450] send-
>
'$TA,H,08*', Receive
<
-'$TA,C,080A*'

$TA,C,160A*

[attenuator_control.py@445] send-
>
'$TA,C,160A*', Receive
<
-'$TA,C,160A*'

[attenuator_control.py@450] send-
>
'$TA,H,16*', Receive
<
-'$TA,C,160A*'




This keyword selects TM500's logging items.


${ue_log_types}


[tm500.py@1728] TM500 command to be sent: GVER

[tm500.py@1736] TM500 command reply: C: GVER 0x00 Ok

PPC-0:

BSP: 2.0/q/R13

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-0:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

PCB: 0

VHDL: 0x0062

DSP-1:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-2:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-3:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-4:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

PCB: 0

VHDL: 0x0062

DSP-5:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-6:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-7:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-8:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

PCB: 0

VHDL: 0x101C

DSP-9:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-10:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-11:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-12:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

PCB: 0

VHDL: 0x208A

DSP-13:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-14:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-15:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

Version Label: LSC_1_2_0_REV01

UMBRA-0

API: 19.2.1  Product: 3

APP: 1.0.170  Built: Jun 20 2016 14:03:54

CON: 3.5.3  Build: 0

SIG: 2.1.1  Build: 46

MMC: 1.7

Carrier:  Loc: 13  PCB: 3.0 (OWI: 3.0)  SN: 0x9A000001D5F93823  BarCode: 20-1435-1360070-2517

MOD TX: 0.0.17  Build: 16  Type: 200  PCB: 3.0 (OWI: 3.0)  SN: 0x6700000167952823  BarCode: 00000044830737250112

MOD RX: 0.0.31  Build: 34  PCB: 3.0

[tm500.py@507] TM500 command line response of "GVER":

C: GVER 0x00 Ok

PPC-0:

BSP: 2.0/q/R13

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-0:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

PCB: 0

VHDL: 0x0062

DSP-1:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-2:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-3:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-4:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

PCB: 0

VHDL: 0x0062

DSP-5:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-6:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-7:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-8:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

PCB: 0

VHDL: 0x101C

DSP-9:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-10:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-11:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-12:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

PCB: 0

VHDL: 0x208A

DSP-13:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-14:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

DSP-15:

APP: TM500 LTE VERSION: LSC1.2.0 Rev1

Version Label: LSC_1_2_0_REV01

UMBRA-0

API: 19.2.1  Product: 3

APP: 1.0.170  Built: Jun 20 2016 14:03:54

CON: 3.5.3  Build: 0

SIG: 2.1.1  Build: 46

MMC: 1.7

Carrier:  Loc: 13  PCB: 3.0 (OWI: 3.0)  SN: 0x9A000001D5F93823  BarCode: 20-1435-1360070-2517

MOD TX: 0.0.17  Build: 16  Type: 200  PCB: 3.0 (OWI: 3.0)  SN: 0x6700000167952823  BarCode: 00000044830737250112

MOD RX: 0.0.31  Build: 34  PCB: 3.0

[tm500.py@1728] TM500 command to be sent: #$$LC_CLEAR_ALL

[tm500.py@1736] TM500 command reply: C: LC_CLEAR_ALL 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_ITM 1 1 1 Manual

[tm500.py@1736] TM500 command reply: C: LC_ITM 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 100 0 0 0 UEOVERVIEW

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 1 0 0 0 ProtocolLog

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 CQIREPORTING #Subband 0-24 2

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 262 1 0 0 #GRP:CQIREPORTING

[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 263 1 0 0 #GRP:CQIREPORTING

[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 264 1 0 0 #GRP:CQIREPORTING

[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 100 0 0 0 L1RBPOWERS #Component_Carrier 0,1 0

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 200 0 0 0 L1CELLWATCH

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLSCHRX

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLHARQRX

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 ULHARQTX

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 ULSRS

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLL1L2CONTROL

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 100 0 0 0 L1DLRSPOWER #Radio_Context_ID 0,1 0

[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_ITM 0 0 0 Automatic

[tm500.py@1736] TM500 command reply: C: LC_ITM 0x00 ok.

[tm500.py@1728] TM500 command to be sent: #$$LC_END

[tm500.py@1736] TM500 command reply: C: LC_END 0x00 ok.




This keyword starts TM500's logging.

[tm500.py@1728] TM500 command to be sent: #$$START_LOGGING

[tm500.py@1736] TM500 command reply: I: TMAE 0x0 Information - Connecting to Protocol logging port 25699

[tm500.py@1352] TM500 command line response of "START LOGGING":

I: TMAE 0x0 Information - Connecting to Protocol logging port 25699

C: START_LOGGING 0x00 OK. Current logging folder is 'C:\TM500_LOG\/170724_100335_session/170724_100343'

[tm500.py@1363] C:\TM500_LOG\170724_100335_session\170724_100343




Converts the given ``item`` to a Python ``list`` type.


${modify_tm500_script}



${modify_tm500_script}


${modify_tm500_script} = []




Adds ``values`` to the end of ``list``.


${modify_tm500_script}

forw mte RrcAptConfigCellSelection: ${attach_freqency}





This keyword does UE attach operation of TM500.


${attach_scripts}

${modify_tm500_script}



${tm500_attach_result}


[file_common.py@125] Write file "D:\TA\BTS797\modified_attach_MIMO.txt" succeeded

[tm500.py@1728] TM500 command to be sent: FORW MTE RRCAPTOVERRIDEBANDSUPPORT 5{42 [1 34000 41590 2000 34000 41590 2000] [],41 [1 24960 39650 1940 24960 39650 1940] [],43 [1 36000 43590 2000 36000 43590 2000] [],40 [1 23000 38650 1000 23000 38650 1000] [],39 [1 18800 38250 400 18800 38250 400] []}

[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE RRCAPTOVERRIDEBANDSUPPORT: RETURN CODE:0 SUCCEEDED

[tm500.py@1728] TM500 command to be sent: FORW MTE ACTIVATE -1

[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE ACTIVATE CNF: RETURN CODE:0

[tm500.py@1728] TM500 command to be sent: FORW MTE PHYSETRATTYPE 1

[tm500.py@1736] TM500 command reply: I: CMPI MTE 0 ACTIVATE IND: RETURN CODE:0


C: FORW 0x00 Ok MTE PHYSETRATTYPE: RETURN CODE:0 SUCCEEDED

[tm500.py@1728] TM500 command to be sent: FORW MTE PHYSETTDDCFG 2 7

[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE PHYSETTDDCFG: RETURN CODE:0 SUCCEEDED

[tm500.py@1728] TM500 command to be sent: SETP RRC_NUM_DL_ANTENNAS 4

[tm500.py@1736] TM500 command reply: C: SETP 0x00 Ok RRC_NUM_DL_ANTENNAS 0x00000004

[tm500.py@1728] TM500 command to be sent: FORW MTE PHYCONFIGSYSCAP 2 4 4

[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE PHYCONFIGSYSCAP: RETURN CODE:0 SUCCEEDED

[tm500.py@1728] TM500 command to be sent: FORW MTE USIMCONFIG 1([262030020000525 2] [] [] [] []) [] [] [A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5] [CDC202D5123E20F62B6D676AC72CB318 00000000000000000000000000000000 00000000000000000000000000000001 00000000000000000000000000000002 00000000000000000000000000000004 00000000000000000000000000000008 64 0 32 64 96 []] [] []

[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE USIMCONFIG: RETURN CODE:0 SUCCEEDED

[tm500.py@1728] TM500 command to be sent: FORW MTE RRCAPTCONFIGCELLSELECTION 26250

[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE RRCAPTCONFIGCELLSELECTION: RETURN CODE:0 SUCCEEDED

[tm500.py@1728] TM500 command to be sent: FORW MTE NASAPTCONFIGCAPABILITY [] [224] [224]

[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE NASAPTCONFIGCAPABILITY: RETURN CODE:0 SUCCEEDED

[tm500.py@1728] TM500 command to be sent: FORW MTE NASCONFIGEMMREGISTER 0(0 [0] [] [1] [] [] [] [] [])

[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE NASCONFIGEMMREGISTER: RETURN CODE:0 SUCCEEDED

[tm500.py@1728] TM500 command to be sent: FORW MTE NASAPTCONFIGPLMNSELECTION 26203

[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE NASAPTCONFIGPLMNSELECTION: RETURN CODE:0 SUCCEEDED

[tm500.py@1728] TM500 command to be sent: FORW MTE ACTIVATE -1

[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE ACTIVATE CNF: RETURN CODE:0

[tm500.py@1632] C: FORW 0x00 Ok MTE ACTIVATE CNF: RETURN CODE:0

[tm500.py@1673] TM500 command line received data:

TM500 command line does not meet "['L2 RANDOM ACCESS COMPLETE', 'ACCESS POINT NAME']"during 10.0
















Action when case finishs


Switch to the connection identified by 'conn'.


${BTS_PC_CONNECTION}


[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00
>
.




This keyword is used to kill the processes related to QTP application.

Start to kill QTP process.

Finshed to kill QTP process.




This keyword stops BTS system(UDP) log catching.

[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'




Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${case_execute_log_name}



${return}



Fails unless the given variable exists within the current scope.


${case_execute_log_name}


Variable ${case_execute_log_name} does not exist.



${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return[0]}'=='PASS'

Save Infomodel Log

${TEST_LOG_DIR}\\${case_execute_log_name}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Save Infomodel Log

${TEST_LOG_DIR}\\${case_execute_log_name}







Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return[0]}'=='PASS'

Stop Infomodel



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Stop Infomodel







Teardown Admin API. Keyword will release used resources.

Exit code: 1

STDOUT

CLI LOG:  CLI server is listening on localhost:39894


STDERR





Runs the given keyword with the given arguments and ignores possible error.


ute_admin.Teardown Admin

alias=uploadscf



Teardown Admin API. Keyword will release used resources.


alias=uploadscf







Runs the given keyword with the given arguments and ignores possible error.


Release_TM500_And_Colse_PA_Port




Displays the given messages in the log file as keyword arguments.


${return}

Run Keyword And Ignore Error

Variable Should Exist

${TM500_Use_Tag}





Displays the given messages in the log file as keyword arguments.


Run Keyword If

'${return[0]}'=='PASS'

Run Keyword If

'${TM500_Use_Tag}'=='used'

Set Attenuators Off

${ATT_ALL_INFO}





Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${TM500_Pppoe_Tag}



${return}



Fails unless the given variable exists within the current scope.


${TM500_Pppoe_Tag}


Variable ${TM500_Pppoe_Tag} does not exist.



${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')




Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Run Keyword If

'${TM500_Pppoe_Tag}'=='used'

Switch Host Connection

${TM500_PC_CONNECTION}





Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Run Keyword If

'${TM500_Pppoe_Tag}'=='used'

Tm500 Stop Pppoe Connection





tm500 teardown.

[tm500.py@591] Prev msg: I: CMPI RRC UE Id:0: Cell Search Error: No cell found

I: CMPI RRC UE Id:0: Cell Search Config Error: No more frequencies left to try

I: CMPI MTE 0 EMM REGISTER IND:UE Id:0:RETURN CODE:6 FAILED

Cause: NAS: Registration failure - NO SERVICE due to no cell


I: CMPI MTE 0 ACTIVATE IND: RETURN CODE:0


I: CMPI RRC UE Id:0: Cell Search Error: No cell found

I: CMPI RRC UE Id:0: Cell Search Config Error: No more frequencies left to try

[tm500.py@1728] TM500 command to be sent: #$$DISCONNECT

[tm500.py@1736] TM500 command reply: I: TMAE 0x1 Warning - Logging is being stopped automatically. Please wait for logging stopped message.

I: CMPI RRC UE Id:0: Cell Search Error: No cell found

I: CMPI RRC UE Id:0: Cell Search Config Error: No more frequencies left to try

[tm500.py@437] Release TM500 Resource:

sent -
>
"release"

received
<
- "Bye!"

Robot Framework remote server at 0.0.0.0:8277 stopping







Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${CELL${index}_ATT_INFO}



${ret1}

${ret2}



Fails unless the given variable exists within the current scope.


${CELL${index}_ATT_INFO}




${ret1} = PASS

${ret2} = None




Stops executing the enclosing for loop if the ``condition`` is true.


'${ret1}'=='FAIL'





This keyword set attenuation value for one eNB cell.


${CELL${index}_ATT_INFO}

120

120


$TA,C,08F0*

[attenuator_control.py@445] send-
>
'$TA,C,08F0*', Receive
<
-'$TA,C,08F0*'

[attenuator_control.py@450] send-
>
'$TA,H,08*', Receive
<
-'$TA,C,08F0*'

$TA,C,16F0*

[attenuator_control.py@445] send-
>
'$TA,C,16F0*', Receive
<
-'$TA,C,16F0*'

[attenuator_control.py@450] send-
>
'$TA,H,16*', Receive
<
-'$TA,C,16F0*'







Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${CELL${index}_ATT_INFO}



${ret1}

${ret2}



Fails unless the given variable exists within the current scope.


${CELL${index}_ATT_INFO}




${ret1} = PASS

${ret2} = None




Stops executing the enclosing for loop if the ``condition`` is true.


'${ret1}'=='FAIL'





This keyword set attenuation value for one eNB cell.


${CELL${index}_ATT_INFO}

120

120


$TA,C,08F0*

[attenuator_control.py@445] send-
>
'$TA,C,08F0*', Receive
<
-'$TA,C,08F0*'

[attenuator_control.py@450] send-
>
'$TA,H,08*', Receive
<
-'$TA,C,08F0*'

$TA,C,16F0*

[attenuator_control.py@445] send-
>
'$TA,C,16F0*', Receive
<
-'$TA,C,16F0*'

[attenuator_control.py@450] send-
>
'$TA,H,16*', Receive
<
-'$TA,C,16F0*'







Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${CELL${index}_ATT_INFO}



${ret1}

${ret2}



Fails unless the given variable exists within the current scope.


${CELL${index}_ATT_INFO}


Variable ${CELL3_ATT_INFO} does not exist.



${ret1} = FAIL

${ret2} = Variable ${CELL3_ATT_INFO} does not exist.




Stops executing the enclosing for loop if the ``condition`` is true.


'${ret1}'=='FAIL'


Exiting for loop altogether.










Displays the given messages in the log file as keyword arguments.


Set Test Variable

${TM500_Use_Tag}

unused





Makes a variable available everywhere within the scope of the current test.


${TM500_Pppoe_Tag}

unused


${TM500_Pppoe_Tag} = unused








Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${route_add_cpe_pc}



${return}



Fails unless the given variable exists within the current scope.


${route_add_cpe_pc}


Variable ${route_add_cpe_pc} does not exist.



${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')




Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Run Keyword If

'${route_add_cpe_pc}'=='true'

Execute Shell Command

route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}






${TEST_LOG_DIR}

${OUTPUT_DIR}

alarm_monitor.csv

${TEST_NAME[:50]}


Infomodel not connected.

[infomodel_control.py@82] set up infomodel with following info succeed .

details: address=192.168.255.1, port=12345, definitions_file_path=None

[infomodel_control.py@100] stop infomodel succeed .





${TEST_LOG_DIR}

${OUTPUT_DIR}

alarm_monitor.csv

${TEST_NAME[:50]}





Runs the given keyword with the given arguments and ignores possible error.


Should Contain

${TEST_NAME[:50]}

Fiber



${return1}



Fails if ``container`` does not contain ``item`` one or more times.


${TEST_NAME[:50]}

Fiber


'FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7' does not contain 'Fiber'



${return1} = ('FAIL', u"'FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7' does not contain 'Fiber'")




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return1[0]}'=='PASS'

Get_All_Fiber_Link



${all_fiber_link}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return1[0]}'=='PASS'

Get_All_Fiber_Link




${all_fiber_link} = ('PASS', None)




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return1[0]}'=='PASS'

Connect_Fiber_Link

${all_fiber_link[1]}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return1[0]}'=='PASS'

Connect_Fiber_Link

${all_fiber_link[1]}







Displays the given messages in the log file as keyword arguments.


Run Keyword And Ignore Error

Run Keyword If

'${return1[0]}'=='PASS'

Software Reboot Bts





Displays the given messages in the log file as keyword arguments.


Run Keyword And Ignore Error

Run Keyword If

'${return1[0]}'=='PASS'

Sleep

60





Displays the given messages in the log file as keyword arguments.


Run Keyword And Ignore Error

Run Keyword If

'${return1[0]}'=='PASS'

Wait Until Units Startup

600

192.168.255.1





[Caution] this keyword step:


used to get operation system platform version, can be used to judge if


with_connection=${false}



${platform_version}


${platform_version} = Windows-7-6.1.7601-SP1




Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'

One Key Capture Bts Logs

${SAVE_LOG_DIRECTORY}${/}capture_logs

${one_key_capture_logs_option}



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'

One Key Capture Bts Logs

${SAVE_LOG_DIRECTORY}${/}capture_logs

${one_key_capture_logs_option}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'

One Key Capture Bts Logs

${SAVE_LOG_DIRECTORY}${/}capture_logs

${one_key_capture_logs_option}









Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Login



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Login



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Login









Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Save Snapshot

3



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Save Snapshot

3



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Save Snapshot

3









get active BTS SW Build Version from enb targetBD file..


${version}


[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Mon Jul 24 10:02:37 CST 2017 from 10.69.80.114 on pts/0

root@fctj-4a:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054266E8
>

[ssh_common.py@258] Execute command: readlink /ffs/run

[ssh_common.py@314] Get Response: readlink /ffs/run

/ffs/fs1

root@fctj-4a:~
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054266E8
>

[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Mon Jul 24 10:03:58 CST 2017 from 192.168.255.126 on pts/0

root@fctj-4a:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0472DE90
>

[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml

[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml

TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml

root@fctj-4a:/ffs/fs1
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0472DE90
>

${version} = SBTS00_TDDFSM4_9999_170608_000754




Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"

semcli save snapshot



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"

semcli save snapshot



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"

semcli save snapshot









Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"

_soam_snapshot



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"

_soam_snapshot



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"

_soam_snapshot













owner-sue.nie@nokia.com

QC_720763


TM500 command line does not meet "['L2 RANDOM ACCESS COMPLETE', 'ACCESS POINT NAME']"during 10.0


TD-LTE I
&
V SISO1





Critical Tests

All Tests



owner-sue.nie@nokia.com

QC_720763



FZHQ T2 Throughput UDP 20M TM4 4X2 2 7




Loading tdd_config has failed. Please check if:

1. you executed pybot with --variable CONFIGURATION:$your_tl_config

i.e. pybot --variable CONFIGURATION:Wroclaw.test

2. check if there is no problem with your configuration

Error msg: Variable ${CONFIGURATION} does not exist.


Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.

Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.

Infomodel not connected.


