


this keyword create suite name directory path as D:\TA_logs//logs//


This keyword return the time stamp, default format is: 'yyyymmddhhmmss'


${timestamp}


${timestamp} = 20170905162657




Replaces ``pattern`` in the given ``string`` with ``replace_with``.


${SUITE_NAME[:50]}

\\s+$

${EMPTY}



${FILE_NAME}


${FILE_NAME} = FZFI Addtional SWDL SW upgrade both




Catenates the given items together and returns the resulted string.


SEPARATOR=${/}

${OUTPUT_DIR}

ev_logs

${FILE_NAME}_${timestamp}



${SUITE_LOG_DIRECTORY}


${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI Addtional SWDL SW upgrade both_20170905162657




Replaces ``search_for`` in the given ``string`` with ``replace_with``.


${SUITE_LOG_DIRECTORY}

${SPACE}

_



${SUITE_LOG_DIRECTORY}


${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657




Makes a variable available everywhere within the scope of the current suite.


${SUITE_LOG_DIRECTORY}


${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657




Creates the specified directory.


${SUITE_LOG_DIRECTORY}


Created directory '
<
a href="file://D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657"
>
D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657
<
/a
>
'.




Logs the given message with the given level.


save log dir:${SUITE_LOG_DIRECTORY}


save log dir:D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657




Makes a variable available everywhere within the scope of the current suite.


${snapshot_flag}

0


${snapshot_flag} = 0




This keyword return useable LOG directory.


Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${TEST LOG DIR}



${case_dir_exist}



Fails unless the given variable exists within the current scope.


${TEST LOG DIR}


Variable ${TEST LOG DIR} does not exist.



${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')




Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${SUITE LOG DIRECTORY}



${suite_dir_exist}



Fails unless the given variable exists within the current scope.


${SUITE LOG DIRECTORY}




${suite_dir_exist} = ('PASS', None)




Sets variable based on the given condition.


'PASS'=='${case_dir_exist[0]}'

${TEST LOG DIR}

'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'

${SUITE LOG DIRECTORY}

'FAIL'=='${suite_dir_exist[0]}'

${OUTPUT_DIR}



${log dir}



Sets variable based on the given condition.


'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'

${SUITE LOG DIRECTORY}

'FAIL'=='${suite_dir_exist[0]}'

${OUTPUT_DIR}




${log dir} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657




Makes a variable available everywhere within the scope of the current suite.


${SAVE LOG DIRECTORY}

${log dir}


${SAVE LOG DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657






Runs the given keyword with the given arguments and ignores possible error.


Make Sure FCT Ping Ok




This function is used for check whether ping host success, if yes, return 1, else return 0


${FCMD_IP}



${status}


${status} = True




Runs the given keyword with the given arguments, if ``condition`` is false.


${status}

Wait Until Units Startup

300

${FTM_IP}





Runs the given keyword with the given arguments, if ``condition`` is false.


${status}

Btscli Disable Bts Port Security





Runs the given keyword with the given arguments, if ``condition`` is false.


${status}

Wait Until Units Startup

60

${FCMD_IP}





Displays the given messages in the log file as keyword arguments.


Wait Until Keyword Succeeds

5min

5s

_make sure fctb connect ok









Runs the given keyword with the given arguments and ignores possible error.


get_enb_infomation



This keyword will print bts sw version, bbu type and RRU type.

[ftm_control.py@94] try: 1/1, http return code: 200

[ftm_control.py@210] login succeed !

[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'

[ftm_control.py@94] try: 1/1, http return code: 200

[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1072923220
&
token=137dda384fc90f9c6d1bb8eef9e29b8fb72e37d01e516e25bfd4e9342598283a
&
frame=sshservice'

[ftm_control.py@94] try: 1/3, http return code: 200

[ftm_control.py@266]
<
!doctype html public "-//w3c//dtd html 4.0 transitional//en"
>

<
html
>


<
head
>


<
meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"
>


<
meta http-equiv="expires" content="0"
>


<
meta http-equiv="cache-control" content="public,no-cache"
>


<
meta http-equiv="pragma" content="no-cache"
>


<
/head
>


<
body bgcolor="#E7E7E7"
>



<
bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"
>



<
h3
>
<
FONT face="Arial, Helvetica, sans-serif"
>

<
p
>
<
h3
>
SSH Service Enabled Successfully
<
/h3
>

<
/p
>
<
/body
>

<
/html
>

[ftm_control.py@94] try: 1/1, http return code: 200

[ftm_control.py@210] login succeed !

[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'

[ftm_control.py@94] try: 1/1, http return code: 200

[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1072923225
&
token=b894c89cf2ab21e1ade1bb5b873464a79c5b359cc7a8391b983527fa87aa8de4
&
frame=RndPortsService'

[ftm_control.py@94] try: 1/3, http return code: 200

[ftm_control.py@266]
<
!doctype html public "-//w3c//dtd html 4.0 transitional//en"
>

<
html
>


<
head
>


<
meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"
>


<
meta http-equiv="expires" content="0"
>


<
meta http-equiv="cache-control" content="public,no-cache"
>


<
meta http-equiv="pragma" content="no-cache"
>


<
/head
>


<
body bgcolor="#E7E7E7"
>



<
bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"
>



<
h3
>
<
FONT face="Arial, Helvetica, sans-serif"
>

<
p
>
<
h3
>
R
&
D Ports Service Enabled Successfully
<
/h3
>

<
/p
>
<
/body
>

<
/html
>

[enb_command_control.py@32] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Thu Jan  1 01:48:01 UTC 2004 from 10.69.80.114 on ssh

-bash-4.4#

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053A6E68
>

[ssh_common.py@258] Execute command: readlink /ffs/run

[ssh_common.py@314] Get Response: readlink /ffs/run

/ffs/fs1

-bash-4.4#

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053A6E68
>

[enb_command_control.py@32] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Thu Jan  1 02:13:49 UTC 2004 from 192.168.255.126 on pts/0

-bash-4.4#

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053A6F58
>

[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml

[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml

TargetBD_TL18_ENB_9999_170809_065605.xml

-bash-4.4#

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053A6F58
>

[enb_resource.py@1086]

****Current BTS version is 'TL18_ENB_9999_170809_065605' *****

[enb_resource.py@1113] activeBuildVersion=TL18_ENB_9999_170809_065605

[enb_command_control.py@32] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Thu Jan  1 02:14:00 UTC 2004 from 192.168.255.126 on pts/0

-bash-4.4#

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053E65A8
>

[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml

[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml

ls: /ram/SiteConf.xml: No such file or directory

-bash-4.4#

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053E65A8
>

[enb_resource.py@1086]

****Not find /ram/SiteConf.xml *****






Sets the resolution order to use when a name matches multiple keywords.


tdd_ev_robotws

OperatingSystem






used to get operation system platform version, can be used to judge if


with_connection=${false}



${platform_version}


${platform_version} = Windows-7-6.1.7601-SP1




Sets variable based on the given condition.


"Windows" in "${platform_version}"

${TELNET_PORT}

${SSH_PORT}



${conn_port}


${conn_port} = 23




Sets variable based on the given condition.


"Windows" in "${platform_version}"

TELNET

SSH



${conn_type}


${conn_type} = TELNET




Sets variable based on the given condition.


"Windows" in "${platform_version}"

30

5



${timeout}


${timeout} = 30




Used to connect to host, either TELNET or SSH


${BTS_PC_INFO.IP}

port=${conn_port}

username=${BTS_PC_INFO.USERNAME}

password=${BTS_PC_INFO.PASSWORD}

conn_type=${conn_type}

timeout=${timeout}



${BTS_PC_CONNECTION}


[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service



login:

[telnet_common.py@276] Execute command: tdlte-tester

[telnet_common.py@306] Get Response:  tdlte-tester


password:

[telnet_common.py@276] Execute command: btstest

[telnet_common.py@246]


*===============================================================

Microsoft Telnet Server.

*===============================================================

C:\Users\tdlte-tester
>

${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>




Makes a variable available everywhere within the scope of the current suite.


${BTS_PC_CONNECTION}


${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>




Runs the given keyword with the given arguments, if ``condition`` is true.


"Windows" in "${platform_version}"

Execute Shell Command

tlntadmn config timeoutactive\=no



Execute a command on the remote system.


tlntadmn config timeoutactive\=no


[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>

[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no

[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no

The settings were successfully updated.


C:\Users\tdlte-tester
>








Switch to the connection identified by 'conn'.


${BTS_PC_CONNECTION}


[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>
.







this keyword create case name directory path as D:\TA_logs//ev_logs//D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657//


This keyword return the time stamp, default format is: 'yyyymmddhhmmss'


${timestamp}


${timestamp} = 20170905162806




Catenates the given items together and returns the resulted string.


SEPARATOR=${/}

${SUITE_LOG_DIRECTORY}

${TEST_NAME[:50]}



${TEST_LOG_DIR}


${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both




Replaces ``search_for`` in the given ``string`` with ``replace_with``.


${TEST_LOG_DIR}

${SPACE}

_



${TEST_LOG_DIR}


${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both




Makes a variable available everywhere within the scope of the current suite.


${TEST_LOG_DIR}


${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both




Creates the specified directory.


${TEST_LOG_DIR}


Created directory '
<
a href="file://D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both"
>
D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both
<
/a
>
'.




Logs the given message with the given level.


save log dir:${TEST_LOG_DIR}


save log dir:D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both




Runs the given keyword with the given arguments, if ``condition`` is false.


${BTS PC CONNECTION.connected}

Initial Connection With BTS PC





This keyword return useable LOG directory.


Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${TEST LOG DIR}



${case_dir_exist}



Fails unless the given variable exists within the current scope.


${TEST LOG DIR}




${case_dir_exist} = ('PASS', None)




Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${SUITE LOG DIRECTORY}



${suite_dir_exist}



Fails unless the given variable exists within the current scope.


${SUITE LOG DIRECTORY}




${suite_dir_exist} = ('PASS', None)




Sets variable based on the given condition.


'PASS'=='${case_dir_exist[0]}'

${TEST LOG DIR}

'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'

${SUITE LOG DIRECTORY}

'FAIL'=='${suite_dir_exist[0]}'

${OUTPUT_DIR}



${log dir}


${log dir} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both




Makes a variable available everywhere within the scope of the current suite.


${SAVE LOG DIRECTORY}

${log dir}


${SAVE LOG DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both








Runs the given keyword with the given arguments and ignores possible error.


Reset_BTS_If_Not_Onair

${source_scf}

${parameter_list}




${source_scf}

${parameter_list}



Switch to the connection identified by 'conn'.


${BTS_PC_CONNECTION}


[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>
.




This keyword test the reachability of remote system.


192.168.255.1



${package_summary}

${ping_delay}


[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>

[telnet_common.py@276] Execute command: ping  192.168.255.1

[telnet_common.py@306] Get Response: ping  192.168.255.1


Pinging 192.168.255.1 with 32 bytes of data:

Reply from 192.168.255.1: bytes=32 time
<
1ms TTL=255

Reply from 192.168.255.1: bytes=32 time
<
1ms TTL=255

Reply from 192.168.255.1: bytes=32 time
<
1ms TTL=255

Reply from 192.168.255.1: bytes=32 time
<
1ms TTL=255


Ping statistics for 192.168.255.1:

Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),

Approximate round trip times in milli-seconds:

Minimum = 0ms, Maximum = 0ms, Average = 0ms


C:\Users\tdlte-tester
>

Total ping delay is: [1, 1, 1, 1]

Statistic ping delay is: [1, 1, 1, 1]

Valid ping delay is: [1, 1, 1, 1]

${package_summary} = ('4', '4', '0')

${ping_delay} = [1, 1, 1.0]




Runs the given keyword with the given arguments, if ``condition`` is true.


${package_summary[2]}
>
2

Restart Device With Powerbreaker

${bts_powerbreak}





Runs the given keyword with the given arguments, if ``condition`` is true.


${package_summary[2]}
>
2

Wait Until Units Startup

600

192.168.255.1





Runs the given keyword with the given arguments and ignores possible error.


Check_BTS_Onair_Status



${result}

${ret}




Setup InfoModel library and Connect to InfoModel.


port=${BTS_INFOMODEL_PORT}


[infomodel_control.py@157] set up infomodel with following info succeed .

details: address=192.168.255.129, port=12345, definitions_file_path=None

InfoModelConnectionException: Expected connection status: RegisteredToInfoModel not achieved. Status reached: Started





${result} = FAIL

${ret} = InfoModelConnectionException: Expected connection status: RegisteredToInfoModel not achieved. Status reached: Started




Runs the given keyword with the given arguments, if ``condition`` is true.


'FAIL'=='${result}'

Stop Infomodel



Disconnect from InfoModel and teardown InfoModel. Keyword will

[infomodel_control.py@188] stop infomodel logger failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.

[infomodel_control.py@192] disconnect from infomodel failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.

[infomodel_control.py@198] stop infomodel succeed .

AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.











used to kill sitemanager process.

[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>

[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete

[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete

Deleting instance \\WIN7-631\ROOT\CIMV2:Win32_Process.Handle="1888"


Instance deletion successful.



C:\Users\tdlte-tester
>

[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>

[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete

[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete

No Instance(s) Available.



C:\Users\tdlte-tester
>

[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>

[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete

[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete

No Instance(s) Available.



C:\Users\tdlte-tester
>




This keyword used for login BTS Site Manager.


Displays the given messages in the log file as keyword arguments.


Run keyword and ignore error

modify sem maxpermsize





Runs the given keyword with the given arguments, if ``condition`` is true.


'${CloseSEM}'=='Y'

Kill SiteManager Process





Returns a list containing given items.


IPAddress=${IPAddress}

UserName=${UserName}

Password=${Password}

LogPath=${SAVE LOG DIRECTORY}\\

CheckExist=${CheckExist}



${para_list}


${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\TA_logs\\ev_logs\\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\\FZFI_Addtional_SWDL_SW_upgrade_both\\', u'CheckExi...




Displays the given messages in the log file as keyword arguments.


run qtp script

${siteman_test_path}Login

${para_list}

${qtpkeepopen}





This keyword used for run qtp script, if you use in robot please select run_qtp_script


${siteman_test_path}Login

${SAVE LOG DIRECTORY}

${para_list}

${qtpkeepopen}

7200


<
QTP
>
Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login is existence.

Start to kill QTP process.

Finshed to kill QTP process.

<
QTP
>
Launched QTP successfully!


<
QTP
>
instanciation was SUCCESSFUL!

<
QTP
>
find java addin

<
QTP
>
start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login ...


<
QTP
>
open test successfully at 2rd time!


<
QTP
>
automated test case open was SUCCESSFUL!

<
QTP
>
Start to launch QTP App run on the background...


<
QTP
>
start to move current release lib path to active...


D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65

<
QTP
>
Start to define parameters...


<
QTP
>
Parameter as below:

IPAddress="Local"

UserName="Nemuadmin"

Password="nemuuser"

LogPath="D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both\"

CheckExist="1"

<
QTP
>
Save log to D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both\GUILog\qtp_log20170905163122\Report

<
QTP
>
Start to run script...


Login_BTSSiteManager  SetSEMDissconnect  OpenMenu MenuName File doesn't exist.

Test Fail. SaveImage  to D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20170905162657\FZFI_Addtional_SWDL_SW_upgrade_both\2017-09-05_16-50-10.png

<
QTP
>
run Failed.

Start to kill QTP process.

Finshed to kill QTP process.

AttributeError: QuickTest.Application.Quit








Action when case finishs


Switch to the connection identified by 'conn'.


${BTS_PC_CONNECTION}


[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>
.




This keyword is used to kill the processes related to QTP application.

Start to kill QTP process.

Finshed to kill QTP process.




This keyword stops BTS system(UDP) log catching.

[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'




Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${case_execute_log_name}



${return}



Fails unless the given variable exists within the current scope.


${case_execute_log_name}


Variable ${case_execute_log_name} does not exist.



${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return[0]}'=='PASS'

Save Infomodel Log

${TEST_LOG_DIR}\\${case_execute_log_name}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Save Infomodel Log

${TEST_LOG_DIR}\\${case_execute_log_name}







Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return[0]}'=='PASS'

Stop Infomodel



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Stop Infomodel







Runs the given keyword with the given arguments and ignores possible error.


Release_TM500_And_Colse_PA_Port




Displays the given messages in the log file as keyword arguments.


${return}

Run Keyword And Ignore Error

Variable Should Exist

${TM500_Use_Tag}





Displays the given messages in the log file as keyword arguments.


Run Keyword If

'${return[0]}'=='PASS'

Run Keyword If

'${TM500_Use_Tag}'=='used'

Set Attenuators Off

${ATT_ALL_INFO}








Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${CELL${index}_ATT_INFO}



${ret1}

${ret2}



Fails unless the given variable exists within the current scope.


${CELL${index}_ATT_INFO}




${ret1} = PASS

${ret2} = None




Stops executing the enclosing for loop if the ``condition`` is true.


'${ret1}'=='FAIL'





This keyword set attenuation value for one eNB cell.


${CELL${index}_ATT_INFO}

120

120


$TA,C,03F0*

[attenuator_control.py@445] send-
>
'$TA,C,03F0*', Receive
<
-'$TA,C,03F0*'

[attenuator_control.py@450] send-
>
'$TA,H,03*', Receive
<
-'$TA,C,03F0*'

$TA,C,04F0*

[attenuator_control.py@445] send-
>
'$TA,C,04F0*', Receive
<
-'$TA,C,04F0*'

[attenuator_control.py@450] send-
>
'$TA,H,04*', Receive
<
-'$TA,C,04F0*'







Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${CELL${index}_ATT_INFO}



${ret1}

${ret2}



Fails unless the given variable exists within the current scope.


${CELL${index}_ATT_INFO}




${ret1} = PASS

${ret2} = None




Stops executing the enclosing for loop if the ``condition`` is true.


'${ret1}'=='FAIL'





This keyword set attenuation value for one eNB cell.


${CELL${index}_ATT_INFO}

120

120


$TA,C,03F0*

[attenuator_control.py@445] send-
>
'$TA,C,03F0*', Receive
<
-'$TA,C,03F0*'

[attenuator_control.py@450] send-
>
'$TA,H,03*', Receive
<
-'$TA,C,03F0*'

$TA,C,04F0*

[attenuator_control.py@445] send-
>
'$TA,C,04F0*', Receive
<
-'$TA,C,04F0*'

[attenuator_control.py@450] send-
>
'$TA,H,04*', Receive
<
-'$TA,C,04F0*'







Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${CELL${index}_ATT_INFO}



${ret1}

${ret2}



Fails unless the given variable exists within the current scope.


${CELL${index}_ATT_INFO}


Variable ${CELL3_ATT_INFO} does not exist.



${ret1} = FAIL

${ret2} = Variable ${CELL3_ATT_INFO} does not exist.




Stops executing the enclosing for loop if the ``condition`` is true.


'${ret1}'=='FAIL'


Exiting for loop altogether.










tm500 teardown.

AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.




Displays the given messages in the log file as keyword arguments.


Set Test Variable

${TM500_Use_Tag}

unused









Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${route_add_cpe_pc}



${return}



Fails unless the given variable exists within the current scope.


${route_add_cpe_pc}


Variable ${route_add_cpe_pc} does not exist.



${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')




Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Run Keyword If

'${route_add_cpe_pc}'=='true'

Execute Shell Command

route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}






${TEST_LOG_DIR}

${OUTPUT_DIR}

alarm_monitor.csv

${TEST_NAME[:50]}


Infomodel not connected.

[infomodel_control.py@82] set up infomodel with following info succeed .

details: address=192.168.255.1, port=12345, definitions_file_path=None

[infomodel_control.py@100] stop infomodel succeed .





${TEST_LOG_DIR}

${OUTPUT_DIR}

alarm_monitor.csv

${TEST_NAME[:50]}





Runs the given keyword with the given arguments and ignores possible error.


Should Contain

${TEST_NAME[:50]}

Fiber



${return1}



Fails if ``container`` does not contain ``item`` one or more times.


${TEST_NAME[:50]}

Fiber


'FZFI_Addtional_SWDL_SW_upgrade_both' does not contain 'Fiber'



${return1} = ('FAIL', u"'FZFI_Addtional_SWDL_SW_upgrade_both' does not contain 'Fiber'")




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return1[0]}'=='PASS'

Get_All_Fiber_Link



${all_fiber_link}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return1[0]}'=='PASS'

Get_All_Fiber_Link




${all_fiber_link} = ('PASS', None)




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return1[0]}'=='PASS'

Connect_Fiber_Link

${all_fiber_link[1]}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return1[0]}'=='PASS'

Connect_Fiber_Link

${all_fiber_link[1]}







Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return1[0]}'=='PASS'

Software Reboot Bts



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return1[0]}'=='PASS'

Software Reboot Bts







Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return1[0]}'=='PASS'

Sleep

60



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return1[0]}'=='PASS'

Sleep

60







Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return1[0]}'=='PASS'

Wait Until Units Startup

600

192.168.255.1



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return1[0]}'=='PASS'

Wait Until Units Startup

600

192.168.255.1







[Caution] this keyword step:


used to get operation system platform version, can be used to judge if


with_connection=${false}



${platform_version}


${platform_version} = Windows-7-6.1.7601-SP1




Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'

One Key Capture Bts Logs

${SAVE_LOG_DIRECTORY}${/}capture_logs

${one_key_capture_logs_option}



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'

One Key Capture Bts Logs

${SAVE_LOG_DIRECTORY}${/}capture_logs

${one_key_capture_logs_option}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'

One Key Capture Bts Logs

${SAVE_LOG_DIRECTORY}${/}capture_logs

${one_key_capture_logs_option}









Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Login



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Login



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Login









Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Save Snapshot

3



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Save Snapshot

3



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Save Snapshot

3









get active BTS SW Build Version from enb targetBD file..


${version}


[enb_command_control.py@32] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Thu Jan  1 02:18:03 UTC 2004 from 10.69.80.114 on ssh

-bash-4.4#

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05394F30
>

[ssh_common.py@258] Execute command: readlink /ffs/run

[ssh_common.py@314] Get Response: readlink /ffs/run

/ffs/fs1

-bash-4.4#

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05394F30
>

[enb_command_control.py@32] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Thu Jan  1 02:37:07 UTC 2004 from 192.168.255.126 on pts/0

-bash-4.4#

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05394558
>

[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml

[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml

TargetBD_TL18_ENB_9999_170809_065605.xml

-bash-4.4#

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05394558
>

${version} = TL18_ENB_9999_170809_065605




Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"

semcli save snapshot



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"

semcli save snapshot



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"

semcli save snapshot









Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"

_soam_snapshot



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"

_soam_snapshot



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"

_soam_snapshot













owner-xingqiang.wu@nokia.com

QC_612238


AttributeError: QuickTest.Application.Quit




Runs the given keyword with the given arguments, if ``condition`` is true.


'${REMOVE_LOGS}'=='on'

Run Keyword If All Tests Passed

Remove Directory

${SUITE_LOG_DIRECTORY}

${True}





Closes all existing telnet connections to remote hosts.

[telnet_common.py@188]

[telnet_common.py@189] Disconnect from 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546A300
>




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If All Tests Passed

Zip File

${SUITE_LOG_DIRECTORY}

${SUITE_LOG_DIRECTORY}.zip



Runs the given keyword with the given arguments, if all tests passed.


Zip File

${SUITE_LOG_DIRECTORY}

${SUITE_LOG_DIRECTORY}.zip







Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If All Tests Passed

Remove Directory

${SUITE_LOG_DIRECTORY}

${True}



Runs the given keyword with the given arguments, if all tests passed.


Remove Directory

${SUITE_LOG_DIRECTORY}

${True}








TD-LTE I
&
V SISO1





Critical Tests

All Tests



owner-xingqiang.wu@nokia.com

QC_612238



FZFI Addtional SWDL SW upgrade both




Loading tdd_config has failed. Please check if:

1. you executed pybot with --variable CONFIGURATION:$your_tl_config

i.e. pybot --variable CONFIGURATION:Wroclaw.test

2. check if there is no problem with your configuration

Error msg: Variable ${CONFIGURATION} does not exist.


Infomodel not connected.


