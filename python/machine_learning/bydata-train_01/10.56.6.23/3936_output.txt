


this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20171222151402//logs//


This keyword return the time stamp, default format is: 'yyyymmddhhmmss'


${timestamp}


${timestamp} = 20171222151404




Replaces ``pattern`` in the given ``string`` with ``replace_with``.


${SUITE_NAME[:50]}

\\s+$

${EMPTY}



${FILE_NAME}


${FILE_NAME} = FZNE BS FV Carrier Frequency and supported EARFCN




Catenates the given items together and returns the resulted string.


SEPARATOR=${/}

${OUTPUT_DIR}

ev_logs

${FILE_NAME}_${timestamp}



${SUITE_LOG_DIRECTORY}


${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE BS FV Carrier Frequency and supported EARFCN_20171222151404




Replaces ``search_for`` in the given ``string`` with ``replace_with``.


${SUITE_LOG_DIRECTORY}

${SPACE}

_



${SUITE_LOG_DIRECTORY}


${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404




Makes a variable available everywhere within the scope of the current suite.


${SUITE_LOG_DIRECTORY}


${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404




Creates the specified directory.


${SUITE_LOG_DIRECTORY}


Created directory '
<
a href="file://D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404"
>
D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404
<
/a
>
'.




Logs the given message with the given level.


save log dir:${SUITE_LOG_DIRECTORY}


save log dir:D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404




Makes a variable available everywhere within the scope of the current suite.


${snapshot_flag}

0


${snapshot_flag} = 0




This keyword return useable LOG directory.


Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${TEST LOG DIR}



${case_dir_exist}



Fails unless the given variable exists within the current scope.


${TEST LOG DIR}


Variable ${TEST LOG DIR} does not exist.



${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')




Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${SUITE LOG DIRECTORY}



${suite_dir_exist}



Fails unless the given variable exists within the current scope.


${SUITE LOG DIRECTORY}




${suite_dir_exist} = ('PASS', None)




Sets variable based on the given condition.


'PASS'=='${case_dir_exist[0]}'

${TEST LOG DIR}

'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'

${SUITE LOG DIRECTORY}

'FAIL'=='${suite_dir_exist[0]}'

${OUTPUT_DIR}



${log dir}



Sets variable based on the given condition.


'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'

${SUITE LOG DIRECTORY}

'FAIL'=='${suite_dir_exist[0]}'

${OUTPUT_DIR}




${log dir} = D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404




Makes a variable available everywhere within the scope of the current suite.


${SAVE LOG DIRECTORY}

${log dir}


${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404






Runs the given keyword with the given arguments and ignores possible error.


Make Sure FCT Ping Ok




This function is used for check whether ping host success, if yes, return 1, else return 0


${FCMD_IP}



${status}


[ping_control.py@189]

Pinging 192.168.255.1 with 32 bytes of data:

Reply from 192.168.255.1: bytes=32 time
<
1ms TTL=255


Ping statistics for 192.168.255.1:

Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),

Approximate round trip times in milli-seconds:

Minimum = 0ms, Maximum = 0ms, Average = 0ms

${status} = True




Runs the given keyword with the given arguments, if ``condition`` is false.


${status}

Wait Until Units Startup

300

${FTM_IP}





Runs the given keyword with the given arguments, if ``condition`` is false.


${status}

Btscli Disable Bts Port Security





Runs the given keyword with the given arguments, if ``condition`` is false.


${status}

Wait Until Units Startup

60

${FCMD_IP}





Displays the given messages in the log file as keyword arguments.


Wait Until Keyword Succeeds

5min

5s

_make sure fctb connect ok









Runs the given keyword with the given arguments and ignores possible error.


get_enb_infomation



This keyword will print bts sw version, bbu type and RRU type.

[ping_control.py@189]

Pinging 192.168.255.1 with 32 bytes of data:

Reply from 192.168.255.1: bytes=32 time
<
1ms TTL=255


Ping statistics for 192.168.255.1:

Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),

Approximate round trip times in milli-seconds:

Minimum = 0ms, Maximum = 0ms, Average = 0ms

pass this keyword for PR exist

[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Fri Dec 22 15:02:00 CST 2017 from 10.69.80.114 on ssh

root@FCTF:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052E1508
>

[ssh_common.py@258] Execute command: readlink /ffs/run

[ssh_common.py@314] Get Response: readlink /ffs/run

/ffs/fs2

root@FCTF:~
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052E1508
>

[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Fri Dec 22 15:14:09 CST 2017 from 192.168.255.126 on pts/0

root@FCTF:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05300A08
>

[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml

[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml

TargetBD_SBTS00_TDDFSM3_9999_171213_000361.xml

root@FCTF:/ffs/fs2
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05300A08
>

[enb_resource.py@1238]

****Current BTS version is 'SBTS00_TDDFSM3_9999_171213_000361' *****

[enb_resource.py@1268] activeBuildVersion=SBTS00_TDDFSM3_9999_171213_000361

[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Fri Dec 22 15:14:20 CST 2017 from 192.168.255.126 on pts/0

root@FCTF:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053001C0
>

[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml

[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml

ls: /ram/SiteConf.xml: No such file or directory

root@FCTF:~
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053001C0
>

[enb_resource.py@1238]

****Not find /ram/SiteConf.xml *****

[ping_control.py@189]

Pinging 192.168.200.1 with 32 bytes of data:

Request timed out.


Ping statistics for 192.168.200.1:

Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),

[ping_control.py@189]

Pinging 192.168.255.20 with 32 bytes of data:

Reply from 192.168.255.126: Destination host unreachable.


Ping statistics for 192.168.255.20:

Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),






Sets the resolution order to use when a name matches multiple keywords.


tdd_ev_robotws

OperatingSystem






used to get operation system platform version, can be used to judge if


with_connection=${false}



${platform_version}


${platform_version} = Windows-7-6.1.7601-SP1




Sets variable based on the given condition.


"Windows" in "${platform_version}"

${TELNET_PORT}

${SSH_PORT}



${conn_port}


${conn_port} = 23




Sets variable based on the given condition.


"Windows" in "${platform_version}"

TELNET

SSH



${conn_type}


${conn_type} = TELNET




Sets variable based on the given condition.


"Windows" in "${platform_version}"

30

5



${timeout}


${timeout} = 30




Used to connect to host, either TELNET or SSH


${BTS_PC_INFO.IP}

port=${conn_port}

username=${BTS_PC_INFO.USERNAME}

password=${BTS_PC_INFO.PASSWORD}

conn_type=${conn_type}

timeout=${timeout}



${BTS_PC_CONNECTION}


[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service



login:

[telnet_common.py@276] Execute command: tdlte-tester

[telnet_common.py@306] Get Response:  tdlte-tester


password:

[telnet_common.py@276] Execute command: btstest

[telnet_common.py@246]


*===============================================================

Microsoft Telnet Server.

*===============================================================

C:\Users\tdlte-tester
>

${BTS_PC_CONNECTION} = 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053C5AA8
>




Makes a variable available everywhere within the scope of the current suite.


${BTS_PC_CONNECTION}


${BTS_PC_CONNECTION} = 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053C5AA8
>




Runs the given keyword with the given arguments, if ``condition`` is true.


"Windows" in "${platform_version}"

Execute Shell Command

tlntadmn config timeoutactive\=no



Execute a command on the remote system.


tlntadmn config timeoutactive\=no


[connection_mgr.py@208] Current connection: 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053C5AA8
>

[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no

[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no

The settings were successfully updated.


C:\Users\tdlte-tester
>








Switch to the connection identified by 'conn'.


${BTS_PC_CONNECTION}


[connection_mgr.py@147] Switch to connection: 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053C5AA8
>
.







Runs the given keyword with the given arguments, if ``condition`` is true.


'${REMOVE_LOGS}'=='on'

Run Keyword If All Tests Passed

Remove Directory

${SUITE_LOG_DIRECTORY}

${True}





Closes all existing telnet connections to remote hosts.

[telnet_common.py@188]

[telnet_common.py@189] Disconnect from 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053C5AA8
>




Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${zip_pass_log}



${para_exist}



Fails unless the given variable exists within the current scope.


${zip_pass_log}


Variable ${zip_pass_log} does not exist.



${para_exist} = ('FAIL', u'Variable ${zip_pass_log} does not exist.')




Sets variable based on the given condition.


'PASS' == '${para_exist[0]}'

${zip_pass_log}

${True}



${zip_log}


${zip_log} = True




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If All Tests Passed

Run Keyword If

${zip_log} == ${True}

Zip File

${SUITE_LOG_DIRECTORY}

${SUITE_LOG_DIRECTORY}.zip



${status}

${value}



Runs the given keyword with the given arguments, if all tests passed.


Run Keyword If

${zip_log} == ${True}

Zip File

${SUITE_LOG_DIRECTORY}

${SUITE_LOG_DIRECTORY}.zip




${status} = PASS

${value} = None




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If All Tests Passed

Run Keyword If

'${status}' == 'PASS' and ${zip_log} == ${True}

Remove Directory

${SUITE_LOG_DIRECTORY}

${True}



Runs the given keyword with the given arguments, if all tests passed.


Run Keyword If

'${status}' == 'PASS' and ${zip_log} == ${True}

Remove Directory

${SUITE_LOG_DIRECTORY}

${True}











this keyword create case name directory path as D:\TA\TA_logs\TestLog_20171222151402//ev_logs//D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404//


This keyword return the time stamp, default format is: 'yyyymmddhhmmss'


${timestamp}


${timestamp} = 20171222151506




Catenates the given items together and returns the resulted string.


SEPARATOR=${/}

${SUITE_LOG_DIRECTORY}

${TEST_NAME[:50]}



${TEST_LOG_DIR}


${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M




Replaces ``search_for`` in the given ``string`` with ``replace_with``.


${TEST_LOG_DIR}

${SPACE}

_



${TEST_LOG_DIR}


${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M




Makes a variable available everywhere within the scope of the current suite.


${TEST_LOG_DIR}


${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M




Creates the specified directory.


${TEST_LOG_DIR}


Created directory '
<
a href="file://D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M"
>
D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M
<
/a
>
'.




Logs the given message with the given level.


save log dir:${TEST_LOG_DIR}


save log dir:D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M




Runs the given keyword with the given arguments, if ``condition`` is false.


${BTS PC CONNECTION.connected}

Initial Connection With BTS PC





This keyword return useable LOG directory.


Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${TEST LOG DIR}



${case_dir_exist}



Fails unless the given variable exists within the current scope.


${TEST LOG DIR}




${case_dir_exist} = ('PASS', None)




Runs the given keyword with the given arguments and ignores possible error.


variable should exist

${SUITE LOG DIRECTORY}



${suite_dir_exist}



Fails unless the given variable exists within the current scope.


${SUITE LOG DIRECTORY}




${suite_dir_exist} = ('PASS', None)




Sets variable based on the given condition.


'PASS'=='${case_dir_exist[0]}'

${TEST LOG DIR}

'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'

${SUITE LOG DIRECTORY}

'FAIL'=='${suite_dir_exist[0]}'

${OUTPUT_DIR}



${log dir}


${log dir} = D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M




Makes a variable available everywhere within the scope of the current suite.


${SAVE LOG DIRECTORY}

${log dir}


${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M








Setup Admin API.


bts_host=${ADMIN.IP}

bts_port=${ADMIN.PORT}

use_ssl=False


D:\TA\trunk_soam\ute_common_admin\resource\node\windows\bin\node.exe --expose-gc D:\TA\trunk_soam\ute_common_admin\resource\src\main.js --bts-host=192.168.255.1 --bts-port=3600 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=35422 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpw7ljad --insecure

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Exit code: 1

STDOUT


STDERR


AdminApiTerminatedException: ADMIN CLI TERMINATED

EXIT CODE: 1

STDOUT:


STDERR:

CLI ERROR:  { Error: socket hang up

at createHangUpError (_http_client.js:252:15)

at Socket.socketOnEnd (_http_client.js:344:23)

at emitNone (events.js:91:20)

at Socket.emit (events.js:185:7)

at endReadableNT (_stream_readable.js:974:12)

at _combinedTickCallback (internal/process/next_tick.js:74:11)

at process._tickCallback (internal/process/next_tick.js:98:9) code: 'ECONNRESET' }







Action when case finishs


Switch to the connection identified by 'conn'.


${BTS_PC_CONNECTION}


[connection_mgr.py@147] Switch to connection: 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds
<
tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053C5AA8
>
.




This keyword is used to kill the processes related to QTP application.

Start to kill QTP process.

Finshed to kill QTP process.




This keyword stops BTS system(UDP) log catching.

[btslog_control.py@118] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'




Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${case_execute_log_name}



${return}



Fails unless the given variable exists within the current scope.


${case_execute_log_name}


Variable ${case_execute_log_name} does not exist.



${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return[0]}'=='PASS'

Save Infomodel Log

${TEST_LOG_DIR}\\${case_execute_log_name}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Save Infomodel Log

${TEST_LOG_DIR}\\${case_execute_log_name}







Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return[0]}'=='PASS'

Stop Infomodel



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Stop Infomodel







Teardown Admin API. Keyword will release used resources.




Runs the given keyword with the given arguments and ignores possible error.


ute_admin.Teardown Admin

alias=uploadscf



Teardown Admin API. Keyword will release used resources.


alias=uploadscf







Runs the given keyword with the given arguments and ignores possible error.


Release_TM500_And_Colse_PA_Port




Displays the given messages in the log file as keyword arguments.


${return}

Run Keyword And Ignore Error

Variable Should Exist

${TM500_Use_Tag}





Displays the given messages in the log file as keyword arguments.


Run Keyword If

'${return[0]}'=='PASS'

Run Keyword If

'${TM500_Use_Tag}'=='used'

Set Attenuators Off

${ATT_ALL_INFO}





Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${TM500_Pppoe_Tag}



${return}



Fails unless the given variable exists within the current scope.


${TM500_Pppoe_Tag}


Variable ${TM500_Pppoe_Tag} does not exist.



${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')




Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Run Keyword If

'${TM500_Pppoe_Tag}'=='used'

Switch Host Connection

${TM500_PC_CONNECTION}





Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Run Keyword If

'${TM500_Pppoe_Tag}'=='used'

Tm500 Stop Pppoe Connection





tm500 teardown.

AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.







Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${CELL${index}_ATT_INFO}



${ret1}

${ret2}



Fails unless the given variable exists within the current scope.


${CELL${index}_ATT_INFO}




${ret1} = PASS

${ret2} = None




Stops executing the enclosing for loop if the ``condition`` is true.


'${ret1}'=='FAIL'





This keyword set attenuation value for one eNB cell.


${CELL${index}_ATT_INFO}

120

120


$TA,Z*


$TA,C,03F0*

[attenuator_control.py@487] send-
>
'$TA,C,03F0*', Receive
<
-'$TA,C,03F0*'

[attenuator_control.py@492] send-
>
'$TA,H,03*', Receive
<
-'$TA,C,03F0*'

$TA,C,07F0*

[attenuator_control.py@487] send-
>
'$TA,C,07F0*', Receive
<
-'$TA,C,07F0*'

[attenuator_control.py@492] send-
>
'$TA,H,07*', Receive
<
-'$TA,C,07F0*'







Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${CELL${index}_ATT_INFO}



${ret1}

${ret2}



Fails unless the given variable exists within the current scope.


${CELL${index}_ATT_INFO}




${ret1} = PASS

${ret2} = None




Stops executing the enclosing for loop if the ``condition`` is true.


'${ret1}'=='FAIL'





This keyword set attenuation value for one eNB cell.


${CELL${index}_ATT_INFO}

120

120


$TA,Z*


$TA,C,02F0*

[attenuator_control.py@487] send-
>
'$TA,C,02F0*', Receive
<
-'$TA,C,02F0*'

[attenuator_control.py@492] send-
>
'$TA,H,02*', Receive
<
-'$TA,C,02F0*'

$TA,C,06F0*

[attenuator_control.py@487] send-
>
'$TA,C,06F0*', Receive
<
-'$TA,C,06F0*'

[attenuator_control.py@492] send-
>
'$TA,H,06*', Receive
<
-'$TA,C,06F0*'







Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${CELL${index}_ATT_INFO}



${ret1}

${ret2}



Fails unless the given variable exists within the current scope.


${CELL${index}_ATT_INFO}




${ret1} = PASS

${ret2} = None




Stops executing the enclosing for loop if the ``condition`` is true.


'${ret1}'=='FAIL'





This keyword set attenuation value for one eNB cell.


${CELL${index}_ATT_INFO}

120

120


$TA,Z*


$TA,C,02F0*

[attenuator_control.py@487] send-
>
'$TA,C,02F0*', Receive
<
-'$TA,C,02F0*'

[attenuator_control.py@492] send-
>
'$TA,H,02*', Receive
<
-'$TA,C,02F0*'

$TA,C,06F0*

[attenuator_control.py@487] send-
>
'$TA,C,06F0*', Receive
<
-'$TA,C,06F0*'

[attenuator_control.py@492] send-
>
'$TA,H,06*', Receive
<
-'$TA,C,06F0*'







Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${CELL${index}_ATT_INFO}



${ret1}

${ret2}



Fails unless the given variable exists within the current scope.


${CELL${index}_ATT_INFO}


Variable ${CELL4_ATT_INFO} does not exist.



${ret1} = FAIL

${ret2} = Variable ${CELL4_ATT_INFO} does not exist.




Stops executing the enclosing for loop if the ``condition`` is true.


'${ret1}'=='FAIL'


Exiting for loop altogether.










Displays the given messages in the log file as keyword arguments.


Set Test Variable

${TM500_Use_Tag}

unused





Makes a variable available everywhere within the scope of the current test.


${TM500_Pppoe_Tag}

unused


${TM500_Pppoe_Tag} = unused








Runs the given keyword with the given arguments and ignores possible error.


Variable Should Exist

${route_add_cpe_pc}



${return}



Fails unless the given variable exists within the current scope.


${route_add_cpe_pc}


Variable ${route_add_cpe_pc} does not exist.



${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')




Runs the given keyword with the given arguments, if ``condition`` is true.


'${return[0]}'=='PASS'

Run Keyword If

'${route_add_cpe_pc}'=='true'

Execute Shell Command

route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}






${TEST_LOG_DIR}

${OUTPUT_DIR}

alarm_monitor.csv

${TEST_NAME[:50]}


Exit code: 1

STDOUT


STDERR

Started InfoModel server PYRO:default_infomodel_server@localhost:39282


[infomodel_control.py@84] set up infomodel with following info succeed .

details: address=192.168.255.1, port=12345, definitions_file_path=None

[infomodel_control.py@102] stop infomodel succeed .





${TEST_LOG_DIR}

${OUTPUT_DIR}

alarm_monitor.csv

${TEST_NAME[:50]}





Runs the given keyword with the given arguments and ignores possible error.


Should Contain

${TEST_NAME[:50]}

Fiber



${return1}



Fails if ``container`` does not contain ``item`` one or more times.


${TEST_NAME[:50]}

Fiber


'FZNE_EARFCN_middle_20M' does not contain 'Fiber'



${return1} = ('FAIL', u"'FZNE_EARFCN_middle_20M' does not contain 'Fiber'")




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return1[0]}'=='PASS'

Get_All_Fiber_Link



${all_fiber_link}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return1[0]}'=='PASS'

Get_All_Fiber_Link




${all_fiber_link} = ('PASS', None)




Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${return1[0]}'=='PASS'

Connect_Fiber_Link

${all_fiber_link[1]}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${return1[0]}'=='PASS'

Connect_Fiber_Link

${all_fiber_link[1]}







Displays the given messages in the log file as keyword arguments.


Run Keyword And Ignore Error

Run Keyword If

'${return1[0]}'=='PASS'

Software Reboot Bts





Displays the given messages in the log file as keyword arguments.


Run Keyword And Ignore Error

Run Keyword If

'${return1[0]}'=='PASS'

Sleep

60





Displays the given messages in the log file as keyword arguments.


Run Keyword And Ignore Error

Run Keyword If

'${return1[0]}'=='PASS'

Wait Until Units Startup

600

192.168.255.1





[Caution] this keyword step:


used to get operation system platform version, can be used to judge if


with_connection=${false}



${platform_version}


${platform_version} = Windows-7-6.1.7601-SP1




Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'

One Key Capture Bts Logs

${SAVE_LOG_DIRECTORY}${/}capture_logs

${one_key_capture_logs_option}



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'

One Key Capture Bts Logs

${SAVE_LOG_DIRECTORY}${/}capture_logs

${one_key_capture_logs_option}



Runs the given keyword with the given arguments, if ``condition`` is true.


'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'

One Key Capture Bts Logs

${SAVE_LOG_DIRECTORY}${/}capture_logs

${one_key_capture_logs_option}









Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Login



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Login



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Login



This keyword used for login BTS Site Manager.


Displays the given messages in the log file as keyword arguments.


Run keyword and ignore error

modify sem maxpermsize





Runs the given keyword with the given arguments, if ``condition`` is true.


'${CloseSEM}'=='Y'

Kill SiteManager Process





Returns a list containing given
items.


IPAddress=${IPAddress}

UserName=${UserName}

Password=${Password}

LogPath=${SAVE LOG DIRECTORY}\\

CheckExist=${CheckExist}



${para_list}


${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\TA\\TA_logs\\TestLog_20171222151402\\ev_logs\\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\\FZNE_EAR...




Displays the given messages in the log file as keyword arguments.


run qtp script

${siteman_test_path}Login

${para_list}

${qtpkeepopen}





This keyword used for run qtp script, if you use in robot please select run_qtp_script


${siteman_test_path}Login

${SAVE LOG DIRECTORY}

${para_list}

${qtpkeepopen}

7200


<
QTP
>
Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login is existence.

Start to kill QTP process.

Finshed to kill QTP process.

<
QTP
>
Launched QTP successfully!


<
QTP
>
instanciation was SUCCESSFUL!

<
QTP
>
find java addin

<
QTP
>
start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login ...


<
QTP
>
open test successfully at 2rd time!


<
QTP
>
automated test case open was SUCCESSFUL!

<
QTP
>
Start to launch QTP App run on the background...


<
QTP
>
start to move current release lib path to active...


D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65

<
QTP
>
Start to define parameters...


<
QTP
>
Parameter as below:

IPAddress="Local"

UserName="Nemuadmin"

Password="nemuuser"

LogPath="D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M\"

CheckExist="1"

<
QTP
>
Save log to D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M\GUILog\qtp_log20171222151603\Report

<
QTP
>
Start to run script...


Login_BTSSiteManager  SetSEMDissconnect  OpenMenu BTS Site Manager doesn't exist. Please make sure it's open.

Test Fail. SaveImage  to D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M\2017-12-22_15-34-47.png

<
QTP
>
run Failed.

Start to kill QTP process.

Finshed to kill QTP process.

AttributeError: QuickTest.Application.Quit












Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Save Snapshot

3



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Save Snapshot

3



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"

GUI SM Save Snapshot

3



this keyword is use to save snapshot in Site Manager


3



Returns a list containing given items.


DetailLevel=${DetailLevel}

LogPath=${SAVE LOG DIRECTORY}\\

PathFile=${PathFile}

SaveParitialExist=${SaveParitialExist}



${para_list}


${para_list} = [u'DetailLevel=3', u'LogPath=D:\\TA\\TA_logs\\TestLog_20171222151402\\ev_logs\\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\\FZNE_EARFCN_middle_20M\\', u'PathFile=N', u'SaveParitia...




Displays the given messages in the log file as keyword arguments.


run qtp script

${siteman_test_path}SaveSnapshot

${para_list}

${qtpkeepopen}





This keyword used for run qtp script, if you use in robot please select run_qtp_script


${siteman_test_path}SaveSnapshot

${SAVE LOG DIRECTORY}

${para_list}

${qtpkeepopen}

7200


<
QTP
>
Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\SaveSnapshot is existence.

Start to kill QTP process.

Finshed to kill QTP process.

<
QTP
>
Launched QTP successfully!


<
QTP
>
instanciation was SUCCESSFUL!

<
QTP
>
find java addin

<
QTP
>
start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\SaveSnapshot ...


<
QTP
>
open test successfully at 2rd time!


<
QTP
>
automated test case open was SUCCESSFUL!

<
QTP
>
Start to launch QTP App run on the background...


<
QTP
>
start to move current release lib path to active...


D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65

<
QTP
>
Start to define parameters...


<
QTP
>
Parameter as below:

DetailLevel="3"

LogPath="D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M\"

PathFile="N"

SaveParitialExist="N"

<
QTP
>
Save log to D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M\GUILog\qtp_log20171222153448\Report

<
QTP
>
Start to run script...


Cannot find Save Snapshot button, please check whether the site manger is normal state

Test Fail. SaveImage  to D:\TA\TA_logs\TestLog_20171222151402\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222151404\FZNE_EARFCN_middle_20M\2017-12-22_15-34-56.png

<
QTP
>
run Failed.

Start to kill QTP process.

Finshed to kill QTP process.

AttributeError: QuickTest.Application.Quit












get active BTS SW Build Version from enb targetBD file..


${version}


[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Fri Dec 22 15:31:59 CST 2017 from 10.69.80.114 on ssh

root@FCTF:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054B1AD0
>

[ssh_common.py@258] Execute command: readlink /ffs/run

[ssh_common.py@314] Get Response: readlink /ffs/run

/ffs/fs2

root@FCTF:~
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054B1AD0
>

[enb_command_control.py@33] argument host is: 192.168.255.1

[ssh_common.py@203] Last login: Fri Dec 22 15:35:01 CST 2017 from 192.168.255.126 on pts/0

root@FCTF:~
>

[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0549B558
>

[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml

[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml

TargetBD_SBTS00_TDDFSM3_9999_171213_000361.xml

root@FCTF:/ffs/fs2
>

[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds
<
tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0549B558
>

${version} = SBTS00_TDDFSM3_9999_171213_000361




Logs the given message with the given level.


+++++Active BTS version is '${version}' +++++


+++++Active BTS version is 'SBTS00_TDDFSM3_9999_171213_000361' +++++




Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"

semcli save snapshot



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"

semcli save snapshot



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"

semcli save snapshot









Runs the given keyword with the given arguments, if the test failed.


Run Keyword And Ignore Error

Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"

_soam_snapshot



Runs the given keyword with the given arguments and ignores possible error.


Run Keyword If

'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"

_soam_snapshot



Runs the given keyword with the given arguments, if ``condition`` is true.


'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"

_soam_snapshot




Setup Admin API.


alias=snapshot


D:\TA\trunk_soam\ute_common_admin\resource\node\windows\bin\node.exe --expose-gc D:\TA\trunk_soam\ute_common_admin\resource\src\main.js --bts-host=192.168.255.1 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_snapshot.log --interval=5000 --cli-port=36252 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpmwmpnt --insecure

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it

Recived response: Connection closed.

Exit code: 1

STDOUT


STDERR


AdminApiTerminatedException: ADMIN CLI TERMINATED

EXIT CODE: 1

STDOUT:


STDERR:

CLI ERROR:  Fetching bundle error: no support.





Runs the given keyword with the given arguments and ignores possible error.


Collect Snapshot

${SAVE LOG DIRECTORY}${/}snapshot.zip

alias=snapshot



Collect Techrep snapshot.


${SAVE LOG DIRECTORY}${/}snapshot.zip

alias=snapshot


AliasError: Provided alias (snapshot) doesn't exist. Please setup library before any other operation.






Teardown Admin API. Keyword will release used resources.


alias=snapshot

















owner-xiongwen.shi@nokia.com

QC_443257

QC_ID_443257


Setup failed:

AdminApiTerminatedException: ADMIN CLI TERMINATED

EXIT CODE: 1

STDOUT:


STDERR:

CLI ERROR:  { Error: socket hang up

at createHangUpError (_http_client.js:252:15)

at Socket.socketOnEnd (_http_client.js:344:23)

at emitNone (events.js:91:20)

at Socket.emit (events.js:185:7)

at endReadableNT (_stream_readable.js:974:12)

at _combinedTickCallback (internal/process/next_tick.js:74:11)

at process._tickCallback (internal/process/next_tick.js:98:9) code: 'ECONNRESET' }



TD-LTE I
&
V SISO1





Critical Tests

All Tests



owner-xiongwen.shi@nokia.com

QC_443257

QC_ID_443257



FZNE BS FV Carrier Frequency and supported EARFCN middle 20M




Loading tdd_config has failed. Please check if:

1. you executed pybot with --variable CONFIGURATION:$your_tl_config

i.e. pybot --variable CONFIGURATION:Wroclaw.test

2. check if there is no problem with your configuration

Error msg: Variable ${CONFIGURATION} does not exist.



