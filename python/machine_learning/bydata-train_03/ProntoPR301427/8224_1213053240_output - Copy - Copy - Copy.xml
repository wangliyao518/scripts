<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171213 05:32:41.202" generator="Rebot 3.0.2 (Python 2.7.5 on win32)">
<suite source="C:\TestCase\Trunk_CRT\CIT\ASMI+Common\BSM\LTE145-b BTS Startup_3cell_BTS blockunblock\LTE145-b BTS Startup_3 cell_BTS blockunblock.html" id="s1" name="TA">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\wcrt_log\Test_Log_20171213031452//logs//</doc>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171213 04:58:16.465" level="INFO">${timestamp} = 20171213045816</msg>
<status status="PASS" endtime="20171213 04:58:16.465" starttime="20171213 04:58:16.426"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20171213 04:58:16.466" level="INFO">${FILE_NAME} = LTE145-b BTS Startup 3 cell BTS blockunblock</msg>
<status status="PASS" endtime="20171213 04:58:16.466" starttime="20171213 04:58:16.465"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171213 04:58:16.467" level="INFO">${SUITE_LOG_DIRECTORY} = D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b BTS Startup 3 cell BTS blockunblock_20171213045816</msg>
<status status="PASS" endtime="20171213 04:58:16.467" starttime="20171213 04:58:16.466"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171213 04:58:16.467" level="INFO">${SUITE_LOG_DIRECTORY} = D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816</msg>
<status status="PASS" endtime="20171213 04:58:16.467" starttime="20171213 04:58:16.467"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171213 04:58:16.468" level="INFO">${SUITE_LOG_DIRECTORY} = D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816</msg>
<status status="PASS" endtime="20171213 04:58:16.468" starttime="20171213 04:58:16.468"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171213 04:58:16.469" html="yes" level="INFO">Created directory '&lt;a href="file://D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816"&gt;D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171213 04:58:16.469" starttime="20171213 04:58:16.468"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171213 04:58:16.469" level="INFO">save log dir:D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816</msg>
<status status="PASS" endtime="20171213 04:58:16.469" starttime="20171213 04:58:16.469"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20171213 04:58:16.473" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20171213 04:58:16.473" starttime="20171213 04:58:16.470"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20171213 04:58:16.490" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20171213 04:58:16.490" starttime="20171213 04:58:16.484"></status>
</kw>
<msg timestamp="20171213 04:58:16.490" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20171213 04:58:16.490" starttime="20171213 04:58:16.484"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171213 04:58:16.490" starttime="20171213 04:58:16.490"></status>
</kw>
<msg timestamp="20171213 04:58:16.490" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171213 04:58:16.491" starttime="20171213 04:58:16.490"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20171213 04:58:16.493" starttime="20171213 04:58:16.492"></status>
</kw>
<msg timestamp="20171213 04:58:16.493" level="INFO">${log dir} = D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816</msg>
<status status="PASS" endtime="20171213 04:58:16.493" starttime="20171213 04:58:16.491"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171213 04:58:16.496" level="INFO">${SAVE LOG DIRECTORY} = D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816</msg>
<status status="PASS" endtime="20171213 04:58:16.496" starttime="20171213 04:58:16.493"></status>
</kw>
<status status="PASS" endtime="20171213 04:58:16.496" starttime="20171213 04:58:16.483"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="RobotWS">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20171213 04:58:19.565" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171213 04:58:19.565" starttime="20171213 04:58:16.498"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20171213 04:58:19.566" starttime="20171213 04:58:19.565"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20171213 04:58:19.566" starttime="20171213 04:58:19.566"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20171213 04:58:19.566" starttime="20171213 04:58:19.566"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20171213 04:58:19.567" starttime="20171213 04:58:19.567"></status>
</kw>
<status status="PASS" endtime="20171213 04:58:19.567" starttime="20171213 04:58:16.497"></status>
</kw>
<status status="PASS" endtime="20171213 04:58:19.567" starttime="20171213 04:58:16.497"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="RobotWS">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20171213 04:58:54.812" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171213 04:58:54.861" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171213 04:59:05.906" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171213 04:59:05.934" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171213 04:59:06.415" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171213 04:59:06.463" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171213 04:58:22.640" level="INFO">[ftm_control.py@287] pass this kw for PR exist</msg>
<msg timestamp="20171213 04:58:22.648" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171213 04:58:33.029" level="INFO">[ssh_common.py@198] root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171213 04:58:33.038" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042F2D50&gt;</msg>
<msg timestamp="20171213 04:58:33.095" level="INFO">[ssh_common.py@253] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171213 04:58:33.150" level="INFO">[ssh_common.py@309] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171213 04:58:33.218" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042F2D50&gt;</msg>
<msg timestamp="20171213 04:58:33.222" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171213 04:58:43.589" level="INFO">[ssh_common.py@198] Last login: Tue Dec 12 19:53:28 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171213 04:58:43.597" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042F5328&gt;</msg>
<msg timestamp="20171213 04:58:43.654" level="INFO">[ssh_common.py@253] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171213 04:58:43.708" level="INFO">[ssh_common.py@309] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_FSM4_9999_171212_019801.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171213 04:58:43.775" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042F5328&gt;</msg>
<msg timestamp="20171213 04:58:43.779" level="INFO">[enb_resource.py@1219] 
 ****Current BTS version is 'TL18_FSM4_9999_171212_019801' *****</msg>
<msg timestamp="20171213 04:58:43.783" level="INFO">[enb_resource.py@1249] activeBuildVersion=TL18_FSM4_9999_171212_019801</msg>
<msg timestamp="20171213 04:58:43.787" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171213 04:58:54.154" level="INFO">[ssh_common.py@198] Last login: Tue Dec 12 19:53:39 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171213 04:58:54.161" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042F2B20&gt;</msg>
<msg timestamp="20171213 04:58:54.218" level="INFO">[ssh_common.py@253] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20171213 04:58:54.272" level="INFO">[ssh_common.py@309] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171213 04:58:54.338" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042F2B20&gt;</msg>
<msg timestamp="20171213 04:58:54.816" level="INFO">[sftp_control.py@30] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171213 04:58:54.821" level="INFO">[sftp_control.py@166] /ram/SiteConf.xml</msg>
<msg timestamp="20171213 04:58:54.861" level="INFO">[sftp_control.py@72] sftp download from '/ram/SiteConf.xml' to 'D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\SiteConf.xml' is ok. local file size is 446k</msg>
<msg timestamp="20171213 04:58:54.872" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171213 04:59:05.239" level="INFO">[ssh_common.py@198] Last login: Tue Dec 12 19:53:59 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171213 04:59:05.247" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042F2828&gt;</msg>
<msg timestamp="20171213 04:59:05.305" level="INFO">[ssh_common.py@253] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171213 04:59:05.360" level="INFO">[ssh_common.py@309] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171213 04:59:05.428" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042F2828&gt;</msg>
<msg timestamp="20171213 04:59:05.432" level="INFO">[enb_resource.py@481] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20171213 04:59:05.911" level="INFO">[sftp_control.py@30] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171213 04:59:05.915" level="INFO">[sftp_control.py@166] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20171213 04:59:05.934" level="INFO">[sftp_control.py@72] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\FileDirectory_20171213045854.xml' is ok. local file size is 45k</msg>
<msg timestamp="20171213 04:59:06.419" level="INFO">[sftp_control.py@30] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171213 04:59:06.424" level="INFO">[sftp_control.py@166] /ffs/fs2/config/SCFC_40.xml</msg>
<msg timestamp="20171213 04:59:06.463" level="INFO">[sftp_control.py@72] sftp download from '/ffs/fs2/config/SCFC_40.xml' to 'D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\SCFC_40.xml' is ok. local file size is 201k</msg>
<msg timestamp="20171213 04:59:06.497" level="INFO">[enb_resource.py@1219] 
 ****Current bbu type is 'ASIA' *****</msg>
<msg timestamp="20171213 04:59:06.500" level="INFO">[enb_resource.py@1344] HW_BBU_TYPE=ASIA</msg>
<msg timestamp="20171213 04:59:06.504" level="INFO">[enb_resource.py@1219] 
 ****Current rru type is 'UZHB:UZHA:UZHA' *****</msg>
<msg timestamp="20171213 04:59:06.507" level="INFO">[enb_resource.py@1347] HW_RRU_TYPE=UZHB:UZHA:UZHA</msg>
<msg timestamp="20171213 04:59:06.510" level="INFO">[enb_resource.py@1219] 
 ****Current HW type is 'null' *****</msg>
<msg timestamp="20171213 04:59:06.514" level="INFO">[enb_resource.py@1350] BTS_HW_TYPE=null</msg>
<status status="PASS" endtime="20171213 05:00:03.424" starttime="20171213 04:58:19.567"></status>
</kw>
<status status="PASS" endtime="20171213 05:00:03.424" starttime="20171213 04:58:19.567"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>RobotWS</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20171213 05:00:03.425" starttime="20171213 05:00:03.425"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="RobotWS">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171213 05:00:03.426" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171213 05:00:03.426" starttime="20171213 05:00:03.425"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20171213 05:00:03.427" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20171213 05:00:03.427" starttime="20171213 05:00:03.426"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20171213 05:00:03.427" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20171213 05:00:03.427" starttime="20171213 05:00:03.427"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20171213 05:00:03.428" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20171213 05:00:03.428" starttime="20171213 05:00:03.427"></status>
</kw>
<kw name="Connect To Host" library="RobotWS">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20171213 05:00:03.489" level="INFO">[telnet_common.py@298] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20171213 05:00:03.493" level="INFO">[telnet_common.py@268] Execute command: tdlte-tester</msg>
<msg timestamp="20171213 05:00:03.553" level="INFO">[telnet_common.py@298] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20171213 05:00:03.556" level="INFO">[telnet_common.py@268] Execute command: btstest</msg>
<msg timestamp="20171213 05:00:04.925" level="INFO">[telnet_common.py@238]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\Administrator&gt;</msg>
<msg timestamp="20171213 05:00:04.926" level="INFO">${BTS_PC_CONNECTION} = 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;</msg>
<status status="PASS" endtime="20171213 05:00:04.926" starttime="20171213 05:00:03.428"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171213 05:00:04.927" level="INFO">${BTS_PC_CONNECTION} = 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;</msg>
<status status="PASS" endtime="20171213 05:00:04.927" starttime="20171213 05:00:04.926"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="RobotWS">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20171213 05:00:04.932" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;</msg>
<msg timestamp="20171213 05:00:05.990" level="INFO">[telnet_common.py@268] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20171213 05:00:06.129" level="INFO">[telnet_common.py@298] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\Administrator&gt;</msg>
<status status="PASS" endtime="20171213 05:00:06.129" starttime="20171213 05:00:04.928"></status>
</kw>
<status status="PASS" endtime="20171213 05:00:06.129" starttime="20171213 05:00:04.927"></status>
</kw>
<status status="PASS" endtime="20171213 05:00:06.130" starttime="20171213 05:00:03.425"></status>
</kw>
<kw name="Switch Host Connection" library="RobotWS">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171213 05:00:06.133" level="INFO">[connection_mgr.py@139] Switch to connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;.</msg>
<status status="PASS" endtime="20171213 05:00:06.133" starttime="20171213 05:00:06.130"></status>
</kw>
<status status="PASS" endtime="20171213 05:00:06.133" starttime="20171213 04:58:16.425"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171213 05:32:36.226" starttime="20171213 05:32:36.226"></status>
</kw>
<kw name="Disconnect All Hosts" library="RobotWS">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20171213 05:32:36.230" level="INFO">[telnet_common.py@180]</msg>
<msg timestamp="20171213 05:32:36.233" level="INFO">[telnet_common.py@181] Disconnect from 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;</msg>
<status status="PASS" endtime="20171213 05:32:36.234" starttime="20171213 05:32:36.227"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${zip_pass_log}</arg>
</arguments>
<assign>
<var>${para_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${zip_pass_log}</arg>
</arguments>
<msg timestamp="20171213 05:32:36.241" level="FAIL">Variable ${zip_pass_log} does not exist.</msg>
<status status="FAIL" endtime="20171213 05:32:36.241" starttime="20171213 05:32:36.234"></status>
</kw>
<msg timestamp="20171213 05:32:36.241" level="INFO">${para_exist} = ('FAIL', u'Variable ${zip_pass_log} does not exist.')</msg>
<status status="PASS" endtime="20171213 05:32:36.241" starttime="20171213 05:32:36.234"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS' == '${para_exist[0]}'</arg>
<arg>${zip_pass_log}</arg>
<arg>${True}</arg>
</arguments>
<assign>
<var>${zip_log}</var>
</assign>
<msg timestamp="20171213 05:32:36.242" level="INFO">${zip_log} = True</msg>
<status status="PASS" endtime="20171213 05:32:36.242" starttime="20171213 05:32:36.241"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20171213 05:32:36.243" starttime="20171213 05:32:36.243"></status>
</kw>
<msg timestamp="20171213 05:32:36.243" level="INFO">${status} = PASS</msg>
<msg timestamp="20171213 05:32:36.243" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20171213 05:32:36.243" starttime="20171213 05:32:36.243"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171213 05:32:36.244" starttime="20171213 05:32:36.244"></status>
</kw>
<status status="PASS" endtime="20171213 05:32:36.245" starttime="20171213 05:32:36.244"></status>
</kw>
<status status="PASS" endtime="20171213 05:32:36.245" starttime="20171213 05:32:36.226"></status>
</kw>
<test id="s1-t1" name="LTE145-b BTS Startup_3 cell_BTS blockunblck">
<kw type="setup" name="Initial Test Connection" library="OM_resources_new">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\wcrt_log\Test_Log_20171213031452//ev_logs//D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816//</doc>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171213 05:00:06.138" level="INFO">${timestamp} = 20171213050006</msg>
<status status="PASS" endtime="20171213 05:00:06.138" starttime="20171213 05:00:06.137"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171213 05:00:06.138" level="INFO">${TEST_LOG_DIR} = D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b BTS Startup_3 cell_BTS blockunblck</msg>
<status status="PASS" endtime="20171213 05:00:06.138" starttime="20171213 05:00:06.138"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171213 05:00:06.139" level="INFO">${TEST_LOG_DIR} = D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck</msg>
<status status="PASS" endtime="20171213 05:00:06.139" starttime="20171213 05:00:06.139"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171213 05:00:06.139" level="INFO">${TEST_LOG_DIR} = D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck</msg>
<status status="PASS" endtime="20171213 05:00:06.140" starttime="20171213 05:00:06.139"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171213 05:00:06.140" html="yes" level="INFO">Created directory '&lt;a href="file://D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck"&gt;D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171213 05:00:06.140" starttime="20171213 05:00:06.140"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171213 05:00:06.141" level="INFO">save log dir:D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck</msg>
<status status="PASS" endtime="20171213 05:00:06.141" starttime="20171213 05:00:06.141"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20171213 05:00:06.141" starttime="20171213 05:00:06.141"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20171213 05:00:06.143" starttime="20171213 05:00:06.143"></status>
</kw>
<msg timestamp="20171213 05:00:06.143" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171213 05:00:06.143" starttime="20171213 05:00:06.142"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171213 05:00:06.144" starttime="20171213 05:00:06.144"></status>
</kw>
<msg timestamp="20171213 05:00:06.144" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171213 05:00:06.144" starttime="20171213 05:00:06.143"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20171213 05:00:06.145" level="INFO">${log dir} = D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck</msg>
<status status="PASS" endtime="20171213 05:00:06.145" starttime="20171213 05:00:06.144"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171213 05:00:06.145" level="INFO">${SAVE LOG DIRECTORY} = D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck</msg>
<status status="PASS" endtime="20171213 05:00:06.145" starttime="20171213 05:00:06.145"></status>
</kw>
<status status="PASS" endtime="20171213 05:00:06.146" starttime="20171213 05:00:06.142"></status>
</kw>
<status status="PASS" endtime="20171213 05:00:06.146" starttime="20171213 05:00:06.137"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Recover Active Version If NOT Matched</arg>
</arguments>
<status status="PASS" endtime="20171213 05:00:06.146" starttime="20171213 05:00:06.146"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Reset BTS Check Status</arg>
</arguments>
<status status="PASS" endtime="20171213 05:00:06.146" starttime="20171213 05:00:06.146"></status>
</kw>
<status status="PASS" endtime="20171213 05:00:06.146" starttime="20171213 05:00:06.134"></status>
</kw>
<kw name="_BTS Block">
<doc>1.Check BTS Log</doc>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171213 05:00:06.151" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;</msg>
<msg timestamp="20171213 05:00:07.207" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171213 05:00:07.447" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171213 05:00:07.450" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;</msg>
<msg timestamp="20171213 05:00:08.506" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171213 05:00:08.692" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171213 05:00:08.697" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;</msg>
<msg timestamp="20171213 05:00:09.754" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171213 05:00:10.029" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<status status="PASS" endtime="20171213 05:00:10.030" starttime="20171213 05:00:06.147"></status>
</kw>
<kw name="Start IM Log" library="OM_resources_new">
<kw name="Start Infomodel" library="RobotWS">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${IM_PORT}</arg>
</arguments>
<msg timestamp="20171213 05:00:20.409" level="INFO">[infomodel_control.py@159] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None</msg>
<msg timestamp="20171213 05:00:29.558" level="INFO">[infomodel_control.py@163] start infomodel succeed .</msg>
<msg timestamp="20171213 05:00:29.661" level="INFO">[infomodel_control.py@165] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20171213 05:00:29.667" starttime="20171213 05:00:10.031"></status>
</kw>
<status status="PASS" endtime="20171213 05:00:29.670" starttime="20171213 05:00:10.030"></status>
</kw>
<kw name="Start Bts Udp Log" library="RobotWS">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
</arguments>
<msg timestamp="20171213 05:00:32.311" level="INFO">[btslog_control.py@173] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20171213 05:00:32.315" level="INFO">[btslog_control.py@230] use ip is 192.168.255.126</msg>
<msg timestamp="20171213 05:00:32.320" level="INFO">[file_common.py@209] Directory "D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20171213 05:00:32.323" starttime="20171213 05:00:29.683"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20171213 05:00:32.326" starttime="20171213 05:00:32.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20171213 05:00:32.333" starttime="20171213 05:00:32.326"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171213 05:00:32.363" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\wcrt_log\\Test_Log_20171213031452\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\\LTE145-b_BTS_St...</msg>
<status status="PASS" endtime="20171213 05:00:32.365" starttime="20171213 05:00:32.341"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20171213 05:00:32.373" starttime="20171213 05:00:32.370"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171213 05:02:22.424" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171213050032\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171213 05:02:22.425" starttime="20171213 05:00:32.376"></status>
</kw>
<timeout value="10 minutes"></timeout>
<status status="PASS" endtime="20171213 05:02:22.425" starttime="20171213 05:00:32.326"></status>
</kw>
<kw name="GUI SM HW Action" library="gui_resource">
<doc>this keyword is used for most HW operation,such as block,unblock,reset</doc>
<arguments>
<arg>BTS</arg>
<arg>${Empty}</arg>
<arg>Block</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>HWType=${HWType}</arg>
<arg>HWID=${HWID}</arg>
<arg>HWAction=${HWAction}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171213 05:02:22.427" level="INFO">${para_list} = [u'HWType=BTS', u'HWID=', u'HWAction=Block', u'LogPath=D:\\wcrt_log\\Test_Log_20171213031452\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\\LTE145-b_BTS_Startup_3_cell_BTS_bloc...</msg>
<status status="PASS" endtime="20171213 05:02:22.427" starttime="20171213 05:02:22.427"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}HW_Action</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171213 05:02:49.031" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\HW_Action is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\HW_Action ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
HWType="BTS"
HWID=""
HWAction="Block"
LogPath="D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171213050222\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171213 05:02:49.031" starttime="20171213 05:02:22.428"></status>
</kw>
<status status="PASS" endtime="20171213 05:02:49.031" starttime="20171213 05:02:22.426"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2sec</arg>
</arguments>
<msg timestamp="20171213 05:02:51.032" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171213 05:02:51.032" starttime="20171213 05:02:49.032"></status>
</kw>
<kw name="GUI SM Alarm Oper" library="gui_resource">
<doc>this keyword provide check Active/History alarm in BTS SiteManager window</doc>
<arguments>
<arg>Check</arg>
<arg>Active</arg>
<arg>Severity=Critical;;FaultName=BTS blocked (0050);;Source=BTS: BS ${BTS_INFO.ID} / ${BTS_INFO.SYSTEM_MODEL_TYPE} 1;;Exist=Y</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>AlarmType=${AlarmType}</arg>
<arg>OperType=${OperType}</arg>
<arg>AlarmInfo=${AlarmInfo}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171213 05:02:51.034" level="INFO">${para_list} = [u'AlarmType=Active', u'OperType=Check', u'AlarmInfo=Severity=Critical;;FaultName=BTS blocked (0050);;Source=BTS: BS 1748 / ASIA 1;;Exist=Y', u'LogPath=D:\\wcrt_log\\Test_Log_20171213031452\\ev_logs\\...</msg>
<status status="PASS" endtime="20171213 05:02:51.034" starttime="20171213 05:02:51.034"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Alarm_Oper</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171213 05:03:04.433" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Alarm_Oper is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Alarm_Oper ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
AlarmType="Active"
OperType="Check"
AlarmInfo="Severity=Critical;;FaultName=BTS blocked (0050);;Source=BTS: BS 1748 / ASIA 1;;Exist=Y"
LogPath="D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171213050251\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171213 05:03:04.433" starttime="20171213 05:02:51.035"></status>
</kw>
<status status="PASS" endtime="20171213 05:03:04.433" starttime="20171213 05:02:51.032"></status>
</kw>
<status status="PASS" endtime="20171213 05:03:04.433" starttime="20171213 05:00:06.147"></status>
</kw>
<kw name="_BTS Unblock">
<doc>1.Check BTS Log</doc>
<kw name="GUI SM HW Action" library="gui_resource">
<doc>this keyword is used for most HW operation,such as block,unblock,reset</doc>
<arguments>
<arg>BTS</arg>
<arg>${Empty}</arg>
<arg>Unblock</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>HWType=${HWType}</arg>
<arg>HWID=${HWID}</arg>
<arg>HWAction=${HWAction}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171213 05:03:04.436" level="INFO">${para_list} = [u'HWType=BTS', u'HWID=', u'HWAction=Unblock', u'LogPath=D:\\wcrt_log\\Test_Log_20171213031452\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\\LTE145-b_BTS_Startup_3_cell_BTS_bl...</msg>
<status status="PASS" endtime="20171213 05:03:04.436" starttime="20171213 05:03:04.435"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}HW_Action</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171213 05:13:12.031" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\HW_Action is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\HW_Action ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
HWType="BTS"
HWID=""
HWAction="Unblock"
LogPath="D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171213050304\Report
&lt;QTP&gt; Start to run script...

Block_BTSUnBlock_BTSUnBlock BTS failed  in 501 secs
Test Fail. SaveImage  to D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\2017-12-13_05-13-11.png
&lt;QTP&gt; run Failed.
Start to kill QTP process.
Finshed to kill QTP process.</msg>
<msg timestamp="20171213 05:13:12.031" level="FAIL">com_error: (-2147023174, 'The RPC server is unavailable.', None, None)</msg>
<status status="FAIL" endtime="20171213 05:13:12.032" starttime="20171213 05:03:04.436"></status>
</kw>
<status status="FAIL" endtime="20171213 05:13:12.034" starttime="20171213 05:03:04.435"></status>
</kw>
<status status="FAIL" endtime="20171213 05:13:12.034" starttime="20171213 05:03:04.434"></status>
</kw>
<kw type="teardown" name="_Disconnect All connection">
<doc>1.Check BTS Log</doc>
<kw name="Stop Bts Udp Log" library="RobotWS">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20171213 05:13:12.036" starttime="20171213 05:13:12.035"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Save IM Log</arg>
</arguments>
<kw name="Save IM Log" library="OM_resources_new">
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171213 05:13:12.037" level="INFO">${time} = 20171213051312</msg>
<status status="PASS" endtime="20171213 05:13:12.037" starttime="20171213 05:13:12.037"></status>
</kw>
<kw name="Save Infomodel Log" library="RobotWS">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}infomodel_${time}</arg>
</arguments>
<msg timestamp="20171213 05:13:12.058" level="INFO">[infomodel_control.py@216] save infomodel log to file: 'D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\infomodel_20171213051312' succeed .</msg>
<status status="PASS" endtime="20171213 05:13:12.058" starttime="20171213 05:13:12.037"></status>
</kw>
<kw name="Stop Infomodel" library="RobotWS">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20171213 05:13:12.323" level="INFO">Exit code: 1</msg>
<msg timestamp="20171213 05:13:12.323" level="INFO">STDOUT
</msg>
<msg timestamp="20171213 05:13:12.323" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:36393
</msg>
<msg timestamp="20171213 05:13:12.066" level="INFO">[infomodel_control.py@188] stop infomodel logger succeed .</msg>
<msg timestamp="20171213 05:13:12.327" level="INFO">[infomodel_control.py@200] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171213 05:13:12.327" starttime="20171213 05:13:12.058"></status>
</kw>
<status status="PASS" endtime="20171213 05:13:12.328" starttime="20171213 05:13:12.036"></status>
</kw>
<status status="PASS" endtime="20171213 05:13:12.328" starttime="20171213 05:13:12.036"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Capture_OAM_LOG</arg>
</arguments>
<kw name="Capture OAM LOG" library="OM_resources_new">
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171213 05:13:12.329" level="INFO">${time} = 20171213051312</msg>
<status status="PASS" endtime="20171213 05:13:12.329" starttime="20171213 05:13:12.329"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>GUI SM Captuer Screen</arg>
</arguments>
<kw name="GUI SM Captuer Screen" library="gui_resource">
<doc>this keyword is used for capture the screen</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171213 05:13:12.330" level="INFO">${para_list} = [u'LogPath=D:\\wcrt_log\\Test_Log_20171213031452\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\\']</msg>
<status status="PASS" endtime="20171213 05:13:12.331" starttime="20171213 05:13:12.330"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}CaptureImage</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171213 05:13:23.523" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
LogPath="D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171213051312\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171213 05:13:23.523" starttime="20171213 05:13:12.331"></status>
</kw>
<status status="PASS" endtime="20171213 05:13:23.524" starttime="20171213 05:13:12.330"></status>
</kw>
<status status="PASS" endtime="20171213 05:13:23.524" starttime="20171213 05:13:12.329"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Capture Screen</arg>
</arguments>
<kw name="Capture Screen" library="OM_resources_new">
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171213 05:13:23.531" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;</msg>
<msg timestamp="20171213 05:13:24.593" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171213 05:13:24.834" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\TD-LTE-TEST-PC\ROOT\CIMV2:Win32_Process.Handle="5108"

Instance deletion successful.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171213 05:13:24.840" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;</msg>
<msg timestamp="20171213 05:13:25.901" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171213 05:13:26.106" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\TD-LTE-TEST-PC\ROOT\CIMV2:Win32_Process.Handle="5012"

Instance deletion successful.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171213 05:13:26.112" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03F3D2D8&gt;</msg>
<msg timestamp="20171213 05:13:27.173" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171213 05:13:27.373" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<status status="PASS" endtime="20171213 05:13:27.374" starttime="20171213 05:13:23.525"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20171213 05:13:27.379" starttime="20171213 05:13:27.379"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20171213 05:13:27.379" starttime="20171213 05:13:27.379"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171213 05:13:27.381" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\wcrt_log\\Test_Log_20171213031452\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\\LTE145-b_BTS_St...</msg>
<status status="PASS" endtime="20171213 05:13:27.381" starttime="20171213 05:13:27.379"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20171213 05:13:27.381" starttime="20171213 05:13:27.381"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171213 05:32:36.223" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171213051327\Report
&lt;QTP&gt; Start to run script...

 Login_BTSSiteManager  SetSEMDissconnect  OpenMenu MenuName File doesn't exist.
Test Fail. SaveImage  to D:\wcrt_log\Test_Log_20171213031452\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171213045816\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\2017-12-13_05-32-35.png
&lt;QTP&gt; run Failed.
Start to kill QTP process.
Finshed to kill QTP process.</msg>
<msg timestamp="20171213 05:32:36.224" level="FAIL">Keyword timeout 10 minutes exceeded.</msg>
<status status="FAIL" endtime="20171213 05:32:36.224" starttime="20171213 05:13:27.382"></status>
</kw>
<timeout value="10 minutes"></timeout>
<status status="FAIL" endtime="20171213 05:32:36.224" starttime="20171213 05:13:27.378"></status>
</kw>
<status status="FAIL" endtime="20171213 05:32:36.224" starttime="20171213 05:13:23.524"></status>
</kw>
<status status="FAIL" endtime="20171213 05:32:36.224" starttime="20171213 05:13:23.524"></status>
</kw>
<status status="FAIL" endtime="20171213 05:32:36.224" starttime="20171213 05:13:12.328"></status>
</kw>
<status status="FAIL" endtime="20171213 05:32:36.224" starttime="20171213 05:13:12.328"></status>
</kw>
<status status="FAIL" endtime="20171213 05:32:36.225" starttime="20171213 05:13:12.034">Keyword timeout 10 minutes exceeded.</status>
</kw>
<tags>
<tag>ASMI+CPRI Nokia</tag>
<tag>BSM</tag>
<tag>developer-yuan.cao@nsn.com</tag>
<tag>IV OAM1</tag>
<tag>Owner-huike.gao@nokia.com</tag>
<tag>QC_640815</tag>
</tags>
<status status="FAIL" endtime="20171213 05:32:36.225" critical="yes" starttime="20171213 05:00:06.133">com_error: (-2147023174, 'The RPC server is unavailable.', None, None)

Also teardown failed:
Keyword timeout 10 minutes exceeded.</status>
</test>
<doc>The purpose of this test case is to check that repeated BTS block &amp; unblock and recovers back to the normal operation state.</doc>
<status status="FAIL" endtime="20171213 05:32:36.245" starttime="20171213 04:58:14.789"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">ASMI+CPRI Nokia</stat>
<stat fail="1" pass="0">BSM</stat>
<stat fail="1" pass="0">developer-yuan.cao@nsn.com</stat>
<stat fail="1" pass="0">IV OAM1</stat>
<stat fail="1" pass="0">Owner-huike.gao@nokia.com</stat>
<stat fail="1" pass="0">QC_640815</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="TA" pass="0">TA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
