<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171214 03:42:05.954" generator="Rebot 3.0.2 (Python 2.7.5 on win32)">
<suite source="C:\TestCase\Trunk_CRT\CIT\ASMI+Common\BSM\LTE145-b BTS Startup_3cell_BTS blockunblock\LTE145-b BTS Startup_3 cell_BTS blockunblock.html" id="s1" name="TA">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\wcrt_log\Test_Log_20171214022345//logs//</doc>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171214 03:28:20.579" level="INFO">${timestamp} = 20171214032820</msg>
<status status="PASS" endtime="20171214 03:28:20.579" starttime="20171214 03:28:20.539"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20171214 03:28:20.580" level="INFO">${FILE_NAME} = LTE145-b BTS Startup 3 cell BTS blockunblock</msg>
<status status="PASS" endtime="20171214 03:28:20.580" starttime="20171214 03:28:20.579"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171214 03:28:20.581" level="INFO">${SUITE_LOG_DIRECTORY} = D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b BTS Startup 3 cell BTS blockunblock_20171214032820</msg>
<status status="PASS" endtime="20171214 03:28:20.581" starttime="20171214 03:28:20.580"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171214 03:28:20.581" level="INFO">${SUITE_LOG_DIRECTORY} = D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820</msg>
<status status="PASS" endtime="20171214 03:28:20.581" starttime="20171214 03:28:20.581"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171214 03:28:20.582" level="INFO">${SUITE_LOG_DIRECTORY} = D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820</msg>
<status status="PASS" endtime="20171214 03:28:20.582" starttime="20171214 03:28:20.582"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171214 03:28:20.583" html="yes" level="INFO">Created directory '&lt;a href="file://D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820"&gt;D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171214 03:28:20.583" starttime="20171214 03:28:20.582"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171214 03:28:20.584" level="INFO">save log dir:D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820</msg>
<status status="PASS" endtime="20171214 03:28:20.584" starttime="20171214 03:28:20.583"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20171214 03:28:20.587" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20171214 03:28:20.587" starttime="20171214 03:28:20.584"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20171214 03:28:20.603" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20171214 03:28:20.603" starttime="20171214 03:28:20.598"></status>
</kw>
<msg timestamp="20171214 03:28:20.603" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20171214 03:28:20.603" starttime="20171214 03:28:20.598"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:28:20.604" starttime="20171214 03:28:20.604"></status>
</kw>
<msg timestamp="20171214 03:28:20.604" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171214 03:28:20.605" starttime="20171214 03:28:20.604"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:28:20.606" starttime="20171214 03:28:20.605"></status>
</kw>
<msg timestamp="20171214 03:28:20.606" level="INFO">${log dir} = D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820</msg>
<status status="PASS" endtime="20171214 03:28:20.606" starttime="20171214 03:28:20.605"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171214 03:28:20.609" level="INFO">${SAVE LOG DIRECTORY} = D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820</msg>
<status status="PASS" endtime="20171214 03:28:20.609" starttime="20171214 03:28:20.606"></status>
</kw>
<status status="PASS" endtime="20171214 03:28:20.609" starttime="20171214 03:28:20.597"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="RobotWS">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20171214 03:28:23.700" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171214 03:28:23.700" starttime="20171214 03:28:20.610"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:28:23.700" starttime="20171214 03:28:23.700"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20171214 03:28:23.701" starttime="20171214 03:28:23.701"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:28:23.701" starttime="20171214 03:28:23.701"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20171214 03:28:23.702" starttime="20171214 03:28:23.701"></status>
</kw>
<status status="PASS" endtime="20171214 03:28:23.702" starttime="20171214 03:28:20.610"></status>
</kw>
<status status="PASS" endtime="20171214 03:28:23.702" starttime="20171214 03:28:20.610"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="RobotWS">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20171214 03:28:58.976" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171214 03:28:59.060" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171214 03:29:10.106" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171214 03:29:10.134" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171214 03:29:10.616" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171214 03:29:10.671" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171214 03:28:26.790" level="INFO">[ftm_control.py@287] pass this kw for PR exist</msg>
<msg timestamp="20171214 03:28:26.794" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171214 03:28:37.167" level="INFO">[ssh_common.py@198] root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171214 03:28:37.180" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042ACDC8&gt;</msg>
<msg timestamp="20171214 03:28:37.239" level="INFO">[ssh_common.py@253] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171214 03:28:37.294" level="INFO">[ssh_common.py@309] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171214 03:28:37.361" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042ACDC8&gt;</msg>
<msg timestamp="20171214 03:28:37.365" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171214 03:28:47.734" level="INFO">[ssh_common.py@198] Last login: Wed Dec 13 18:23:32 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171214 03:28:47.742" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042AF530&gt;</msg>
<msg timestamp="20171214 03:28:47.799" level="INFO">[ssh_common.py@253] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20171214 03:28:47.854" level="INFO">[ssh_common.py@309] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL18_FSM4_9999_171213_019830.xml
root@fctj-0a:/ffs/fs1 &gt;</msg>
<msg timestamp="20171214 03:28:47.923" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042AF530&gt;</msg>
<msg timestamp="20171214 03:28:47.927" level="INFO">[enb_resource.py@1219] 
 ****Current BTS version is 'TL18_FSM4_9999_171213_019830' *****</msg>
<msg timestamp="20171214 03:28:47.931" level="INFO">[enb_resource.py@1249] activeBuildVersion=TL18_FSM4_9999_171213_019830</msg>
<msg timestamp="20171214 03:28:47.934" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171214 03:28:58.302" level="INFO">[ssh_common.py@198] Last login: Wed Dec 13 18:23:42 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171214 03:28:58.309" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042ACE68&gt;</msg>
<msg timestamp="20171214 03:28:58.367" level="INFO">[ssh_common.py@253] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20171214 03:28:58.421" level="INFO">[ssh_common.py@309] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171214 03:28:58.488" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x042ACE68&gt;</msg>
<msg timestamp="20171214 03:28:58.980" level="INFO">[sftp_control.py@30] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171214 03:28:58.984" level="INFO">[sftp_control.py@166] /ram/SiteConf.xml</msg>
<msg timestamp="20171214 03:28:59.059" level="INFO">[sftp_control.py@72] sftp download from '/ram/SiteConf.xml' to 'D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\SiteConf.xml' is ok. local file size is 442k</msg>
<msg timestamp="20171214 03:28:59.071" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171214 03:29:09.440" level="INFO">[ssh_common.py@198] Last login: Wed Dec 13 18:24:03 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171214 03:29:09.448" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x055DD6E8&gt;</msg>
<msg timestamp="20171214 03:29:09.506" level="INFO">[ssh_common.py@253] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171214 03:29:09.560" level="INFO">[ssh_common.py@309] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171214 03:29:09.627" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x055DD6E8&gt;</msg>
<msg timestamp="20171214 03:29:09.631" level="INFO">[enb_resource.py@481] The real falsh folder is /ffs/fs1</msg>
<msg timestamp="20171214 03:29:10.110" level="INFO">[sftp_control.py@30] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171214 03:29:10.115" level="INFO">[sftp_control.py@166] /ffs/fs1/FileDirectory.xml</msg>
<msg timestamp="20171214 03:29:10.134" level="INFO">[sftp_control.py@72] sftp download from '/ffs/fs1/FileDirectory.xml' to 'D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\FileDirectory_20171214032859.xml' is ok. local file size is 46k</msg>
<msg timestamp="20171214 03:29:10.620" level="INFO">[sftp_control.py@30] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171214 03:29:10.625" level="INFO">[sftp_control.py@166] /ffs/fs1/config/SCFC_50.xml</msg>
<msg timestamp="20171214 03:29:10.671" level="INFO">[sftp_control.py@72] sftp download from '/ffs/fs1/config/SCFC_50.xml' to 'D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\SCFC_50.xml' is ok. local file size is 201k</msg>
<msg timestamp="20171214 03:29:10.704" level="INFO">[enb_resource.py@1219] 
 ****Current bbu type is 'ASIA' *****</msg>
<msg timestamp="20171214 03:29:10.707" level="INFO">[enb_resource.py@1344] HW_BBU_TYPE=ASIA</msg>
<msg timestamp="20171214 03:29:10.711" level="INFO">[enb_resource.py@1219] 
 ****Current rru type is 'UZHA:UZHA:UZHB' *****</msg>
<msg timestamp="20171214 03:29:10.714" level="INFO">[enb_resource.py@1347] HW_RRU_TYPE=UZHA:UZHA:UZHB</msg>
<msg timestamp="20171214 03:29:10.717" level="INFO">[enb_resource.py@1219] 
 ****Current HW type is 'null' *****</msg>
<msg timestamp="20171214 03:29:10.721" level="INFO">[enb_resource.py@1350] BTS_HW_TYPE=null</msg>
<status status="PASS" endtime="20171214 03:30:07.430" starttime="20171214 03:28:23.702"></status>
</kw>
<status status="PASS" endtime="20171214 03:30:07.430" starttime="20171214 03:28:23.702"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>RobotWS</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20171214 03:30:07.430" starttime="20171214 03:30:07.430"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="RobotWS">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171214 03:30:07.432" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171214 03:30:07.432" starttime="20171214 03:30:07.432"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20171214 03:30:07.432" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20171214 03:30:07.432" starttime="20171214 03:30:07.432"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20171214 03:30:07.432" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20171214 03:30:07.432" starttime="20171214 03:30:07.432"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20171214 03:30:07.432" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20171214 03:30:07.432" starttime="20171214 03:30:07.432"></status>
</kw>
<kw name="Connect To Host" library="RobotWS">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20171214 03:30:07.527" level="INFO">[telnet_common.py@298] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20171214 03:30:07.530" level="INFO">[telnet_common.py@268] Execute command: tdlte-tester</msg>
<msg timestamp="20171214 03:30:07.591" level="INFO">[telnet_common.py@298] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20171214 03:30:07.594" level="INFO">[telnet_common.py@268] Execute command: btstest</msg>
<msg timestamp="20171214 03:30:08.956" level="INFO">[telnet_common.py@238]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:30:08.957" level="INFO">${BTS_PC_CONNECTION} = 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<status status="PASS" endtime="20171214 03:30:08.957" starttime="20171214 03:30:07.432"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171214 03:30:08.958" level="INFO">${BTS_PC_CONNECTION} = 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<status status="PASS" endtime="20171214 03:30:08.958" starttime="20171214 03:30:08.958"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="RobotWS">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20171214 03:30:08.963" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:30:10.021" level="INFO">[telnet_common.py@268] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20171214 03:30:10.154" level="INFO">[telnet_common.py@298] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\Administrator&gt;</msg>
<status status="PASS" endtime="20171214 03:30:10.155" starttime="20171214 03:30:08.959"></status>
</kw>
<status status="PASS" endtime="20171214 03:30:10.155" starttime="20171214 03:30:08.958"></status>
</kw>
<status status="PASS" endtime="20171214 03:30:10.155" starttime="20171214 03:30:07.430"></status>
</kw>
<kw name="Switch Host Connection" library="RobotWS">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171214 03:30:10.158" level="INFO">[connection_mgr.py@139] Switch to connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;.</msg>
<status status="PASS" endtime="20171214 03:30:10.158" starttime="20171214 03:30:10.155"></status>
</kw>
<status status="PASS" endtime="20171214 03:30:10.158" starttime="20171214 03:28:20.538"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:42:02.077" starttime="20171214 03:42:02.077"></status>
</kw>
<kw name="Disconnect All Hosts" library="RobotWS">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20171214 03:42:02.081" level="INFO">[telnet_common.py@180]</msg>
<msg timestamp="20171214 03:42:02.084" level="INFO">[telnet_common.py@181] Disconnect from 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<status status="PASS" endtime="20171214 03:42:02.084" starttime="20171214 03:42:02.078"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${zip_pass_log}</arg>
</arguments>
<assign>
<var>${para_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${zip_pass_log}</arg>
</arguments>
<msg timestamp="20171214 03:42:02.092" level="FAIL">Variable ${zip_pass_log} does not exist.</msg>
<status status="FAIL" endtime="20171214 03:42:02.092" starttime="20171214 03:42:02.085"></status>
</kw>
<msg timestamp="20171214 03:42:02.092" level="INFO">${para_exist} = ('FAIL', u'Variable ${zip_pass_log} does not exist.')</msg>
<status status="PASS" endtime="20171214 03:42:02.092" starttime="20171214 03:42:02.085"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS' == '${para_exist[0]}'</arg>
<arg>${zip_pass_log}</arg>
<arg>${True}</arg>
</arguments>
<assign>
<var>${zip_log}</var>
</assign>
<msg timestamp="20171214 03:42:02.093" level="INFO">${zip_log} = True</msg>
<status status="PASS" endtime="20171214 03:42:02.093" starttime="20171214 03:42:02.092"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20171214 03:42:02.094" starttime="20171214 03:42:02.094"></status>
</kw>
<msg timestamp="20171214 03:42:02.094" level="INFO">${status} = PASS</msg>
<msg timestamp="20171214 03:42:02.094" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20171214 03:42:02.094" starttime="20171214 03:42:02.093"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:42:02.096" starttime="20171214 03:42:02.095"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.096" starttime="20171214 03:42:02.095"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.096" starttime="20171214 03:42:02.077"></status>
</kw>
<test id="s1-t1" name="LTE145-b BTS Startup_3 cell_BTS blockunblck">
<kw type="setup" name="Initial Test Connection" library="OM_resources_new">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\wcrt_log\Test_Log_20171214022345//ev_logs//D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820//</doc>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171214 03:30:10.163" level="INFO">${timestamp} = 20171214033010</msg>
<status status="PASS" endtime="20171214 03:30:10.163" starttime="20171214 03:30:10.163"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171214 03:30:10.164" level="INFO">${TEST_LOG_DIR} = D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b BTS Startup_3 cell_BTS blockunblck</msg>
<status status="PASS" endtime="20171214 03:30:10.164" starttime="20171214 03:30:10.163"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171214 03:30:10.164" level="INFO">${TEST_LOG_DIR} = D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck</msg>
<status status="PASS" endtime="20171214 03:30:10.164" starttime="20171214 03:30:10.164"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171214 03:30:10.165" level="INFO">${TEST_LOG_DIR} = D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck</msg>
<status status="PASS" endtime="20171214 03:30:10.165" starttime="20171214 03:30:10.164"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171214 03:30:10.166" html="yes" level="INFO">Created directory '&lt;a href="file://D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck"&gt;D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171214 03:30:10.166" starttime="20171214 03:30:10.165"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171214 03:30:10.166" level="INFO">save log dir:D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck</msg>
<status status="PASS" endtime="20171214 03:30:10.166" starttime="20171214 03:30:10.166"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20171214 03:30:10.167" starttime="20171214 03:30:10.166"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:30:10.168" starttime="20171214 03:30:10.168"></status>
</kw>
<msg timestamp="20171214 03:30:10.168" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171214 03:30:10.168" starttime="20171214 03:30:10.168"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:30:10.169" starttime="20171214 03:30:10.169"></status>
</kw>
<msg timestamp="20171214 03:30:10.169" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171214 03:30:10.169" starttime="20171214 03:30:10.169"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20171214 03:30:10.170" level="INFO">${log dir} = D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck</msg>
<status status="PASS" endtime="20171214 03:30:10.170" starttime="20171214 03:30:10.170"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171214 03:30:10.171" level="INFO">${SAVE LOG DIRECTORY} = D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck</msg>
<status status="PASS" endtime="20171214 03:30:10.171" starttime="20171214 03:30:10.170"></status>
</kw>
<status status="PASS" endtime="20171214 03:30:10.171" starttime="20171214 03:30:10.167"></status>
</kw>
<status status="PASS" endtime="20171214 03:30:10.171" starttime="20171214 03:30:10.162"></status>
</kw>
<kw name="Recover Active Version If NOT Matched" library="OM_resources_new">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Check Active Version Is Not Correct</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Check Active Version Is Not Correct" library="OM_resources_new">
<kw name="Get Active Bts Sw Version" library="RobotWS">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${active_build}</var>
</assign>
<msg timestamp="20171214 03:30:10.177" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171214 03:30:20.546" level="INFO">[ssh_common.py@198] Last login: Wed Dec 13 18:24:15 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171214 03:30:20.555" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05711238&gt;</msg>
<msg timestamp="20171214 03:30:20.615" level="INFO">[ssh_common.py@253] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171214 03:30:20.670" level="INFO">[ssh_common.py@309] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171214 03:30:20.738" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05711238&gt;</msg>
<msg timestamp="20171214 03:30:20.742" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171214 03:30:31.107" level="INFO">[ssh_common.py@198] Last login: Wed Dec 13 18:25:15 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171214 03:30:31.116" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x055553A0&gt;</msg>
<msg timestamp="20171214 03:30:31.175" level="INFO">[ssh_common.py@253] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20171214 03:30:31.231" level="INFO">[ssh_common.py@309] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL18_FSM4_9999_171213_019830.xml
root@fctj-0a:/ffs/fs1 &gt;</msg>
<msg timestamp="20171214 03:30:31.300" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x055553A0&gt;</msg>
<msg timestamp="20171214 03:30:31.301" level="INFO">${active_build} = TL18_FSM4_9999_171213_019830</msg>
<status status="PASS" endtime="20171214 03:30:31.301" starttime="20171214 03:30:10.172"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${active_build}</arg>
<arg>TL\\w+_(\\w+)_\\d+_(\\d+_\\d+T?)</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${group1}</var>
<var>${group2}</var>
</assign>
<msg timestamp="20171214 03:30:31.302" level="INFO">${match} = TL18_FSM4_9999_171213_019830</msg>
<msg timestamp="20171214 03:30:31.303" level="INFO">${group1} = FSM4</msg>
<msg timestamp="20171214 03:30:31.303" level="INFO">${group2} = 171213_019830</msg>
<status status="PASS" endtime="20171214 03:30:31.303" starttime="20171214 03:30:31.302"></status>
</kw>
<kw name="Get BTS Version Info" library="OM_resources_new">
<doc>Get BTS Version Info From Local PC Fixed File Fold</doc>
<arguments>
<arg>${ENB3}</arg>
</arguments>
<kw name="List Files In Directory" library="OperatingSystem">
<doc>Wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${BTS_Version_Directory}</arg>
<arg>${file_type}</arg>
</arguments>
<assign>
<var>${List File}</var>
</assign>
<msg timestamp="20171214 03:30:31.304" html="yes" level="INFO">Listing contents of directory '&lt;a href="file://D:\BTS_SW\TA SW\ENB3"&gt;D:\BTS_SW\TA SW\ENB3&lt;/a&gt;'.</msg>
<msg timestamp="20171214 03:30:31.304" level="INFO">1 file:
TL00_FSM4_9999_171213_019830_release_BTSSM_downloadable.zip</msg>
<msg timestamp="20171214 03:30:31.304" level="INFO">${List File} = [u'TL00_FSM4_9999_171213_019830_release_BTSSM_downloadable.zip']</msg>
<status status="PASS" endtime="20171214 03:30:31.304" starttime="20171214 03:30:31.304"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${List File[0]}</arg>
</arguments>
<assign>
<var>${file_name}</var>
</assign>
<msg timestamp="20171214 03:30:31.305" level="INFO">${file_name} = TL00_FSM4_9999_171213_019830_release_BTSSM_downloadable.zip</msg>
<status status="PASS" endtime="20171214 03:30:31.305" starttime="20171214 03:30:31.305"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${file_name}</arg>
<arg>TL\\w+_(\\w+)_\\d+_(\\d+_\\d+)</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${split_begin}</var>
<var>${group2}</var>
</assign>
<msg timestamp="20171214 03:30:31.306" level="INFO">${match} = TL00_FSM4_9999_171213_019830</msg>
<msg timestamp="20171214 03:30:31.306" level="INFO">${split_begin} = FSM4</msg>
<msg timestamp="20171214 03:30:31.306" level="INFO">${group2} = 171213_019830</msg>
<status status="PASS" endtime="20171214 03:30:31.307" starttime="20171214 03:30:31.306"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${group2}</arg>
</arguments>
<assign>
<var>${ENB_Version}</var>
</assign>
<msg timestamp="20171214 03:30:31.307" level="INFO">${ENB_Version} = 171213_019830</msg>
<status status="PASS" endtime="20171214 03:30:31.307" starttime="20171214 03:30:31.307"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${file_name}</arg>
</arguments>
<assign>
<var>${Convert File}</var>
</assign>
<msg timestamp="20171214 03:30:31.308" level="INFO">${Convert File} = TL00_FSM4_9999_171213_019830_release_BTSSM_downloadable.zip</msg>
<status status="PASS" endtime="20171214 03:30:31.308" starttime="20171214 03:30:31.307"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${Convert File}</arg>
<arg>${split_begin}_</arg>
</arguments>
<assign>
<var>${First Split File}</var>
</assign>
<msg timestamp="20171214 03:30:31.308" level="INFO">${First Split File} = [u'TL00_', u'9999_171213_019830_release_BTSSM_downloadable.zip']</msg>
<status status="PASS" endtime="20171214 03:30:31.308" starttime="20171214 03:30:31.308"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${First Split File[-1]}</arg>
<arg>${split_end}</arg>
</arguments>
<assign>
<var>${Second Split File}</var>
</assign>
<msg timestamp="20171214 03:30:31.309" level="INFO">${Second Split File} = [u'9999_171213_019830', u'_BTSSM_downloadable.zip']</msg>
<status status="PASS" endtime="20171214 03:30:31.309" starttime="20171214 03:30:31.308"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${Second Split File[0]}</arg>
</arguments>
<assign>
<var>${BTS_Version}</var>
</assign>
<msg timestamp="20171214 03:30:31.310" level="INFO">${BTS_Version} = 9999_171213_019830</msg>
<status status="PASS" endtime="20171214 03:30:31.310" starttime="20171214 03:30:31.309"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${BTS_Version}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${Convert Version}</var>
</assign>
<msg timestamp="20171214 03:30:31.310" level="INFO">${Convert Version} = [u'9999', u'171213', u'019830']</msg>
<status status="PASS" endtime="20171214 03:30:31.310" starttime="20171214 03:30:31.310"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${Convert Version[0]}</arg>
</arguments>
<assign>
<var>${A_vsersion}</var>
</assign>
<msg timestamp="20171214 03:30:31.311" level="INFO">${A_vsersion} = 9999</msg>
<status status="PASS" endtime="20171214 03:30:31.311" starttime="20171214 03:30:31.310"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${Convert Version[1]}</arg>
</arguments>
<assign>
<var>${B_vsersion}</var>
</assign>
<msg timestamp="20171214 03:30:31.312" level="INFO">${B_vsersion} = 171213</msg>
<status status="PASS" endtime="20171214 03:30:31.312" starttime="20171214 03:30:31.311"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${Convert Version[2]}</arg>
</arguments>
<assign>
<var>${C_vsersion}</var>
</assign>
<msg timestamp="20171214 03:30:31.312" level="INFO">${C_vsersion} = 019830</msg>
<status status="PASS" endtime="20171214 03:30:31.312" starttime="20171214 03:30:31.312"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${A_vsersion} ${B_vsersion}${C_vsersion}</arg>
</arguments>
<assign>
<var>${Current_vsersion}</var>
</assign>
<msg timestamp="20171214 03:30:31.313" level="INFO">${Current_vsersion} = 9999 171213019830</msg>
<status status="PASS" endtime="20171214 03:30:31.313" starttime="20171214 03:30:31.312"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_Version}</arg>
</arguments>
<msg timestamp="20171214 03:30:31.314" level="INFO">${BTS_Version} = 9999_171213_019830</msg>
<status status="PASS" endtime="20171214 03:30:31.314" starttime="20171214 03:30:31.313"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${Current_vsersion}</arg>
</arguments>
<msg timestamp="20171214 03:30:31.314" level="INFO">${Current_vsersion} = 9999 171213019830</msg>
<status status="PASS" endtime="20171214 03:30:31.314" starttime="20171214 03:30:31.314"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${List File}</arg>
</arguments>
<msg timestamp="20171214 03:30:31.315" level="INFO">${List File} = [u'TL00_FSM4_9999_171213_019830_release_BTSSM_downloadable.zip']</msg>
<status status="PASS" endtime="20171214 03:30:31.315" starttime="20171214 03:30:31.315"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENB_Version}</arg>
</arguments>
<msg timestamp="20171214 03:30:31.316" level="INFO">${ENB_Version} = 171213_019830</msg>
<status status="PASS" endtime="20171214 03:30:31.316" starttime="20171214 03:30:31.315"></status>
</kw>
<status status="PASS" endtime="20171214 03:30:31.316" starttime="20171214 03:30:31.303"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${group2}</arg>
</arguments>
<msg timestamp="20171214 03:30:31.316" level="INFO">171213_019830</msg>
<status status="PASS" endtime="20171214 03:30:31.316" starttime="20171214 03:30:31.316"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ENB_Version}</arg>
</arguments>
<msg timestamp="20171214 03:30:31.317" level="INFO">171213_019830</msg>
<status status="PASS" endtime="20171214 03:30:31.317" starttime="20171214 03:30:31.317"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${group2}</arg>
<arg>${ENB_Version}</arg>
</arguments>
<msg timestamp="20171214 03:30:31.318" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171214 03:30:31.318" level="FAIL">171213_019830 == 171213_019830</msg>
<status status="FAIL" endtime="20171214 03:30:31.318" starttime="20171214 03:30:31.317"></status>
</kw>
<status status="FAIL" endtime="20171214 03:30:31.318" starttime="20171214 03:30:10.172"></status>
</kw>
<msg timestamp="20171214 03:30:31.318" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171214 03:30:31.318" level="INFO">${value} = 171213_019830 == 171213_019830</msg>
<status status="PASS" endtime="20171214 03:30:31.318" starttime="20171214 03:30:10.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Recover Version</arg>
</arguments>
<status status="PASS" endtime="20171214 03:30:31.319" starttime="20171214 03:30:31.318"></status>
</kw>
<status status="PASS" endtime="20171214 03:30:31.319" starttime="20171214 03:30:10.171"></status>
</kw>
<kw name="Reset BTS Check Status" library="OM_resources_new">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>GUI SM Captuer Screen</arg>
</arguments>
<kw name="GUI SM Captuer Screen" library="gui_resource">
<doc>this keyword is used for capture the screen</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171214 03:30:31.320" level="INFO">${para_list} = [u'LogPath=D:\\wcrt_log\\Test_Log_20171214022345\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\\']</msg>
<status status="PASS" endtime="20171214 03:30:31.320" starttime="20171214 03:30:31.320"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}CaptureImage</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171214 03:30:45.155" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
LogPath="D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171214033031\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171214 03:30:45.155" starttime="20171214 03:30:31.321"></status>
</kw>
<status status="PASS" endtime="20171214 03:30:45.156" starttime="20171214 03:30:31.320"></status>
</kw>
<status status="PASS" endtime="20171214 03:30:45.156" starttime="20171214 03:30:31.319"></status>
</kw>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171214 03:30:45.156" level="INFO">${time} = 20171214033045</msg>
<status status="PASS" endtime="20171214 03:30:45.156" starttime="20171214 03:30:45.156"></status>
</kw>
<kw name="Start Bts Udp Log" library="RobotWS">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}BTSLOG_${time}.LOG</arg>
</arguments>
<msg timestamp="20171214 03:30:45.432" level="INFO">[btslog_control.py@173] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20171214 03:30:45.435" level="INFO">[btslog_control.py@230] use ip is 192.168.255.126</msg>
<msg timestamp="20171214 03:30:45.439" level="INFO">[file_common.py@209] Directory "D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20171214 03:30:45.460" starttime="20171214 03:30:45.156"></status>
</kw>
<kw name="Power Off" library="RobotWS">
<doc>control powerbreaker to power off a outlet</doc>
<arguments>
<arg>${BTS_POWERBREAK_PORT[0]}</arg>
</arguments>
<msg timestamp="20171214 03:30:45.475" level="INFO">[facom.py@113] Connect to Facom succeed !</msg>
<msg timestamp="20171214 03:30:45.478" level="INFO">[base.py@40] trial power off for 0 times</msg>
<msg timestamp="20171214 03:30:46.094" level="INFO">[facom.py@52] Power off port 1 succeed!</msg>
<status status="PASS" endtime="20171214 03:30:46.094" starttime="20171214 03:30:45.461"></status>
</kw>
<kw name="Power On" library="RobotWS">
<doc>control powerbreaker to power on a outlet</doc>
<arguments>
<arg>${BTS_POWERBREAK_PORT[0]}</arg>
</arguments>
<msg timestamp="20171214 03:30:46.109" level="INFO">[facom.py@113] Connect to Facom succeed !</msg>
<msg timestamp="20171214 03:30:46.113" level="INFO">[base.py@28] trial power on for 0 times</msg>
<msg timestamp="20171214 03:30:46.190" level="INFO">[facom.py@75] Power on port 1 succeed!</msg>
<status status="PASS" endtime="20171214 03:30:46.190" starttime="20171214 03:30:46.095"></status>
</kw>
<kw name="Wait Until Units Startup" library="RobotWS">
<doc>This keyword tests the reachability of given unit/units.</doc>
<arguments>
<arg>300</arg>
<arg>${BTS_FCM}</arg>
</arguments>
<msg timestamp="20171214 03:32:44.958" level="INFO">[ping_control.py@145] ping 192.168.255.1 OK!</msg>
<status status="PASS" endtime="20171214 03:32:54.959" starttime="20171214 03:30:46.190"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Save IM Log</arg>
</arguments>
<kw name="Save IM Log" library="OM_resources_new">
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171214 03:32:54.960" level="INFO">${time} = 20171214033254</msg>
<status status="PASS" endtime="20171214 03:32:54.960" starttime="20171214 03:32:54.960"></status>
</kw>
<kw name="Save Infomodel Log" library="RobotWS">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}infomodel_${time}</arg>
</arguments>
<msg timestamp="20171214 03:32:54.962" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20171214 03:32:54.962" starttime="20171214 03:32:54.961"></status>
</kw>
<status status="FAIL" endtime="20171214 03:32:54.962" starttime="20171214 03:32:54.960"></status>
</kw>
<status status="PASS" endtime="20171214 03:32:54.962" starttime="20171214 03:32:54.959"></status>
</kw>
<kw name="Check Bts Until Onair" library="RobotWS">
<doc>check bts until all cell is onair with infomodel, and have PBCH in udp log.</doc>
<arguments>
<arg>onair_check_msg=['']</arg>
</arguments>
<msg timestamp="20171214 03:35:45.007" level="INFO">Exit code: 1</msg>
<msg timestamp="20171214 03:35:45.007" level="INFO">STDOUT
</msg>
<msg timestamp="20171214 03:35:45.007" level="INFO">STDERR
Started InfoModel server PYRO:TA_infomodel_server@localhost:39306
</msg>
<msg timestamp="20171214 03:32:55.274" level="INFO">[file_common.py@209] Directory "D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck" already exists, no need to create it again.</msg>
<msg timestamp="20171214 03:33:04.418" level="INFO">[infomodel_control.py@159] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None</msg>
<msg timestamp="20171214 03:33:06.532" level="INFO">[infomodel_control.py@163] start infomodel succeed .</msg>
<msg timestamp="20171214 03:33:06.540" level="INFO">[infomodel_control.py@165] start infomodel logger succeed .</msg>
<msg timestamp="20171214 03:33:06.544" level="INFO">[enb_resource.py@158] The current check mode is INFOMODEL</msg>
<msg timestamp="20171214 03:33:07.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:33:08.740" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:09.806" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:10.823" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:21.854" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:33:22.888" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:23.932" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:24.955" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:35.998" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:33:37.030" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:38.053" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:39.100" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:50.117" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:33:51.160" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:52.180" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:33:53.218" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:04.249" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:34:05.288" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:06.330" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:07.361" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:18.385" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:34:19.419" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:20.454" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:21.483" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:32.524" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:34:33.552" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:34.574" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:35.606" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:46.640" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:34:47.670" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:48.704" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:34:49.729" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:00.773" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:35:01.788" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:02.813" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:03.829" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:14.855" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:35:15.871" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:16.901" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:17.922" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:28.978" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171214 03:35:29.991" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:31.331" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:32.428" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1748L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:42.475" level="INFO">[infomodel_control.py@329] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171214 03:35:43.526" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will try another way</msg>
<msg timestamp="20171214 03:35:43.593" level="INFO">[infomodel_control.py@329] query infomodel: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171214 03:35:44.626" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will sleep and try again</msg>
<msg timestamp="20171214 03:35:44.676" level="INFO">[infomodel_control.py@329] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171214 03:35:44.722" level="INFO">[infomodel_control.py@329] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20171214 03:35:44.726" level="INFO">[enb_resource.py@228] infomodel check every cell onair succeed !</msg>
<msg timestamp="20171214 03:35:44.729" level="INFO">[enb_resource.py@351] bts log check onair msg succeed !</msg>
<msg timestamp="20171214 03:35:44.742" level="INFO">[infomodel_control.py@216] save infomodel log to file: 'D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\im_20171214033544' succeed .</msg>
<msg timestamp="20171214 03:35:44.748" level="INFO">[infomodel_control.py@188] stop infomodel logger succeed .</msg>
<msg timestamp="20171214 03:35:45.011" level="INFO">[infomodel_control.py@200] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171214 03:35:45.016" starttime="20171214 03:32:54.963"></status>
</kw>
<kw name="Stop Bts Udp Log" library="RobotWS">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20171214 03:35:45.019" level="INFO">[btslog_control.py@173] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<status status="PASS" endtime="20171214 03:35:45.020" starttime="20171214 03:35:45.016"></status>
</kw>
<status status="PASS" endtime="20171214 03:35:45.020" starttime="20171214 03:30:31.319"></status>
</kw>
<status status="PASS" endtime="20171214 03:35:45.020" starttime="20171214 03:30:10.159"></status>
</kw>
<kw name="_BTS Block">
<doc>1.Check BTS Log</doc>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171214 03:35:45.024" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:35:46.080" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:35:46.282" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:35:46.285" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:35:47.341" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:35:47.573" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:35:47.576" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:35:48.632" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:35:48.815" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<status status="PASS" endtime="20171214 03:35:48.816" starttime="20171214 03:35:45.020"></status>
</kw>
<kw name="Start IM Log" library="OM_resources_new">
<kw name="Start Infomodel" library="RobotWS">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${IM_PORT}</arg>
</arguments>
<msg timestamp="20171214 03:35:55.926" level="INFO">[infomodel_control.py@159] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None</msg>
<msg timestamp="20171214 03:35:59.129" level="INFO">[infomodel_control.py@163] start infomodel succeed .</msg>
<msg timestamp="20171214 03:35:59.138" level="INFO">[infomodel_control.py@165] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20171214 03:35:59.138" starttime="20171214 03:35:48.817"></status>
</kw>
<status status="PASS" endtime="20171214 03:35:59.139" starttime="20171214 03:35:48.816"></status>
</kw>
<kw name="Start Bts Udp Log" library="RobotWS">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
</arguments>
<msg timestamp="20171214 03:35:59.613" level="INFO">[btslog_control.py@173] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20171214 03:35:59.617" level="INFO">[file_common.py@209] Directory "D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20171214 03:35:59.619" starttime="20171214 03:35:59.139"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20171214 03:35:59.628" starttime="20171214 03:35:59.627"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20171214 03:35:59.629" starttime="20171214 03:35:59.628"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171214 03:35:59.631" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\wcrt_log\\Test_Log_20171214022345\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\\LTE145-b_BTS_St...</msg>
<status status="PASS" endtime="20171214 03:35:59.631" starttime="20171214 03:35:59.629"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:35:59.632" starttime="20171214 03:35:59.632"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171214 03:37:05.955" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171214033559\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171214 03:37:05.956" starttime="20171214 03:35:59.633"></status>
</kw>
<timeout value="10 minutes"></timeout>
<status status="PASS" endtime="20171214 03:37:05.956" starttime="20171214 03:35:59.624"></status>
</kw>
<kw name="GUI SM HW Action" library="gui_resource">
<doc>this keyword is used for most HW operation,such as block,unblock,reset</doc>
<arguments>
<arg>BTS</arg>
<arg>${Empty}</arg>
<arg>Block</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>HWType=${HWType}</arg>
<arg>HWID=${HWID}</arg>
<arg>HWAction=${HWAction}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171214 03:37:05.958" level="INFO">${para_list} = [u'HWType=BTS', u'HWID=', u'HWAction=Block', u'LogPath=D:\\wcrt_log\\Test_Log_20171214022345\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\\LTE145-b_BTS_Startup_3_cell_BTS_bloc...</msg>
<status status="PASS" endtime="20171214 03:37:05.958" starttime="20171214 03:37:05.957"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}HW_Action</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171214 03:37:29.410" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\HW_Action is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\HW_Action ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
HWType="BTS"
HWID=""
HWAction="Block"
LogPath="D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171214033705\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171214 03:37:29.411" starttime="20171214 03:37:05.958"></status>
</kw>
<status status="PASS" endtime="20171214 03:37:29.411" starttime="20171214 03:37:05.957"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>2sec</arg>
</arguments>
<msg timestamp="20171214 03:37:31.411" level="INFO">Slept 2 seconds</msg>
<status status="PASS" endtime="20171214 03:37:31.411" starttime="20171214 03:37:29.411"></status>
</kw>
<kw name="GUI SM Alarm Oper" library="gui_resource">
<doc>this keyword provide check Active/History alarm in BTS SiteManager window</doc>
<arguments>
<arg>Check</arg>
<arg>Active</arg>
<arg>Severity=Critical;;FaultName=BTS blocked (0050);;Source=BTS: BS ${BTS_INFO.ID} / ${BTS_INFO.SYSTEM_MODEL_TYPE} 1;;Exist=Y</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>AlarmType=${AlarmType}</arg>
<arg>OperType=${OperType}</arg>
<arg>AlarmInfo=${AlarmInfo}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171214 03:37:31.417" level="INFO">${para_list} = [u'AlarmType=Active', u'OperType=Check', u'AlarmInfo=Severity=Critical;;FaultName=BTS blocked (0050);;Source=BTS: BS 1748 / ASIA 1;;Exist=Y', u'LogPath=D:\\wcrt_log\\Test_Log_20171214022345\\ev_logs\\...</msg>
<status status="PASS" endtime="20171214 03:37:31.417" starttime="20171214 03:37:31.412"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Alarm_Oper</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171214 03:37:43.802" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Alarm_Oper is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Alarm_Oper ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
AlarmType="Active"
OperType="Check"
AlarmInfo="Severity=Critical;;FaultName=BTS blocked (0050);;Source=BTS: BS 1748 / ASIA 1;;Exist=Y"
LogPath="D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171214033731\Report
&lt;QTP&gt; Start to run script...

Start to kill QTP process.
Finshed to kill QTP process.
QTP result is failed! 
&lt;QTP&gt; run Failed.
Start to kill QTP process.
Finshed to kill QTP process.</msg>
<msg timestamp="20171214 03:37:43.802" level="FAIL">com_error: (-2147023174, 'The RPC server is unavailable.', None, None)</msg>
<status status="FAIL" endtime="20171214 03:37:43.802" starttime="20171214 03:37:31.417"></status>
</kw>
<status status="FAIL" endtime="20171214 03:37:43.804" starttime="20171214 03:37:31.411"></status>
</kw>
<status status="FAIL" endtime="20171214 03:37:43.804" starttime="20171214 03:35:45.020"></status>
</kw>
<kw type="teardown" name="_Disconnect All connection">
<doc>1.Check BTS Log</doc>
<kw name="Stop Bts Udp Log" library="RobotWS">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20171214 03:37:43.807" starttime="20171214 03:37:43.805"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Save IM Log</arg>
</arguments>
<kw name="Save IM Log" library="OM_resources_new">
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171214 03:37:43.808" level="INFO">${time} = 20171214033743</msg>
<status status="PASS" endtime="20171214 03:37:43.808" starttime="20171214 03:37:43.808"></status>
</kw>
<kw name="Save Infomodel Log" library="RobotWS">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}infomodel_${time}</arg>
</arguments>
<msg timestamp="20171214 03:37:43.820" level="INFO">[infomodel_control.py@216] save infomodel log to file: 'D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\infomodel_20171214033743' succeed .</msg>
<status status="PASS" endtime="20171214 03:37:43.820" starttime="20171214 03:37:43.808"></status>
</kw>
<kw name="Stop Infomodel" library="RobotWS">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20171214 03:37:44.089" level="INFO">Exit code: 1</msg>
<msg timestamp="20171214 03:37:44.089" level="INFO">STDOUT
</msg>
<msg timestamp="20171214 03:37:44.089" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:40376
</msg>
<msg timestamp="20171214 03:37:43.827" level="INFO">[infomodel_control.py@188] stop infomodel logger succeed .</msg>
<msg timestamp="20171214 03:37:44.093" level="INFO">[infomodel_control.py@200] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171214 03:37:44.094" starttime="20171214 03:37:43.820"></status>
</kw>
<status status="PASS" endtime="20171214 03:37:44.094" starttime="20171214 03:37:43.808"></status>
</kw>
<status status="PASS" endtime="20171214 03:37:44.094" starttime="20171214 03:37:43.807"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Capture_OAM_LOG</arg>
</arguments>
<kw name="Capture OAM LOG" library="OM_resources_new">
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171214 03:37:44.095" level="INFO">${time} = 20171214033744</msg>
<status status="PASS" endtime="20171214 03:37:44.095" starttime="20171214 03:37:44.095"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>GUI SM Captuer Screen</arg>
</arguments>
<kw name="GUI SM Captuer Screen" library="gui_resource">
<doc>this keyword is used for capture the screen</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171214 03:37:44.097" level="INFO">${para_list} = [u'LogPath=D:\\wcrt_log\\Test_Log_20171214022345\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\\']</msg>
<status status="PASS" endtime="20171214 03:37:44.097" starttime="20171214 03:37:44.097"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}CaptureImage</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171214 03:37:56.178" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
LogPath="D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171214033744\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171214 03:37:56.178" starttime="20171214 03:37:44.097"></status>
</kw>
<status status="PASS" endtime="20171214 03:37:56.178" starttime="20171214 03:37:44.096"></status>
</kw>
<status status="PASS" endtime="20171214 03:37:56.178" starttime="20171214 03:37:44.095"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Capture Screen</arg>
</arguments>
<kw name="Capture Screen" library="OM_resources_new">
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171214 03:37:56.186" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:37:57.248" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:37:57.496" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\TD-LTE-TEST-PC\ROOT\CIMV2:Win32_Process.Handle="496"

Instance deletion successful.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:37:57.502" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:37:58.563" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:37:58.789" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\TD-LTE-TEST-PC\ROOT\CIMV2:Win32_Process.Handle="6976"

Instance deletion successful.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:37:58.795" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:37:59.858" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:38:00.101" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<status status="PASS" endtime="20171214 03:38:00.102" starttime="20171214 03:37:56.179"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20171214 03:38:00.107" starttime="20171214 03:38:00.106"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20171214 03:38:00.107" starttime="20171214 03:38:00.107"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171214 03:38:00.109" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\wcrt_log\\Test_Log_20171214022345\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\\LTE145-b_BTS_St...</msg>
<status status="PASS" endtime="20171214 03:38:00.109" starttime="20171214 03:38:00.107"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:38:00.109" starttime="20171214 03:38:00.109"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171214 03:39:07.292" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171214033800\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171214 03:39:07.292" starttime="20171214 03:38:00.110"></status>
</kw>
<timeout value="10 minutes"></timeout>
<status status="PASS" endtime="20171214 03:39:07.292" starttime="20171214 03:38:00.106"></status>
</kw>
<kw name="GUI SM Captuer Screen" library="gui_resource">
<doc>this keyword is used for capture the screen</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171214 03:39:07.294" level="INFO">${para_list} = [u'LogPath=D:\\wcrt_log\\Test_Log_20171214022345\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\\']</msg>
<status status="PASS" endtime="20171214 03:39:07.294" starttime="20171214 03:39:07.293"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}CaptureImage</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171214 03:39:18.069" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
LogPath="D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171214033907\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171214 03:39:18.070" starttime="20171214 03:39:07.294"></status>
</kw>
<status status="PASS" endtime="20171214 03:39:18.070" starttime="20171214 03:39:07.292"></status>
</kw>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171214 03:39:18.076" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:39:19.139" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:39:19.341" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\TD-LTE-TEST-PC\ROOT\CIMV2:Win32_Process.Handle="5488"

Instance deletion successful.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:39:19.347" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:39:20.408" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:39:20.620" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\TD-LTE-TEST-PC\ROOT\CIMV2:Win32_Process.Handle="4920"

Instance deletion successful.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:39:20.626" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:39:21.688" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:39:21.879" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<status status="PASS" endtime="20171214 03:39:21.880" starttime="20171214 03:39:18.070"></status>
</kw>
<status status="PASS" endtime="20171214 03:39:21.880" starttime="20171214 03:37:56.179"></status>
</kw>
<status status="PASS" endtime="20171214 03:39:21.880" starttime="20171214 03:37:56.179"></status>
</kw>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171214 03:39:21.885" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:39:22.944" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:39:23.137" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:39:23.142" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:39:24.201" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:39:24.394" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:39:24.399" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:39:25.458" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:39:25.649" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<status status="PASS" endtime="20171214 03:39:25.650" starttime="20171214 03:39:21.881"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Semcli Save Snapshot</arg>
</arguments>
<status status="PASS" endtime="20171214 03:39:25.651" starttime="20171214 03:39:25.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>GUI SM Login</arg>
</arguments>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20171214 03:39:25.656" starttime="20171214 03:39:25.656"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20171214 03:39:25.657" starttime="20171214 03:39:25.656"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171214 03:39:25.658" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\wcrt_log\\Test_Log_20171214022345\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\\LTE145-b_BTS_St...</msg>
<status status="PASS" endtime="20171214 03:39:25.658" starttime="20171214 03:39:25.657"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:39:25.658" starttime="20171214 03:39:25.658"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171214 03:40:25.971" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171214033925\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171214 03:40:25.972" starttime="20171214 03:39:25.659"></status>
</kw>
<timeout value="10 minutes"></timeout>
<status status="PASS" endtime="20171214 03:40:25.972" starttime="20171214 03:39:25.655"></status>
</kw>
<status status="PASS" endtime="20171214 03:40:25.972" starttime="20171214 03:39:25.651"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>GUI SM Save Snapshot</arg>
</arguments>
<kw name="GUI SM Save Snapshot" library="gui_resource">
<doc>this keyword is use to save snapshot in Site Manager</doc>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>DetailLevel=${DetailLevel}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>PathFile=${PathFile}</arg>
<arg>SaveParitialExist=${SaveParitialExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171214 03:40:25.974" level="INFO">${para_list} = [u'DetailLevel=3', u'LogPath=D:\\wcrt_log\\Test_Log_20171214022345\\ev_logs\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\\', u'PathFile=N',...</msg>
<status status="PASS" endtime="20171214 03:40:25.974" starttime="20171214 03:40:25.973"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}SaveSnapshot</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:40:25.974" starttime="20171214 03:40:25.974"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}SaveSnapshot</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171214 03:41:58.187" level="INFO">&lt;QTP&gt; Test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\SaveSnapshot is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\SaveSnapshot ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

C:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
DetailLevel="3"
LogPath="D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\"
PathFile="N"
SaveParitialExist="N"
&lt;QTP&gt; Save log to D:\wcrt_log\Test_Log_20171214022345\ev_logs\LTE145-b_BTS_Startup_3_cell_BTS_blockunblock_20171214032820\LTE145-b_BTS_Startup_3_cell_BTS_blockunblck\GUILog\qtp_log20171214034025\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171214 03:41:58.188" starttime="20171214 03:40:25.975"></status>
</kw>
<status status="PASS" endtime="20171214 03:41:58.188" starttime="20171214 03:40:25.973"></status>
</kw>
<status status="PASS" endtime="20171214 03:41:58.188" starttime="20171214 03:40:25.972"></status>
</kw>
<kw name="Stop Bts Udp Log" library="RobotWS">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20171214 03:41:58.193" level="INFO">[btslog_control.py@173] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<status status="PASS" endtime="20171214 03:41:58.193" starttime="20171214 03:41:58.188"></status>
</kw>
<status status="PASS" endtime="20171214 03:41:58.193" starttime="20171214 03:37:44.094"></status>
</kw>
<status status="PASS" endtime="20171214 03:41:58.193" starttime="20171214 03:37:44.094"></status>
</kw>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171214 03:41:58.197" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:41:59.254" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:41:59.476" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\TD-LTE-TEST-PC\ROOT\CIMV2:Win32_Process.Handle="6392"

Instance deletion successful.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:41:59.479" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:42:00.536" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:42:00.820" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\TD-LTE-TEST-PC\ROOT\CIMV2:Win32_Process.Handle="1304"

Instance deletion successful.


C:\Users\Administrator&gt;</msg>
<msg timestamp="20171214 03:42:00.824" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.54:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0555D508&gt;</msg>
<msg timestamp="20171214 03:42:01.880" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171214 03:42:02.065" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\Administrator&gt;</msg>
<status status="PASS" endtime="20171214 03:42:02.066" starttime="20171214 03:41:58.194"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="RobotWS">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171214 03:42:02.068" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171214 03:42:02.068" starttime="20171214 03:42:02.067"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:42:02.069" starttime="20171214 03:42:02.069"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.069" starttime="20171214 03:42:02.068"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.069" starttime="20171214 03:42:02.068"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20171214 03:42:02.071" starttime="20171214 03:42:02.070"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.071" starttime="20171214 03:42:02.070"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.071" starttime="20171214 03:42:02.069"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20171214 03:42:02.072" starttime="20171214 03:42:02.072"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.072" starttime="20171214 03:42:02.071"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.072" starttime="20171214 03:42:02.071"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If Test Failed</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20171214 03:42:02.073" starttime="20171214 03:42:02.073"></status>
</kw>
<kw name="Set Shell Timeout" library="RobotWS">
<doc>This keyword sets the new connection timeout.</doc>
<arguments>
<arg>600</arg>
</arguments>
<assign>
<var>${old_timeout}</var>
</assign>
<msg timestamp="20171214 03:42:02.073" level="INFO">${old_timeout} = 30 seconds</msg>
<status status="PASS" endtime="20171214 03:42:02.073" starttime="20171214 03:42:02.073"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>cd "/opt/Nokia/Managers/BTS Site/BTS Site Manager"; ./BTSSiteManager.sh -ne 192.168.255.129 -pw Nemuadmin:nemuuser -savesnapshot -snapshotfilename "${SAVE LOG DIRECTORY}/final_snapshot.zip" -logcoverage all</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>cd "/opt/Nokia/Managers/BTS Site/BTS Site Manager"; ./BTSSiteManager.sh -ne 192.168.255.129 -pw Nemuadmin:nemuuser -savesnapshot -snapshotfilename "${SAVE LOG DIRECTORY}/final_snapshot.zip" -logcoverage all</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>cd "/opt/Nokia/Managers/BTS Site/BTS Site Manager"; ./BTSSiteManager.sh -ne 192.168.255.129 -pw Nemuadmin:nemuuser -savesnapshot -snapshotfilename "${SAVE LOG DIRECTORY}/final_snapshot.zip" -logcoverage all</arg>
</arguments>
<status status="PASS" endtime="20171214 03:42:02.075" starttime="20171214 03:42:02.074"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.075" starttime="20171214 03:42:02.074"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.075" starttime="20171214 03:42:02.074"></status>
</kw>
<kw name="Set Shell Timeout" library="RobotWS">
<doc>This keyword sets the new connection timeout.</doc>
<arguments>
<arg>${old_timeout}</arg>
</arguments>
<status status="PASS" endtime="20171214 03:42:02.075" starttime="20171214 03:42:02.075"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Disconnect All Hosts</arg>
</arguments>
<status status="PASS" endtime="20171214 03:42:02.076" starttime="20171214 03:42:02.076"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.076" starttime="20171214 03:42:02.067"></status>
</kw>
<status status="PASS" endtime="20171214 03:42:02.076" starttime="20171214 03:37:43.804"></status>
</kw>
<tags>
<tag>ASMI+CPRI Nokia</tag>
<tag>BSM</tag>
<tag>developer-yuan.cao@nsn.com</tag>
<tag>IV OAM1</tag>
<tag>Owner-huike.gao@nokia.com</tag>
<tag>QC_640815</tag>
</tags>
<status status="FAIL" endtime="20171214 03:42:02.076" critical="yes" starttime="20171214 03:30:10.159">com_error: (-2147023174, 'The RPC server is unavailable.', None, None)</status>
</test>
<doc>The purpose of this test case is to check that repeated BTS block &amp; unblock and recovers back to the normal operation state.</doc>
<status status="FAIL" endtime="20171214 03:42:02.096" starttime="20171214 03:28:18.834"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">ASMI+CPRI Nokia</stat>
<stat fail="1" pass="0">BSM</stat>
<stat fail="1" pass="0">developer-yuan.cao@nsn.com</stat>
<stat fail="1" pass="0">IV OAM1</stat>
<stat fail="1" pass="0">Owner-huike.gao@nokia.com</stat>
<stat fail="1" pass="0">QC_640815</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="TA" pass="0">TA</stat>
</suite>
</statistics>
<errors>
</errors>
</robot>
