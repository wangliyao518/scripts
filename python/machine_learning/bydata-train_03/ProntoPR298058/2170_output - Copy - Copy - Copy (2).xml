<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171212 14:27:42.404" generator="Robot 3.0 (Python 2.7.11 on win32)">
<suite source="D:\TestCase\Trunk_CRT\CRT\Common + Common\FM\LTE2313-T-u_01_01 Fault_418_EFaultId_OseFatalErr\LTE2313-T-u_01_01 Fault_418_EFaultId_OseFatalErr.html" id="s1" name="LTE2313-T-u 01 01 Fault 418 EFaultId OseFatalErr">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as d:\test\log//logs//</doc>
<msg timestamp="20171212 14:27:43.572" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171212 14:27:43.572" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:27:43.607" level="TRACE">Return: b'20171212142743'</msg>
<msg timestamp="20171212 14:27:43.607" level="INFO">${timestamp} = 20171212142743</msg>
<status status="PASS" endtime="20171212 14:27:43.607" starttime="20171212 14:27:43.572"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20171212 14:27:43.608" level="TRACE">Arguments: [ 'LTE2313-T-u 01 01 Fault 418 EFaultId OseFatalErr' | '\\s+$' | b'' ]</msg>
<msg timestamp="20171212 14:27:43.609" level="TRACE">Return: 'LTE2313-T-u 01 01 Fault 418 EFaultId OseFatalErr'</msg>
<msg timestamp="20171212 14:27:43.609" level="INFO">${FILE_NAME} = LTE2313-T-u 01 01 Fault 418 EFaultId OseFatalErr</msg>
<status status="PASS" endtime="20171212 14:27:43.609" starttime="20171212 14:27:43.608"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171212 14:27:43.610" level="TRACE">Arguments: [ 'SEPARATOR=\\' | 'd:\\test\\log' | 'ev_logs' | 'LTE2313-T-u 01 01 Fault 418 EFaultId OseFatalErr_20171212142743' ]</msg>
<msg timestamp="20171212 14:27:43.610" level="TRACE">Return: 'd:\\test\\log\\ev_logs\\LTE2313-T-u 01 01 Fault 418 EFaultId OseFatalErr_20171212142743'</msg>
<msg timestamp="20171212 14:27:43.610" level="INFO">${SUITE_LOG_DIRECTORY} = d:\test\log\ev_logs\LTE2313-T-u 01 01 Fault 418 EFaultId OseFatalErr_20171212142743</msg>
<status status="PASS" endtime="20171212 14:27:43.610" starttime="20171212 14:27:43.609"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171212 14:27:43.611" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u 01 01 Fault 418 EFaultId OseFatalErr_20171212142743' | b' ' | '_' ]</msg>
<msg timestamp="20171212 14:27:43.611" level="TRACE">Return: 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743'</msg>
<msg timestamp="20171212 14:27:43.611" level="INFO">${SUITE_LOG_DIRECTORY} = d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743</msg>
<status status="PASS" endtime="20171212 14:27:43.611" starttime="20171212 14:27:43.610"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171212 14:27:43.612" level="TRACE">Arguments: [ '${SUITE_LOG_DIRECTORY}' ]</msg>
<msg timestamp="20171212 14:27:43.612" level="INFO">${SUITE_LOG_DIRECTORY} = d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743</msg>
<msg timestamp="20171212 14:27:43.612" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:43.613" starttime="20171212 14:27:43.612"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171212 14:27:43.613" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743' ]</msg>
<msg timestamp="20171212 14:27:43.614" html="yes" level="INFO">Created directory '&lt;a href="file://d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743"&gt;d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743&lt;/a&gt;'.</msg>
<msg timestamp="20171212 14:27:43.614" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:43.614" starttime="20171212 14:27:43.613"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171212 14:27:43.614" level="TRACE">Arguments: [ 'save log dir:d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743' ]</msg>
<msg timestamp="20171212 14:27:43.615" level="INFO">save log dir:d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743</msg>
<msg timestamp="20171212 14:27:43.615" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:43.615" starttime="20171212 14:27:43.614"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20171212 14:27:43.616" level="TRACE">Arguments: [ '${snapshot_flag}' | '0' ]</msg>
<msg timestamp="20171212 14:27:43.619" level="INFO">${snapshot_flag} = 0</msg>
<msg timestamp="20171212 14:27:43.619" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:43.619" starttime="20171212 14:27:43.616"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<msg timestamp="20171212 14:27:43.629" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<msg timestamp="20171212 14:27:43.629" level="TRACE">Arguments: [ 'variable should exist' | '${TEST LOG DIR}' ]</msg>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20171212 14:27:43.630" level="TRACE">Arguments: [ '${TEST LOG DIR}' ]</msg>
<msg timestamp="20171212 14:27:43.634" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<msg timestamp="20171212 14:27:43.634" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20171212 14:27:43.635" starttime="20171212 14:27:43.630"></status>
</kw>
<msg timestamp="20171212 14:27:43.635" level="TRACE">Return: (b'FAIL', 'Variable ${TEST LOG DIR} does not exist.')</msg>
<msg timestamp="20171212 14:27:43.635" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20171212 14:27:43.635" starttime="20171212 14:27:43.629"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<msg timestamp="20171212 14:27:43.636" level="TRACE">Arguments: [ 'variable should exist' | '${SUITE LOG DIRECTORY}' ]</msg>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<msg timestamp="20171212 14:27:43.636" level="TRACE">Arguments: [ '${SUITE LOG DIRECTORY}' ]</msg>
<msg timestamp="20171212 14:27:43.637" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:43.637" starttime="20171212 14:27:43.636"></status>
</kw>
<msg timestamp="20171212 14:27:43.637" level="TRACE">Return: (b'PASS', None)</msg>
<msg timestamp="20171212 14:27:43.637" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171212 14:27:43.637" starttime="20171212 14:27:43.635"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20171212 14:27:43.638" level="TRACE">Arguments: [ "'PASS'=='FAIL'" | '${TEST LOG DIR}' | "'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'" | '${SUITE LOG DIRECTORY}' | "'FAIL'=='${suite_dir_exist[0]}'" | '${OUTPUT_DIR}' ]</msg>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<msg timestamp="20171212 14:27:43.641" level="TRACE">Arguments: [ "'FAIL'=='FAIL' and 'PASS'=='PASS'" | '${SUITE LOG DIRECTORY}' | "'FAIL'=='${suite_dir_exist[0]}'" | '${OUTPUT_DIR}' ]</msg>
<msg timestamp="20171212 14:27:43.643" level="TRACE">Return: 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743'</msg>
<status status="PASS" endtime="20171212 14:27:43.643" starttime="20171212 14:27:43.640"></status>
</kw>
<msg timestamp="20171212 14:27:43.643" level="TRACE">Return: 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743'</msg>
<msg timestamp="20171212 14:27:43.643" level="INFO">${log dir} = d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743</msg>
<status status="PASS" endtime="20171212 14:27:43.644" starttime="20171212 14:27:43.638"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171212 14:27:43.644" level="TRACE">Arguments: [ '${SAVE LOG DIRECTORY}' | '${log dir}' ]</msg>
<msg timestamp="20171212 14:27:43.646" level="INFO">${SAVE LOG DIRECTORY} = d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743</msg>
<msg timestamp="20171212 14:27:43.647" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:43.647" starttime="20171212 14:27:43.644"></status>
</kw>
<msg timestamp="20171212 14:27:43.647" level="TRACE">Return: 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743'</msg>
<status status="PASS" endtime="20171212 14:27:43.647" starttime="20171212 14:27:43.628"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<msg timestamp="20171212 14:27:43.648" level="TRACE">Arguments: [ 'Make Sure FCT Ping Ok' ]</msg>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<msg timestamp="20171212 14:27:43.648" level="TRACE">Arguments: [  ]</msg>
<kw name="Ping Should Ok" library="RobotWS">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20171212 14:27:43.649" level="TRACE">Arguments: [ b'192.168.255.1' ]</msg>
<msg timestamp="20171212 14:27:46.675" level="TRACE">Return: True</msg>
<msg timestamp="20171212 14:27:46.675" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171212 14:27:46.675" starttime="20171212 14:27:43.649"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<msg timestamp="20171212 14:27:46.676" level="TRACE">Arguments: [ True | 'Wait Until Units Startup' | '300' | '${FTM_IP}' ]</msg>
<msg timestamp="20171212 14:27:46.676" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:46.676" starttime="20171212 14:27:46.676"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<msg timestamp="20171212 14:27:46.677" level="TRACE">Arguments: [ True | 'Btscli Disable Bts Port Security' ]</msg>
<msg timestamp="20171212 14:27:46.677" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:46.677" starttime="20171212 14:27:46.677"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<msg timestamp="20171212 14:27:46.678" level="TRACE">Arguments: [ True | 'Wait Until Units Startup' | '60' | '${FCMD_IP}' ]</msg>
<msg timestamp="20171212 14:27:46.678" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:46.678" starttime="20171212 14:27:46.678"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<msg timestamp="20171212 14:27:46.679" level="TRACE">Arguments: [ 'Wait Until Keyword Succeeds' | '5min' | '5s' | '_make sure fctb connect ok' ]</msg>
<msg timestamp="20171212 14:27:46.679" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:46.679" starttime="20171212 14:27:46.678"></status>
</kw>
<msg timestamp="20171212 14:27:46.679" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:27:46.679" starttime="20171212 14:27:43.648"></status>
</kw>
<msg timestamp="20171212 14:27:46.680" level="TRACE">Return: (b'PASS', None)</msg>
<status status="PASS" endtime="20171212 14:27:46.680" starttime="20171212 14:27:43.648"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<msg timestamp="20171212 14:27:46.680" level="TRACE">Arguments: [ 'get_enb_infomation' ]</msg>
<kw name="Get Enb Infomation" library="RobotWS">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20171212 14:27:46.681" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:27:49.949" level="DEBUG">Adding ssh-rsa host key for 192.168.255.1: 85e067deffe7ed0ff1653d51bef90770</msg>
<msg timestamp="20171212 14:27:50.067" level="DEBUG">[chan 0] Max packet in: 32768 bytes</msg>
<msg timestamp="20171212 14:28:00.507" level="DEBUG">Adding ssh-rsa host key for 192.168.255.1: 85e067deffe7ed0ff1653d51bef90770</msg>
<msg timestamp="20171212 14:28:00.621" level="DEBUG">[chan 0] Max packet in: 32768 bytes</msg>
<msg timestamp="20171212 14:28:11.071" level="DEBUG">Adding ssh-rsa host key for 192.168.255.1: 85e067deffe7ed0ff1653d51bef90770</msg>
<msg timestamp="20171212 14:28:11.185" level="DEBUG">[chan 0] Max packet in: 32768 bytes</msg>
<msg timestamp="20171212 14:28:21.622" level="DEBUG">Attempting password auth...</msg>
<msg timestamp="20171212 14:28:21.685" level="DEBUG">[chan 0] Max packet in: 32768 bytes</msg>
<msg timestamp="20171212 14:28:21.903" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171212 14:28:21.911" level="DEBUG">[chan 0] lstat('/ram/SiteConf.xml')</msg>
<msg timestamp="20171212 14:28:21.912" level="DEBUG">[chan 0] lstat('/ram/SiteConf.xml')</msg>
<msg timestamp="20171212 14:28:21.916" level="DEBUG">[chan 0] stat('/ram/SiteConf.xml')</msg>
<msg timestamp="20171212 14:28:21.917" level="DEBUG">[chan 0] open('/ram/SiteConf.xml', 'rb')</msg>
<msg timestamp="20171212 14:28:21.918" level="DEBUG">[chan 0] open('/ram/SiteConf.xml', 'rb') -&gt; 00000000</msg>
<msg timestamp="20171212 14:28:21.918" level="DEBUG">[chan 0] stat('/ram/SiteConf.xml')</msg>
<msg timestamp="20171212 14:28:21.933" level="DEBUG">[chan 0] close(00000000)</msg>
<msg timestamp="20171212 14:28:21.937" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171212 14:28:21.937" level="DEBUG">[chan 0] EOF sent (0)</msg>
<msg timestamp="20171212 14:28:22.151" level="DEBUG">Adding ssh-rsa host key for 192.168.255.1: 85e067deffe7ed0ff1653d51bef90770</msg>
<msg timestamp="20171212 14:28:22.265" level="DEBUG">[chan 0] Max packet in: 32768 bytes</msg>
<msg timestamp="20171212 14:28:32.710" level="DEBUG">Attempting password auth...</msg>
<msg timestamp="20171212 14:28:32.773" level="DEBUG">[chan 0] Max packet in: 32768 bytes</msg>
<msg timestamp="20171212 14:28:33.000" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171212 14:28:33.006" level="DEBUG">[chan 0] lstat('/ffs/fs2/FileDirectory.xml')</msg>
<msg timestamp="20171212 14:28:33.007" level="DEBUG">[chan 0] lstat('/ffs/fs2/FileDirectory.xml')</msg>
<msg timestamp="20171212 14:28:33.012" level="DEBUG">[chan 0] stat('/ffs/fs2/FileDirectory.xml')</msg>
<msg timestamp="20171212 14:28:33.023" level="DEBUG">[chan 0] open('/ffs/fs2/FileDirectory.xml', 'rb')</msg>
<msg timestamp="20171212 14:28:33.024" level="DEBUG">[chan 0] open('/ffs/fs2/FileDirectory.xml', 'rb') -&gt; 00000000</msg>
<msg timestamp="20171212 14:28:33.025" level="DEBUG">[chan 0] stat('/ffs/fs2/FileDirectory.xml')</msg>
<msg timestamp="20171212 14:28:33.032" level="DEBUG">[chan 0] close(00000000)</msg>
<msg timestamp="20171212 14:28:33.035" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171212 14:28:33.036" level="DEBUG">[chan 0] EOF sent (0)</msg>
<msg timestamp="20171212 14:28:33.247" level="DEBUG">Attempting password auth...</msg>
<msg timestamp="20171212 14:28:33.310" level="DEBUG">[chan 0] Max packet in: 32768 bytes</msg>
<msg timestamp="20171212 14:28:33.520" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171212 14:28:33.526" level="DEBUG">[chan 0] lstat('/ffs/fs2/config/SCFC_13.xml')</msg>
<msg timestamp="20171212 14:28:33.527" level="DEBUG">[chan 0] lstat('/ffs/fs2/config/SCFC_13.xml')</msg>
<msg timestamp="20171212 14:28:33.531" level="DEBUG">[chan 0] stat('/ffs/fs2/config/SCFC_13.xml')</msg>
<msg timestamp="20171212 14:28:33.533" level="DEBUG">[chan 0] open('/ffs/fs2/config/SCFC_13.xml', 'rb')</msg>
<msg timestamp="20171212 14:28:33.534" level="DEBUG">[chan 0] open('/ffs/fs2/config/SCFC_13.xml', 'rb') -&gt; 00000000</msg>
<msg timestamp="20171212 14:28:33.534" level="DEBUG">[chan 0] stat('/ffs/fs2/config/SCFC_13.xml')</msg>
<msg timestamp="20171212 14:28:33.548" level="DEBUG">[chan 0] close(00000000)</msg>
<msg timestamp="20171212 14:28:33.552" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171212 14:28:33.552" level="DEBUG">[chan 0] EOF sent (0)</msg>
<msg timestamp="20171212 14:27:49.715" level="INFO">[ftm_control.py@287] pass this kw for PR exist</msg>
<msg timestamp="20171212 14:27:49.717" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171212 14:28:00.120" level="INFO">[ssh_common.py@198] Last login: Tue Dec 12 14:17:29 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20171212 14:28:00.123" level="DEBUG">[ssh_common.py@203] Select pattern '[\\;\[\.\-a-zA-Z0-9\s]+@.*[$&gt;#]{1}\s{0,1}$' as default pattern</msg>
<msg timestamp="20171212 14:28:00.127" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05A9AD00&gt;</msg>
<msg timestamp="20171212 14:28:00.180" level="DEBUG">[ssh_common.py@278]</msg>
<msg timestamp="20171212 14:28:00.182" level="INFO">[ssh_common.py@253] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171212 14:28:00.236" level="INFO">[ssh_common.py@309] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20171212 14:28:00.302" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05A9AD00&gt;</msg>
<msg timestamp="20171212 14:28:00.304" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171212 14:28:10.674" level="INFO">[ssh_common.py@198] Last login: Tue Dec 12 14:27:52 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20171212 14:28:10.677" level="DEBUG">[ssh_common.py@203] Select pattern '[\\;\[\.\-a-zA-Z0-9\s]+@.*[$&gt;#]{1}\s{0,1}$' as default pattern</msg>
<msg timestamp="20171212 14:28:10.680" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05ABC6E8&gt;</msg>
<msg timestamp="20171212 14:28:10.732" level="DEBUG">[ssh_common.py@278]</msg>
<msg timestamp="20171212 14:28:10.735" level="INFO">[ssh_common.py@253] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171212 14:28:10.789" level="INFO">[ssh_common.py@309] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_FSM4_9999_171211_019786.xml
root@fctj-4a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171212 14:28:10.855" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05ABC6E8&gt;</msg>
<msg timestamp="20171212 14:28:10.857" level="INFO">[enb_resource.py@1219] 
 ****Current BTS version is 'TL18_FSM4_9999_171211_019786' *****</msg>
<msg timestamp="20171212 14:28:10.860" level="INFO">[enb_resource.py@1249] activeBuildVersion=TL18_FSM4_9999_171211_019786</msg>
<msg timestamp="20171212 14:28:10.863" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171212 14:28:21.238" level="INFO">[ssh_common.py@198] Last login: Tue Dec 12 14:28:02 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20171212 14:28:21.240" level="DEBUG">[ssh_common.py@203] Select pattern '[\\;\[\.\-a-zA-Z0-9\s]+@.*[$&gt;#]{1}\s{0,1}$' as default pattern</msg>
<msg timestamp="20171212 14:28:21.243" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x059B5288&gt;</msg>
<msg timestamp="20171212 14:28:21.296" level="DEBUG">[ssh_common.py@278]</msg>
<msg timestamp="20171212 14:28:21.298" level="INFO">[ssh_common.py@253] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20171212 14:28:21.352" level="INFO">[ssh_common.py@309] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20171212 14:28:21.418" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x059B5288&gt;</msg>
<msg timestamp="20171212 14:28:21.422" level="DEBUG">[sftp_control.py@21] transport is ok, host:'192.168.255.1', port:'22'</msg>
<msg timestamp="20171212 14:28:21.907" level="INFO">[sftp_control.py@30] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171212 14:28:21.911" level="INFO">[sftp_control.py@166] /ram/SiteConf.xml</msg>
<msg timestamp="20171212 14:28:21.916" level="DEBUG">[sftp_control.py@40] sftp get file size '/ram/SiteConf.xml' is 232KB</msg>
<msg timestamp="20171212 14:28:21.937" level="INFO">[sftp_control.py@72] sftp download from '/ram/SiteConf.xml' to 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\SiteConf.xml' is ok. local file size is 232k</msg>
<msg timestamp="20171212 14:28:21.944" level="DEBUG">[sftp_control.py@158] sftp close is ok</msg>
<msg timestamp="20171212 14:28:21.946" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171212 14:28:32.318" level="INFO">[ssh_common.py@198] Last login: Tue Dec 12 14:28:23 CST 2017 from 192.168.255.126 on ssh
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20171212 14:28:32.321" level="DEBUG">[ssh_common.py@203] Select pattern '[\\;\[\.\-a-zA-Z0-9\s]+@.*[$&gt;#]{1}\s{0,1}$' as default pattern</msg>
<msg timestamp="20171212 14:28:32.324" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05A10558&gt;</msg>
<msg timestamp="20171212 14:28:32.377" level="DEBUG">[ssh_common.py@278]</msg>
<msg timestamp="20171212 14:28:32.379" level="INFO">[ssh_common.py@253] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171212 14:28:32.433" level="INFO">[ssh_common.py@309] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20171212 14:28:32.499" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05A10558&gt;</msg>
<msg timestamp="20171212 14:28:32.501" level="INFO">[enb_resource.py@481] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20171212 14:28:32.505" level="DEBUG">[sftp_control.py@21] transport is ok, host:'192.168.255.1', port:'22'</msg>
<msg timestamp="20171212 14:28:33.003" level="INFO">[sftp_control.py@30] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171212 14:28:33.006" level="INFO">[sftp_control.py@166] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20171212 14:28:33.012" level="DEBUG">[sftp_control.py@40] sftp get file size '/ffs/fs2/FileDirectory.xml' is 45KB</msg>
<msg timestamp="20171212 14:28:33.035" level="INFO">[sftp_control.py@72] sftp download from '/ffs/fs2/FileDirectory.xml' to 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\FileDirectory_20171212142821.xml' is ok. local file size is 45k</msg>
<msg timestamp="20171212 14:28:33.042" level="DEBUG">[sftp_control.py@158] sftp close is ok</msg>
<msg timestamp="20171212 14:28:33.047" level="DEBUG">[sftp_control.py@21] transport is ok, host:'192.168.255.1', port:'22'</msg>
<msg timestamp="20171212 14:28:33.523" level="INFO">[sftp_control.py@30] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171212 14:28:33.526" level="INFO">[sftp_control.py@166] /ffs/fs2/config/SCFC_13.xml</msg>
<msg timestamp="20171212 14:28:33.531" level="DEBUG">[sftp_control.py@40] sftp get file size '/ffs/fs2/config/SCFC_13.xml' is 205KB</msg>
<msg timestamp="20171212 14:28:33.552" level="INFO">[sftp_control.py@72] sftp download from '/ffs/fs2/config/SCFC_13.xml' to 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\SCFC_13.xml' is ok. local file size is 205k</msg>
<msg timestamp="20171212 14:28:33.558" level="DEBUG">[sftp_control.py@158] sftp close is ok</msg>
<msg timestamp="20171212 14:28:33.593" level="INFO">[enb_resource.py@1219] 
 ****Current bbu type is 'ASIA' *****</msg>
<msg timestamp="20171212 14:28:33.595" level="INFO">[enb_resource.py@1344] HW_BBU_TYPE=ASIA</msg>
<msg timestamp="20171212 14:28:33.598" level="INFO">[enb_resource.py@1219] 
 ****Current rru type is 'FZHA:FZHA:FZHA' *****</msg>
<msg timestamp="20171212 14:28:33.601" level="INFO">[enb_resource.py@1347] HW_RRU_TYPE=FZHA:FZHA:FZHA</msg>
<msg timestamp="20171212 14:28:33.603" level="INFO">[enb_resource.py@1219] 
 ****Current HW type is 'null' *****</msg>
<msg timestamp="20171212 14:28:33.606" level="INFO">[enb_resource.py@1350] BTS_HW_TYPE=null</msg>
<msg timestamp="20171212 14:29:30.495" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:30.495" starttime="20171212 14:27:46.681"></status>
</kw>
<msg timestamp="20171212 14:29:30.496" level="TRACE">Return: (b'PASS', None)</msg>
<status status="PASS" endtime="20171212 14:29:30.496" starttime="20171212 14:27:46.680"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>RobotWS</arg>
<arg>OperatingSystem</arg>
</arguments>
<msg timestamp="20171212 14:29:30.497" level="TRACE">Arguments: [ 'RobotWS' | 'OperatingSystem' ]</msg>
<msg timestamp="20171212 14:29:30.497" level="TRACE">Return: ()</msg>
<status status="PASS" endtime="20171212 14:29:30.497" starttime="20171212 14:29:30.496"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<msg timestamp="20171212 14:29:30.497" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Os Platform Version" library="RobotWS">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171212 14:29:30.498" level="TRACE">Arguments: [ with_connection=False ]</msg>
<msg timestamp="20171212 14:29:30.500" level="TRACE">Return: b'Windows-7-6.1.7601-SP1'</msg>
<msg timestamp="20171212 14:29:30.500" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171212 14:29:30.500" starttime="20171212 14:29:30.498"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20171212 14:29:30.501" level="TRACE">Arguments: [ '"Windows" in "Windows-7-6.1.7601-SP1"' | '${TELNET_PORT}' | '${SSH_PORT}' ]</msg>
<msg timestamp="20171212 14:29:30.503" level="TRACE">Return: 23</msg>
<msg timestamp="20171212 14:29:30.504" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20171212 14:29:30.504" starttime="20171212 14:29:30.501"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20171212 14:29:30.504" level="TRACE">Arguments: [ '"Windows" in "Windows-7-6.1.7601-SP1"' | 'TELNET' | 'SSH' ]</msg>
<msg timestamp="20171212 14:29:30.507" level="TRACE">Return: 'TELNET'</msg>
<msg timestamp="20171212 14:29:30.507" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20171212 14:29:30.507" starttime="20171212 14:29:30.504"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20171212 14:29:30.508" level="TRACE">Arguments: [ '"Windows" in "Windows-7-6.1.7601-SP1"' | '30' | '5' ]</msg>
<msg timestamp="20171212 14:29:30.510" level="TRACE">Return: '30'</msg>
<msg timestamp="20171212 14:29:30.510" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20171212 14:29:30.510" starttime="20171212 14:29:30.507"></status>
</kw>
<kw name="Connect To Host" library="RobotWS">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20171212 14:29:30.511" level="TRACE">Arguments: [ b'10.69.67.26' | port=23 | username=b'tdlte-tester' | password=b'btstest' | conn_type='TELNET' | timeout='30' ]</msg>
<msg timestamp="20171212 14:29:30.564" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:29:30</msg>
<msg timestamp="20171212 14:29:30.567" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:29:30 found ogin:</msg>
<msg timestamp="20171212 14:29:30.570" level="INFO">[telnet_common.py@298] Get Response: Welcome to Microsoft Telnet Service 

login:</msg>
<msg timestamp="20171212 14:29:30.572" level="INFO">[telnet_common.py@268] Execute command: tdlte-tester</msg>
<msg timestamp="20171212 14:29:30.624" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:29:30</msg>
<msg timestamp="20171212 14:29:30.627" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:29:30 found assword:</msg>
<msg timestamp="20171212 14:29:30.629" level="INFO">[telnet_common.py@298] Get Response:  tdlte-tester
password:</msg>
<msg timestamp="20171212 14:29:30.631" level="INFO">[telnet_common.py@268] Execute command: btstest</msg>
<msg timestamp="20171212 14:29:30.635" level="DEBUG">[telnet_common.py@216] not SUSE system</msg>
<msg timestamp="20171212 14:29:30.687" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:29:30</msg>
<msg timestamp="20171212 14:29:30.889" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:29:30 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:29:30.891" level="TRACE">[telnet_common.py@236] maybe this guy use default prompts, select the most similarly to set as default: '[CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$'</msg>
<msg timestamp="20171212 14:29:31.943" level="TRACE">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:29:31.945" level="INFO">[telnet_common.py@238]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:29:31.947" level="TRACE">Return: &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:29:31.948" level="INFO">${BTS_PC_CONNECTION} = 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<status status="PASS" endtime="20171212 14:29:31.948" starttime="20171212 14:29:30.511"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171212 14:29:31.948" level="TRACE">Arguments: [ '${BTS_PC_CONNECTION}' ]</msg>
<msg timestamp="20171212 14:29:31.949" level="INFO">${BTS_PC_CONNECTION} = 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:29:31.949" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:31.949" starttime="20171212 14:29:31.948"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20171212 14:29:31.950" level="TRACE">Arguments: [ '"Windows" in "Windows-7-6.1.7601-SP1"' | 'Execute Shell Command' | 'tlntadmn config timeoutactive\\=no' ]</msg>
<kw name="Execute Shell Command" library="RobotWS">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20171212 14:29:31.952" level="TRACE">Arguments: [ 'tlntadmn config timeoutactive=no' ]</msg>
<msg timestamp="20171212 14:29:31.956" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:29:33.009" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:29:33.012" level="INFO">[telnet_common.py@268] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20171212 14:29:33.065" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:29:33</msg>
<msg timestamp="20171212 14:29:33.124" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:29:33 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:29:33.127" level="INFO">[telnet_common.py@298] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:29:33.128" level="TRACE">Return: b'tlntadmn config timeoutactive=no\r\nThe settings were successfully updated.\n\r\nC:\\Users\\Administrator&gt;'</msg>
<status status="PASS" endtime="20171212 14:29:33.128" starttime="20171212 14:29:31.952"></status>
</kw>
<msg timestamp="20171212 14:29:33.128" level="TRACE">Return: b'tlntadmn config timeoutactive=no\r\nThe settings were successfully updated.\n\r\nC:\\Users\\Administrator&gt;'</msg>
<status status="PASS" endtime="20171212 14:29:33.129" starttime="20171212 14:29:31.949"></status>
</kw>
<msg timestamp="20171212 14:29:33.129" level="TRACE">Return: &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<status status="PASS" endtime="20171212 14:29:33.129" starttime="20171212 14:29:30.497"></status>
</kw>
<kw name="Switch Host Connection" library="RobotWS">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171212 14:29:33.130" level="TRACE">Arguments: [ &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt; ]</msg>
<msg timestamp="20171212 14:29:33.132" level="INFO">[connection_mgr.py@139] Switch to connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;.</msg>
<msg timestamp="20171212 14:29:33.132" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:33.132" starttime="20171212 14:29:33.129"></status>
</kw>
<msg timestamp="20171212 14:29:33.133" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:33.133" starttime="20171212 14:27:43.571"></status>
</kw>
<test id="s1-t1" name="LTE2313-T-u_01_01 Fault_418_EFaultId_OseFatalErr">
<kw type="setup" name="_Init Env">
<msg timestamp="20171212 14:29:33.134" level="TRACE">Arguments: [  ]</msg>
<kw name="Initial Test Connection" library="OM_resources_new">
<msg timestamp="20171212 14:29:33.135" level="TRACE">Arguments: [  ]</msg>
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as d:\test\log//ev_logs//d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743//</doc>
<msg timestamp="20171212 14:29:33.140" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171212 14:29:33.141" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:29:33.141" level="TRACE">Return: b'20171212142933'</msg>
<msg timestamp="20171212 14:29:33.141" level="INFO">${timestamp} = 20171212142933</msg>
<status status="PASS" endtime="20171212 14:29:33.142" starttime="20171212 14:29:33.140"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171212 14:29:33.143" level="TRACE">Arguments: [ 'SEPARATOR=\\' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743' | 'LTE2313-T-u_01_01 Fault_418_EFaultId_OseFatalErr' ]</msg>
<msg timestamp="20171212 14:29:33.143" level="TRACE">Return: 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01 Fault_418_EFaultId_OseFatalErr'</msg>
<msg timestamp="20171212 14:29:33.143" level="INFO">${TEST_LOG_DIR} = d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01 Fault_418_EFaultId_OseFatalErr</msg>
<status status="PASS" endtime="20171212 14:29:33.144" starttime="20171212 14:29:33.142"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171212 14:29:33.145" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01 Fault_418_EFaultId_OseFatalErr' | b' ' | '_' ]</msg>
<msg timestamp="20171212 14:29:33.145" level="TRACE">Return: 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr'</msg>
<msg timestamp="20171212 14:29:33.145" level="INFO">${TEST_LOG_DIR} = d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr</msg>
<status status="PASS" endtime="20171212 14:29:33.146" starttime="20171212 14:29:33.144"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171212 14:29:33.147" level="TRACE">Arguments: [ '${TEST_LOG_DIR}' ]</msg>
<msg timestamp="20171212 14:29:33.147" level="INFO">${TEST_LOG_DIR} = d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr</msg>
<msg timestamp="20171212 14:29:33.147" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:33.147" starttime="20171212 14:29:33.146"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171212 14:29:33.148" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' ]</msg>
<msg timestamp="20171212 14:29:33.148" html="yes" level="INFO">Created directory '&lt;a href="file://d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr"&gt;d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr&lt;/a&gt;'.</msg>
<msg timestamp="20171212 14:29:33.149" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:33.149" starttime="20171212 14:29:33.148"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171212 14:29:33.149" level="TRACE">Arguments: [ 'save log dir:d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' ]</msg>
<msg timestamp="20171212 14:29:33.150" level="INFO">save log dir:d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr</msg>
<msg timestamp="20171212 14:29:33.150" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:33.150" starttime="20171212 14:29:33.149"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<msg timestamp="20171212 14:29:33.151" level="TRACE">Arguments: [ True | 'Initial Connection With BTS PC' ]</msg>
<msg timestamp="20171212 14:29:33.151" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:33.151" starttime="20171212 14:29:33.150"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<msg timestamp="20171212 14:29:33.152" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<msg timestamp="20171212 14:29:33.153" level="TRACE">Arguments: [ 'variable should exist' | '${TEST LOG DIR}' ]</msg>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20171212 14:29:33.154" level="TRACE">Arguments: [ '${TEST LOG DIR}' ]</msg>
<msg timestamp="20171212 14:29:33.154" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:33.154" starttime="20171212 14:29:33.153"></status>
</kw>
<msg timestamp="20171212 14:29:33.155" level="TRACE">Return: (b'PASS', None)</msg>
<msg timestamp="20171212 14:29:33.155" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171212 14:29:33.155" starttime="20171212 14:29:33.152"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<msg timestamp="20171212 14:29:33.156" level="TRACE">Arguments: [ 'variable should exist' | '${SUITE LOG DIRECTORY}' ]</msg>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<msg timestamp="20171212 14:29:33.156" level="TRACE">Arguments: [ '${SUITE LOG DIRECTORY}' ]</msg>
<msg timestamp="20171212 14:29:33.157" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:33.157" starttime="20171212 14:29:33.156"></status>
</kw>
<msg timestamp="20171212 14:29:33.157" level="TRACE">Return: (b'PASS', None)</msg>
<msg timestamp="20171212 14:29:33.157" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171212 14:29:33.157" starttime="20171212 14:29:33.156"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20171212 14:29:33.158" level="TRACE">Arguments: [ "'PASS'=='PASS'" | '${TEST LOG DIR}' | "'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'" | '${SUITE LOG DIRECTORY}' | "'FAIL'=='${suite_dir_exist[0]}'" | '${OUTPUT_DIR}' ]</msg>
<msg timestamp="20171212 14:29:33.161" level="TRACE">Return: 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr'</msg>
<msg timestamp="20171212 14:29:33.161" level="INFO">${log dir} = d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr</msg>
<status status="PASS" endtime="20171212 14:29:33.161" starttime="20171212 14:29:33.158"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171212 14:29:33.162" level="TRACE">Arguments: [ '${SAVE LOG DIRECTORY}' | '${log dir}' ]</msg>
<msg timestamp="20171212 14:29:33.162" level="INFO">${SAVE LOG DIRECTORY} = d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr</msg>
<msg timestamp="20171212 14:29:33.162" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:33.162" starttime="20171212 14:29:33.161"></status>
</kw>
<msg timestamp="20171212 14:29:33.162" level="TRACE">Return: 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr'</msg>
<status status="PASS" endtime="20171212 14:29:33.163" starttime="20171212 14:29:33.152"></status>
</kw>
<msg timestamp="20171212 14:29:33.163" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:33.163" starttime="20171212 14:29:33.139"></status>
</kw>
<kw name="Recover Active Version If NOT Matched" library="OM_resources_new">
<msg timestamp="20171212 14:29:33.164" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Check Active Version Is Not Correct</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<msg timestamp="20171212 14:29:33.164" level="TRACE">Arguments: [ 'Check Active Version Is Not Correct' ]</msg>
<kw name="Check Active Version Is Not Correct" library="OM_resources_new">
<msg timestamp="20171212 14:29:33.165" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Active Bts Sw Version" library="RobotWS">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${active_build}</var>
</assign>
<msg timestamp="20171212 14:29:33.165" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:29:33.370" level="DEBUG">Adding ssh-rsa host key for 192.168.255.1: 85e067deffe7ed0ff1653d51bef90770</msg>
<msg timestamp="20171212 14:29:33.484" level="DEBUG">[chan 0] Max packet in: 32768 bytes</msg>
<msg timestamp="20171212 14:29:43.935" level="DEBUG">Adding ssh-rsa host key for 192.168.255.1: 85e067deffe7ed0ff1653d51bef90770</msg>
<msg timestamp="20171212 14:29:44.048" level="DEBUG">[chan 0] Max packet in: 32768 bytes</msg>
<msg timestamp="20171212 14:29:33.170" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171212 14:29:43.538" level="INFO">[ssh_common.py@198] Last login: Tue Dec 12 14:28:35 CST 2017 from 192.168.255.126 on ssh
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20171212 14:29:43.542" level="DEBUG">[ssh_common.py@203] Select pattern '[\\;\[\.\-a-zA-Z0-9\s]+@.*[$&gt;#]{1}\s{0,1}$' as default pattern</msg>
<msg timestamp="20171212 14:29:43.546" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05C274B8&gt;</msg>
<msg timestamp="20171212 14:29:43.600" level="DEBUG">[ssh_common.py@278]</msg>
<msg timestamp="20171212 14:29:43.604" level="INFO">[ssh_common.py@253] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171212 14:29:43.658" level="INFO">[ssh_common.py@309] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20171212 14:29:43.728" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05C274B8&gt;</msg>
<msg timestamp="20171212 14:29:43.733" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20171212 14:29:54.102" level="INFO">[ssh_common.py@198] Last login: Tue Dec 12 14:29:35 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20171212 14:29:54.106" level="DEBUG">[ssh_common.py@203] Select pattern '[\\;\[\.\-a-zA-Z0-9\s]+@.*[$&gt;#]{1}\s{0,1}$' as default pattern</msg>
<msg timestamp="20171212 14:29:54.109" level="INFO">[connection_mgr.py@184] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05AAFAF8&gt;</msg>
<msg timestamp="20171212 14:29:54.163" level="DEBUG">[ssh_common.py@278]</msg>
<msg timestamp="20171212 14:29:54.166" level="INFO">[ssh_common.py@253] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171212 14:29:54.221" level="INFO">[ssh_common.py@309] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_FSM4_9999_171211_019786.xml
root@fctj-4a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171212 14:29:54.288" level="INFO">[ssh_common.py@136] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;RobotWS.CommonLib.connections.ssh_common.SshCommon instance at 0x05AAFAF8&gt;</msg>
<msg timestamp="20171212 14:29:54.290" level="TRACE">Return: b'TL18_FSM4_9999_171211_019786'</msg>
<msg timestamp="20171212 14:29:54.290" level="INFO">${active_build} = TL18_FSM4_9999_171211_019786</msg>
<status status="PASS" endtime="20171212 14:29:54.290" starttime="20171212 14:29:33.165"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${active_build}</arg>
<arg>TL\\w+_(\\w+)_\\d+_(\\d+_\\d+T?)</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${group1}</var>
<var>${group2}</var>
</assign>
<msg timestamp="20171212 14:29:54.291" level="TRACE">Arguments: [ b'TL18_FSM4_9999_171211_019786' | 'TL\\w+_(\\w+)_\\d+_(\\d+_\\d+T?)' ]</msg>
<msg timestamp="20171212 14:29:54.291" level="TRACE">Return: [b'TL18_FSM4_9999_171211_019786', b'FSM4', b'171211_019786']</msg>
<msg timestamp="20171212 14:29:54.292" level="INFO">${match} = TL18_FSM4_9999_171211_019786</msg>
<msg timestamp="20171212 14:29:54.292" level="INFO">${group1} = FSM4</msg>
<msg timestamp="20171212 14:29:54.292" level="INFO">${group2} = 171211_019786</msg>
<status status="PASS" endtime="20171212 14:29:54.292" starttime="20171212 14:29:54.290"></status>
</kw>
<kw name="Get BTS Version Info" library="OM_resources_new">
<doc>Get BTS Version Info From Local PC Fixed File Fold</doc>
<arguments>
<arg>${ENB3}</arg>
</arguments>
<msg timestamp="20171212 14:29:54.293" level="TRACE">Arguments: [ ${BTS_Version_Directory}='D:\\BTS_SW\\TA SW\\ENB3' | ${file_type}='*.zip' | ${split_begin}='ENB_' | ${split_end}='_release' ]</msg>
<kw name="List Files In Directory" library="OperatingSystem">
<doc>Wrapper for `List Directory` that returns only files.</doc>
<arguments>
<arg>${BTS_Version_Directory}</arg>
<arg>${file_type}</arg>
</arguments>
<assign>
<var>${List File}</var>
</assign>
<msg timestamp="20171212 14:29:54.293" level="TRACE">Arguments: [ 'D:\\BTS_SW\\TA SW\\ENB3' | '*.zip' ]</msg>
<msg timestamp="20171212 14:29:54.294" html="yes" level="INFO">Listing contents of directory '&lt;a href="file://D:\BTS_SW\TA SW\ENB3"&gt;D:\BTS_SW\TA SW\ENB3&lt;/a&gt;'.</msg>
<msg timestamp="20171212 14:29:54.294" level="INFO">1 file:
TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip</msg>
<msg timestamp="20171212 14:29:54.294" level="TRACE">Return: ['TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip']</msg>
<msg timestamp="20171212 14:29:54.294" level="INFO">${List File} = [u'TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip']</msg>
<status status="PASS" endtime="20171212 14:29:54.294" starttime="20171212 14:29:54.293"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${List File[0]}</arg>
</arguments>
<assign>
<var>${file_name}</var>
</assign>
<msg timestamp="20171212 14:29:54.295" level="TRACE">Arguments: [ 'TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip' ]</msg>
<msg timestamp="20171212 14:29:54.295" level="TRACE">Return: 'TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip'</msg>
<msg timestamp="20171212 14:29:54.296" level="INFO">${file_name} = TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip</msg>
<status status="PASS" endtime="20171212 14:29:54.296" starttime="20171212 14:29:54.295"></status>
</kw>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${file_name}</arg>
<arg>TL\\w+_(\\w+)_\\d+_(\\d+_\\d+)</arg>
</arguments>
<assign>
<var>${match}</var>
<var>${split_begin}</var>
<var>${group2}</var>
</assign>
<msg timestamp="20171212 14:29:54.296" level="TRACE">Arguments: [ 'TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip' | 'TL\\w+_(\\w+)_\\d+_(\\d+_\\d+)' ]</msg>
<msg timestamp="20171212 14:29:54.297" level="TRACE">Return: ['TL00_FSM4_9999_171211_019786', 'FSM4', '171211_019786']</msg>
<msg timestamp="20171212 14:29:54.297" level="INFO">${match} = TL00_FSM4_9999_171211_019786</msg>
<msg timestamp="20171212 14:29:54.297" level="INFO">${split_begin} = FSM4</msg>
<msg timestamp="20171212 14:29:54.297" level="INFO">${group2} = 171211_019786</msg>
<status status="PASS" endtime="20171212 14:29:54.297" starttime="20171212 14:29:54.296"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${group2}</arg>
</arguments>
<assign>
<var>${ENB_Version}</var>
</assign>
<msg timestamp="20171212 14:29:54.298" level="TRACE">Arguments: [ '171211_019786' ]</msg>
<msg timestamp="20171212 14:29:54.298" level="TRACE">Return: '171211_019786'</msg>
<msg timestamp="20171212 14:29:54.298" level="INFO">${ENB_Version} = 171211_019786</msg>
<status status="PASS" endtime="20171212 14:29:54.298" starttime="20171212 14:29:54.298"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${file_name}</arg>
</arguments>
<assign>
<var>${Convert File}</var>
</assign>
<msg timestamp="20171212 14:29:54.299" level="TRACE">Arguments: [ 'TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip' ]</msg>
<msg timestamp="20171212 14:29:54.299" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171212 14:29:54.299" level="TRACE">Return: 'TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip'</msg>
<msg timestamp="20171212 14:29:54.300" level="INFO">${Convert File} = TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip</msg>
<status status="PASS" endtime="20171212 14:29:54.300" starttime="20171212 14:29:54.299"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${Convert File}</arg>
<arg>${split_begin}_</arg>
</arguments>
<assign>
<var>${First Split File}</var>
</assign>
<msg timestamp="20171212 14:29:54.300" level="TRACE">Arguments: [ 'TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip' | 'FSM4_' ]</msg>
<msg timestamp="20171212 14:29:54.300" level="TRACE">Return: ['TL00_', '9999_171211_019786_release_BTSSM_downloadable.zip']</msg>
<msg timestamp="20171212 14:29:54.301" level="INFO">${First Split File} = [u'TL00_', u'9999_171211_019786_release_BTSSM_downloadable.zip']</msg>
<status status="PASS" endtime="20171212 14:29:54.301" starttime="20171212 14:29:54.300"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${First Split File[-1]}</arg>
<arg>${split_end}</arg>
</arguments>
<assign>
<var>${Second Split File}</var>
</assign>
<msg timestamp="20171212 14:29:54.302" level="TRACE">Arguments: [ '9999_171211_019786_release_BTSSM_downloadable.zip' | '_release' ]</msg>
<msg timestamp="20171212 14:29:54.302" level="TRACE">Return: ['9999_171211_019786', '_BTSSM_downloadable.zip']</msg>
<msg timestamp="20171212 14:29:54.302" level="INFO">${Second Split File} = [u'9999_171211_019786', u'_BTSSM_downloadable.zip']</msg>
<status status="PASS" endtime="20171212 14:29:54.302" starttime="20171212 14:29:54.301"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${Second Split File[0]}</arg>
</arguments>
<assign>
<var>${BTS_Version}</var>
</assign>
<msg timestamp="20171212 14:29:54.303" level="TRACE">Arguments: [ '9999_171211_019786' ]</msg>
<msg timestamp="20171212 14:29:54.303" level="TRACE">Return: '9999_171211_019786'</msg>
<msg timestamp="20171212 14:29:54.303" level="INFO">${BTS_Version} = 9999_171211_019786</msg>
<status status="PASS" endtime="20171212 14:29:54.303" starttime="20171212 14:29:54.302"></status>
</kw>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${BTS_Version}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${Convert Version}</var>
</assign>
<msg timestamp="20171212 14:29:54.304" level="TRACE">Arguments: [ '9999_171211_019786' | '_' ]</msg>
<msg timestamp="20171212 14:29:54.304" level="TRACE">Return: ['9999', '171211', '019786']</msg>
<msg timestamp="20171212 14:29:54.304" level="INFO">${Convert Version} = [u'9999', u'171211', u'019786']</msg>
<status status="PASS" endtime="20171212 14:29:54.304" starttime="20171212 14:29:54.304"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${Convert Version[0]}</arg>
</arguments>
<assign>
<var>${A_vsersion}</var>
</assign>
<msg timestamp="20171212 14:29:54.305" level="TRACE">Arguments: [ '9999' ]</msg>
<msg timestamp="20171212 14:29:54.305" level="TRACE">Return: '9999'</msg>
<msg timestamp="20171212 14:29:54.305" level="INFO">${A_vsersion} = 9999</msg>
<status status="PASS" endtime="20171212 14:29:54.305" starttime="20171212 14:29:54.305"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${Convert Version[1]}</arg>
</arguments>
<assign>
<var>${B_vsersion}</var>
</assign>
<msg timestamp="20171212 14:29:54.306" level="TRACE">Arguments: [ '171211' ]</msg>
<msg timestamp="20171212 14:29:54.306" level="TRACE">Return: '171211'</msg>
<msg timestamp="20171212 14:29:54.307" level="INFO">${B_vsersion} = 171211</msg>
<status status="PASS" endtime="20171212 14:29:54.307" starttime="20171212 14:29:54.306"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>${Convert Version[2]}</arg>
</arguments>
<assign>
<var>${C_vsersion}</var>
</assign>
<msg timestamp="20171212 14:29:54.307" level="TRACE">Arguments: [ '019786' ]</msg>
<msg timestamp="20171212 14:29:54.308" level="TRACE">Return: '019786'</msg>
<msg timestamp="20171212 14:29:54.308" level="INFO">${C_vsersion} = 019786</msg>
<status status="PASS" endtime="20171212 14:29:54.308" starttime="20171212 14:29:54.307"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${A_vsersion} ${B_vsersion}${C_vsersion}</arg>
</arguments>
<assign>
<var>${Current_vsersion}</var>
</assign>
<msg timestamp="20171212 14:29:54.309" level="TRACE">Arguments: [ '9999 171211019786' ]</msg>
<msg timestamp="20171212 14:29:54.309" level="DEBUG">Argument types are:
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171212 14:29:54.309" level="TRACE">Return: '9999 171211019786'</msg>
<msg timestamp="20171212 14:29:54.309" level="INFO">${Current_vsersion} = 9999 171211019786</msg>
<status status="PASS" endtime="20171212 14:29:54.309" starttime="20171212 14:29:54.308"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_Version}</arg>
</arguments>
<msg timestamp="20171212 14:29:54.310" level="TRACE">Arguments: [ '${BTS_Version}' ]</msg>
<msg timestamp="20171212 14:29:54.310" level="INFO">${BTS_Version} = 9999_171211_019786</msg>
<msg timestamp="20171212 14:29:54.310" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:54.311" starttime="20171212 14:29:54.310"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${Current_vsersion}</arg>
</arguments>
<msg timestamp="20171212 14:29:54.311" level="TRACE">Arguments: [ '${Current_vsersion}' ]</msg>
<msg timestamp="20171212 14:29:54.311" level="INFO">${Current_vsersion} = 9999 171211019786</msg>
<msg timestamp="20171212 14:29:54.312" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:54.312" starttime="20171212 14:29:54.311"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${List File}</arg>
</arguments>
<msg timestamp="20171212 14:29:54.312" level="TRACE">Arguments: [ '${List File}' ]</msg>
<msg timestamp="20171212 14:29:54.313" level="INFO">${List File} = [u'TL00_FSM4_9999_171211_019786_release_BTSSM_downloadable.zip']</msg>
<msg timestamp="20171212 14:29:54.313" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:54.313" starttime="20171212 14:29:54.312"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${ENB_Version}</arg>
</arguments>
<msg timestamp="20171212 14:29:54.314" level="TRACE">Arguments: [ '${ENB_Version}' ]</msg>
<msg timestamp="20171212 14:29:54.314" level="INFO">${ENB_Version} = 171211_019786</msg>
<msg timestamp="20171212 14:29:54.314" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:54.314" starttime="20171212 14:29:54.313"></status>
</kw>
<msg timestamp="20171212 14:29:54.314" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:54.314" starttime="20171212 14:29:54.292"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${group2}</arg>
</arguments>
<msg timestamp="20171212 14:29:54.315" level="TRACE">Arguments: [ b'171211_019786' ]</msg>
<msg timestamp="20171212 14:29:54.315" level="INFO">171211_019786</msg>
<msg timestamp="20171212 14:29:54.315" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:54.316" starttime="20171212 14:29:54.315"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${ENB_Version}</arg>
</arguments>
<msg timestamp="20171212 14:29:54.316" level="TRACE">Arguments: [ '171211_019786' ]</msg>
<msg timestamp="20171212 14:29:54.316" level="INFO">171211_019786</msg>
<msg timestamp="20171212 14:29:54.316" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:54.317" starttime="20171212 14:29:54.316"></status>
</kw>
<kw name="Should Not Be Equal" library="BuiltIn">
<doc>Fails if the given objects are equal.</doc>
<arguments>
<arg>${group2}</arg>
<arg>${ENB_Version}</arg>
</arguments>
<msg timestamp="20171212 14:29:54.317" level="TRACE">Arguments: [ b'171211_019786' | '171211_019786' ]</msg>
<msg timestamp="20171212 14:29:54.318" level="INFO">Argument types are:
&lt;type 'str'&gt;
&lt;type 'unicode'&gt;</msg>
<msg timestamp="20171212 14:29:54.318" level="FAIL">171211_019786 == 171211_019786</msg>
<msg timestamp="20171212 14:29:54.318" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20171212 14:29:54.318" starttime="20171212 14:29:54.317"></status>
</kw>
<status status="FAIL" endtime="20171212 14:29:54.318" starttime="20171212 14:29:33.164"></status>
</kw>
<msg timestamp="20171212 14:29:54.319" level="TRACE">Return: (b'FAIL', '171211_019786 == 171211_019786')</msg>
<msg timestamp="20171212 14:29:54.319" level="INFO">${status} = FAIL</msg>
<msg timestamp="20171212 14:29:54.319" level="INFO">${value} = 171211_019786 == 171211_019786</msg>
<status status="PASS" endtime="20171212 14:29:54.319" starttime="20171212 14:29:33.164"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'PASS'</arg>
<arg>Recover Version</arg>
</arguments>
<msg timestamp="20171212 14:29:54.320" level="TRACE">Arguments: [ "'FAIL' == 'PASS'" | 'Recover Version' ]</msg>
<msg timestamp="20171212 14:29:54.322" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:54.322" starttime="20171212 14:29:54.319"></status>
</kw>
<msg timestamp="20171212 14:29:54.323" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:54.323" starttime="20171212 14:29:33.163"></status>
</kw>
<kw name="Reset BTS If Not Onair" library="OM_resources_new">
<doc>Reset BTS only if it is not onair</doc>
<msg timestamp="20171212 14:29:54.323" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171212 14:29:54.324" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:29:54.324" level="TRACE">Return: b'20171212142954'</msg>
<msg timestamp="20171212 14:29:54.324" level="INFO">${time} = 20171212142954</msg>
<status status="PASS" endtime="20171212 14:29:54.324" starttime="20171212 14:29:54.324"></status>
</kw>
<kw name="Start Bts Udp Log" library="RobotWS">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}BTSLOG_${time}.LOG</arg>
</arguments>
<msg timestamp="20171212 14:29:54.325" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\BTSLOG_20171212142954.LOG' ]</msg>
<msg timestamp="20171212 14:29:54.329" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM btslog.exe</msg>
<msg timestamp="20171212 14:29:54.386" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:29:54.389" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM BTSlog2.exe</msg>
<msg timestamp="20171212 14:29:54.442" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:29:54.445" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM btslog</msg>
<msg timestamp="20171212 14:29:54.496" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:29:54.499" level="INFO">[btslog_control.py@173] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20171212 14:29:54.501" level="INFO">[btslog_control.py@230] use ip is 192.168.255.126</msg>
<msg timestamp="20171212 14:29:54.504" level="INFO">[file_common.py@209] Directory "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr" already exists, no need to create it again.</msg>
<msg timestamp="20171212 14:29:54.506" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:29:54.506" starttime="20171212 14:29:54.325"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Check BTS Is Onair With Infomodel</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<msg timestamp="20171212 14:29:54.507" level="TRACE">Arguments: [ 'Check BTS Is Onair With Infomodel' ]</msg>
<kw name="Check BTS Is Onair With Infomodel" library="OM_resources_new">
<msg timestamp="20171212 14:29:54.508" level="TRACE">Arguments: [  ]</msg>
<kw name="Start IM Log" library="OM_resources_new">
<msg timestamp="20171212 14:29:54.508" level="TRACE">Arguments: [  ]</msg>
<kw name="Start Infomodel" library="RobotWS">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${IM_PORT}</arg>
</arguments>
<msg timestamp="20171212 14:29:54.509" level="TRACE">Arguments: [ port='12345' ]</msg>
<msg timestamp="20171212 14:30:00.606" level="INFO">[infomodel_control.py@159] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None</msg>
<msg timestamp="20171212 14:30:05.942" level="INFO">[infomodel_control.py@163] start infomodel succeed .</msg>
<msg timestamp="20171212 14:30:05.949" level="INFO">[infomodel_control.py@165] start infomodel logger succeed .</msg>
<msg timestamp="20171212 14:30:05.950" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:05.950" starttime="20171212 14:29:54.509"></status>
</kw>
<msg timestamp="20171212 14:30:05.951" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:05.951" starttime="20171212 14:29:54.508"></status>
</kw>
<kw name="Query Infomodel" library="RobotWS">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>query=/MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]</arg>
<arg>timeout=20</arg>
</arguments>
<msg timestamp="20171212 14:30:05.953" level="TRACE">Arguments: [ query='/MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' | timeout='20' ]</msg>
<msg timestamp="20171212 14:30:06.552" level="INFO">[infomodel_control.py@329] query infomodel: '/MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171212 14:30:06.552" level="TRACE">Return: True</msg>
<status status="PASS" endtime="20171212 14:30:06.552" starttime="20171212 14:30:05.953"></status>
</kw>
<kw name="Run Keyword And Return Status" library="BuiltIn">
<doc>Runs the given keyword with given arguments and returns the status as a Boolean value.</doc>
<arguments>
<arg>Query infomodel</arg>
<arg>query=every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]</arg>
<arg>timeout=20</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20171212 14:30:06.554" level="TRACE">Arguments: [ 'Query infomodel' | 'query=every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' | 'timeout=20' ]</msg>
<kw name="Query Infomodel" library="RobotWS">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>query=every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]</arg>
<arg>timeout=20</arg>
</arguments>
<msg timestamp="20171212 14:30:06.555" level="TRACE">Arguments: [ query='every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' | timeout='20' ]</msg>
<msg timestamp="20171212 14:30:26.613" level="FAIL">InfoModelQueryTimeoutException: Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=20.0. Not found any object matching given dist name.</msg>
<msg timestamp="20171212 14:30:26.614" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\TdlteLib\enb_lib\infomodel_control.py", line 328, in query_infomodel
    query, api_version, timeout, alias)
  File "D:\TALib\ute_infomodel\interface.py", line 502, in query_infomodel
    return self.store.get(alias).query_infomodel(query, timeout, extend_result, allow_negative_result)
  File "D:\TALib\ute_infomodel\infomodel.py", line 276, in query_infomodel
    query_result = self.infomodel_server.execute_query(query, allow_negative_result, use_raw_values, timeout)
  File "C:\Python27\lib\site-packages\pyro4-4.29-py2.7.egg\Pyro4\core.py", line 169, in __call__
    return self.__send(self.__name, args, kwargs)
  File "C:\Python27\lib\site-packages\pyro4-4.29-py2.7.egg\Pyro4\core.py", line 384, in _pyroInvoke
    raise data</msg>
<status status="FAIL" endtime="20171212 14:30:26.614" starttime="20171212 14:30:06.554"></status>
</kw>
<msg timestamp="20171212 14:30:26.614" level="TRACE">Return: False</msg>
<msg timestamp="20171212 14:30:26.615" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20171212 14:30:26.615" starttime="20171212 14:30:06.553"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}'=='False'</arg>
<arg>Query infomodel</arg>
<arg>query=every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
<arg>timeout=20</arg>
</arguments>
<msg timestamp="20171212 14:30:26.616" level="TRACE">Arguments: [ "'False'=='False'" | 'Query infomodel' | 'query=every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' | 'timeout=20' ]</msg>
<kw name="Query Infomodel" library="RobotWS">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>query=every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
<arg>timeout=20</arg>
</arguments>
<msg timestamp="20171212 14:30:26.619" level="TRACE">Arguments: [ query='every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' | timeout='20' ]</msg>
<msg timestamp="20171212 14:30:26.703" level="INFO">[infomodel_control.py@329] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20171212 14:30:26.703" level="TRACE">Return: True</msg>
<status status="PASS" endtime="20171212 14:30:26.703" starttime="20171212 14:30:26.618"></status>
</kw>
<msg timestamp="20171212 14:30:26.704" level="TRACE">Return: True</msg>
<status status="PASS" endtime="20171212 14:30:26.704" starttime="20171212 14:30:26.615"></status>
</kw>
<kw name="Save IM Log" library="OM_resources_new">
<msg timestamp="20171212 14:30:26.705" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171212 14:30:26.707" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:30:26.707" level="TRACE">Return: b'20171212143026'</msg>
<msg timestamp="20171212 14:30:26.708" level="INFO">${time} = 20171212143026</msg>
<status status="PASS" endtime="20171212 14:30:26.708" starttime="20171212 14:30:26.706"></status>
</kw>
<kw name="Save Infomodel Log" library="RobotWS">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}infomodel_${time}</arg>
</arguments>
<msg timestamp="20171212 14:30:26.709" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\infomodel_20171212143026' ]</msg>
<msg timestamp="20171212 14:30:26.723" level="INFO">[infomodel_control.py@216] save infomodel log to file: 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\infomodel_20171212143026' succeed .</msg>
<msg timestamp="20171212 14:30:26.724" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:26.724" starttime="20171212 14:30:26.709"></status>
</kw>
<kw name="Stop Infomodel" library="RobotWS">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20171212 14:30:26.725" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:30:26.990" level="INFO">Exit code: 1</msg>
<msg timestamp="20171212 14:30:26.991" level="INFO">STDOUT
</msg>
<msg timestamp="20171212 14:30:26.991" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:36177
</msg>
<msg timestamp="20171212 14:30:26.734" level="INFO">[infomodel_control.py@188] stop infomodel logger succeed .</msg>
<msg timestamp="20171212 14:30:26.997" level="INFO">[infomodel_control.py@200] stop infomodel succeed .</msg>
<msg timestamp="20171212 14:30:26.997" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:26.997" starttime="20171212 14:30:26.724"></status>
</kw>
<msg timestamp="20171212 14:30:26.997" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:26.998" starttime="20171212 14:30:26.705"></status>
</kw>
<msg timestamp="20171212 14:30:26.998" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:26.998" starttime="20171212 14:29:54.507"></status>
</kw>
<msg timestamp="20171212 14:30:26.998" level="TRACE">Return: (b'PASS', None)</msg>
<msg timestamp="20171212 14:30:26.998" level="INFO">${status} = PASS</msg>
<msg timestamp="20171212 14:30:26.999" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20171212 14:30:26.999" starttime="20171212 14:29:54.507"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${status}' == 'FAIL'</arg>
<arg>CLI Upload SCFC And Config File To Recover Env</arg>
</arguments>
<msg timestamp="20171212 14:30:27.000" level="TRACE">Arguments: [ "'PASS' == 'FAIL'" | 'CLI Upload SCFC And Config File To Recover Env' ]</msg>
<msg timestamp="20171212 14:30:27.002" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:27.002" starttime="20171212 14:30:26.999"></status>
</kw>
<kw name="Stop Bts Udp Log" library="RobotWS">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20171212 14:30:27.003" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:30:27.004" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:27.004" starttime="20171212 14:30:27.003"></status>
</kw>
<msg timestamp="20171212 14:30:27.004" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:27.004" starttime="20171212 14:29:54.323"></status>
</kw>
<msg timestamp="20171212 14:30:27.005" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:27.005" starttime="20171212 14:29:33.134"></status>
</kw>
<kw name="Start Bts Udp Log" library="RobotWS">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
</arguments>
<msg timestamp="20171212 14:30:27.006" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' ]</msg>
<msg timestamp="20171212 14:30:27.008" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM btslog.exe</msg>
<msg timestamp="20171212 14:30:27.060" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:30:27.062" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM BTSlog2.exe</msg>
<msg timestamp="20171212 14:30:27.113" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:30:27.115" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM btslog</msg>
<msg timestamp="20171212 14:30:27.164" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:30:27.166" level="INFO">[btslog_control.py@173] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20171212 14:30:27.168" level="INFO">[file_common.py@209] Directory "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr" already exists, no need to create it again.</msg>
<msg timestamp="20171212 14:30:27.170" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:27.171" starttime="20171212 14:30:27.005"></status>
</kw>
<msg timestamp="20171212 14:30:27.171" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:27.171" starttime="20171212 14:29:33.134"></status>
</kw>
<kw name="_Trigger Fault 418 By Dsp Crash Tool">
<doc>1.Run Crash Tool To Dsp</doc>
<msg timestamp="20171212 14:30:27.172" level="TRACE">Arguments: [  ]</msg>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171212 14:30:27.172" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:30:27.175" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:30:28.227" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:30:28.229" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:30:28.281" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:30:28</msg>
<msg timestamp="20171212 14:30:28.373" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:30:28 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:30:28.376" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:30:28.378" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:30:29.430" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:30:29.432" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:30:29.484" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:30:29</msg>
<msg timestamp="20171212 14:30:29.583" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:30:29 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:30:29.585" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\NOKIA-20170515I\ROOT\CIMV2:Win32_Process.Handle="7696"
Instance deletion successful.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:30:29.587" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:30:30.639" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:30:30.641" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:30:30.693" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:30:30</msg>
<msg timestamp="20171212 14:30:30.789" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:30:30 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:30:30.792" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:30:30.794" level="TRACE">Return: True</msg>
<status status="PASS" endtime="20171212 14:30:30.794" starttime="20171212 14:30:27.172"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<msg timestamp="20171212 14:30:30.799" level="TRACE">Arguments: [ ${IPAddress}='Local' | ${UserName}='Nemuadmin' | ${Password}='nemuuser' | ${CloseSEM}='N' | ${CheckExist}='1' | ${qtpkeepopen}='N' ]</msg>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<msg timestamp="20171212 14:30:30.800" level="TRACE">Arguments: [ 'Run keyword and ignore error' | 'modify sem maxpermsize' ]</msg>
<msg timestamp="20171212 14:30:30.800" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:30.800" starttime="20171212 14:30:30.799"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<msg timestamp="20171212 14:30:30.801" level="TRACE">Arguments: [ "'N'=='Y'" | 'Kill SiteManager Process' ]</msg>
<msg timestamp="20171212 14:30:30.803" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:30.803" starttime="20171212 14:30:30.800"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171212 14:30:30.804" level="TRACE">Arguments: [ 'IPAddress=Local' | 'UserName=Nemuadmin' | 'Password=nemuuser' | 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\' | 'CheckExist=1' ]</msg>
<msg timestamp="20171212 14:30:30.804" level="TRACE">Return: ['IPAddress=Local', 'UserName=Nemuadmin', 'Password=nemuuser', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', 'CheckExist=1']</msg>
<msg timestamp="20171212 14:30:30.805" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultI...</msg>
<status status="PASS" endtime="20171212 14:30:30.805" starttime="20171212 14:30:30.804"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<msg timestamp="20171212 14:30:30.805" level="TRACE">Arguments: [ 'run qtp script' | '${siteman_test_path}Login' | '${para_list}' | '${qtpkeepopen}' ]</msg>
<msg timestamp="20171212 14:30:30.806" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:30:30.806" starttime="20171212 14:30:30.805"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171212 14:30:30.807" level="TRACE">Arguments: [ 'D:\\TALib\\tdd_robotws\\GUI_Databases\\QTP\\RL65\\SiteMan\\Login' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' | ['IPAddress=Local', 'UserName=Nemuadmin', 'Password=nemuuser', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', 'CheckExist=1'] | 'N' | '7200' ]</msg>
<msg timestamp="20171212 14:31:11.999" level="INFO">&lt;QTP&gt; Test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\"
CheckExist="1"
&lt;QTP&gt; Save log to d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\GUILog\qtp_log20171212143030\Report
&lt;QTP&gt; Start to run script...</msg>
<msg timestamp="20171212 14:31:11.999" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:31:11.999" starttime="20171212 14:30:30.806"></status>
</kw>
<msg timestamp="20171212 14:31:12.000" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:31:12.000" starttime="20171212 14:30:30.799"></status>
</kw>
<kw name="GUI SM Alarm Oper" library="gui_resource">
<doc>this keyword provide check Active/History alarm in BTS SiteManager window</doc>
<arguments>
<arg>Check Alarm Not Existed</arg>
<arg>Active</arg>
<arg>FaultName=Diagnostic Files collected (6450);;Source=BTS: BS ${BTS_INFO.ID} / ${BTS_INFO.SYSTEM_MODEL_TYPE} 1</arg>
</arguments>
<msg timestamp="20171212 14:31:12.001" level="TRACE">Arguments: [ ${OperType}='Check Alarm Not Existed' | ${AlarmType}='Active' | ${AlarmInfo}='FaultName=Diagnostic Files collected (6450);;Source=BTS: BS 1492 / ASIA 1' | ${qtpkeepopen}='N' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>AlarmType=${AlarmType}</arg>
<arg>OperType=${OperType}</arg>
<arg>AlarmInfo=${AlarmInfo}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171212 14:31:12.002" level="TRACE">Arguments: [ 'AlarmType=Active' | 'OperType=Check Alarm Not Existed' | 'AlarmInfo=FaultName=Diagnostic Files collected (6450);;Source=BTS: BS 1492 / ASIA 1' | 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\' ]</msg>
<msg timestamp="20171212 14:31:12.002" level="TRACE">Return: ['AlarmType=Active', 'OperType=Check Alarm Not Existed', 'AlarmInfo=FaultName=Diagnostic Files collected (6450);;Source=BTS: BS 1492 / ASIA 1', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\']</msg>
<msg timestamp="20171212 14:31:12.003" level="INFO">${para_list} = [u'AlarmType=Active', u'OperType=Check Alarm Not Existed', u'AlarmInfo=FaultName=Diagnostic Files collected (6450);;Source=BTS: BS 1492 / ASIA 1', u'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_F...</msg>
<status status="PASS" endtime="20171212 14:31:12.003" starttime="20171212 14:31:12.002"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Alarm_Oper</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171212 14:31:12.003" level="TRACE">Arguments: [ 'D:\\TALib\\tdd_robotws\\GUI_Databases\\QTP\\RL65\\SiteMan\\Alarm_Oper' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' | ['AlarmType=Active', 'OperType=Check Alarm Not Existed', 'AlarmInfo=FaultName=Diagnostic Files collected (6450);;Source=BTS: BS 1492 / ASIA 1', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\'] | 'N' | '7200' ]</msg>
<msg timestamp="20171212 14:31:19.420" level="INFO">&lt;QTP&gt; Test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Alarm_Oper is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Alarm_Oper ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
AlarmType="Active"
OperType="Check Alarm Not Existed"
AlarmInfo="FaultName=Diagnostic Files collected (6450);;Source=BTS: BS 1492 / ASIA 1"
LogPath="d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\"
&lt;QTP&gt; Save log to d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\GUILog\qtp_log20171212143112\Report
&lt;QTP&gt; Start to run script...</msg>
<msg timestamp="20171212 14:31:19.420" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:31:19.420" starttime="20171212 14:31:12.003"></status>
</kw>
<msg timestamp="20171212 14:31:19.420" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:31:19.421" starttime="20171212 14:31:12.000"></status>
</kw>
<kw name="Execute Shell Command" library="RobotWS">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${CRASH_FILE} -b 0x12 -k 0x31 -u 418</arg>
</arguments>
<msg timestamp="20171212 14:31:19.422" level="TRACE">Arguments: [ 'D:\\TestCase\\Trunk_CRT\\Resource\\NonSRANResource\\OAM1_resources\\DspCrash.py -b 0x12 -k 0x31 -u 418' ]</msg>
<msg timestamp="20171212 14:31:19.424" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:31:20.495" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:31:20.497" level="INFO">[telnet_common.py@268] Execute command: D:\TestCase\Trunk_CRT\Resource\NonSRANResource\OAM1_resources\DspCrash.py -b 0x12 -k 0x31 -u 418</msg>
<msg timestamp="20171212 14:31:20.549" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:31:20</msg>
<msg timestamp="20171212 14:31:20.777" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:31:20 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:31:20.781" level="INFO">[telnet_common.py@298] Get Response: D:\TestCase\Trunk_CRT\Resource\NonSRANResource\OAM1_resources\DspCrash.py -b 0x12 -k 0x31 -u 418
Local current time : 2017-12-12 14:31:20
Open connection to 192.168.255.1 : 15003
Connection established
Sending FAULT_IND_MSG 0x8008 with faultId:418 from board:0x12, cpu:0x31
Closing connection

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:31:20.782" level="TRACE">Return: b'D:\\TestCase\\Trunk_CRT\\Resource\\NonSRANResource\\OAM1_resources\\DspCrash.py -b 0x12 -k 0x31 -u 418\r\nLocal current time : 2017-12-12 14:31:20\r\nOpen connection to 192.168.255.1 : 15003\r\nConnection established\r\nSending FAULT_IND_MSG 0x8008 with faultId:418 from board:0x12, cpu:0x31\r\nClosing connection\r\n\r\nC:\\Users\\Administrator&gt;'</msg>
<status status="PASS" endtime="20171212 14:31:20.783" starttime="20171212 14:31:19.421"></status>
</kw>
<msg timestamp="20171212 14:31:20.783" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:31:20.783" starttime="20171212 14:30:27.172"></status>
</kw>
<kw name="_Verify Check Points From BTSLog">
<doc>1.verify check points</doc>
<msg timestamp="20171212 14:31:20.784" level="TRACE">Arguments: [  ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>FRI/FRI.*Detector 418.*filtering timer 2s started</arg>
<arg>FRI/FRI.*Detector 418.*active</arg>
</arguments>
<assign>
<var>${msg_check}</var>
</assign>
<msg timestamp="20171212 14:31:20.785" level="TRACE">Arguments: [ 'FRI/FRI.*Detector 418.*filtering timer 2s started' | 'FRI/FRI.*Detector 418.*active' ]</msg>
<msg timestamp="20171212 14:31:20.785" level="TRACE">Return: ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active']</msg>
<msg timestamp="20171212 14:31:20.786" level="INFO">${msg_check} = [u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']</msg>
<status status="PASS" endtime="20171212 14:31:20.786" starttime="20171212 14:31:20.785"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>5min</arg>
<arg>30sec</arg>
<arg>File Should Contain</arg>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:31:20.787" level="TRACE">Arguments: [ '5min' | '30sec' | 'File Should Contain' | '${TEST LOG DIR}${/}btslog_check.LOG' | '${msg_check}' ]</msg>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:31:20.788" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:31:20.965" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:31:20.966" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:31:20.966" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:31:20.966" starttime="20171212 14:31:20.788"></status>
</kw>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:31:50.966" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:31:51.234" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:31:51.235" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:31:51.235" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:31:51.235" starttime="20171212 14:31:50.966"></status>
</kw>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:32:21.235" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:32:21.584" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:32:21.584" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:32:21.584" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:32:21.584" starttime="20171212 14:32:21.235"></status>
</kw>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:32:51.586" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:32:52.022" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:32:52.023" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:32:52.023" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:32:52.023" starttime="20171212 14:32:51.585"></status>
</kw>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:33:22.023" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:33:22.560" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:33:22.560" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:33:22.561" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:33:22.561" starttime="20171212 14:33:22.023"></status>
</kw>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:33:52.561" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:33:53.167" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:33:53.167" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:33:53.168" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:33:53.168" starttime="20171212 14:33:52.561"></status>
</kw>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:34:23.168" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:34:23.845" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:34:23.846" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:34:23.846" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:34:23.846" starttime="20171212 14:34:23.168"></status>
</kw>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:34:53.847" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:34:54.631" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:34:54.631" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:34:54.631" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:34:54.632" starttime="20171212 14:34:53.846"></status>
</kw>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:35:24.632" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:35:25.508" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:35:25.508" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:35:25.509" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:35:25.509" starttime="20171212 14:35:24.632"></status>
</kw>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:35:55.509" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:35:56.465" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:35:56.466" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:35:56.466" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:35:56.466" starttime="20171212 14:35:55.509"></status>
</kw>
<kw name="File Should Contain" library="RobotWS">
<doc>This keyword checks whether file contains specified messages.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}btslog_check.LOG</arg>
<arg>${msg_check}</arg>
</arguments>
<msg timestamp="20171212 14:36:26.467" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\btslog_check.LOG' | ['FRI/FRI.*Detector 418.*filtering timer 2s started', 'FRI/FRI.*Detector 418.*active'] ]</msg>
<msg timestamp="20171212 14:36:27.499" level="INFO">[file_control.py@78] *HTML*&lt;a href = "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG"&gt;fail log&lt;/a&gt;</msg>
<msg timestamp="20171212 14:36:27.500" level="FAIL">Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:36:27.500" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\CommonLib\file_lib\file_control.py", line 81, in file_should_contain
    (unfound_msgs, source_file_path))</msg>
<status status="FAIL" endtime="20171212 14:36:27.500" starttime="20171212 14:36:26.467"></status>
</kw>
<msg timestamp="20171212 14:36:27.500" level="FAIL">Keyword 'File Should Contain' failed after retrying for 5 minutes. The last error was: Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</msg>
<msg timestamp="20171212 14:36:27.501" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20171212 14:36:27.501" starttime="20171212 14:31:20.787"></status>
</kw>
<status status="FAIL" endtime="20171212 14:36:27.501" starttime="20171212 14:31:20.784"></status>
</kw>
<kw type="teardown" name="_Disconnect All Connection">
<doc>Dis-connectionation</doc>
<msg timestamp="20171212 14:36:27.502" level="TRACE">Arguments: [  ]</msg>
<kw name="Stop Bts Udp Log" library="RobotWS">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20171212 14:36:27.502" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:36:27.504" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:36:27.504" starttime="20171212 14:36:27.502"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Capture_OAM_LOG</arg>
</arguments>
<msg timestamp="20171212 14:36:27.504" level="TRACE">Arguments: [ 'Capture_OAM_LOG' ]</msg>
<kw name="Capture OAM LOG" library="OM_resources_new">
<msg timestamp="20171212 14:36:27.505" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171212 14:36:27.506" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:36:27.506" level="TRACE">Return: b'20171212143627'</msg>
<msg timestamp="20171212 14:36:27.506" level="INFO">${time} = 20171212143627</msg>
<status status="PASS" endtime="20171212 14:36:27.506" starttime="20171212 14:36:27.505"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>GUI SM Captuer Screen</arg>
</arguments>
<msg timestamp="20171212 14:36:27.507" level="TRACE">Arguments: [ 'GUI SM Captuer Screen' ]</msg>
<kw name="GUI SM Captuer Screen" library="gui_resource">
<doc>this keyword is used for capture the screen</doc>
<msg timestamp="20171212 14:36:27.507" level="TRACE">Arguments: [ ${qtpkeepopen}='N' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171212 14:36:27.508" level="TRACE">Arguments: [ 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\' ]</msg>
<msg timestamp="20171212 14:36:27.508" level="TRACE">Return: ['LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\']</msg>
<msg timestamp="20171212 14:36:27.508" level="INFO">${para_list} = [u'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\']</msg>
<status status="PASS" endtime="20171212 14:36:27.508" starttime="20171212 14:36:27.508"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}CaptureImage</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171212 14:36:27.509" level="TRACE">Arguments: [ 'D:\\TALib\\tdd_robotws\\GUI_Databases\\QTP\\RL65\\SiteMan\\CaptureImage' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' | ['LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\'] | 'N' | '7200' ]</msg>
<msg timestamp="20171212 14:36:33.207" level="INFO">&lt;QTP&gt; Test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
LogPath="d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\"
&lt;QTP&gt; Save log to d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\GUILog\qtp_log20171212143627\Report
&lt;QTP&gt; Start to run script...</msg>
<msg timestamp="20171212 14:36:33.207" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:36:33.208" starttime="20171212 14:36:27.509"></status>
</kw>
<msg timestamp="20171212 14:36:33.208" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:36:33.208" starttime="20171212 14:36:27.507"></status>
</kw>
<msg timestamp="20171212 14:36:33.209" level="TRACE">Return: (b'PASS', None)</msg>
<status status="PASS" endtime="20171212 14:36:33.209" starttime="20171212 14:36:27.506"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Capture Screen</arg>
</arguments>
<msg timestamp="20171212 14:36:33.210" level="TRACE">Arguments: [ 'Capture Screen' ]</msg>
<kw name="Capture Screen" library="OM_resources_new">
<msg timestamp="20171212 14:36:33.211" level="TRACE">Arguments: [  ]</msg>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171212 14:36:33.212" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:36:33.220" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:36:34.274" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:36:34.278" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:36:34.333" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:36:34</msg>
<msg timestamp="20171212 14:36:34.466" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:36:34 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:36:34.470" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\NOKIA-20170515I\ROOT\CIMV2:Win32_Process.Handle="1032"
Instance deletion successful.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:36:34.474" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:36:35.528" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:36:35.532" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:36:35.600" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:36:35</msg>
<msg timestamp="20171212 14:36:35.705" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:36:35 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:36:35.709" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\NOKIA-20170515I\ROOT\CIMV2:Win32_Process.Handle="1560"
Instance deletion successful.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:36:35.713" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:36:36.767" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:36:36.771" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:36:36.825" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:36:36</msg>
<msg timestamp="20171212 14:36:36.919" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:36:36 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:36:36.923" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:36:36.926" level="TRACE">Return: True</msg>
<status status="PASS" endtime="20171212 14:36:36.926" starttime="20171212 14:36:33.211"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<msg timestamp="20171212 14:36:36.930" level="TRACE">Arguments: [ ${IPAddress}='Local' | ${UserName}='Nemuadmin' | ${Password}='nemuuser' | ${CloseSEM}='N' | ${CheckExist}='1' | ${qtpkeepopen}='N' ]</msg>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<msg timestamp="20171212 14:36:36.930" level="TRACE">Arguments: [ 'Run keyword and ignore error' | 'modify sem maxpermsize' ]</msg>
<msg timestamp="20171212 14:36:36.931" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:36:36.931" starttime="20171212 14:36:36.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<msg timestamp="20171212 14:36:36.931" level="TRACE">Arguments: [ "'N'=='Y'" | 'Kill SiteManager Process' ]</msg>
<msg timestamp="20171212 14:36:36.934" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:36:36.934" starttime="20171212 14:36:36.931"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171212 14:36:36.935" level="TRACE">Arguments: [ 'IPAddress=Local' | 'UserName=Nemuadmin' | 'Password=nemuuser' | 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\' | 'CheckExist=1' ]</msg>
<msg timestamp="20171212 14:36:36.935" level="TRACE">Return: ['IPAddress=Local', 'UserName=Nemuadmin', 'Password=nemuuser', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', 'CheckExist=1']</msg>
<msg timestamp="20171212 14:36:36.962" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultI...</msg>
<status status="PASS" endtime="20171212 14:36:36.962" starttime="20171212 14:36:36.934"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<msg timestamp="20171212 14:36:36.962" level="TRACE">Arguments: [ 'run qtp script' | '${siteman_test_path}Login' | '${para_list}' | '${qtpkeepopen}' ]</msg>
<msg timestamp="20171212 14:36:36.963" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:36:36.963" starttime="20171212 14:36:36.962"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171212 14:36:36.964" level="TRACE">Arguments: [ 'D:\\TALib\\tdd_robotws\\GUI_Databases\\QTP\\RL65\\SiteMan\\Login' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' | ['IPAddress=Local', 'UserName=Nemuadmin', 'Password=nemuuser', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', 'CheckExist=1'] | 'N' | '7200' ]</msg>
<msg timestamp="20171212 14:37:17.793" level="INFO">&lt;QTP&gt; Test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\"
CheckExist="1"
&lt;QTP&gt; Save log to d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\GUILog\qtp_log20171212143636\Report
&lt;QTP&gt; Start to run script...</msg>
<msg timestamp="20171212 14:37:17.793" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:37:17.793" starttime="20171212 14:36:36.963"></status>
</kw>
<msg timestamp="20171212 14:37:17.794" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:37:17.794" starttime="20171212 14:36:36.929"></status>
</kw>
<kw name="GUI SM Captuer Screen" library="gui_resource">
<doc>this keyword is used for capture the screen</doc>
<msg timestamp="20171212 14:37:17.795" level="TRACE">Arguments: [ ${qtpkeepopen}='N' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171212 14:37:17.796" level="TRACE">Arguments: [ 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\' ]</msg>
<msg timestamp="20171212 14:37:17.796" level="TRACE">Return: ['LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\']</msg>
<msg timestamp="20171212 14:37:17.796" level="INFO">${para_list} = [u'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\']</msg>
<status status="PASS" endtime="20171212 14:37:17.796" starttime="20171212 14:37:17.795"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}CaptureImage</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171212 14:37:17.797" level="TRACE">Arguments: [ 'D:\\TALib\\tdd_robotws\\GUI_Databases\\QTP\\RL65\\SiteMan\\CaptureImage' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' | ['LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\'] | 'N' | '7200' ]</msg>
<msg timestamp="20171212 14:37:24.393" level="INFO">&lt;QTP&gt; Test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
LogPath="d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\"
&lt;QTP&gt; Save log to d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\GUILog\qtp_log20171212143717\Report
&lt;QTP&gt; Start to run script...</msg>
<msg timestamp="20171212 14:37:24.394" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:37:24.394" starttime="20171212 14:37:17.796"></status>
</kw>
<msg timestamp="20171212 14:37:24.394" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:37:24.394" starttime="20171212 14:37:17.794"></status>
</kw>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171212 14:37:24.395" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:37:24.399" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:37:25.454" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:37:25.458" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:37:25.514" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:37:25</msg>
<msg timestamp="20171212 14:37:25.648" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:37:25 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:37:25.652" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\NOKIA-20170515I\ROOT\CIMV2:Win32_Process.Handle="8112"
Instance deletion successful.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:37:25.656" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:37:26.710" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:37:26.714" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:37:26.782" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:37:26</msg>
<msg timestamp="20171212 14:37:26.905" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:37:26 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:37:26.909" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\NOKIA-20170515I\ROOT\CIMV2:Win32_Process.Handle="3304"
Instance deletion successful.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:37:26.913" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:37:27.967" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:37:27.971" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:37:28.025" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:37:28</msg>
<msg timestamp="20171212 14:37:28.113" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:37:28 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:37:28.118" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:37:28.120" level="TRACE">Return: True</msg>
<status status="PASS" endtime="20171212 14:37:28.120" starttime="20171212 14:37:24.395"></status>
</kw>
<msg timestamp="20171212 14:37:28.120" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:37:28.120" starttime="20171212 14:36:33.210"></status>
</kw>
<msg timestamp="20171212 14:37:28.121" level="TRACE">Return: (b'PASS', None)</msg>
<status status="PASS" endtime="20171212 14:37:28.121" starttime="20171212 14:36:33.210"></status>
</kw>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171212 14:37:28.121" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:37:28.125" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:37:29.178" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:37:29.181" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:37:29.234" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:37:29</msg>
<msg timestamp="20171212 14:37:29.328" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:37:29 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:37:29.331" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:37:29.334" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:37:30.387" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:37:30.390" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:37:30.444" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:37:30</msg>
<msg timestamp="20171212 14:37:30.532" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:37:30 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:37:30.535" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:37:30.538" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:37:31.591" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:37:31.594" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:37:31.647" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:37:31</msg>
<msg timestamp="20171212 14:37:31.735" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:37:31 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:37:31.739" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:37:31.741" level="TRACE">Return: True</msg>
<status status="PASS" endtime="20171212 14:37:31.741" starttime="20171212 14:37:28.121"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Semcli Save Snapshot</arg>
</arguments>
<msg timestamp="20171212 14:37:31.742" level="TRACE">Arguments: [ 'Semcli Save Snapshot' ]</msg>
<msg timestamp="20171212 14:37:31.742" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:37:31.742" starttime="20171212 14:37:31.741"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>GUI SM Login</arg>
</arguments>
<msg timestamp="20171212 14:37:31.743" level="TRACE">Arguments: [ 'GUI SM Login' ]</msg>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<msg timestamp="20171212 14:37:31.746" level="TRACE">Arguments: [ ${IPAddress}='Local' | ${UserName}='Nemuadmin' | ${Password}='nemuuser' | ${CloseSEM}='N' | ${CheckExist}='1' | ${qtpkeepopen}='N' ]</msg>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<msg timestamp="20171212 14:37:31.747" level="TRACE">Arguments: [ 'Run keyword and ignore error' | 'modify sem maxpermsize' ]</msg>
<msg timestamp="20171212 14:37:31.747" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:37:31.747" starttime="20171212 14:37:31.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<msg timestamp="20171212 14:37:31.748" level="TRACE">Arguments: [ "'N'=='Y'" | 'Kill SiteManager Process' ]</msg>
<msg timestamp="20171212 14:37:31.750" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:37:31.750" starttime="20171212 14:37:31.747"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171212 14:37:31.751" level="TRACE">Arguments: [ 'IPAddress=Local' | 'UserName=Nemuadmin' | 'Password=nemuuser' | 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\' | 'CheckExist=1' ]</msg>
<msg timestamp="20171212 14:37:31.751" level="TRACE">Return: ['IPAddress=Local', 'UserName=Nemuadmin', 'Password=nemuuser', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', 'CheckExist=1']</msg>
<msg timestamp="20171212 14:37:31.751" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultI...</msg>
<status status="PASS" endtime="20171212 14:37:31.752" starttime="20171212 14:37:31.750"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<msg timestamp="20171212 14:37:31.752" level="TRACE">Arguments: [ 'run qtp script' | '${siteman_test_path}Login' | '${para_list}' | '${qtpkeepopen}' ]</msg>
<msg timestamp="20171212 14:37:31.752" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:37:31.753" starttime="20171212 14:37:31.752"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171212 14:37:31.753" level="TRACE">Arguments: [ 'D:\\TALib\\tdd_robotws\\GUI_Databases\\QTP\\RL65\\SiteMan\\Login' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' | ['IPAddress=Local', 'UserName=Nemuadmin', 'Password=nemuuser', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', 'CheckExist=1'] | 'N' | '7200' ]</msg>
<msg timestamp="20171212 14:38:29.390" level="INFO">&lt;QTP&gt; Test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\"
CheckExist="1"
&lt;QTP&gt; Save log to d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\GUILog\qtp_log20171212143731\Report
&lt;QTP&gt; Start to run script...</msg>
<msg timestamp="20171212 14:38:29.390" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:38:29.390" starttime="20171212 14:37:31.753"></status>
</kw>
<msg timestamp="20171212 14:38:29.391" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:38:29.391" starttime="20171212 14:37:31.746"></status>
</kw>
<msg timestamp="20171212 14:38:29.391" level="TRACE">Return: (b'PASS', None)</msg>
<status status="PASS" endtime="20171212 14:38:29.392" starttime="20171212 14:37:31.742"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>GUI SM Save Snapshot</arg>
</arguments>
<msg timestamp="20171212 14:38:29.393" level="TRACE">Arguments: [ 'GUI SM Save Snapshot' ]</msg>
<kw name="GUI SM Save Snapshot" library="gui_resource">
<doc>this keyword is use to save snapshot in Site Manager</doc>
<msg timestamp="20171212 14:38:29.394" level="TRACE">Arguments: [ ${DetailLevel}='3' | ${PathFile}='N' | ${qtpkeepopen}='N' | ${SaveParitialExist}='N' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>DetailLevel=${DetailLevel}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>PathFile=${PathFile}</arg>
<arg>SaveParitialExist=${SaveParitialExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171212 14:38:29.396" level="TRACE">Arguments: [ 'DetailLevel=3' | 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\' | 'PathFile=N' | 'SaveParitialExist=N' ]</msg>
<msg timestamp="20171212 14:38:29.396" level="TRACE">Return: ['DetailLevel=3', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', 'PathFile=N', 'SaveParitialExist=N']</msg>
<msg timestamp="20171212 14:38:29.397" level="INFO">${para_list} = [u'DetailLevel=3', u'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', u'PathFile=N', u'SaveParitial...</msg>
<status status="PASS" endtime="20171212 14:38:29.397" starttime="20171212 14:38:29.395"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}SaveSnapshot</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<msg timestamp="20171212 14:38:29.398" level="TRACE">Arguments: [ 'run qtp script' | '${siteman_test_path}SaveSnapshot' | '${para_list}' | '${qtpkeepopen}' ]</msg>
<msg timestamp="20171212 14:38:29.398" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:38:29.399" starttime="20171212 14:38:29.398"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}SaveSnapshot</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171212 14:38:29.400" level="TRACE">Arguments: [ 'D:\\TALib\\tdd_robotws\\GUI_Databases\\QTP\\RL65\\SiteMan\\SaveSnapshot' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' | ['DetailLevel=3', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', 'PathFile=N', 'SaveParitialExist=N'] | 'N' | '7200' ]</msg>
<msg timestamp="20171212 14:40:22.869" level="INFO">&lt;QTP&gt; Test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\SaveSnapshot is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\SaveSnapshot ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
DetailLevel="3"
LogPath="d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\"
PathFile="N"
SaveParitialExist="N"
&lt;QTP&gt; Save log to d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\GUILog\qtp_log20171212143829\Report
&lt;QTP&gt; Start to run script...</msg>
<msg timestamp="20171212 14:40:22.870" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:40:22.870" starttime="20171212 14:38:29.399"></status>
</kw>
<msg timestamp="20171212 14:40:22.870" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:40:22.870" starttime="20171212 14:38:29.394"></status>
</kw>
<msg timestamp="20171212 14:40:22.871" level="TRACE">Return: (b'PASS', None)</msg>
<status status="PASS" endtime="20171212 14:40:22.871" starttime="20171212 14:38:29.392"></status>
</kw>
<kw name="Stop Bts Udp Log" library="RobotWS">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20171212 14:40:22.872" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:40:22.875" level="INFO">[btslog_control.py@173] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20171212 14:40:22.875" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:40:22.876" starttime="20171212 14:40:22.871"></status>
</kw>
<msg timestamp="20171212 14:40:22.876" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:40:22.876" starttime="20171212 14:36:27.505"></status>
</kw>
<msg timestamp="20171212 14:40:22.876" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:40:22.876" starttime="20171212 14:36:27.504"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Reset BTS Check Status</arg>
</arguments>
<msg timestamp="20171212 14:40:22.877" level="TRACE">Arguments: [ 'Reset BTS Check Status' ]</msg>
<kw name="Reset BTS Check Status" library="OM_resources_new">
<msg timestamp="20171212 14:40:22.878" level="TRACE">Arguments: [  ]</msg>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>GUI SM Captuer Screen</arg>
</arguments>
<msg timestamp="20171212 14:40:22.878" level="TRACE">Arguments: [ 'GUI SM Captuer Screen' ]</msg>
<kw name="GUI SM Captuer Screen" library="gui_resource">
<doc>this keyword is used for capture the screen</doc>
<msg timestamp="20171212 14:40:22.879" level="TRACE">Arguments: [ ${qtpkeepopen}='N' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171212 14:40:22.880" level="TRACE">Arguments: [ 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\' ]</msg>
<msg timestamp="20171212 14:40:22.880" level="TRACE">Return: ['LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\']</msg>
<msg timestamp="20171212 14:40:22.880" level="INFO">${para_list} = [u'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\']</msg>
<status status="PASS" endtime="20171212 14:40:22.880" starttime="20171212 14:40:22.879"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}CaptureImage</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171212 14:40:22.881" level="TRACE">Arguments: [ 'D:\\TALib\\tdd_robotws\\GUI_Databases\\QTP\\RL65\\SiteMan\\CaptureImage' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' | ['LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\'] | 'N' | '7200' ]</msg>
<msg timestamp="20171212 14:40:31.782" level="INFO">&lt;QTP&gt; Test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
LogPath="d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\"
&lt;QTP&gt; Save log to d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\GUILog\qtp_log20171212144022\Report
&lt;QTP&gt; Start to run script...</msg>
<msg timestamp="20171212 14:40:31.782" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:40:31.783" starttime="20171212 14:40:22.881"></status>
</kw>
<msg timestamp="20171212 14:40:31.783" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:40:31.783" starttime="20171212 14:40:22.879"></status>
</kw>
<msg timestamp="20171212 14:40:31.783" level="TRACE">Return: (b'PASS', None)</msg>
<status status="PASS" endtime="20171212 14:40:31.783" starttime="20171212 14:40:22.878"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Capture Screen</arg>
</arguments>
<msg timestamp="20171212 14:40:31.784" level="TRACE">Arguments: [ 'Capture Screen' ]</msg>
<kw name="Capture Screen" library="OM_resources_new">
<msg timestamp="20171212 14:40:31.785" level="TRACE">Arguments: [  ]</msg>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171212 14:40:31.785" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:40:31.790" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:40:32.844" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:40:32.848" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:40:32.902" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:40:32</msg>
<msg timestamp="20171212 14:40:33.034" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:40:33 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:40:33.038" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\NOKIA-20170515I\ROOT\CIMV2:Win32_Process.Handle="6968"
Instance deletion successful.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:40:33.042" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:40:34.096" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:40:34.100" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:40:34.158" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:40:34</msg>
<msg timestamp="20171212 14:40:34.289" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:40:34 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:40:34.293" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\NOKIA-20170515I\ROOT\CIMV2:Win32_Process.Handle="6260"
Instance deletion successful.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:40:34.297" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:40:35.351" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:40:35.355" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:40:35.409" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:40:35</msg>
<msg timestamp="20171212 14:40:35.498" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:40:35 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:40:35.503" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:40:35.505" level="TRACE">Return: True</msg>
<status status="PASS" endtime="20171212 14:40:35.505" starttime="20171212 14:40:31.785"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<msg timestamp="20171212 14:40:35.509" level="TRACE">Arguments: [ ${IPAddress}='Local' | ${UserName}='Nemuadmin' | ${Password}='nemuuser' | ${CloseSEM}='N' | ${CheckExist}='1' | ${qtpkeepopen}='N' ]</msg>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<msg timestamp="20171212 14:40:35.509" level="TRACE">Arguments: [ 'Run keyword and ignore error' | 'modify sem maxpermsize' ]</msg>
<msg timestamp="20171212 14:40:35.510" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:40:35.510" starttime="20171212 14:40:35.509"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<msg timestamp="20171212 14:40:35.510" level="TRACE">Arguments: [ "'N'=='Y'" | 'Kill SiteManager Process' ]</msg>
<msg timestamp="20171212 14:40:35.513" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:40:35.513" starttime="20171212 14:40:35.510"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171212 14:40:35.514" level="TRACE">Arguments: [ 'IPAddress=Local' | 'UserName=Nemuadmin' | 'Password=nemuuser' | 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\' | 'CheckExist=1' ]</msg>
<msg timestamp="20171212 14:40:35.514" level="TRACE">Return: ['IPAddress=Local', 'UserName=Nemuadmin', 'Password=nemuuser', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', 'CheckExist=1']</msg>
<msg timestamp="20171212 14:40:35.514" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultI...</msg>
<status status="PASS" endtime="20171212 14:40:35.514" starttime="20171212 14:40:35.513"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<msg timestamp="20171212 14:40:35.515" level="TRACE">Arguments: [ 'run qtp script' | '${siteman_test_path}Login' | '${para_list}' | '${qtpkeepopen}' ]</msg>
<msg timestamp="20171212 14:40:35.515" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:40:35.515" starttime="20171212 14:40:35.515"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171212 14:40:35.516" level="TRACE">Arguments: [ 'D:\\TALib\\tdd_robotws\\GUI_Databases\\QTP\\RL65\\SiteMan\\Login' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' | ['IPAddress=Local', 'UserName=Nemuadmin', 'Password=nemuuser', 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\', 'CheckExist=1'] | 'N' | '7200' ]</msg>
<msg timestamp="20171212 14:41:26.137" level="INFO">&lt;QTP&gt; Test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\"
CheckExist="1"
&lt;QTP&gt; Save log to d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\GUILog\qtp_log20171212144035\Report
&lt;QTP&gt; Start to run script...</msg>
<msg timestamp="20171212 14:41:26.137" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:41:26.137" starttime="20171212 14:40:35.516"></status>
</kw>
<msg timestamp="20171212 14:41:26.137" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:41:26.138" starttime="20171212 14:40:35.508"></status>
</kw>
<kw name="GUI SM Captuer Screen" library="gui_resource">
<doc>this keyword is used for capture the screen</doc>
<msg timestamp="20171212 14:41:26.138" level="TRACE">Arguments: [ ${qtpkeepopen}='N' ]</msg>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171212 14:41:26.139" level="TRACE">Arguments: [ 'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\' ]</msg>
<msg timestamp="20171212 14:41:26.139" level="TRACE">Return: ['LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\']</msg>
<msg timestamp="20171212 14:41:26.139" level="INFO">${para_list} = [u'LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\']</msg>
<status status="PASS" endtime="20171212 14:41:26.140" starttime="20171212 14:41:26.139"></status>
</kw>
<kw name="Run Qtp" library="RobotWS">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}CaptureImage</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171212 14:41:26.140" level="TRACE">Arguments: [ 'D:\\TALib\\tdd_robotws\\GUI_Databases\\QTP\\RL65\\SiteMan\\CaptureImage' | 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr' | ['LogPath=d:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\'] | 'N' | '7200' ]</msg>
<msg timestamp="20171212 14:41:31.857" level="INFO">&lt;QTP&gt; Test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65\SiteMan\CaptureImage ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TALib\tdd_robotws\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
LogPath="d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\"
&lt;QTP&gt; Save log to d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\GUILog\qtp_log20171212144126\Report
&lt;QTP&gt; Start to run script...</msg>
<msg timestamp="20171212 14:41:31.857" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:41:31.857" starttime="20171212 14:41:26.140"></status>
</kw>
<msg timestamp="20171212 14:41:31.857" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:41:31.858" starttime="20171212 14:41:26.138"></status>
</kw>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171212 14:41:31.858" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:41:31.863" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:41:32.917" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:41:32.921" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:41:32.976" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:41:32</msg>
<msg timestamp="20171212 14:41:33.117" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:41:33 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:41:33.121" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\NOKIA-20170515I\ROOT\CIMV2:Win32_Process.Handle="4420"
Instance deletion successful.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:41:33.125" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:41:34.179" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:41:34.183" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:41:34.246" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:41:34</msg>
<msg timestamp="20171212 14:41:34.352" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:41:34 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:41:34.356" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\NOKIA-20170515I\ROOT\CIMV2:Win32_Process.Handle="6824"
Instance deletion successful.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:41:34.360" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:41:35.414" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:41:35.418" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:41:35.472" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:41:35</msg>
<msg timestamp="20171212 14:41:35.561" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:41:35 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:41:35.566" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:41:35.568" level="TRACE">Return: True</msg>
<status status="PASS" endtime="20171212 14:41:35.568" starttime="20171212 14:41:31.858"></status>
</kw>
<msg timestamp="20171212 14:41:35.569" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:41:35.569" starttime="20171212 14:40:31.784"></status>
</kw>
<msg timestamp="20171212 14:41:35.569" level="TRACE">Return: (b'PASS', None)</msg>
<status status="PASS" endtime="20171212 14:41:35.569" starttime="20171212 14:40:31.784"></status>
</kw>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171212 14:41:35.570" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:41:35.570" level="TRACE">Return: b'20171212144135'</msg>
<msg timestamp="20171212 14:41:35.570" level="INFO">${time} = 20171212144135</msg>
<status status="PASS" endtime="20171212 14:41:35.570" starttime="20171212 14:41:35.570"></status>
</kw>
<kw name="Start Bts Udp Log" library="RobotWS">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}BTSLOG_${time}.LOG</arg>
</arguments>
<msg timestamp="20171212 14:41:35.571" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\BTSLOG_20171212144135.LOG' ]</msg>
<msg timestamp="20171212 14:41:35.574" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM btslog.exe</msg>
<msg timestamp="20171212 14:41:35.629" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:41:35.632" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM BTSlog2.exe</msg>
<msg timestamp="20171212 14:41:35.686" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:41:35.689" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM btslog</msg>
<msg timestamp="20171212 14:41:35.744" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:41:35.749" level="INFO">[btslog_control.py@173] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20171212 14:41:35.753" level="INFO">[file_common.py@209] Directory "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr" already exists, no need to create it again.</msg>
<msg timestamp="20171212 14:41:35.756" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:41:35.756" starttime="20171212 14:41:35.571"></status>
</kw>
<kw name="Power Off" library="RobotWS">
<doc>control powerbreaker to power off a outlet</doc>
<arguments>
<arg>${BTS_POWERBREAK_PORT[0]}</arg>
</arguments>
<msg timestamp="20171212 14:41:35.757" level="TRACE">Arguments: [ b'FACOM:10.69.66.55:5' ]</msg>
<msg timestamp="20171212 14:41:35.760" level="DEBUG">[powerbreaker_control.py@69] start power off 'FACOM:10.69.66.55:5'</msg>
<msg timestamp="20171212 14:41:35.764" level="DEBUG">[base.py@22] PDU type is: Facom</msg>
<msg timestamp="20171212 14:41:35.767" level="DEBUG">[base.py@23] PDU ip is: 10.69.66.55</msg>
<msg timestamp="20171212 14:41:35.771" level="INFO">[facom.py@113] Connect to Facom succeed !</msg>
<msg timestamp="20171212 14:41:35.774" level="INFO">[base.py@40] trial power off for 0 times</msg>
<msg timestamp="20171212 14:41:35.777" level="DEBUG">[facom.py@121] send msg: 0105000400008c0b</msg>
<msg timestamp="20171212 14:41:35.780" level="DEBUG">[facom.py@126] recv msg: 0105000400008c0b</msg>
<msg timestamp="20171212 14:41:35.783" level="DEBUG">[facom.py@121] send msg: 010200040001f80b</msg>
<msg timestamp="20171212 14:41:35.786" level="DEBUG">[facom.py@126] recv msg: 01020100a188</msg>
<msg timestamp="20171212 14:41:35.790" level="INFO">[facom.py@52] Power off port 5 succeed!</msg>
<msg timestamp="20171212 14:41:35.791" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:41:35.791" starttime="20171212 14:41:35.756"></status>
</kw>
<kw name="Power On" library="RobotWS">
<doc>control powerbreaker to power on a outlet</doc>
<arguments>
<arg>${BTS_POWERBREAK_PORT[0]}</arg>
</arguments>
<msg timestamp="20171212 14:41:35.792" level="TRACE">Arguments: [ b'FACOM:10.69.66.55:5' ]</msg>
<msg timestamp="20171212 14:41:35.795" level="DEBUG">[powerbreaker_control.py@42] start power on 'FACOM:10.69.66.55:5'</msg>
<msg timestamp="20171212 14:41:35.798" level="DEBUG">[base.py@22] PDU type is: Facom</msg>
<msg timestamp="20171212 14:41:35.802" level="DEBUG">[base.py@23] PDU ip is: 10.69.66.55</msg>
<msg timestamp="20171212 14:41:35.805" level="INFO">[facom.py@113] Connect to Facom succeed !</msg>
<msg timestamp="20171212 14:41:35.808" level="INFO">[base.py@28] trial power on for 0 times</msg>
<msg timestamp="20171212 14:41:35.811" level="DEBUG">[facom.py@121] send msg: 01050004ff00cdfb</msg>
<msg timestamp="20171212 14:41:35.815" level="DEBUG">[facom.py@126] recv msg: 01050004ff00cdfb</msg>
<msg timestamp="20171212 14:41:35.818" level="DEBUG">[facom.py@121] send msg: 010200040001f80b</msg>
<msg timestamp="20171212 14:41:35.821" level="DEBUG">[facom.py@126] recv msg: 010201016048</msg>
<msg timestamp="20171212 14:41:35.824" level="INFO">[facom.py@75] Power on port 5 succeed!</msg>
<msg timestamp="20171212 14:41:35.826" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:41:35.826" starttime="20171212 14:41:35.791"></status>
</kw>
<kw name="Wait Until Units Startup" library="RobotWS">
<doc>This keyword tests the reachability of given unit/units.</doc>
<arguments>
<arg>300</arg>
<arg>${BTS_FCM}</arg>
</arguments>
<msg timestamp="20171212 14:41:35.827" level="TRACE">Arguments: [ '300' | '192.168.255.1' ]</msg>
<msg timestamp="20171212 14:44:03.518" level="INFO">[ping_control.py@145] ping 192.168.255.1 OK!</msg>
<msg timestamp="20171212 14:44:13.518" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:44:13.518" starttime="20171212 14:41:35.826"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Save IM Log</arg>
</arguments>
<msg timestamp="20171212 14:44:13.519" level="TRACE">Arguments: [ 'Save IM Log' ]</msg>
<kw name="Save IM Log" library="OM_resources_new">
<msg timestamp="20171212 14:44:13.520" level="TRACE">Arguments: [  ]</msg>
<kw name="Get Timestamp" library="RobotWS">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${time}</var>
</assign>
<msg timestamp="20171212 14:44:13.520" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:44:13.520" level="TRACE">Return: b'20171212144413'</msg>
<msg timestamp="20171212 14:44:13.521" level="INFO">${time} = 20171212144413</msg>
<status status="PASS" endtime="20171212 14:44:13.521" starttime="20171212 14:44:13.520"></status>
</kw>
<kw name="Save Infomodel Log" library="RobotWS">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST LOG DIR}${/}infomodel_${time}</arg>
</arguments>
<msg timestamp="20171212 14:44:13.522" level="TRACE">Arguments: [ 'd:\\test\\log\\ev_logs\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\\infomodel_20171212144413' ]</msg>
<msg timestamp="20171212 14:44:13.523" level="TRACE">Return: None</msg>
<msg timestamp="20171212 14:44:13.523" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20171212 14:44:13.523" level="DEBUG">Traceback (most recent call last):
  File "D:\TALib\tdd_robotws\RobotWS\TdlteLib\enb_lib\infomodel_control.py", line 215, in save_infomodel_log
    alias=alias)
  File "D:\TALib\ute_infomodel\interface.py", line 211, in save_infomodel_log
    self.store.get(alias).save_log(filename)
  File "D:\TALib\ute_common_store\store.py", line 83, in get
    "Please setup library before any other operation.".format(alias))</msg>
<status status="FAIL" endtime="20171212 14:44:13.524" starttime="20171212 14:44:13.522"></status>
</kw>
<kw name="Stop Infomodel" library="RobotWS">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20171212 14:44:13.524" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:44:13.529" level="INFO">[infomodel_control.py@190] stop infomodel logger failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20171212 14:44:13.534" level="INFO">[infomodel_control.py@194] disconnect from infomodel failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20171212 14:44:13.538" level="INFO">[infomodel_control.py@198] teardown infomodel failed. details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20171212 14:44:13.543" level="INFO">[infomodel_control.py@200] stop infomodel succeed .</msg>
<msg timestamp="20171212 14:44:13.544" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:44:13.545" starttime="20171212 14:44:13.524"></status>
</kw>
<msg timestamp="20171212 14:44:13.545" level="TRACE">Return: None</msg>
<status status="FAIL" endtime="20171212 14:44:13.545" starttime="20171212 14:44:13.519"></status>
</kw>
<msg timestamp="20171212 14:44:13.546" level="TRACE">Return: (b'FAIL', "AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.")</msg>
<status status="PASS" endtime="20171212 14:44:13.546" starttime="20171212 14:44:13.519"></status>
</kw>
<kw name="Check Bts Until Onair" library="RobotWS">
<doc>check bts until all cell is onair with infomodel, and have PBCH in udp log.</doc>
<arguments>
<arg>onair_check_msg=['']</arg>
</arguments>
<msg timestamp="20171212 14:44:13.547" level="TRACE">Arguments: [ onair_check_msg="['']" ]</msg>
<msg timestamp="20171212 14:45:38.011" level="INFO">Exit code: 1</msg>
<msg timestamp="20171212 14:45:38.011" level="INFO">STDOUT
</msg>
<msg timestamp="20171212 14:45:38.011" level="INFO">STDERR
Started InfoModel server PYRO:TA_infomodel_server@localhost:38243
</msg>
<msg timestamp="20171212 14:44:13.552" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM btslog.exe</msg>
<msg timestamp="20171212 14:44:13.611" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:44:13.614" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM BTSlog2.exe</msg>
<msg timestamp="20171212 14:44:13.665" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:44:13.668" level="DEBUG">[process_control.py@158] Run command: TASKKILL /F /T /IM btslog</msg>
<msg timestamp="20171212 14:44:13.718" level="DEBUG">[process_control.py@166]</msg>
<msg timestamp="20171212 14:44:13.722" level="INFO">[file_common.py@209] Directory "d:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr" already exists, no need to create it again.</msg>
<msg timestamp="20171212 14:44:22.865" level="INFO">[infomodel_control.py@159] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None</msg>
<msg timestamp="20171212 14:44:24.874" level="INFO">[infomodel_control.py@163] start infomodel succeed .</msg>
<msg timestamp="20171212 14:44:24.883" level="INFO">[infomodel_control.py@165] start infomodel logger succeed .</msg>
<msg timestamp="20171212 14:44:24.888" level="INFO">[enb_resource.py@158] The current check mode is INFOMODEL</msg>
<msg timestamp="20171212 14:44:25.933" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171212 14:44:26.965" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:44:27.993" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:44:29.014" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:44:40.046" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171212 14:44:41.098" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:44:42.134" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:44:43.163" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:44:54.176" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171212 14:44:55.200" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:44:56.229" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:44:57.256" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:45:08.275" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171212 14:45:09.290" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:45:10.318" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:45:11.348" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:45:22.363" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171212 14:45:23.386" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:45:24.416" level="INFO">[enb_resource.py@213] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:45:25.436" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 1492L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171212 14:45:35.468" level="INFO">[infomodel_control.py@329] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171212 14:45:36.491" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will try another way</msg>
<msg timestamp="20171212 14:45:36.537" level="INFO">[infomodel_control.py@329] query infomodel: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171212 14:45:37.552" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will sleep and try again</msg>
<msg timestamp="20171212 14:45:37.582" level="INFO">[infomodel_control.py@329] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171212 14:45:37.705" level="INFO">[infomodel_control.py@329] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20171212 14:45:37.708" level="INFO">[enb_resource.py@228] infomodel check every cell onair succeed !</msg>
<msg timestamp="20171212 14:45:37.712" level="INFO">[enb_resource.py@351] bts log check onair msg succeed !</msg>
<msg timestamp="20171212 14:45:37.746" level="INFO">[infomodel_control.py@216] save infomodel log to file: 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\im_20171212144537' succeed .</msg>
<msg timestamp="20171212 14:45:37.751" level="INFO">[infomodel_control.py@188] stop infomodel logger succeed .</msg>
<msg timestamp="20171212 14:45:38.015" level="INFO">[infomodel_control.py@200] stop infomodel succeed .</msg>
<msg timestamp="20171212 14:45:38.021" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:38.021" starttime="20171212 14:44:13.546"></status>
</kw>
<kw name="Stop Bts Udp Log" library="RobotWS">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20171212 14:45:38.022" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:45:38.027" level="INFO">[btslog_control.py@173] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20171212 14:45:38.027" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:38.027" starttime="20171212 14:45:38.022"></status>
</kw>
<msg timestamp="20171212 14:45:38.028" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:38.028" starttime="20171212 14:40:22.878"></status>
</kw>
<msg timestamp="20171212 14:45:38.029" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:38.029" starttime="20171212 14:40:22.877"></status>
</kw>
<kw name="Kill Sitemanager Process" library="RobotWS">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171212 14:45:38.030" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:45:38.033" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:45:39.085" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:45:39.087" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:45:39.139" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:45:39</msg>
<msg timestamp="20171212 14:45:39.233" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:45:39 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:45:39.235" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:45:39.237" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:45:40.289" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:45:40.291" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:45:40.343" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:45:40</msg>
<msg timestamp="20171212 14:45:40.436" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:45:40 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:45:40.438" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:45:40.440" level="INFO">[connection_mgr.py@184] Current connection: 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:45:41.493" level="DEBUG">[telnet_common.py@137] Get Response:</msg>
<msg timestamp="20171212 14:45:41.495" level="INFO">[telnet_common.py@268] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171212 14:45:41.547" level="TRACE">[telnet_common.py@361] Telnet: &gt;&gt;expect 2017-12-12 14:45:41</msg>
<msg timestamp="20171212 14:45:41.637" level="TRACE">[telnet_common.py@383] Telnet: &lt;&lt;expect 2017-12-12 14:45:41 found [CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$</msg>
<msg timestamp="20171212 14:45:41.639" level="INFO">[telnet_common.py@298] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\Administrator&gt;</msg>
<msg timestamp="20171212 14:45:41.641" level="TRACE">Return: True</msg>
<status status="PASS" endtime="20171212 14:45:41.641" starttime="20171212 14:45:38.029"></status>
</kw>
<kw name="Disconnect All Hosts" library="RobotWS">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20171212 14:45:41.642" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:45:41.644" level="INFO">[telnet_common.py@180]</msg>
<msg timestamp="20171212 14:45:41.647" level="INFO">[telnet_common.py@181] Disconnect from 10.69.67.26:23 DeviceType:Windows Timeout:30 seconds &lt;RobotWS.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05B02B48&gt;</msg>
<msg timestamp="20171212 14:45:41.647" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:41.647" starttime="20171212 14:45:41.642"></status>
</kw>
<msg timestamp="20171212 14:45:41.648" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:41.648" starttime="20171212 14:36:27.502"></status>
</kw>
<doc>Purpose: The purpose of the test is to verify OAM and eNb behaviour with handling fault 418 EFaultId_OseFatalErr</doc>
<tags>
<tag>Common + Common</tag>
<tag>configuration:ALL</tag>
<tag>developer-henry.1.wang@nsn.com</tag>
<tag>Domain:TEST</tag>
<tag>HW:FSIP *</tag>
<tag>OAM1</tag>
<tag>Owner-ziyu.yuan@nokia.com</tag>
<tag>QC_577091</tag>
<tag>Requirement:None</tag>
</tags>
<status status="FAIL" endtime="20171212 14:45:41.648" critical="yes" starttime="20171212 14:29:33.133">Keyword 'File Should Contain' failed after retrying for 5 minutes. The last error was: Not find '[u'FRI/FRI.*Detector 418.*filtering timer 2s started', u'FRI/FRI.*Detector 418.*active']' in 'd:\test\log\ev_logs\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr_20171212142743\LTE2313-T-u_01_01_Fault_418_EFaultId_OseFatalErr\btslog_check.LOG'</status>
</test>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<msg timestamp="20171212 14:45:41.650" level="TRACE">Arguments: [ ${need_zip}=True ]</msg>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20171212 14:45:41.650" level="TRACE">Arguments: [ "'off'=='on'" | 'Run Keyword If All Tests Passed' | 'Remove Directory' | '${SUITE_LOG_DIRECTORY}' | '${True}' ]</msg>
<msg timestamp="20171212 14:45:41.653" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:41.653" starttime="20171212 14:45:41.650"></status>
</kw>
<kw name="Disconnect All Hosts" library="RobotWS">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20171212 14:45:41.654" level="TRACE">Arguments: [  ]</msg>
<msg timestamp="20171212 14:45:41.654" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:41.654" starttime="20171212 14:45:41.653"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${zip_pass_log}</arg>
</arguments>
<assign>
<var>${para_exist}</var>
</assign>
<msg timestamp="20171212 14:45:41.655" level="TRACE">Arguments: [ 'variable should exist' | '${zip_pass_log}' ]</msg>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${zip_pass_log}</arg>
</arguments>
<msg timestamp="20171212 14:45:41.655" level="TRACE">Arguments: [ '${zip_pass_log}' ]</msg>
<msg timestamp="20171212 14:45:41.660" level="TRACE">Return: None</msg>
<msg timestamp="20171212 14:45:41.660" level="FAIL">Variable ${zip_pass_log} does not exist.</msg>
<msg timestamp="20171212 14:45:41.660" level="DEBUG">Traceback (most recent call last):
  None</msg>
<status status="FAIL" endtime="20171212 14:45:41.660" starttime="20171212 14:45:41.655"></status>
</kw>
<msg timestamp="20171212 14:45:41.661" level="TRACE">Return: (b'FAIL', 'Variable ${zip_pass_log} does not exist.')</msg>
<msg timestamp="20171212 14:45:41.661" level="INFO">${para_exist} = ('FAIL', u'Variable ${zip_pass_log} does not exist.')</msg>
<status status="PASS" endtime="20171212 14:45:41.661" starttime="20171212 14:45:41.654"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS' == '${para_exist[0]}'</arg>
<arg>${zip_pass_log}</arg>
<arg>${True}</arg>
</arguments>
<assign>
<var>${zip_log}</var>
</assign>
<msg timestamp="20171212 14:45:41.662" level="TRACE">Arguments: [ "'PASS' == 'FAIL'" | '${zip_pass_log}' | '${True}' ]</msg>
<msg timestamp="20171212 14:45:41.664" level="TRACE">Return: True</msg>
<msg timestamp="20171212 14:45:41.664" level="INFO">${zip_log} = True</msg>
<status status="PASS" endtime="20171212 14:45:41.664" starttime="20171212 14:45:41.661"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<msg timestamp="20171212 14:45:41.665" level="TRACE">Arguments: [ 'Run Keyword If All Tests Passed' | 'Run Keyword If' | '${zip_log} == ${True}' | 'Zip File' | '${SUITE_LOG_DIRECTORY}' | '${SUITE_LOG_DIRECTORY}.zip' ]</msg>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<msg timestamp="20171212 14:45:41.666" level="TRACE">Arguments: [ 'Run Keyword If' | '${zip_log} == ${True}' | 'Zip File' | '${SUITE_LOG_DIRECTORY}' | '${SUITE_LOG_DIRECTORY}.zip' ]</msg>
<msg timestamp="20171212 14:45:41.666" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:41.666" starttime="20171212 14:45:41.665"></status>
</kw>
<msg timestamp="20171212 14:45:41.666" level="TRACE">Return: (b'PASS', None)</msg>
<msg timestamp="20171212 14:45:41.667" level="INFO">${status} = PASS</msg>
<msg timestamp="20171212 14:45:41.667" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20171212 14:45:41.667" starttime="20171212 14:45:41.665"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20171212 14:45:41.668" level="TRACE">Arguments: [ 'Run Keyword If All Tests Passed' | 'Run Keyword If' | "'${status}' == 'PASS' and ${zip_log} == ${True}" | 'Remove Directory' | '${SUITE_LOG_DIRECTORY}' | '${True}' ]</msg>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20171212 14:45:41.668" level="TRACE">Arguments: [ 'Run Keyword If' | "'${status}' == 'PASS' and ${zip_log} == ${True}" | 'Remove Directory' | '${SUITE_LOG_DIRECTORY}' | '${True}' ]</msg>
<msg timestamp="20171212 14:45:41.668" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:41.669" starttime="20171212 14:45:41.668"></status>
</kw>
<msg timestamp="20171212 14:45:41.669" level="TRACE">Return: (b'PASS', None)</msg>
<status status="PASS" endtime="20171212 14:45:41.669" starttime="20171212 14:45:41.667"></status>
</kw>
<msg timestamp="20171212 14:45:41.669" level="TRACE">Return: None</msg>
<status status="PASS" endtime="20171212 14:45:41.669" starttime="20171212 14:45:41.649"></status>
</kw>
<doc>LTE2313-T-u_01_01 Fault_418_EFaultId_OseFatalErr</doc>
<status status="FAIL" endtime="20171212 14:45:41.669" starttime="20171212 14:27:42.433"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">Common + Common</stat>
<stat fail="1" pass="0">configuration:ALL</stat>
<stat fail="1" pass="0">developer-henry.1.wang@nsn.com</stat>
<stat fail="1" pass="0">Domain:TEST</stat>
<stat fail="1" pass="0">HW:FSIP *</stat>
<stat fail="1" pass="0">OAM1</stat>
<stat fail="1" pass="0">Owner-ziyu.yuan@nokia.com</stat>
<stat fail="1" pass="0">QC_577091</stat>
<stat fail="1" pass="0">Requirement:None</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="LTE2313-T-u 01 01 Fault 418 EFaultId OseFatalErr" pass="0">LTE2313-T-u 01 01 Fault 418 EFaultId OseFatalErr</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171212 14:27:43.142" level="ERROR">Adding keyword 'iphy_attach_ue' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'attach_ue'</msg>
<msg timestamp="20171212 14:27:43.142" level="ERROR">Adding keyword 'iphy_detach_ue' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'detach_ue'</msg>
<msg timestamp="20171212 14:27:43.142" level="ERROR">Adding keyword 'iphy_start_ul_udp_data_traffic' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'start_ul_udp_data_traffic'</msg>
<msg timestamp="20171212 14:27:43.143" level="ERROR">Adding keyword 'iphy_start_dl_udp_data_traffic' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'start_dl_udp_data_traffic'</msg>
<msg timestamp="20171212 14:27:43.143" level="ERROR">Adding keyword 'iphy_start_ul_tcp_data_traffic' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'start_ul_tcp_data_traffic'</msg>
<msg timestamp="20171212 14:27:43.143" level="ERROR">Adding keyword 'iphy_start_dl_tcp_data_traffic' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'start_dl_tcp_data_traffic'</msg>
<msg timestamp="20171212 14:27:43.143" level="ERROR">Adding keyword 'iphy_start_ue_logging' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'start_ue_logging'</msg>
<msg timestamp="20171212 14:27:43.143" level="ERROR">Adding keyword 'iphy_stop_ue_logging' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'stop_ue_logging'</msg>
<msg timestamp="20171212 14:27:43.143" level="ERROR">Adding keyword 'iphy_get_ue_log' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_ue_log'</msg>
<msg timestamp="20171212 14:27:43.143" level="ERROR">Adding keyword 'iphy_get_ul_throughput_ave' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_ul_throughput_ave'</msg>
<msg timestamp="20171212 14:27:43.144" level="ERROR">Adding keyword 'iphy_get_dl_throughput_ave' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_dl_throughput_ave'</msg>
<msg timestamp="20171212 14:27:43.144" level="ERROR">Adding keyword 'iphy_get_ul_throughput_max' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_ul_throughput_max'</msg>
<msg timestamp="20171212 14:27:43.144" level="ERROR">Adding keyword 'iphy_get_dl_throughput_max' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_dl_throughput_max'</msg>
<msg timestamp="20171212 14:27:43.144" level="ERROR">Adding keyword 'iphy_stop_dl_udp_data_traffic' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'stop_dl_udp_data_traffic'</msg>
<msg timestamp="20171212 14:27:43.144" level="ERROR">Adding keyword 'iphy_stop_ul_udp_data_traffic' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'stop_ul_udp_data_traffic'</msg>
<msg timestamp="20171212 14:27:43.144" level="ERROR">Adding keyword 'iphy_stop_dl_tcp_data_traffic' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'stop_dl_tcp_data_traffic'</msg>
<msg timestamp="20171212 14:27:43.144" level="ERROR">Adding keyword 'iphy_stop_ul_tcp_data_traffic' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'stop_ul_tcp_data_traffic'</msg>
<msg timestamp="20171212 14:27:43.144" level="ERROR">Adding keyword 'iphy_setup_ue' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'setup_ue'</msg>
<msg timestamp="20171212 14:27:43.145" level="ERROR">Adding keyword 'iphy_get_ue_state' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_ue_state'</msg>
<msg timestamp="20171212 14:27:43.145" level="ERROR">Adding keyword 'iphy_teardown_ue' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'teardown_ue'</msg>
<msg timestamp="20171212 14:27:43.145" level="ERROR">Adding keyword 'iphy_execute_ue_command' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'execute_ue_command'</msg>
<msg timestamp="20171212 14:27:43.145" level="ERROR">Adding keyword 'iphy_wait_until_sib1_and_sib2_received' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'wait_until_sib1_and_sib2_received'</msg>
<msg timestamp="20171212 14:27:43.145" level="ERROR">Adding keyword 'iphy_detach_all_ue' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'detach_all_ue'</msg>
<msg timestamp="20171212 14:27:43.145" level="ERROR">Adding keyword 'iphy_validate_bearer_is_active' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'validate_bearer_is_active'</msg>
<msg timestamp="20171212 14:27:43.145" level="ERROR">Adding keyword 'iphy_create_bearer' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'create_bearer'</msg>
<msg timestamp="20171212 14:27:43.145" level="ERROR">Adding keyword 'iphy_delete_bearer' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'delete_bearer'</msg>
<msg timestamp="20171212 14:27:43.146" level="ERROR">Adding keyword 'iphy_modify_bearer' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'modify_bearer'</msg>
<msg timestamp="20171212 14:27:43.146" level="ERROR">Adding keyword 'iphy_get_active_bearer_qci' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_active_bearer_qci'</msg>
<msg timestamp="20171212 14:27:43.146" level="ERROR">Adding keyword 'iphy_get_cell_states' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_cell_states'</msg>
<msg timestamp="20171212 14:27:43.146" level="ERROR">Adding keyword 'iphy_get_cell_throughput_ave' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_cell_throughput_ave'</msg>
<msg timestamp="20171212 14:27:43.146" level="ERROR">Adding keyword 'iphy_check_ue_is_active' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'check_ue_is_active'</msg>
<msg timestamp="20171212 14:27:43.146" level="ERROR">Adding keyword 'iphy_modify_pathloss' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'modify_pathloss'</msg>
<msg timestamp="20171212 14:27:43.146" level="ERROR">Adding keyword 'iphy_get_ul_bler_ave' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_ul_bler_ave'</msg>
<msg timestamp="20171212 14:27:43.147" level="ERROR">Adding keyword 'iphy_get_dl_bler_ave' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_dl_bler_ave'</msg>
<msg timestamp="20171212 14:27:43.147" level="ERROR">Adding keyword 'iphy_get_ue_throughput_on_specific_scell' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_ue_throughput_on_specific_scell'</msg>
<msg timestamp="20171212 14:27:43.147" level="ERROR">Adding keyword 'iphy_get_ue_last_allocation_info' to library 'RobotWS' failed: AttributeError: 'NoneType' object has no attribute 'get_ue_last_allocation_info'</msg>
<msg timestamp="20171212 14:27:43.158" level="ERROR">Error in file 'D:\TALib\tdd_robotws\RobotWS.html': Processing variable file 'D:\TALib\tdd_config' failed: Importing variable file 'D:\TALib\tdd_config' failed: ImportError: cannot import name enb
Traceback (most recent call last):
  File "D:\TALib\tdd_config\__init__.py", line 166, in &lt;module&gt;
    tl = importlib.import_module("%s." % config_module + CONFIGURATION)
  File "C:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "C:\Python27\lib\site-packages\config\evcommon\__init__.py", line 8, in &lt;module&gt;
    from .enb import enb as enb_local
PYTHONPATH:
  D:\TALib\tdd_robotws
  D:\TALib\tdd_robotws\RobotWS\tools\RemoteSwing\remoteswinglibrary-2.0.3.jar
  C:\Python27\lib\site-packages\robotframework-3.0-py2.7.egg
  C:\Python27\lib\site-packages\pygments-1.6-py2.7.egg
  C:\Python27\lib\site-packages\robotframework_ride-1.5.2.1-py2.7.egg
  C:\Python27\lib\site-packages\pycrypto-2.6-py2.7-win32.egg
  C:\Python27\lib\site-packages\ecdsa-0.11-py2.7.egg
  C:\Python27\lib\site-packages\paramiko-1.15.2-py2.7.egg
  C:\Python27\lib\site-packages\robotframework_sshlibrary-2.1.1-py2.7.egg
  C:\Python27\lib\site-packages\xlrd-0.9.2-py2.7.egg
  C:\Python27\lib\site-packages\xlwt-0.7.5-py2.7.egg
  C:\Python27\lib\site-packages\xlutils-1.7.0-py2.7.egg
  C:\Python27\lib\site-packages\lxml-3.1.0-py2.7-win32.egg
  C:\Python27\lib\site-packages\pyserial-2.7-py2.7.egg
  C:\Python27\lib\site-packages\pyasn1-0.1.7-py2.7.egg
  C:\Python27\lib\site-packages\pysnmp-4.2.4-py2.7.egg
  C:\Python27\lib\site-packages\pytz-2014.4-py2.7.egg
  C:\Python27\lib\site-packages\zope.interface-4.1.2-py2.7-win32.egg
  C:\Python27\lib\site-packages\datetime-4.0.1-py2.7.egg
  C:\Python27\lib\site-packages\json_rpc-1.7.0-py2.7.egg
  C:\Python27\lib\site-packages\wrapt-1.10.4-py2.7.egg
  C:\Python27\lib\site-packages\requests-2.7.0-py2.7.egg
  C:\Python27\lib\site-packages\configobj-4.7.2-py2.7.egg
  C:\Python27\lib\site-packages\mock-1.0.1-py2.7.egg
  C:\Python27\lib\site-packages\wheel-0.29.0-py2.7.egg
  C:\Python27\lib\site-packages\ute_installer-1.2.1-py2.7.egg
  C:\Python27\lib\site-packages\threadsaferequests-2.9.1-py2.7.egg
  C:\Python27\lib\site-packages\sutool-1.0.0-py2.7.egg
  C:\Python27\lib\site-packages\common_lib_sessions-1.0.2-py2.7.egg
  C:\Python27\lib\site-packages\easyprocess-0.2.2-py2.7.egg
  C:\Python27\lib\site-packages\pyvirtualdisplay-0.2-py2.7.egg
  C:\Python27\lib\site-packages\pyvisa-1.5.dev4-py2.7.egg
  C:\Python27\lib\site-packages\serpent-1.7-py2.7.egg
  C:\Python27\lib\site-packages\pyro4-4.29-py2.7.egg
  C:\Python27\lib\site-packages\selenium-2.48.0-py2.7.egg
  C:\Python27\lib\site-packages\decorator-3.4.0-py2.7.egg
  C:\Windows\system32\python27.zip
  C:\Python27\DLLs
  C:\Python27\lib
  C:\Python27\lib\plat-win
  C:\Python27\lib\lib-tk
  C:\Python27
  C:\Python27\lib\site-packages
  C:\Python27\lib\site-packages\win32
  C:\Python27\lib\site-packages\win32\lib
  C:\Python27\lib\site-packages\Pythonwin
  D:\TALib
  D:\TALib\tdd_robotws
  C:\Python27\lib\site-packages\wx-2.8-msw-unicode
  D:\TALib\ute_infomodel\resource
  .
  .
  .</msg>
<msg timestamp="20171212 14:27:43.325" level="ERROR">Error in file 'D:\TALib\tdd_robotws\RobotWS\resources\common_resource.robot': Importing test library 'tdd_config' failed: ImportError: cannot import name enb
Traceback (most recent call last):
  File "D:\TALib\tdd_config\__init__.py", line 166, in &lt;module&gt;
    tl = importlib.import_module("%s." % config_module + CONFIGURATION)
  File "C:\Python27\lib\importlib\__init__.py", line 37, in import_module
    __import__(name)
  File "C:\Python27\lib\site-packages\config\evcommon\__init__.py", line 8, in &lt;module&gt;
    from .enb import enb as enb_local
PYTHONPATH:
  D:\TALib\tdd_robotws
  D:\TALib\tdd_robotws\RobotWS\tools\RemoteSwing\remoteswinglibrary-2.0.3.jar
  C:\Python27\lib\site-packages\robotframework-3.0-py2.7.egg
  C:\Python27\lib\site-packages\pygments-1.6-py2.7.egg
  C:\Python27\lib\site-packages\robotframework_ride-1.5.2.1-py2.7.egg
  C:\Python27\lib\site-packages\pycrypto-2.6-py2.7-win32.egg
  C:\Python27\lib\site-packages\ecdsa-0.11-py2.7.egg
  C:\Python27\lib\site-packages\paramiko-1.15.2-py2.7.egg
  C:\Python27\lib\site-packages\robotframework_sshlibrary-2.1.1-py2.7.egg
  C:\Python27\lib\site-packages\xlrd-0.9.2-py2.7.egg
  C:\Python27\lib\site-packages\xlwt-0.7.5-py2.7.egg
  C:\Python27\lib\site-packages\xlutils-1.7.0-py2.7.egg
  C:\Python27\lib\site-packages\lxml-3.1.0-py2.7-win32.egg
  C:\Python27\lib\site-packages\pyserial-2.7-py2.7.egg
  C:\Python27\lib\site-packages\pyasn1-0.1.7-py2.7.egg
  C:\Python27\lib\site-packages\pysnmp-4.2.4-py2.7.egg
  C:\Python27\lib\site-packages\pytz-2014.4-py2.7.egg
  C:\Python27\lib\site-packages\zope.interface-4.1.2-py2.7-win32.egg
  C:\Python27\lib\site-packages\datetime-4.0.1-py2.7.egg
  C:\Python27\lib\site-packages\json_rpc-1.7.0-py2.7.egg
  C:\Python27\lib\site-packages\wrapt-1.10.4-py2.7.egg
  C:\Python27\lib\site-packages\requests-2.7.0-py2.7.egg
  C:\Python27\lib\site-packages\configobj-4.7.2-py2.7.egg
  C:\Python27\lib\site-packages\mock-1.0.1-py2.7.egg
  C:\Python27\lib\site-packages\wheel-0.29.0-py2.7.egg
  C:\Python27\lib\site-packages\ute_installer-1.2.1-py2.7.egg
  C:\Python27\lib\site-packages\threadsaferequests-2.9.1-py2.7.egg
  C:\Python27\lib\site-packages\sutool-1.0.0-py2.7.egg
  C:\Python27\lib\site-packages\common_lib_sessions-1.0.2-py2.7.egg
  C:\Python27\lib\site-packages\easyprocess-0.2.2-py2.7.egg
  C:\Python27\lib\site-packages\pyvirtualdisplay-0.2-py2.7.egg
  C:\Python27\lib\site-packages\pyvisa-1.5.dev4-py2.7.egg
  C:\Python27\lib\site-packages\serpent-1.7-py2.7.egg
  C:\Python27\lib\site-packages\pyro4-4.29-py2.7.egg
  C:\Python27\lib\site-packages\selenium-2.48.0-py2.7.egg
  C:\Python27\lib\site-packages\decorator-3.4.0-py2.7.egg
  C:\Windows\system32\python27.zip
  C:\Python27\DLLs
  C:\Python27\lib
  C:\Python27\lib\plat-win
  C:\Python27\lib\lib-tk
  C:\Python27
  C:\Python27\lib\site-packages
  C:\Python27\lib\site-packages\win32
  C:\Python27\lib\site-packages\win32\lib
  C:\Python27\lib\site-packages\Pythonwin
  D:\TALib
  D:\TALib\tdd_robotws
  C:\Python27\lib\site-packages\wx-2.8-msw-unicode
  D:\TALib\ute_infomodel\resource
  .
  .
  .</msg>
</errors>
</robot>
