<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171222 14:46:20.824" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\SBTS00_TDD\SISO1\CIT\CPRI_Single_FZNE\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_middle_20M\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_middle_20M.html" id="s1" name="FZNE BS FV Carrier Frequency and supported EARFCN middle 20M">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20171222142436//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171222 14:24:38.044" level="INFO">${timestamp} = 20171222142438</msg>
<status status="PASS" endtime="20171222 14:24:38.045" starttime="20171222 14:24:38.005"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20171222 14:24:38.046" level="INFO">${FILE_NAME} = FZNE BS FV Carrier Frequency and supported EARFCN</msg>
<status status="PASS" endtime="20171222 14:24:38.046" starttime="20171222 14:24:38.045"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171222 14:24:38.046" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE BS FV Carrier Frequency and supported EARFCN_20171222142438</msg>
<status status="PASS" endtime="20171222 14:24:38.047" starttime="20171222 14:24:38.046"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171222 14:24:38.047" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438</msg>
<status status="PASS" endtime="20171222 14:24:38.047" starttime="20171222 14:24:38.047"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171222 14:24:38.048" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438</msg>
<status status="PASS" endtime="20171222 14:24:38.048" starttime="20171222 14:24:38.048"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171222 14:24:38.050" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438"&gt;D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171222 14:24:38.050" starttime="20171222 14:24:38.048"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171222 14:24:38.050" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438</msg>
<status status="PASS" endtime="20171222 14:24:38.050" starttime="20171222 14:24:38.050"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20171222 14:24:38.054" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20171222 14:24:38.054" starttime="20171222 14:24:38.051"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20171222 14:24:38.075" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20171222 14:24:38.076" starttime="20171222 14:24:38.069"></status>
</kw>
<msg timestamp="20171222 14:24:38.076" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20171222 14:24:38.076" starttime="20171222 14:24:38.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:24:38.077" starttime="20171222 14:24:38.076"></status>
</kw>
<msg timestamp="20171222 14:24:38.077" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171222 14:24:38.077" starttime="20171222 14:24:38.076"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:24:38.084" starttime="20171222 14:24:38.081"></status>
</kw>
<msg timestamp="20171222 14:24:38.084" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438</msg>
<status status="PASS" endtime="20171222 14:24:38.084" starttime="20171222 14:24:38.077"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171222 14:24:38.088" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438</msg>
<status status="PASS" endtime="20171222 14:24:38.088" starttime="20171222 14:24:38.085"></status>
</kw>
<status status="PASS" endtime="20171222 14:24:38.089" starttime="20171222 14:24:38.068"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20171222 14:24:38.113" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171222 14:24:38.113" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171222 14:24:38.113" starttime="20171222 14:24:38.090"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:24:38.114" starttime="20171222 14:24:38.114"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20171222 14:24:38.115" starttime="20171222 14:24:38.114"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:24:38.115" starttime="20171222 14:24:38.115"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20171222 14:24:38.116" starttime="20171222 14:24:38.115"></status>
</kw>
<status status="PASS" endtime="20171222 14:24:38.116" starttime="20171222 14:24:38.090"></status>
</kw>
<status status="PASS" endtime="20171222 14:24:38.116" starttime="20171222 14:24:38.089"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms
pass this keyword for PR exist</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@203] Last login: Fri Dec 22 14:04:37 CST 2017 from 192.168.255.126 on pts/0
root@FCTF:~ &gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053A6508&gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@FCTF:~ &gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053A6508&gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@203] Last login: Fri Dec 22 14:24:43 CST 2017 from 192.168.255.126 on pts/0
root@FCTF:~ &gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053C4A08&gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM3_9999_171213_000361.xml
root@FCTF:/ffs/fs2 &gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053C4A08&gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[enb_resource.py@1238] 
 ****Current BTS version is 'SBTS00_TDDFSM3_9999_171213_000361' *****</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[enb_resource.py@1268] activeBuildVersion=SBTS00_TDDFSM3_9999_171213_000361</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@203] Last login: Fri Dec 22 14:24:59 CST 2017 from 192.168.255.126 on pts/1
root@FCTF:~ &gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053C4A08&gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: /ram/SiteConf.xml: No such file or directory
root@FCTF:~ &gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053C4A08&gt;</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[enb_resource.py@1238] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ping_control.py@189] 
Pinging 192.168.200.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.200.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171222 14:25:37.733" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20171222 14:25:37.734" starttime="20171222 14:24:38.116"></status>
</kw>
<status status="PASS" endtime="20171222 14:25:37.734" starttime="20171222 14:24:38.116"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20171222 14:25:37.735" starttime="20171222 14:25:37.735"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171222 14:25:37.736" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171222 14:25:37.736" starttime="20171222 14:25:37.736"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20171222 14:25:37.740" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20171222 14:25:37.740" starttime="20171222 14:25:37.737"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20171222 14:25:37.743" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20171222 14:25:37.743" starttime="20171222 14:25:37.740"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20171222 14:25:37.747" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20171222 14:25:37.747" starttime="20171222 14:25:37.744"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20171222 14:25:39.148" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20171222 14:25:39.148" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20171222 14:25:39.148" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20171222 14:25:39.148" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20171222 14:25:39.148" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20171222 14:25:39.148" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x054A6AA8&gt;</msg>
<status status="PASS" endtime="20171222 14:25:39.148" starttime="20171222 14:25:37.747"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171222 14:25:39.149" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x054A6AA8&gt;</msg>
<status status="PASS" endtime="20171222 14:25:39.149" starttime="20171222 14:25:39.149"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20171222 14:25:40.338" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x054A6AA8&gt;</msg>
<msg timestamp="20171222 14:25:40.338" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20171222 14:25:40.339" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20171222 14:25:40.339" starttime="20171222 14:25:39.153"></status>
</kw>
<status status="PASS" endtime="20171222 14:25:40.339" starttime="20171222 14:25:39.150"></status>
</kw>
<status status="PASS" endtime="20171222 14:25:40.339" starttime="20171222 14:25:37.735"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171222 14:25:40.343" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x054A6AA8&gt;.</msg>
<status status="PASS" endtime="20171222 14:25:40.343" starttime="20171222 14:25:40.339"></status>
</kw>
<status status="PASS" endtime="20171222 14:25:40.344" starttime="20171222 14:24:38.004"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:46:15.769" starttime="20171222 14:46:15.753"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20171222 14:46:15.769" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20171222 14:46:15.769" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x054A6AA8&gt;</msg>
<status status="PASS" endtime="20171222 14:46:15.769" starttime="20171222 14:46:15.769"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${zip_pass_log}</arg>
</arguments>
<assign>
<var>${para_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${zip_pass_log}</arg>
</arguments>
<msg timestamp="20171222 14:46:15.784" level="FAIL">Variable ${zip_pass_log} does not exist.</msg>
<status status="FAIL" endtime="20171222 14:46:15.784" starttime="20171222 14:46:15.769"></status>
</kw>
<msg timestamp="20171222 14:46:15.784" level="INFO">${para_exist} = ('FAIL', u'Variable ${zip_pass_log} does not exist.')</msg>
<status status="PASS" endtime="20171222 14:46:15.784" starttime="20171222 14:46:15.769"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS' == '${para_exist[0]}'</arg>
<arg>${zip_pass_log}</arg>
<arg>${True}</arg>
</arguments>
<assign>
<var>${zip_log}</var>
</assign>
<msg timestamp="20171222 14:46:15.784" level="INFO">${zip_log} = True</msg>
<status status="PASS" endtime="20171222 14:46:15.784" starttime="20171222 14:46:15.784"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20171222 14:46:15.784" starttime="20171222 14:46:15.784"></status>
</kw>
<msg timestamp="20171222 14:46:15.784" level="INFO">${status} = PASS</msg>
<msg timestamp="20171222 14:46:15.784" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20171222 14:46:15.784" starttime="20171222 14:46:15.784"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:46:15.784" starttime="20171222 14:46:15.784"></status>
</kw>
<status status="PASS" endtime="20171222 14:46:15.784" starttime="20171222 14:46:15.784"></status>
</kw>
<status status="PASS" endtime="20171222 14:46:15.784" starttime="20171222 14:46:15.753"></status>
</kw>
<test id="s1-t1" name="FZNE_EARFCN_middle_20M">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20171222142436//ev_logs//D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171222 14:25:40.349" level="INFO">${timestamp} = 20171222142540</msg>
<status status="PASS" endtime="20171222 14:25:40.349" starttime="20171222 14:25:40.349"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171222 14:25:40.350" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20171222 14:25:40.350" starttime="20171222 14:25:40.350"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171222 14:25:40.351" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20171222 14:25:40.351" starttime="20171222 14:25:40.350"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171222 14:25:40.352" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20171222 14:25:40.352" starttime="20171222 14:25:40.351"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171222 14:25:40.354" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M"&gt;D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171222 14:25:40.354" starttime="20171222 14:25:40.352"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171222 14:25:40.354" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20171222 14:25:40.354" starttime="20171222 14:25:40.354"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20171222 14:25:40.355" starttime="20171222 14:25:40.355"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:25:40.357" starttime="20171222 14:25:40.357"></status>
</kw>
<msg timestamp="20171222 14:25:40.357" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171222 14:25:40.357" starttime="20171222 14:25:40.356"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:25:40.358" starttime="20171222 14:25:40.358"></status>
</kw>
<msg timestamp="20171222 14:25:40.358" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171222 14:25:40.358" starttime="20171222 14:25:40.357"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20171222 14:25:40.362" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20171222 14:25:40.362" starttime="20171222 14:25:40.359"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171222 14:25:40.363" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20171222 14:25:40.363" starttime="20171222 14:25:40.362"></status>
</kw>
<status status="PASS" endtime="20171222 14:25:40.363" starttime="20171222 14:25:40.356"></status>
</kw>
<status status="PASS" endtime="20171222 14:25:40.363" starttime="20171222 14:25:40.348"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=${ADMIN.IP}</arg>
<arg>bts_port=${ADMIN.PORT}</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20171222 14:25:40.365" level="INFO">D:\TA\trunk_soam\ute_common_admin\resource\node\windows\bin\node.exe --expose-gc D:\TA\trunk_soam\ute_common_admin\resource\src\main.js --bts-host=192.168.255.1 --bts-port=3600 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=41045 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpxmw56a --insecure</msg>
<msg timestamp="20171222 14:25:42.368" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:25:42.368" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:25:46.375" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:25:46.375" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:25:50.375" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:25:50.375" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:25:54.374" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:25:54.374" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:25:58.374" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:25:58.374" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:26:02.374" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:26:02.374" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:26:06.374" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:26:06.374" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:26:10.374" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:26:10.374" level="INFO">Exit code: 1</msg>
<msg timestamp="20171222 14:26:10.374" level="INFO">STDOUT
</msg>
<msg timestamp="20171222 14:26:10.375" level="INFO">STDERR
</msg>
<msg timestamp="20171222 14:26:10.377" level="FAIL">AdminApiTerminatedException: ADMIN CLI TERMINATED
EXIT CODE: 1
STDOUT:

STDERR:
CLI ERROR:  { Error: socket hang up
    at createHangUpError (_http_client.js:252:15)
    at Socket.socketOnEnd (_http_client.js:344:23)
    at emitNone (events.js:91:20)
    at Socket.emit (events.js:185:7)
    at endReadableNT (_stream_readable.js:974:12)
    at _combinedTickCallback (internal/process/next_tick.js:74:11)
    at process._tickCallback (internal/process/next_tick.js:98:9) code: 'ECONNRESET' }
</msg>
<status status="FAIL" endtime="20171222 14:26:10.377" starttime="20171222 14:25:40.364"></status>
</kw>
<status status="FAIL" endtime="20171222 14:26:10.377" starttime="20171222 14:25:40.345"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171222 14:26:10.383" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.23:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x054A6AA8&gt;.</msg>
<status status="PASS" endtime="20171222 14:26:10.383" starttime="20171222 14:26:10.379"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20171222 14:26:10.781" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20171222 14:26:10.781" starttime="20171222 14:26:10.383"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20171222 14:26:10.785" level="INFO">[btslog_control.py@118] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<status status="PASS" endtime="20171222 14:26:10.785" starttime="20171222 14:26:10.782"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20171222 14:26:10.792" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20171222 14:26:10.792" starttime="20171222 14:26:10.786"></status>
</kw>
<msg timestamp="20171222 14:26:10.792" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20171222 14:26:10.793" starttime="20171222 14:26:10.785"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:10.797" starttime="20171222 14:26:10.793"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:10.797" starttime="20171222 14:26:10.793"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:10.801" starttime="20171222 14:26:10.798"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:10.802" starttime="20171222 14:26:10.797"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<status status="PASS" endtime="20171222 14:26:10.802" starttime="20171222 14:26:10.802"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:10.803" starttime="20171222 14:26:10.803"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:10.803" starttime="20171222 14:26:10.803"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:10.804" starttime="20171222 14:26:10.804"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:10.805" starttime="20171222 14:26:10.805"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20171222 14:26:10.812" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20171222 14:26:10.812" starttime="20171222 14:26:10.806"></status>
</kw>
<msg timestamp="20171222 14:26:10.812" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20171222 14:26:10.812" starttime="20171222 14:26:10.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:10.816" starttime="20171222 14:26:10.813"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:10.819" starttime="20171222 14:26:10.816"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20171222 14:26:10.820" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20171222 14:26:10.820" starttime="20171222 14:26:10.819"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:10.822" starttime="20171222 14:26:10.822"></status>
</kw>
<msg timestamp="20171222 14:26:10.822" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171222 14:26:10.823" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171222 14:26:10.823" starttime="20171222 14:26:10.821"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:10.826" starttime="20171222 14:26:10.823"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171222 14:26:16.857" level="INFO">$TA,Z*

$TA,C,03F0*</msg>
<msg timestamp="20171222 14:26:16.857" level="INFO">[attenuator_control.py@487] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20171222 14:26:16.857" level="INFO">[attenuator_control.py@492] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,07F0*</msg>
<msg timestamp="20171222 14:26:16.857" level="INFO">[attenuator_control.py@487] send-&gt;'$TA,C,07F0*', Receive&lt;-'$TA,C,07F0*'</msg>
<msg timestamp="20171222 14:26:16.857" level="INFO">[attenuator_control.py@492] send-&gt;'$TA,H,07*', Receive&lt;-'$TA,C,07F0*'</msg>
<status status="PASS" endtime="20171222 14:26:16.857" starttime="20171222 14:26:10.826"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:16.857" starttime="20171222 14:26:10.821"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:16.859" starttime="20171222 14:26:16.858"></status>
</kw>
<msg timestamp="20171222 14:26:16.859" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171222 14:26:16.859" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171222 14:26:16.859" starttime="20171222 14:26:16.858"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:16.863" starttime="20171222 14:26:16.859"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171222 14:26:23.600" level="INFO">$TA,Z*</msg>
<msg timestamp="20171222 14:26:23.600" level="INFO">[attenuator_control.py@487] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171222 14:26:23.600" level="INFO">[attenuator_control.py@492] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171222 14:26:23.600" level="INFO">[attenuator_control.py@487] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171222 14:26:23.600" level="INFO">[attenuator_control.py@492] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171222 14:26:23.601" starttime="20171222 14:26:16.863"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:23.601" starttime="20171222 14:26:16.858"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:23.602" starttime="20171222 14:26:23.602"></status>
</kw>
<msg timestamp="20171222 14:26:23.602" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171222 14:26:23.602" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171222 14:26:23.603" starttime="20171222 14:26:23.601"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:23.606" starttime="20171222 14:26:23.603"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171222 14:26:29.631" level="INFO">$TA,Z*

$TA,C,02F0*</msg>
<msg timestamp="20171222 14:26:29.631" level="INFO">[attenuator_control.py@487] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171222 14:26:29.631" level="INFO">[attenuator_control.py@492] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171222 14:26:29.631" level="INFO">[attenuator_control.py@487] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171222 14:26:29.631" level="INFO">[attenuator_control.py@492] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171222 14:26:29.632" starttime="20171222 14:26:23.607"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:29.632" starttime="20171222 14:26:23.601"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20171222 14:26:29.640" level="FAIL">Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20171222 14:26:29.640" starttime="20171222 14:26:29.633"></status>
</kw>
<msg timestamp="20171222 14:26:29.640" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20171222 14:26:29.640" level="INFO">${ret2} = Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20171222 14:26:29.640" starttime="20171222 14:26:29.632"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20171222 14:26:29.644" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171222 14:26:29.644" starttime="20171222 14:26:29.641"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:29.644" starttime="20171222 14:26:29.632"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:29.644" starttime="20171222 14:26:10.821"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:29.644" starttime="20171222 14:26:10.821"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:29.645" starttime="20171222 14:26:29.645"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20171222 14:26:29.649" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20171222 14:26:29.649" starttime="20171222 14:26:29.645"></status>
</kw>
<status status="FAIL" endtime="20171222 14:26:29.649" starttime="20171222 14:26:10.804"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:29.649" starttime="20171222 14:26:10.803"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20171222 14:26:29.656" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20171222 14:26:29.656" starttime="20171222 14:26:29.650"></status>
</kw>
<msg timestamp="20171222 14:26:29.656" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20171222 14:26:29.656" starttime="20171222 14:26:29.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:29.660" starttime="20171222 14:26:29.657"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20171222 14:26:36.254" level="INFO">Exit code: 1</msg>
<msg timestamp="20171222 14:26:36.254" level="INFO">STDOUT
</msg>
<msg timestamp="20171222 14:26:36.254" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:37425
</msg>
<msg timestamp="20171222 14:26:36.523" level="INFO">[infomodel_control.py@84] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20171222 14:26:36.523" level="INFO">[infomodel_control.py@102] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171222 14:26:36.524" starttime="20171222 14:26:29.660"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:36.525" starttime="20171222 14:26:36.524"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20171222 14:26:36.526" level="FAIL">'FZNE_EARFCN_middle_20M' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20171222 14:26:36.526" starttime="20171222 14:26:36.526"></status>
</kw>
<msg timestamp="20171222 14:26:36.526" level="INFO">${return1} = ('FAIL', u"'FZNE_EARFCN_middle_20M' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20171222 14:26:36.526" starttime="20171222 14:26:36.525"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:36.530" starttime="20171222 14:26:36.527"></status>
</kw>
<msg timestamp="20171222 14:26:36.530" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20171222 14:26:36.531" starttime="20171222 14:26:36.527"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:36.534" starttime="20171222 14:26:36.531"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:36.534" starttime="20171222 14:26:36.531"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:36.535" starttime="20171222 14:26:36.535"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:36.535" starttime="20171222 14:26:36.535"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:36.536" starttime="20171222 14:26:36.536"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171222 14:26:36.537" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171222 14:26:36.537" starttime="20171222 14:26:36.537"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:36.541" starttime="20171222 14:26:36.538"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:36.542" starttime="20171222 14:26:36.538"></status>
</kw>
<status status="PASS" endtime="20171222 14:26:36.542" starttime="20171222 14:26:36.537"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:36.553" starttime="20171222 14:26:36.552"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:36.556" starttime="20171222 14:26:36.553"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171222 14:26:36.557" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\TA\\TA_logs\\TestLog_20171222142436\\ev_logs\\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\\FZNE_EAR...</msg>
<status status="PASS" endtime="20171222 14:26:36.557" starttime="20171222 14:26:36.556"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:26:36.557" starttime="20171222 14:26:36.557"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171222 14:45:18.097" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M\GUILog\qtp_log20171222142636\Report
&lt;QTP&gt; Start to run script...

 Login_BTSSiteManager  SetSEMDissconnect  OpenMenu MenuName File doesn't exist.
Test Fail. SaveImage  to D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M\2017-12-22_14-45-17.png
&lt;QTP&gt; run Failed.
Start to kill QTP process.
Finshed to kill QTP process.</msg>
<msg timestamp="20171222 14:45:18.097" level="FAIL">AttributeError: QuickTest.Application.Quit</msg>
<status status="FAIL" endtime="20171222 14:45:18.097" starttime="20171222 14:26:36.558"></status>
</kw>
<status status="FAIL" endtime="20171222 14:45:18.097" starttime="20171222 14:26:36.551"></status>
</kw>
<status status="FAIL" endtime="20171222 14:45:18.097" starttime="20171222 14:26:36.543"></status>
</kw>
<status status="PASS" endtime="20171222 14:45:18.097" starttime="20171222 14:26:36.542"></status>
</kw>
<status status="PASS" endtime="20171222 14:45:18.097" starttime="20171222 14:26:36.542"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="GUI SM Save Snapshot" library="gui_resource">
<doc>this keyword is use to save snapshot in Site Manager</doc>
<arguments>
<arg>3</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>DetailLevel=${DetailLevel}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>PathFile=${PathFile}</arg>
<arg>SaveParitialExist=${SaveParitialExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171222 14:45:18.113" level="INFO">${para_list} = [u'DetailLevel=3', u'LogPath=D:\\TA\\TA_logs\\TestLog_20171222142436\\ev_logs\\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\\FZNE_EARFCN_middle_20M\\', u'PathFile=N', u'SaveParitia...</msg>
<status status="PASS" endtime="20171222 14:45:18.113" starttime="20171222 14:45:18.097"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}SaveSnapshot</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20171222 14:45:18.113" starttime="20171222 14:45:18.113"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}SaveSnapshot</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171222 14:45:24.121" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\SaveSnapshot is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\SaveSnapshot ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
DetailLevel="3"
LogPath="D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M\"
PathFile="N"
SaveParitialExist="N"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M\GUILog\qtp_log20171222144518\Report
&lt;QTP&gt; Start to run script...

Cannot find Save Snapshot button, please check whether the site manger is normal state
Test Fail. SaveImage  to D:\TA\TA_logs\TestLog_20171222142436\ev_logs\FZNE_BS_FV_Carrier_Frequency_and_supported_EARFCN_20171222142438\FZNE_EARFCN_middle_20M\2017-12-22_14-45-23.png
&lt;QTP&gt; run Failed.
Start to kill QTP process.
Finshed to kill QTP process.</msg>
<msg timestamp="20171222 14:45:24.121" level="FAIL">AttributeError: QuickTest.Application.Quit</msg>
<status status="FAIL" endtime="20171222 14:45:24.121" starttime="20171222 14:45:18.113"></status>
</kw>
<status status="FAIL" endtime="20171222 14:45:24.136" starttime="20171222 14:45:18.097"></status>
</kw>
<status status="FAIL" endtime="20171222 14:45:24.136" starttime="20171222 14:45:18.097"></status>
</kw>
<status status="PASS" endtime="20171222 14:45:24.136" starttime="20171222 14:45:18.097"></status>
</kw>
<status status="PASS" endtime="20171222 14:45:24.136" starttime="20171222 14:45:18.097"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20171222 14:45:45.341" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[ssh_common.py@203] Last login: Fri Dec 22 14:31:59 CST 2017 from 10.69.80.114 on ssh
root@FCTF:~ &gt;</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0550F238&gt;</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@FCTF:~ &gt;</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0550F238&gt;</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[ssh_common.py@203] Last login: Fri Dec 22 14:45:29 CST 2017 from 192.168.255.126 on pts/0
root@FCTF:~ &gt;</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054BD738&gt;</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM3_9999_171213_000361.xml
root@FCTF:/ffs/fs2 &gt;</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054BD738&gt;</msg>
<msg timestamp="20171222 14:45:45.341" level="INFO">${version} = SBTS00_TDDFSM3_9999_171213_000361</msg>
<status status="PASS" endtime="20171222 14:45:45.341" starttime="20171222 14:45:24.136"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>+++++Active BTS version is '${version}' +++++</arg>
</arguments>
<msg timestamp="20171222 14:45:45.341" level="INFO">+++++Active BTS version is 'SBTS00_TDDFSM3_9999_171213_000361' +++++</msg>
<status status="PASS" endtime="20171222 14:45:45.341" starttime="20171222 14:45:45.341"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20171222 14:45:45.341" starttime="20171222 14:45:45.341"></status>
</kw>
<status status="PASS" endtime="20171222 14:45:45.341" starttime="20171222 14:45:45.341"></status>
</kw>
<status status="PASS" endtime="20171222 14:45:45.341" starttime="20171222 14:45:45.341"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="_soam_snapshot" library="common_resource">
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>alias=snapshot</arg>
</arguments>
<msg timestamp="20171222 14:45:45.356" level="INFO">D:\TA\trunk_soam\ute_common_admin\resource\node\windows\bin\node.exe --expose-gc D:\TA\trunk_soam\ute_common_admin\resource\src\main.js --bts-host=192.168.255.1 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_snapshot.log --interval=5000 --cli-port=40963 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpwwpzoj --insecure</msg>
<msg timestamp="20171222 14:45:47.386" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:45:47.386" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:45:51.442" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:45:51.442" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:45:55.485" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:45:55.485" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:45:59.541" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:45:59.541" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:46:03.599" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:46:03.599" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:46:07.655" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:46:07.655" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:46:11.697" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:46:11.697" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20171222 14:46:15.753" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20171222 14:46:15.753" level="INFO">Exit code: 1</msg>
<msg timestamp="20171222 14:46:15.753" level="INFO">STDOUT
</msg>
<msg timestamp="20171222 14:46:15.753" level="INFO">STDERR
</msg>
<msg timestamp="20171222 14:46:15.753" level="FAIL">AdminApiTerminatedException: ADMIN CLI TERMINATED
EXIT CODE: 1
STDOUT:

STDERR:
CLI ERROR:  Fetching bundle error: no support.
</msg>
<status status="FAIL" endtime="20171222 14:46:15.753" starttime="20171222 14:45:45.356"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Collect Snapshot</arg>
<arg>${SAVE LOG DIRECTORY}${/}snapshot.zip</arg>
<arg>alias=snapshot</arg>
</arguments>
<kw name="Collect Snapshot" library="ute_admin">
<doc>Collect Techrep snapshot.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}${/}snapshot.zip</arg>
<arg>alias=snapshot</arg>
</arguments>
<msg timestamp="20171222 14:46:15.753" level="FAIL">AliasError: Provided alias (snapshot) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20171222 14:46:15.753" starttime="20171222 14:46:15.753"></status>
</kw>
<status status="PASS" endtime="20171222 14:46:15.753" starttime="20171222 14:46:15.753"></status>
</kw>
<kw type="teardown" name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=snapshot</arg>
</arguments>
<status status="PASS" endtime="20171222 14:46:15.753" starttime="20171222 14:46:15.753"></status>
</kw>
<status status="FAIL" endtime="20171222 14:46:15.753" starttime="20171222 14:45:45.341"></status>
</kw>
<status status="FAIL" endtime="20171222 14:46:15.753" starttime="20171222 14:45:45.341"></status>
</kw>
<status status="PASS" endtime="20171222 14:46:15.753" starttime="20171222 14:45:45.341"></status>
</kw>
<status status="PASS" endtime="20171222 14:46:15.753" starttime="20171222 14:45:45.341"></status>
</kw>
<status status="PASS" endtime="20171222 14:46:15.753" starttime="20171222 14:26:36.536"></status>
</kw>
<status status="PASS" endtime="20171222 14:46:15.753" starttime="20171222 14:26:10.378"></status>
</kw>
<tags>
<tag>owner-xiongwen.shi@nokia.com</tag>
<tag>QC_443257</tag>
<tag>QC_ID_443257</tag>
</tags>
<status status="FAIL" endtime="20171222 14:46:15.753" critical="yes" starttime="20171222 14:25:40.344">Setup failed:
AdminApiTerminatedException: ADMIN CLI TERMINATED
EXIT CODE: 1
STDOUT:

STDERR:
CLI ERROR:  { Error: socket hang up
    at createHangUpError (_http_client.js:252:15)
    at Socket.socketOnEnd (_http_client.js:344:23)
    at emitNone (events.js:91:20)
    at Socket.emit (events.js:185:7)
    at endReadableNT (_stream_readable.js:974:12)
    at _combinedTickCallback (internal/process/next_tick.js:74:11)
    at process._tickCallback (internal/process/next_tick.js:98:9) code: 'ECONNRESET' }
</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20171222 14:46:15.784" starttime="20171222 14:24:36.895"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-xiongwen.shi@nokia.com</stat>
<stat fail="1" pass="0">QC_443257</stat>
<stat fail="1" pass="0">QC_ID_443257</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZNE BS FV Carrier Frequency and supported EARFCN middle 20M" pass="0">FZNE BS FV Carrier Frequency and supported EARFCN middle 20M</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171222 14:24:37.349" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
</errors>
</robot>
