<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171030 10:48:05.678" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\TL17A\SISO1\CPRI_Single_FZHR\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_Link\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_Link.html" id="s1" name="FZHR Exceptional RF Fiber Insert Removal Primary Link">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20171030100835//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171030 10:45:38.021" level="INFO">${timestamp} = 20171030104538</msg>
<status status="PASS" endtime="20171030 10:45:38.021" starttime="20171030 10:45:37.974"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20171030 10:45:38.021" level="INFO">${FILE_NAME} = FZHR Exceptional RF Fiber Insert Removal Primary L</msg>
<status status="PASS" endtime="20171030 10:45:38.021" starttime="20171030 10:45:38.021"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171030 10:45:38.021" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR Exceptional RF Fiber Insert Removal Primary L_20171030104538</msg>
<status status="PASS" endtime="20171030 10:45:38.021" starttime="20171030 10:45:38.021"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171030 10:45:38.021" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538</msg>
<status status="PASS" endtime="20171030 10:45:38.021" starttime="20171030 10:45:38.021"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171030 10:45:38.021" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538</msg>
<status status="PASS" endtime="20171030 10:45:38.021" starttime="20171030 10:45:38.021"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171030 10:45:38.021" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538"&gt;D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171030 10:45:38.021" starttime="20171030 10:45:38.021"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171030 10:45:38.021" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538</msg>
<status status="PASS" endtime="20171030 10:45:38.021" starttime="20171030 10:45:38.021"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20171030 10:45:38.021" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20171030 10:45:38.021" starttime="20171030 10:45:38.021"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20171030 10:45:38.052" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20171030 10:45:38.052" starttime="20171030 10:45:38.037"></status>
</kw>
<msg timestamp="20171030 10:45:38.052" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20171030 10:45:38.052" starttime="20171030 10:45:38.037"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:45:38.052" starttime="20171030 10:45:38.052"></status>
</kw>
<msg timestamp="20171030 10:45:38.052" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171030 10:45:38.052" starttime="20171030 10:45:38.052"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:45:38.052" starttime="20171030 10:45:38.052"></status>
</kw>
<msg timestamp="20171030 10:45:38.052" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538</msg>
<status status="PASS" endtime="20171030 10:45:38.052" starttime="20171030 10:45:38.052"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171030 10:45:38.052" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538</msg>
<status status="PASS" endtime="20171030 10:45:38.052" starttime="20171030 10:45:38.052"></status>
</kw>
<status status="PASS" endtime="20171030 10:45:38.052" starttime="20171030 10:45:38.037"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20171030 10:45:38.084" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171030 10:45:38.084" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171030 10:45:38.084" starttime="20171030 10:45:38.052"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:45:38.084" starttime="20171030 10:45:38.084"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20171030 10:45:38.084" starttime="20171030 10:45:38.084"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:45:38.084" starttime="20171030 10:45:38.084"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20171030 10:45:38.084" starttime="20171030 10:45:38.084"></status>
</kw>
<status status="PASS" endtime="20171030 10:45:38.099" starttime="20171030 10:45:38.052"></status>
</kw>
<status status="PASS" endtime="20171030 10:45:38.099" starttime="20171030 10:45:38.052"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20171030 10:46:32.902" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171030 10:46:32.949" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171030 10:46:44.150" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171030 10:46:44.212" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171030 10:46:44.742" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171030 10:46:44.774" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 10:45:46 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05377328&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05377328&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 10:46:05 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053F0AD0&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000475_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053F0AD0&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 10:46:16 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052C83C8&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052C83C8&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 10:46:28 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052C8418&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000475_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052C8418&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_resource.py@1141] 
 ****Current BTS version is 'TL17A_ENB_0000_000475_000000' *****</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_resource.py@1171] activeBuildVersion=TL17A_ENB_0000_000475_000000</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 10:46:38 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052C8490&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052C8490&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\SiteConf.xml' is ok. local file size is 112k</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 10:46:59 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05256D78&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05256D78&gt;</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_resource.py@403] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\FileDirectory_20171030104632.xml' is ok. local file size is 36k</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_156.xml</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/config/SCFC_156.xml' to 'D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\SCFC_156.xml' is ok. local file size is 128k</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_resource.py@1141] 
 ****Current bbu type is 'ASIA' *****</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_resource.py@1266] HW_BBU_TYPE=ASIA</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_resource.py@1141] 
 ****Current rru type is 'FZHR' *****</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_resource.py@1269] HW_RRU_TYPE=FZHR</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_resource.py@1141] 
 ****Current HW type is '#3044A-2CL1-T2-L-2' *****</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[enb_resource.py@1272] BTS_HW_TYPE=#3044A-2CL1-T2-L-2</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ping_control.py@189] 
Pinging 192.168.200.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.200.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 10:47:12.526" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20171030 10:47:12.526" starttime="20171030 10:45:38.099"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:12.526" starttime="20171030 10:45:38.099"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:12.526" starttime="20171030 10:47:12.526"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171030 10:47:12.526" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171030 10:47:12.526" starttime="20171030 10:47:12.526"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20171030 10:47:12.526" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20171030 10:47:12.526" starttime="20171030 10:47:12.526"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20171030 10:47:12.526" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20171030 10:47:12.526" starttime="20171030 10:47:12.526"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20171030 10:47:12.542" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20171030 10:47:12.542" starttime="20171030 10:47:12.526"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20171030 10:47:14.024" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20171030 10:47:14.024" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20171030 10:47:14.024" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20171030 10:47:14.024" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20171030 10:47:14.024" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20171030 10:47:14.024" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05455A30&gt;</msg>
<status status="PASS" endtime="20171030 10:47:14.024" starttime="20171030 10:47:12.542"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171030 10:47:14.024" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05455A30&gt;</msg>
<status status="PASS" endtime="20171030 10:47:14.024" starttime="20171030 10:47:14.024"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20171030 10:47:15.256" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05455A30&gt;</msg>
<msg timestamp="20171030 10:47:15.256" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20171030 10:47:15.256" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20171030 10:47:15.256" starttime="20171030 10:47:14.024"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:15.256" starttime="20171030 10:47:14.024"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:15.256" starttime="20171030 10:47:12.526"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171030 10:47:15.272" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05455A30&gt;.</msg>
<status status="PASS" endtime="20171030 10:47:15.272" starttime="20171030 10:47:15.256"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:15.272" starttime="20171030 10:45:37.974"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:48:01.669" starttime="20171030 10:48:01.669"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20171030 10:48:01.669" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20171030 10:48:01.669" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05455A30&gt;</msg>
<status status="PASS" endtime="20171030 10:48:01.685" starttime="20171030 10:48:01.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${need_zip} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${need_zip} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20171030 10:48:01.685" starttime="20171030 10:48:01.685"></status>
</kw>
<msg timestamp="20171030 10:48:01.685" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 10:48:01.685" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20171030 10:48:01.685" starttime="20171030 10:48:01.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${need_zip} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${need_zip} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:48:01.685" starttime="20171030 10:48:01.685"></status>
</kw>
<status status="PASS" endtime="20171030 10:48:01.685" starttime="20171030 10:48:01.685"></status>
</kw>
<status status="PASS" endtime="20171030 10:48:01.685" starttime="20171030 10:48:01.669"></status>
</kw>
<test id="s1-t1" name="FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_Link">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20171030100835//ev_logs//D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171030 10:47:15.272" level="INFO">${timestamp} = 20171030104715</msg>
<status status="PASS" endtime="20171030 10:47:15.272" starttime="20171030 10:47:15.272"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171030 10:47:15.272" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L</msg>
<status status="PASS" endtime="20171030 10:47:15.272" starttime="20171030 10:47:15.272"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171030 10:47:15.272" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L</msg>
<status status="PASS" endtime="20171030 10:47:15.272" starttime="20171030 10:47:15.272"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171030 10:47:15.272" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L</msg>
<status status="PASS" endtime="20171030 10:47:15.272" starttime="20171030 10:47:15.272"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171030 10:47:15.272" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L"&gt;D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171030 10:47:15.272" starttime="20171030 10:47:15.272"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171030 10:47:15.272" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L</msg>
<status status="PASS" endtime="20171030 10:47:15.272" starttime="20171030 10:47:15.272"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:15.272" starttime="20171030 10:47:15.272"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:15.287" starttime="20171030 10:47:15.287"></status>
</kw>
<msg timestamp="20171030 10:47:15.287" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171030 10:47:15.287" starttime="20171030 10:47:15.272"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:15.287" starttime="20171030 10:47:15.287"></status>
</kw>
<msg timestamp="20171030 10:47:15.287" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171030 10:47:15.287" starttime="20171030 10:47:15.287"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20171030 10:47:15.287" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L</msg>
<status status="PASS" endtime="20171030 10:47:15.287" starttime="20171030 10:47:15.287"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171030 10:47:15.287" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20171030100835\ev_logs\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L_20171030104538\FZHR_Exceptional_RF_Fiber_Insert_Removal_Primary_L</msg>
<status status="PASS" endtime="20171030 10:47:15.287" starttime="20171030 10:47:15.287"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:15.287" starttime="20171030 10:47:15.272"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:15.287" starttime="20171030 10:47:15.272"></status>
</kw>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171030 10:47:15.287" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05455A30&gt;.</msg>
<status status="PASS" endtime="20171030 10:47:15.287" starttime="20171030 10:47:15.287"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20171030 10:47:19.546" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05455A30&gt;</msg>
<msg timestamp="20171030 10:47:19.546" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20171030 10:47:19.546" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20171030 10:47:19.546" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20171030 10:47:19.546" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20171030 10:47:19.546" starttime="20171030 10:47:15.287"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:19.546" starttime="20171030 10:47:19.546"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:19.562" starttime="20171030 10:47:19.562"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
</arguments>
<msg timestamp="20171030 10:47:19.562" level="FAIL">IOError: [Errno 2] No such file: u'D:\\TA\\BTS592\\20M_TM3_FZHN_Triple\\SCFC_1.xml'</msg>
<status status="FAIL" endtime="20171030 10:47:19.562" starttime="20171030 10:47:19.562"></status>
</kw>
<status status="FAIL" endtime="20171030 10:47:19.562" starttime="20171030 10:47:15.287"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171030 10:47:19.562" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05455A30&gt;.</msg>
<status status="PASS" endtime="20171030 10:47:19.562" starttime="20171030 10:47:19.562"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20171030 10:47:20.248" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20171030 10:47:20.248" starttime="20171030 10:47:19.562"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20171030 10:47:20.264" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<status status="PASS" endtime="20171030 10:47:20.264" starttime="20171030 10:47:20.248"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20171030 10:47:20.264" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20171030 10:47:20.264" starttime="20171030 10:47:20.264"></status>
</kw>
<msg timestamp="20171030 10:47:20.264" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20171030 10:47:20.264" starttime="20171030 10:47:20.264"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:20.264" starttime="20171030 10:47:20.264"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:20.264" starttime="20171030 10:47:20.264"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:20.279" starttime="20171030 10:47:20.279"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:20.279" starttime="20171030 10:47:20.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:20.279" starttime="20171030 10:47:20.279"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:20.279" starttime="20171030 10:47:20.279"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:20.279" starttime="20171030 10:47:20.279"></status>
</kw>
<msg timestamp="20171030 10:47:20.279" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171030 10:47:20.279" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171030 10:47:20.279" starttime="20171030 10:47:20.279"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:20.279" starttime="20171030 10:47:20.279"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171030 10:47:24.351" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20171030 10:47:24.351" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171030 10:47:24.351" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171030 10:47:24.351" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171030 10:47:24.351" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171030 10:47:24.367" starttime="20171030 10:47:20.279"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:24.367" starttime="20171030 10:47:20.279"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:24.367" starttime="20171030 10:47:24.367"></status>
</kw>
<msg timestamp="20171030 10:47:24.367" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171030 10:47:24.367" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171030 10:47:24.367" starttime="20171030 10:47:24.367"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:24.367" starttime="20171030 10:47:24.367"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171030 10:47:28.438" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20171030 10:47:28.438" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171030 10:47:28.438" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171030 10:47:28.438" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171030 10:47:28.438" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171030 10:47:28.438" starttime="20171030 10:47:24.367"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:28.438" starttime="20171030 10:47:24.367"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:28.438" starttime="20171030 10:47:28.438"></status>
</kw>
<msg timestamp="20171030 10:47:28.438" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171030 10:47:28.438" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171030 10:47:28.438" starttime="20171030 10:47:28.438"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:28.438" starttime="20171030 10:47:28.438"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171030 10:47:32.510" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20171030 10:47:32.510" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171030 10:47:32.510" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171030 10:47:32.510" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171030 10:47:32.510" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171030 10:47:32.510" starttime="20171030 10:47:28.438"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:32.510" starttime="20171030 10:47:28.438"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20171030 10:47:32.525" level="FAIL">Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20171030 10:47:32.525" starttime="20171030 10:47:32.525"></status>
</kw>
<msg timestamp="20171030 10:47:32.525" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20171030 10:47:32.525" level="INFO">${ret2} = Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20171030 10:47:32.525" starttime="20171030 10:47:32.510"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20171030 10:47:32.525" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171030 10:47:32.525" starttime="20171030 10:47:32.525"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:32.525" starttime="20171030 10:47:32.510"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:32.525" starttime="20171030 10:47:20.279"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:32.525" starttime="20171030 10:47:20.279"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20171030 10:47:32.525" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20171030 10:47:32.525" starttime="20171030 10:47:32.525"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:32.541" starttime="20171030 10:47:32.541"></status>
</kw>
<status status="FAIL" endtime="20171030 10:47:32.541" starttime="20171030 10:47:20.279"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:32.541" starttime="20171030 10:47:20.279"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20171030 10:47:32.541" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20171030 10:47:32.541" starttime="20171030 10:47:32.541"></status>
</kw>
<msg timestamp="20171030 10:47:32.541" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20171030 10:47:32.541" starttime="20171030 10:47:32.541"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:32.541" starttime="20171030 10:47:32.541"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20171030 10:47:39.205" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20171030 10:47:40.001" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20171030 10:47:40.001" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171030 10:47:40.001" starttime="20171030 10:47:32.541"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:40.001" starttime="20171030 10:47:40.001"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:40.001" starttime="20171030 10:47:40.001"></status>
</kw>
<msg timestamp="20171030 10:47:40.001" level="INFO">${return1} = ('PASS', None)</msg>
<status status="PASS" endtime="20171030 10:47:40.001" starttime="20171030 10:47:40.001"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<kw name="Get_All_Fiber_Link" library="SISO1 Resource">
<kw name="Fiber Link Dict" library="Fiber_Switch">
<arguments>
<arg>${BTS_FIBERLINKS}</arg>
</arguments>
<assign>
<var>${Link_Dict}</var>
</assign>
<msg timestamp="20171030 10:47:40.016" level="INFO">${Link_Dict} = {'6Q163504154_0': '19:21', '6Q163504154_1': '20:22'}</msg>
<status status="PASS" endtime="20171030 10:47:40.016" starttime="20171030 10:47:40.016"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${Link_Dict}</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<msg timestamp="20171030 10:47:40.016" level="INFO">${ret1} = ['6Q163504154_0', '6Q163504154_1']</msg>
<status status="PASS" endtime="20171030 10:47:40.016" starttime="20171030 10:47:40.016"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${ret1}</arg>
</arguments>
<assign>
<var>${length}</var>
</assign>
<msg timestamp="20171030 10:47:40.016" level="INFO">Length is 2</msg>
<msg timestamp="20171030 10:47:40.016" level="INFO">${length} = 2</msg>
<status status="PASS" endtime="20171030 10:47:40.016" starttime="20171030 10:47:40.016"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${length} ]">
<kw type="foritem" name="${num} = 0">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${Link_Dict}</arg>
<arg>${ret1[${num}]}</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<msg timestamp="20171030 10:47:40.016" level="INFO">${ret2} = 19:21</msg>
<status status="PASS" endtime="20171030 10:47:40.016" starttime="20171030 10:47:40.016"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${num}==0</arg>
<arg>${ret2}</arg>
<arg>${num}&gt;0</arg>
<arg>${all_link};${ret2}</arg>
</arguments>
<assign>
<var>${all_link}</var>
</assign>
<msg timestamp="20171030 10:47:40.016" level="INFO">${all_link} = 19:21</msg>
<status status="PASS" endtime="20171030 10:47:40.016" starttime="20171030 10:47:40.016"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.016" starttime="20171030 10:47:40.016"></status>
</kw>
<kw type="foritem" name="${num} = 1">
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${Link_Dict}</arg>
<arg>${ret1[${num}]}</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<msg timestamp="20171030 10:47:40.016" level="INFO">${ret2} = 20:22</msg>
<status status="PASS" endtime="20171030 10:47:40.016" starttime="20171030 10:47:40.016"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${num}==0</arg>
<arg>${ret2}</arg>
<arg>${num}&gt;0</arg>
<arg>${all_link};${ret2}</arg>
</arguments>
<assign>
<var>${all_link}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>${num}&gt;0</arg>
<arg>${all_link};${ret2}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:40.032" starttime="20171030 10:47:40.016"></status>
</kw>
<msg timestamp="20171030 10:47:40.032" level="INFO">${all_link} = 19:21;20:22</msg>
<status status="PASS" endtime="20171030 10:47:40.032" starttime="20171030 10:47:40.016"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.032" starttime="20171030 10:47:40.016"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.032" starttime="20171030 10:47:40.016"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.032" starttime="20171030 10:47:40.016"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.032" starttime="20171030 10:47:40.001"></status>
</kw>
<msg timestamp="20171030 10:47:40.032" level="INFO">${all_fiber_link} = ('PASS', u'19:21;20:22')</msg>
<status status="PASS" endtime="20171030 10:47:40.032" starttime="20171030 10:47:40.001"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Connect_Fiber_Link" library="SISO1 Resource">
<arguments>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Connect FiberSwitch" library="Fiber_Switch">
<arguments>
<arg>${fiberswitch_ip}</arg>
<arg>${fiberswitch_username}</arg>
<arg>${fiberswitch_password}</arg>
<arg>${fiberswitch_links}</arg>
<arg>${fiberswitch_type}</arg>
</arguments>
<msg timestamp="20171030 10:47:40.438" level="INFO">[[19, 21], [20, 22]]
connect ...
act-user::bts592:1::SISO1_test;


&lt;

   NN0006 17-10-30 02:58:58
M  1 DENY
;
&lt;
disconnect-----</msg>
<msg timestamp="20171030 10:47:40.438" level="FAIL">configure topology fail!!!!</msg>
<status status="FAIL" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.032"></status>
</kw>
<status status="FAIL" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.032"></status>
</kw>
<status status="FAIL" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.032"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.032"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.438"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.438"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.438"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171030 10:47:40.438" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.438"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.438"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.438"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.438"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.438"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.438"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.438" starttime="20171030 10:47:40.438"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20171030 10:47:40.453" starttime="20171030 10:47:40.453"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.453" starttime="20171030 10:47:40.438"></status>
</kw>
<status status="PASS" endtime="20171030 10:47:40.453" starttime="20171030 10:47:40.438"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20171030 10:48:01.654" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 10:47:11 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0564EBE8&gt;</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0564EBE8&gt;</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 10:48:07 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052BA530&gt;</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000475_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052BA530&gt;</msg>
<msg timestamp="20171030 10:48:01.654" level="INFO">${version} = TL17A_ENB_0000_000475_000000</msg>
<status status="PASS" endtime="20171030 10:48:01.654" starttime="20171030 10:47:40.453"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20171030 10:48:01.654" starttime="20171030 10:48:01.654"></status>
</kw>
<status status="PASS" endtime="20171030 10:48:01.654" starttime="20171030 10:48:01.654"></status>
</kw>
<status status="PASS" endtime="20171030 10:48:01.654" starttime="20171030 10:48:01.654"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20171030 10:48:01.654" starttime="20171030 10:48:01.654"></status>
</kw>
<status status="PASS" endtime="20171030 10:48:01.654" starttime="20171030 10:48:01.654"></status>
</kw>
<status status="PASS" endtime="20171030 10:48:01.654" starttime="20171030 10:48:01.654"></status>
</kw>
<status status="PASS" endtime="20171030 10:48:01.669" starttime="20171030 10:47:40.438"></status>
</kw>
<status status="PASS" endtime="20171030 10:48:01.669" starttime="20171030 10:47:19.562"></status>
</kw>
<tags>
<tag>owner-shaocheng.chen@nokia.com</tag>
<tag>QC_773301</tag>
</tags>
<status status="FAIL" endtime="20171030 10:48:01.669" critical="yes" starttime="20171030 10:47:15.272">IOError: [Errno 2] No such file: u'D:\\TA\\BTS592\\20M_TM3_FZHN_Triple\\SCFC_1.xml'</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20171030 10:48:01.685" starttime="20171030 10:45:36.742"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-shaocheng.chen@nokia.com</stat>
<stat fail="1" pass="0">QC_773301</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHR Exceptional RF Fiber Insert Removal Primary Link" pass="0">FZHR Exceptional RF Fiber Insert Removal Primary Link</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171030 10:45:37.413" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20171030 10:47:39.205" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
