<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170920 21:23:58.560" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\TL17A\SISO1\CPRI_Single_FZHR\FZHR_Operational_Cell_block_unblock\FZHR_Operational_Cell_block_unblock.html" id="s1" name="FZHR Operational Cell block unblock">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170920210905//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170920 21:09:07.149" level="INFO">${timestamp} = 20170920210907</msg>
<status status="PASS" endtime="20170920 21:09:07.149" starttime="20170920 21:09:07.113"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170920 21:09:07.150" level="INFO">${FILE_NAME} = FZHR Operational Cell block unblock</msg>
<status status="PASS" endtime="20170920 21:09:07.150" starttime="20170920 21:09:07.149"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170920 21:09:07.150" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR Operational Cell block unblock_20170920210907</msg>
<status status="PASS" endtime="20170920 21:09:07.150" starttime="20170920 21:09:07.150"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170920 21:09:07.151" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907</msg>
<status status="PASS" endtime="20170920 21:09:07.151" starttime="20170920 21:09:07.151"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170920 21:09:07.152" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907</msg>
<status status="PASS" endtime="20170920 21:09:07.152" starttime="20170920 21:09:07.151"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170920 21:09:07.153" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907"&gt;D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170920 21:09:07.153" starttime="20170920 21:09:07.152"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170920 21:09:07.154" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907</msg>
<status status="PASS" endtime="20170920 21:09:07.154" starttime="20170920 21:09:07.153"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170920 21:09:07.157" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170920 21:09:07.157" starttime="20170920 21:09:07.154"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170920 21:09:07.176" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170920 21:09:07.176" starttime="20170920 21:09:07.170"></status>
</kw>
<msg timestamp="20170920 21:09:07.176" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170920 21:09:07.176" starttime="20170920 21:09:07.170"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:09:07.177" starttime="20170920 21:09:07.177"></status>
</kw>
<msg timestamp="20170920 21:09:07.178" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 21:09:07.178" starttime="20170920 21:09:07.177"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:09:07.184" starttime="20170920 21:09:07.181"></status>
</kw>
<msg timestamp="20170920 21:09:07.184" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907</msg>
<status status="PASS" endtime="20170920 21:09:07.184" starttime="20170920 21:09:07.178"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170920 21:09:07.188" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907</msg>
<status status="PASS" endtime="20170920 21:09:07.188" starttime="20170920 21:09:07.184"></status>
</kw>
<status status="PASS" endtime="20170920 21:09:07.188" starttime="20170920 21:09:07.169"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170920 21:09:07.216" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 21:09:07.216" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170920 21:09:07.216" starttime="20170920 21:09:07.189"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:09:07.217" starttime="20170920 21:09:07.217"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170920 21:09:07.217" starttime="20170920 21:09:07.217"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:09:07.218" starttime="20170920 21:09:07.218"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170920 21:09:07.218" starttime="20170920 21:09:07.218"></status>
</kw>
<status status="PASS" endtime="20170920 21:09:07.218" starttime="20170920 21:09:07.189"></status>
</kw>
<status status="PASS" endtime="20170920 21:09:07.219" starttime="20170920 21:09:07.188"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170920 21:10:06.928" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 21:10:06.960" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 21:10:18.038" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 21:10:18.067" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 21:10:18.579" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 21:10:18.613" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 20:34:25 CST 2017 from 10.69.80.114 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FE4B8&gt;</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FE4B8&gt;</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:09:05 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x049AC198&gt;</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x049AC198&gt;</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1505912968&amp;token=0d4f22134a5a97733d91e6eedf865cc172397088981855abc0b008170fe3c58a&amp;frame=sshservice'</msg>
<msg timestamp="20170920 21:10:46.457" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1505912971&amp;token=c5eedf6f29329b42e4ada1599e7f5fd5a37e10b1a5658beb9f71bdfc605a12ac&amp;frame=RndPortsService'</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:09:16 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0557BF30&gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0557BF30&gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:09:33 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0559B1E8&gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0559B1E8&gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_resource.py@1141] 
 ****Current BTS version is 'TL17A_ENB_0000_000337_000000' *****</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_resource.py@1171] activeBuildVersion=TL17A_ENB_0000_000337_000000</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:09:43 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05574620&gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05574620&gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\SiteConf.xml' is ok. local file size is 111k</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:10:04 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05708120&gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05708120&gt;</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_resource.py@403] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FileDirectory_20170920211006.xml' is ok. local file size is 36k</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_143.xml</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/config/SCFC_143.xml' to 'D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\SCFC_143.xml' is ok. local file size is 152k</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_resource.py@1141] 
 ****Current bbu type is 'ASIA' *****</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_resource.py@1266] HW_BBU_TYPE=ASIA</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_resource.py@1141] 
 ****Current rru type is 'FZHR' *****</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_resource.py@1269] HW_RRU_TYPE=FZHR</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_resource.py@1141] 
 ****Current HW type is '#2720-2CL1-T3-L-14' *****</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[enb_resource.py@1272] BTS_HW_TYPE=#2720-2CL1-T3-L-14</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ping_control.py@189] 
Pinging 192.168.200.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.200.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:10:46.458" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170920 21:10:46.461" starttime="20170920 21:09:07.219"></status>
</kw>
<status status="PASS" endtime="20170920 21:10:46.461" starttime="20170920 21:09:07.219"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170920 21:10:46.461" starttime="20170920 21:10:46.461"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170920 21:10:46.462" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170920 21:10:46.463" starttime="20170920 21:10:46.462"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170920 21:10:46.466" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170920 21:10:46.466" starttime="20170920 21:10:46.463"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170920 21:10:46.469" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170920 21:10:46.469" starttime="20170920 21:10:46.466"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170920 21:10:46.472" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170920 21:10:46.472" starttime="20170920 21:10:46.469"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170920 21:10:47.897" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170920 21:10:47.897" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170920 21:10:47.897" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170920 21:10:47.897" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170920 21:10:47.897" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 21:10:47.898" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;</msg>
<status status="PASS" endtime="20170920 21:10:47.898" starttime="20170920 21:10:46.472"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 21:10:47.898" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;</msg>
<status status="PASS" endtime="20170920 21:10:47.899" starttime="20170920 21:10:47.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170920 21:10:49.095" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;</msg>
<msg timestamp="20170920 21:10:49.095" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170920 21:10:49.095" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170920 21:10:49.095" starttime="20170920 21:10:47.902"></status>
</kw>
<status status="PASS" endtime="20170920 21:10:49.095" starttime="20170920 21:10:47.899"></status>
</kw>
<status status="PASS" endtime="20170920 21:10:49.095" starttime="20170920 21:10:46.461"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 21:10:49.100" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;.</msg>
<status status="PASS" endtime="20170920 21:10:49.101" starttime="20170920 21:10:49.096"></status>
</kw>
<status status="PASS" endtime="20170920 21:10:49.101" starttime="20170920 21:09:07.112"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:54.617" starttime="20170920 21:23:54.614"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170920 21:23:54.631" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170920 21:23:54.631" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;</msg>
<msg timestamp="20170920 21:23:54.631" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170920 21:23:54.631" level="INFO">[telnet_common.py@189] Disconnect from 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<status status="PASS" endtime="20170920 21:23:54.631" starttime="20170920 21:23:54.617"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${need_zip} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${need_zip} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:54.632" starttime="20170920 21:23:54.632"></status>
</kw>
<msg timestamp="20170920 21:23:54.633" level="INFO">${status} = PASS</msg>
<msg timestamp="20170920 21:23:54.633" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20170920 21:23:54.633" starttime="20170920 21:23:54.632"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${need_zip} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${need_zip} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:54.634" starttime="20170920 21:23:54.634"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:54.634" starttime="20170920 21:23:54.633"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:54.634" starttime="20170920 21:23:54.613"></status>
</kw>
<test id="s1-t1" name="FZHR_Operational_Cell_block_unblock">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170920210905//ev_logs//D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170920 21:10:49.107" level="INFO">${timestamp} = 20170920211049</msg>
<status status="PASS" endtime="20170920 21:10:49.107" starttime="20170920 21:10:49.106"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170920 21:10:49.108" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170920 21:10:49.108" starttime="20170920 21:10:49.107"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170920 21:10:49.108" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170920 21:10:49.108" starttime="20170920 21:10:49.108"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170920 21:10:49.109" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170920 21:10:49.109" starttime="20170920 21:10:49.109"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170920 21:10:49.110" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock"&gt;D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170920 21:10:49.110" starttime="20170920 21:10:49.109"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170920 21:10:49.111" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170920 21:10:49.111" starttime="20170920 21:10:49.111"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170920 21:10:49.112" starttime="20170920 21:10:49.111"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:10:49.114" starttime="20170920 21:10:49.113"></status>
</kw>
<msg timestamp="20170920 21:10:49.114" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 21:10:49.114" starttime="20170920 21:10:49.113"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:10:49.115" starttime="20170920 21:10:49.114"></status>
</kw>
<msg timestamp="20170920 21:10:49.115" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 21:10:49.115" starttime="20170920 21:10:49.114"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170920 21:10:49.118" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170920 21:10:49.118" starttime="20170920 21:10:49.115"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170920 21:10:49.119" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170920 21:10:49.119" starttime="20170920 21:10:49.119"></status>
</kw>
<status status="PASS" endtime="20170920 21:10:49.119" starttime="20170920 21:10:49.112"></status>
</kw>
<status status="PASS" endtime="20170920 21:10:49.119" starttime="20170920 21:10:49.106"></status>
</kw>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 21:10:49.124" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;.</msg>
<status status="PASS" endtime="20170920 21:10:49.125" starttime="20170920 21:10:49.121"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170920 21:10:53.310" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;</msg>
<msg timestamp="20170920 21:10:53.310" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170920 21:10:53.310" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170920 21:10:53.311" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170920 21:10:53.311" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170920 21:10:53.311" starttime="20170920 21:10:49.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:10:53.314" starttime="20170920 21:10:53.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170920 21:10:53.317" starttime="20170920 21:10:53.314"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
</arguments>
<msg timestamp="20170920 21:11:51.887" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 21:11:51.913" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 21:12:02.970" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 21:12:03.244" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:10:16 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057C7EB8&gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057C7EB8&gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:10:52 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057C7418&gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057C7418&gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1505913074&amp;token=724940f387730dae7b33e45c576921b9143fbfbac0b6ba2392024ff411676b01&amp;frame=sshservice'</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1505913076&amp;token=9a68004f29d68f10335723a220cb4a857021e858ef8daec8d1e888fd084421b8&amp;frame=RndPortsService'</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:11:02 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05574DC8&gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05574DC8&gt;</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:12:03.251" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:11:18 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05574FD0&gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05574FD0&gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:11:28 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057532B0&gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057532B0&gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[enb_resource.py@403] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\FileDirectory_20170920211140.xml' is ok. local file size is 36k</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.129</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:11:49 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05708198&gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@258] Execute command: rm -rf /ffs/fs2/config/hwf.bin.gz</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@314] Get Response: rm -rf /ffs/fs2/config/hwf.bin.gz
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05708198&gt;</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[sftp_control.py@61] sftp upload from 'D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\scf_modified.xml' to '/ffs/fs2/config/SCFC_143.xml' is ok.</msg>
<msg timestamp="20170920 21:12:03.252" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_143.xml</msg>
<status status="PASS" endtime="20170920 21:12:03.254" starttime="20170920 21:10:53.318"></status>
</kw>
<kw name="Restart Bts Until Onair" library="tdd_ev_robotws">
<doc>restart bts with powerbreaker and then wait until it is onair.</doc>
<arguments>
<arg>bts_powerbreak_port=${bts_powerbreak}</arg>
</arguments>
<msg timestamp="20170920 21:18:12.678" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[facom.py@60] Power off port 3 succeed!</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[facom.py@60] Power off port 6 succeed!</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[facom.py@83] Power on port 3 succeed!</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[facom.py@83] Power on port 6 succeed!</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[tools_resource.py@39] restart port '['FACOM:10.56.7.128:3', 'FACOM:10.56.7.128:6']' with powerbreak succeed !</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock" already exists, no need to create it again.</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.678" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'UploadOngoing', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'UploadOngoing', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': None, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': None, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will try another way</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will sleep and try again</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@225] infomodel check every cell onair succeed !</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[enb_resource.py@253] bts log check onair msg succeed !</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\im_20170920211811' succeed .</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170920 21:18:12.679" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 21:18:12.683" starttime="20170920 21:12:03.254"></status>
</kw>
<status status="PASS" endtime="20170920 21:18:12.683" starttime="20170920 21:10:49.120"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170920 21:18:12.974" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20170920 21:18:12.974" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170920 21:18:12.974" starttime="20170920 21:18:12.685"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170920 21:18:21.172" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170920 21:18:21.172" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170920 21:18:21.172" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170920 21:18:21.172" starttime="20170920 21:18:12.974"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170920 21:18:21.173" level="INFO">${case_execute_log_name} = owner_debug</msg>
<status status="PASS" endtime="20170920 21:18:21.173" starttime="20170920 21:18:21.172"></status>
</kw>
<status status="PASS" endtime="20170920 21:18:21.173" starttime="20170920 21:18:12.684"></status>
</kw>
<kw name="UE_Reboot_SISO1" library="SISO1 Resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='CPE'</arg>
<arg>Ue Software Reboot</arg>
<arg>${UE1_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:18:21.178" starttime="20170920 21:18:21.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='CPE'</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:18:21.181" starttime="20170920 21:18:21.178"></status>
</kw>
<status status="PASS" endtime="20170920 21:18:21.181" starttime="20170920 21:18:21.173"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${total_times} ]">
<kw type="foritem" name="${num} = 0">
<kw name="_Cell_Block_Unblock_and_Attach">
<doc>Operation with BTS</doc>
<arguments>
<arg>${cell_index_1}</arg>
<arg>${cell_index_2}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 21:18:21.187" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;.</msg>
<status status="PASS" endtime="20170920 21:18:21.187" starttime="20170920 21:18:21.183"></status>
</kw>
<kw name="Kill Sitemanager Process" library="tdd_ev_robotws">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20170920 21:18:25.133" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;</msg>
<msg timestamp="20170920 21:18:25.133" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170920 21:18:25.133" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\SISO1-632\ROOT\CIMV2:Win32_Process.Handle="3128"

Instance deletion successful.


C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 21:18:25.133" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;</msg>
<msg timestamp="20170920 21:18:25.133" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170920 21:18:25.134" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\SISO1-632\ROOT\CIMV2:Win32_Process.Handle="3592"

Instance deletion successful.


C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 21:18:25.134" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;</msg>
<msg timestamp="20170920 21:18:25.134" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170920 21:18:25.134" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170920 21:18:25.134" starttime="20170920 21:18:21.188"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20170920 21:18:25.143" starttime="20170920 21:18:25.143"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20170920 21:18:25.147" starttime="20170920 21:18:25.144"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170920 21:18:25.149" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\TA\\TA_logs\\TestLog_20170920210905\\ev_logs\\FZHR_Operational_Cell_block_unblock_20170920210907\\FZHR_Operational_Cell_...</msg>
<status status="PASS" endtime="20170920 21:18:25.149" starttime="20170920 21:18:25.147"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:18:25.150" starttime="20170920 21:18:25.150"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170920 21:19:38.232" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\GUILog\qtp_log20170920211825\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20170920 21:19:38.232" starttime="20170920 21:18:25.150"></status>
</kw>
<status status="PASS" endtime="20170920 21:19:38.232" starttime="20170920 21:18:25.142"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30 sec</arg>
</arguments>
<msg timestamp="20170920 21:20:08.233" level="INFO">Slept 30 seconds</msg>
<status status="PASS" endtime="20170920 21:20:08.233" starttime="20170920 21:19:38.233"></status>
</kw>
<kw name="GUI SM HW Action" library="gui_resource">
<doc>this keyword is used for most HW operation,such as block,unblock,reset</doc>
<arguments>
<arg>CELL</arg>
<arg>${block_cell_index}</arg>
<arg>Block</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>HWType=${HWType}</arg>
<arg>HWID=${HWID}</arg>
<arg>HWAction=${HWAction}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170920 21:20:08.238" level="INFO">${para_list} = [u'HWType=CELL', u'HWID=1', u'HWAction=Block', u'LogPath=D:\\TA\\TA_logs\\TestLog_20170920210905\\ev_logs\\FZHR_Operational_Cell_block_unblock_20170920210907\\FZHR_Operational_Cell_block_unblock\\']</msg>
<status status="PASS" endtime="20170920 21:20:08.238" starttime="20170920 21:20:08.237"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}HW_Action</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170920 21:21:05.779" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\HW_Action is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\HW_Action ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
HWType="CELL"
HWID="1"
HWAction="Block"
LogPath="D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\GUILog\qtp_log20170920212008\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20170920 21:21:05.779" starttime="20170920 21:20:08.238"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:05.780" starttime="20170920 21:20:08.234"></status>
</kw>
<kw name="UE_Attach_SISO1" library="SISO1 Resource">
<doc>Example</doc>
<arguments>
<arg>${attach_cell_index}</arg>
</arguments>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${cell_id}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{cell_list}</var>
</assign>
<msg timestamp="20170920 21:21:05.787" level="INFO">@{cell_list} = [ 2 ]</msg>
<status status="PASS" endtime="20170920 21:21:05.787" starttime="20170920 21:21:05.786"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${cell_list}</arg>
</arguments>
<assign>
<var>${cell_list_length}</var>
</assign>
<msg timestamp="20170920 21:21:05.787" level="INFO">Length is 1</msg>
<msg timestamp="20170920 21:21:05.788" level="INFO">${cell_list_length} = 1</msg>
<status status="PASS" endtime="20170920 21:21:05.788" starttime="20170920 21:21:05.787"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Split String</arg>
<arg>${attach_earfcn}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${earfcn_list1}</var>
</assign>
<msg timestamp="20170920 21:21:05.792" level="INFO">${earfcn_list1} = None</msg>
<status status="PASS" endtime="20170920 21:21:05.792" starttime="20170920 21:21:05.789"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Change_Earfcn_To_Freqency</arg>
<arg>${earfcn_list1}</arg>
</arguments>
<assign>
<var>${freqency_list1}</var>
<var>${band_list1}</var>
</assign>
<msg timestamp="20170920 21:21:05.797" level="INFO">${freqency_list1} = None</msg>
<msg timestamp="20170920 21:21:05.797" level="INFO">${band_list1} = None</msg>
<status status="PASS" endtime="20170920 21:21:05.797" starttime="20170920 21:21:05.793"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Get_Earfcn_From_Infomodel</arg>
</arguments>
<assign>
<var>${earfcn_list2}</var>
<var>${freqency_list2}</var>
<var>${band_list2}</var>
</assign>
<kw name="Get_Earfcn_From_Infomodel" library="SISO1 Resource">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>get list /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1</arg>
</arguments>
<assign>
<var>@{ret_earfcn}</var>
</assign>
<msg timestamp="20170920 21:21:05.963" level="INFO">[infomodel_control.py@328] query infomodel: 'get list /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1' succeed .</msg>
<msg timestamp="20170920 21:21:05.963" level="INFO">@{ret_earfcn} = [ InfoModelObject /MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-2/CARRIER_GROUP_L-1: {u'fcnULs': [38100L], u'fcnDLs': [38100L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-2/CARRIER_GROUP_L-1', u's...</msg>
<status status="PASS" endtime="20170920 21:21:05.964" starttime="20170920 21:21:05.803"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${ret_earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:05.964" starttime="20170920 21:21:05.964"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${earfcn_list}</var>
</assign>
<msg timestamp="20170920 21:21:05.965" level="INFO">${earfcn_list} = []</msg>
<status status="PASS" endtime="20170920 21:21:05.965" starttime="20170920 21:21:05.964"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${freqency_list}</var>
</assign>
<msg timestamp="20170920 21:21:05.966" level="INFO">${freqency_list} = []</msg>
<status status="PASS" endtime="20170920 21:21:05.966" starttime="20170920 21:21:05.965"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${band_list}</var>
</assign>
<msg timestamp="20170920 21:21:05.966" level="INFO">${band_list} = []</msg>
<status status="PASS" endtime="20170920 21:21:05.966" starttime="20170920 21:21:05.966"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_OFFSET}</arg>
</arguments>
<assign>
<var>${offset_dict}</var>
</assign>
<msg timestamp="20170920 21:21:05.967" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:05.968" level="INFO">${offset_dict} = {u'38': u'1205', u'40': u'1565', u'39': u'1945', u'41': u'1469', u'42': u'759', u'43': u'759', u'37': u'1845', u'36': u'1765', u'35': u'1785', u'34': u'1610', u'33': u'1700'}</msg>
<status status="PASS" endtime="20170920 21:21:05.968" starttime="20170920 21:21:05.966"></status>
</kw>
<kw type="for" name="${index} IN [ @{ret_earfcn} ]">
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-1/CARRIER_GROUP_L-1: {u'fcnULs': [37900L], u'fcnDLs': [37900L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-1/CARRIER_GROUP_L-1', u'sta...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 21:21:05.970" level="INFO">${index.earfcn} = 37900</msg>
<status status="PASS" endtime="20170920 21:21:05.970" starttime="20170920 21:21:05.969"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:05.970" starttime="20170920 21:21:05.970"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 21:21:05.973" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:05.974" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 21:21:05.975" starttime="20170920 21:21:05.972"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 21:21:05.975" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 21:21:05.976" starttime="20170920 21:21:05.975"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:05.977" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 21:21:05.977" starttime="20170920 21:21:05.976"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:05.981" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 21:21:05.981" starttime="20170920 21:21:05.977"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 21:21:05.982" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 21:21:05.983" starttime="20170920 21:21:05.981"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:05.983" starttime="20170920 21:21:05.976"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:05.983" starttime="20170920 21:21:05.976"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:05.988" starttime="20170920 21:21:05.984"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 21:21:05.994" level="INFO">${bts_band} = 38</msg>
<status status="PASS" endtime="20170920 21:21:05.994" starttime="20170920 21:21:05.988"></status>
</kw>
<msg timestamp="20170920 21:21:05.995" level="INFO">${attach_band} = 38</msg>
<status status="PASS" endtime="20170920 21:21:05.995" starttime="20170920 21:21:05.971"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 21:21:05.996" level="INFO">${attach_band} = 38</msg>
<status status="PASS" endtime="20170920 21:21:05.996" starttime="20170920 21:21:05.995"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:05.996" starttime="20170920 21:21:05.996"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 21:21:05.997" level="INFO">${offset} = 1205</msg>
<status status="PASS" endtime="20170920 21:21:05.997" starttime="20170920 21:21:05.997"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 21:21:06.001" level="INFO">${freq} = 25850.0</msg>
<status status="PASS" endtime="20170920 21:21:06.001" starttime="20170920 21:21:05.997"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 21:21:06.002" level="INFO">${fq} = 25850</msg>
<status status="PASS" endtime="20170920 21:21:06.002" starttime="20170920 21:21:06.001"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 21:21:06.002" level="INFO">${freqency} = 25850</msg>
<status status="PASS" endtime="20170920 21:21:06.002" starttime="20170920 21:21:06.002"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.003" starttime="20170920 21:21:06.003"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.003" starttime="20170920 21:21:05.969"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-2/CARRIER_GROUP_L-1: {u'fcnULs': [38100L], u'fcnDLs': [38100L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-2/CARRIER_GROUP_L-1', u'sta...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 21:21:06.004" level="INFO">${index.earfcn} = 38100</msg>
<status status="PASS" endtime="20170920 21:21:06.004" starttime="20170920 21:21:06.003"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.005" starttime="20170920 21:21:06.004"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 21:21:06.006" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:06.007" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 21:21:06.007" starttime="20170920 21:21:06.005"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 21:21:06.008" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.008" starttime="20170920 21:21:06.007"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.009" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.009" starttime="20170920 21:21:06.008"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.015" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 21:21:06.015" starttime="20170920 21:21:06.010"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 21:21:06.016" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 21:21:06.016" starttime="20170920 21:21:06.015"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.016" starttime="20170920 21:21:06.008"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.016" starttime="20170920 21:21:06.008"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.020" starttime="20170920 21:21:06.016"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 21:21:06.026" level="INFO">${bts_band} = 38</msg>
<status status="PASS" endtime="20170920 21:21:06.026" starttime="20170920 21:21:06.021"></status>
</kw>
<msg timestamp="20170920 21:21:06.026" level="INFO">${attach_band} = 38</msg>
<status status="PASS" endtime="20170920 21:21:06.026" starttime="20170920 21:21:06.005"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 21:21:06.027" level="INFO">${attach_band} = 38</msg>
<status status="PASS" endtime="20170920 21:21:06.027" starttime="20170920 21:21:06.027"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.028" starttime="20170920 21:21:06.027"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 21:21:06.029" level="INFO">${offset} = 1205</msg>
<status status="PASS" endtime="20170920 21:21:06.029" starttime="20170920 21:21:06.028"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 21:21:06.033" level="INFO">${freq} = 26050.0</msg>
<status status="PASS" endtime="20170920 21:21:06.033" starttime="20170920 21:21:06.029"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 21:21:06.034" level="INFO">${fq} = 26050</msg>
<status status="PASS" endtime="20170920 21:21:06.034" starttime="20170920 21:21:06.033"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 21:21:06.034" level="INFO">${freqency} = 26050</msg>
<status status="PASS" endtime="20170920 21:21:06.034" starttime="20170920 21:21:06.034"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.035" starttime="20170920 21:21:06.035"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.035" starttime="20170920 21:21:06.003"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6512/CARRIER_GROUP_L-1: {u'fcnULs': [42490L], u'fcnDLs': [42490L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6512/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 21:21:06.036" level="INFO">${index.earfcn} = 42490</msg>
<status status="PASS" endtime="20170920 21:21:06.036" starttime="20170920 21:21:06.036"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.037" starttime="20170920 21:21:06.037"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 21:21:06.038" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:06.040" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 21:21:06.040" starttime="20170920 21:21:06.038"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 21:21:06.041" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.041" starttime="20170920 21:21:06.040"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.045" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.045" starttime="20170920 21:21:06.042"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.054" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.054" starttime="20170920 21:21:06.046"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.055" starttime="20170920 21:21:06.054"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.055" starttime="20170920 21:21:06.041"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.056" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.056" starttime="20170920 21:21:06.055"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.060" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.060" starttime="20170920 21:21:06.056"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.061" starttime="20170920 21:21:06.060"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.061" starttime="20170920 21:21:06.055"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.062" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.062" starttime="20170920 21:21:06.061"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.067" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.067" starttime="20170920 21:21:06.062"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.068" starttime="20170920 21:21:06.068"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.068" starttime="20170920 21:21:06.061"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.069" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.069" starttime="20170920 21:21:06.068"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.075" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.075" starttime="20170920 21:21:06.069"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.076" starttime="20170920 21:21:06.076"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.076" starttime="20170920 21:21:06.068"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.077" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.077" starttime="20170920 21:21:06.076"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.082" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 21:21:06.082" starttime="20170920 21:21:06.077"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 21:21:06.084" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 21:21:06.084" starttime="20170920 21:21:06.083"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.085" starttime="20170920 21:21:06.076"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.085" starttime="20170920 21:21:06.041"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.090" starttime="20170920 21:21:06.086"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 21:21:06.093" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.094" starttime="20170920 21:21:06.090"></status>
</kw>
<msg timestamp="20170920 21:21:06.094" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.094" starttime="20170920 21:21:06.037"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 21:21:06.095" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.095" starttime="20170920 21:21:06.095"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.096" starttime="20170920 21:21:06.096"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 21:21:06.097" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 21:21:06.097" starttime="20170920 21:21:06.096"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 21:21:06.101" level="INFO">${freq} = 34900.0</msg>
<status status="PASS" endtime="20170920 21:21:06.101" starttime="20170920 21:21:06.097"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 21:21:06.102" level="INFO">${fq} = 34900</msg>
<status status="PASS" endtime="20170920 21:21:06.102" starttime="20170920 21:21:06.101"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 21:21:06.102" level="INFO">${freqency} = 34900</msg>
<status status="PASS" endtime="20170920 21:21:06.102" starttime="20170920 21:21:06.102"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.104" starttime="20170920 21:21:06.103"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.105" starttime="20170920 21:21:06.035"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6513/CARRIER_GROUP_L-1: {u'fcnULs': [42690L], u'fcnDLs': [42690L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6513/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 21:21:06.106" level="INFO">${index.earfcn} = 42690</msg>
<status status="PASS" endtime="20170920 21:21:06.106" starttime="20170920 21:21:06.106"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.107" starttime="20170920 21:21:06.107"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 21:21:06.108" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:06.110" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 21:21:06.110" starttime="20170920 21:21:06.108"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 21:21:06.111" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.111" starttime="20170920 21:21:06.110"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.112" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.112" starttime="20170920 21:21:06.111"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.118" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.118" starttime="20170920 21:21:06.112"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.119" starttime="20170920 21:21:06.119"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.119" starttime="20170920 21:21:06.111"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.120" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.120" starttime="20170920 21:21:06.119"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.123" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.124" starttime="20170920 21:21:06.120"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.125" starttime="20170920 21:21:06.124"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.125" starttime="20170920 21:21:06.119"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.126" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.126" starttime="20170920 21:21:06.126"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.130" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.130" starttime="20170920 21:21:06.127"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.131" starttime="20170920 21:21:06.130"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.131" starttime="20170920 21:21:06.126"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.132" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.132" starttime="20170920 21:21:06.131"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.137" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.137" starttime="20170920 21:21:06.132"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.138" starttime="20170920 21:21:06.138"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.139" starttime="20170920 21:21:06.131"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.139" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.139" starttime="20170920 21:21:06.139"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.144" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 21:21:06.144" starttime="20170920 21:21:06.140"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 21:21:06.145" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 21:21:06.146" starttime="20170920 21:21:06.144"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.146" starttime="20170920 21:21:06.139"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.146" starttime="20170920 21:21:06.111"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.150" starttime="20170920 21:21:06.147"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 21:21:06.153" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.153" starttime="20170920 21:21:06.150"></status>
</kw>
<msg timestamp="20170920 21:21:06.153" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.153" starttime="20170920 21:21:06.107"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 21:21:06.154" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.154" starttime="20170920 21:21:06.153"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.156" starttime="20170920 21:21:06.155"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 21:21:06.157" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 21:21:06.157" starttime="20170920 21:21:06.156"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 21:21:06.160" level="INFO">${freq} = 35100.0</msg>
<status status="PASS" endtime="20170920 21:21:06.161" starttime="20170920 21:21:06.157"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 21:21:06.161" level="INFO">${fq} = 35100</msg>
<status status="PASS" endtime="20170920 21:21:06.161" starttime="20170920 21:21:06.161"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 21:21:06.162" level="INFO">${freqency} = 35100</msg>
<status status="PASS" endtime="20170920 21:21:06.162" starttime="20170920 21:21:06.161"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.162" starttime="20170920 21:21:06.162"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.162" starttime="20170920 21:21:06.105"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6514/CARRIER_GROUP_L-1: {u'fcnULs': [42490L], u'fcnDLs': [42490L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6514/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 21:21:06.164" level="INFO">${index.earfcn} = 42490</msg>
<status status="PASS" endtime="20170920 21:21:06.164" starttime="20170920 21:21:06.163"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.164" starttime="20170920 21:21:06.164"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 21:21:06.167" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:06.169" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 21:21:06.169" starttime="20170920 21:21:06.167"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 21:21:06.169" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.169" starttime="20170920 21:21:06.169"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.171" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.171" starttime="20170920 21:21:06.170"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.175" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.175" starttime="20170920 21:21:06.171"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.177" starttime="20170920 21:21:06.177"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.177" starttime="20170920 21:21:06.169"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.179" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.179" starttime="20170920 21:21:06.178"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.182" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.182" starttime="20170920 21:21:06.179"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.183" starttime="20170920 21:21:06.182"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.183" starttime="20170920 21:21:06.177"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.183" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.184" starttime="20170920 21:21:06.183"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.188" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.188" starttime="20170920 21:21:06.184"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.189" starttime="20170920 21:21:06.189"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.189" starttime="20170920 21:21:06.183"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.190" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.190" starttime="20170920 21:21:06.189"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.197" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.197" starttime="20170920 21:21:06.191"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.197" starttime="20170920 21:21:06.197"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.197" starttime="20170920 21:21:06.189"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.198" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.198" starttime="20170920 21:21:06.198"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.202" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 21:21:06.202" starttime="20170920 21:21:06.199"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 21:21:06.203" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 21:21:06.203" starttime="20170920 21:21:06.203"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.203" starttime="20170920 21:21:06.197"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.204" starttime="20170920 21:21:06.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.209" starttime="20170920 21:21:06.204"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 21:21:06.213" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.213" starttime="20170920 21:21:06.209"></status>
</kw>
<msg timestamp="20170920 21:21:06.213" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.213" starttime="20170920 21:21:06.165"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 21:21:06.214" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.214" starttime="20170920 21:21:06.213"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.214" starttime="20170920 21:21:06.214"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 21:21:06.215" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 21:21:06.216" starttime="20170920 21:21:06.215"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 21:21:06.220" level="INFO">${freq} = 34900.0</msg>
<status status="PASS" endtime="20170920 21:21:06.220" starttime="20170920 21:21:06.217"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 21:21:06.221" level="INFO">${fq} = 34900</msg>
<status status="PASS" endtime="20170920 21:21:06.221" starttime="20170920 21:21:06.221"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 21:21:06.222" level="INFO">${freqency} = 34900</msg>
<status status="PASS" endtime="20170920 21:21:06.222" starttime="20170920 21:21:06.221"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.222" starttime="20170920 21:21:06.222"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.222" starttime="20170920 21:21:06.162"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6515/CARRIER_GROUP_L-1: {u'fcnULs': [42690L], u'fcnDLs': [42690L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6515/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 21:21:06.224" level="INFO">${index.earfcn} = 42690</msg>
<status status="PASS" endtime="20170920 21:21:06.224" starttime="20170920 21:21:06.223"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.225" starttime="20170920 21:21:06.224"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 21:21:06.227" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:06.229" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 21:21:06.229" starttime="20170920 21:21:06.227"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 21:21:06.230" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.230" starttime="20170920 21:21:06.229"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.231" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.231" starttime="20170920 21:21:06.231"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.236" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.236" starttime="20170920 21:21:06.231"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.237" starttime="20170920 21:21:06.237"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.237" starttime="20170920 21:21:06.230"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.239" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.239" starttime="20170920 21:21:06.238"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.242" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.242" starttime="20170920 21:21:06.239"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.243" starttime="20170920 21:21:06.243"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.243" starttime="20170920 21:21:06.238"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.244" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.244" starttime="20170920 21:21:06.243"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.249" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.249" starttime="20170920 21:21:06.244"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.250" starttime="20170920 21:21:06.249"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.250" starttime="20170920 21:21:06.243"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.251" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.251" starttime="20170920 21:21:06.250"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.258" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 21:21:06.258" starttime="20170920 21:21:06.251"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.259" starttime="20170920 21:21:06.258"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.259" starttime="20170920 21:21:06.250"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 21:21:06.259" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 21:21:06.259" starttime="20170920 21:21:06.259"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 21:21:06.264" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 21:21:06.264" starttime="20170920 21:21:06.260"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 21:21:06.264" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 21:21:06.265" starttime="20170920 21:21:06.264"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.265" starttime="20170920 21:21:06.259"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.265" starttime="20170920 21:21:06.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.270" starttime="20170920 21:21:06.265"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 21:21:06.273" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.273" starttime="20170920 21:21:06.270"></status>
</kw>
<msg timestamp="20170920 21:21:06.274" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.274" starttime="20170920 21:21:06.225"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 21:21:06.274" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 21:21:06.274" starttime="20170920 21:21:06.274"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.275" starttime="20170920 21:21:06.275"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 21:21:06.276" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 21:21:06.276" starttime="20170920 21:21:06.275"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 21:21:06.281" level="INFO">${freq} = 35100.0</msg>
<status status="PASS" endtime="20170920 21:21:06.281" starttime="20170920 21:21:06.276"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 21:21:06.281" level="INFO">${fq} = 35100</msg>
<status status="PASS" endtime="20170920 21:21:06.281" starttime="20170920 21:21:06.281"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 21:21:06.282" level="INFO">${freqency} = 35100</msg>
<status status="PASS" endtime="20170920 21:21:06.282" starttime="20170920 21:21:06.282"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.283" starttime="20170920 21:21:06.282"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.283" starttime="20170920 21:21:06.222"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.283" starttime="20170920 21:21:05.968"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.283" starttime="20170920 21:21:05.802"></status>
</kw>
<msg timestamp="20170920 21:21:06.283" level="INFO">${earfcn_list2} = [u'37900', u'38100', u'42490', u'42690', u'42490', u'42690']</msg>
<msg timestamp="20170920 21:21:06.283" level="INFO">${freqency_list2} = [u'25850', u'26050', u'34900', u'35100', u'34900', u'35100']</msg>
<msg timestamp="20170920 21:21:06.284" level="INFO">${band_list2} = [u'38', u'38', u'42', u'42', u'42', u'42']</msg>
<status status="PASS" endtime="20170920 21:21:06.284" starttime="20170920 21:21:05.797"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${earfcn_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<assign>
<var>${earfcn_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.294" starttime="20170920 21:21:06.290"></status>
</kw>
<msg timestamp="20170920 21:21:06.294" level="INFO">${earfcn_list} = [u'37900', u'38100', u'42490', u'42690', u'42490', u'42690']</msg>
<status status="PASS" endtime="20170920 21:21:06.294" starttime="20170920 21:21:06.284"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${freqency_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<assign>
<var>${freqency_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.302" starttime="20170920 21:21:06.299"></status>
</kw>
<msg timestamp="20170920 21:21:06.302" level="INFO">${freqency_list} = [u'25850', u'26050', u'34900', u'35100', u'34900', u'35100']</msg>
<status status="PASS" endtime="20170920 21:21:06.303" starttime="20170920 21:21:06.294"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${band_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<assign>
<var>${band_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.312" starttime="20170920 21:21:06.307"></status>
</kw>
<msg timestamp="20170920 21:21:06.312" level="INFO">${band_list} = [u'38', u'38', u'42', u'42', u'42', u'42']</msg>
<status status="PASS" endtime="20170920 21:21:06.312" starttime="20170920 21:21:06.303"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${cell_index1}</var>
</assign>
<msg timestamp="20170920 21:21:06.313" level="INFO">${cell_index1} = 0</msg>
<status status="PASS" endtime="20170920 21:21:06.313" starttime="20170920 21:21:06.312"></status>
</kw>
<kw type="for" name="${cell_index2} IN [ @{cell_list} ]">
<kw type="foritem" name="${cell_index2} = 2">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Evaluate</arg>
<arg>${cell_index1}</arg>
<arg>ELSE</arg>
<arg>Evaluate</arg>
<arg>${cell_index2}-1</arg>
</arguments>
<assign>
<var>${cell_index}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${cell_index2}-1</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.323" starttime="20170920 21:21:06.317"></status>
</kw>
<msg timestamp="20170920 21:21:06.323" level="INFO">${cell_index} = 1</msg>
<status status="PASS" endtime="20170920 21:21:06.323" starttime="20170920 21:21:06.314"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='CPE'</arg>
<arg>Run Keyword If</arg>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.332" starttime="20170920 21:21:06.328"></status>
</kw>
<status status="PASS" endtime="20170920 21:21:06.332" starttime="20170920 21:21:06.324"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='CPE'</arg>
<arg>CPE_Attach_SISO1_src</arg>
<arg>${earfcn_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${band_list[${cell_index}]}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:21:06.336" starttime="20170920 21:21:06.333"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='TM500'</arg>
<arg>TM500_Attach_SISO1_src</arg>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="TM500_Attach_SISO1_src" library="SISO1 Resource">
<arguments>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="Tm500 Setup" library="tdd_ev_robotws">
<doc>tm500 setup.</doc>
<msg timestamp="20170920 21:21:07.996" level="INFO">${TM500_PC_CONNECTION} = 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.691" level="INFO">[robot_func.py@29] Can't get variable '${TM500_PC_CONNECTION}' ! details: 'Variable '${TM500_PC_CONNECTION}' not found.'</msg>
<msg timestamp="20170920 21:22:34.692" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170920 21:22:34.692" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170920 21:22:34.692" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170920 21:22:34.692" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170920 21:22:34.692" level="INFO">[telnet_common.py@246]  

*===============================================================
Welcome to Microsoft Telnet Server.
*===============================================================
C:\Documents and Settings\bts-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.692" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;.</msg>
<msg timestamp="20170920 21:22:34.692" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',tdd_ev_robotws.__version__"</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',tdd_ev_robotws.__version__"
*SEP* 1.0.1

C:\Documents and Settings\bts-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Documents and Settings\bts-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Documents and Settings\bts-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[telnet_common.py@276] Execute command: "D:\TA\trunk_soam\tdd_ev_robotws\tools\psexec.exe" -i -d python "D:\TA\trunk_soam\tdd_ev_robotws\tools\robotremoteserver.py"  -l tdd_ev_robotws -i 0.0.0.0 -p 8275 -s True</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[telnet_common.py@306] Get Response: "D:\TA\trunk_soam\tdd_ev_robotws\tools\psexec.exe" -i -d python "D:\TA\trunk_soam\tdd_ev_robotws\tools\robotremoteserver.py"  -l tdd_ev_robotws -i 0.0.0.0 -p 8275 -s True

PsExec v1.98 - Execute processes remotely
Copyright (C) 2001-2010 Mark Russinovich
Sysinternals - www.sysinternals.com

python started with process ID 1780.

C:\Documents and Settings\bts-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[process_control.py@74] Process start successed ! process id: 1780</msg>
<msg timestamp="20170920 21:22:34.693" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[remote_lib_control.py@62] start remote server succeed !</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[tm500.py@108] have setup Remotelib instance: RemoteLibInstance: 10.69.71.200:8275</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[tm500.py@408] Request TM500 Resource:
sent -&gt; "request:15:1"
received &lt;- "Welcome! Please use it, You are No.1 in 1 user queue.

"</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[tm500.py@412] Get TM500 resource success!</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;.</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@276] Execute command: ls "C:\Program Files\FileZilla Server"</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@306] Get Response: ls "C:\Program Files\FileZilla Server"
FileZilla Server Interface.exe
FileZilla Server Interface.xml
FileZilla Server.xml
FileZilla server.exe
FzGSS.dll
Uninstall.exe
legal.htm
libeay32.dll
license.txt
readme.htm
ssleay32.dll

C:\Documents and Settings\bts-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;.</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[file_control.py@332] copyfile2local command: 'D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.200:"C:/Program\ Files/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\FileZilla server.xml"'</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:10 minutes &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@276] Execute command: D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.200:"C:/Program\ Files/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\FileZilla server.xml"</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@306] Get Response: D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.200:"C:/Program\ Files/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\FileZilla server.xml"

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@276] Execute command: echo ERRORCODE is: %ERRORLEVEL%</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@306] Get Response: echo ERRORCODE is: %ERRORLEVEL%
ERRORCODE is: 0

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[file_common.py@168] Copy file "D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\FileZilla server.xml" to "D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\FileZilla server.xml.change_bak" succeeded.</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[filezilla_control.py@182] Filezilla configed right, no need to change TM500 version.</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;.</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$CLOSE</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[tm500.py@1736] TM500 command reply: C: CLOSE 0x00 ok.</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@276] Execute command: TASKKILL /F /T /IM TmaApplication.exe</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@306] Get Response: TASKKILL /F /T /IM TmaApplication.exe
ERROR: The process "TmaApplication.exe" not found.

C:\Documents and Settings\bts-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Documents and Settings\bts-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@278] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@276] Execute command: "D:\TA\trunk_soam\tdd_ev_robotws\tools\Server_Client\client.exe" localhost "C:\Program Files\Aeroflex\TM500\LTE - K4.6.4.REV55\Test Mobile Application\TMAApplication.exe" /u \"Default User\" /c y /p 5003 /a n</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@276] Execute command: Ctrl-C</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[telnet_common.py@306] Get Response: Server Keep Alive Message Interval is [12 bytes]: '3'
Keep Alive Message from Server Received [3 bytes]: '(be 0 3)' 
^C
C:\Documents and Settings\bts-tester&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.200:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056D43F0&gt;</msg>
<msg timestamp="20170920 21:22:34.694" level="INFO">[tm500.py@591] Prev msg:</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DISCONNECT</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: DISCONNECT 0x00 OK</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$CONNECT</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: CONNECT 0x00 ok. Waiting for User to Configure Test Mobile</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: GSTS</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: GSTS 0x00 Ok Reset</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: ABOT 0 0 1</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: ABOT 0x00 Ok 0x0000001e</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: SELR 0 0 RC2 COMBINED</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: SELR 0x00 Ok</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: EREF 0 0 0</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: EREF 0x00 Ok</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: GETR</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: GETR 0x00 Ok 
Radio cards
==============
   Card   : Umbra2 LTE (20MHz)
   Slot   : RC1
   Chassis: 0
   Context: -
   RF     : type 7
   A:  DL : 2110.0 - 2170.0 MHz
       UL : 1920.0 - 1980.0 MHz
   B:  DL : 2300.0 - 2400.0 MHz
       UL : 2300.0 - 2400.0 MHz
==============
*  Card   : Umbra2 LTE (20MHz)
   Slot   : RC2
   Chassis: 0
   Context: 0
   RF     : type 200
   A:  DL : 400.0 - 4000.0 MHz
       UL : 400.0 - 4000.0 MHz
   B:  DL : 0.0 - 0.0 MHz
       UL : 0.0 - 0.0 MHz</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: SCFG NAS_MODE</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: SCFG 0x00 Ok NAS_MODE</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: STRT</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: STRT 0x00 Ok</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DATA_LOG_FOLDER 1 "C:\TM500_log\"</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: DATA_LOG_FOLDER 0x00 ok.</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DATA_LOG_OPTIONS 0 1 0</msg>
<msg timestamp="20170920 21:22:34.695" level="INFO">[tm500.py@1736] TM500 command reply: C: DATA_LOG_OPTIONS 0x00 ok.</msg>
<status status="PASS" endtime="20170920 21:22:34.698" starttime="20170920 21:21:06.342"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Use_Tag}</arg>
<arg>used</arg>
</arguments>
<msg timestamp="20170920 21:22:34.704" level="INFO">${TM500_Use_Tag} = used</msg>
<status status="PASS" endtime="20170920 21:22:34.705" starttime="20170920 21:22:34.699"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${cell_id}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170920 21:22:38.738" level="INFO">$TA,C,020A*</msg>
<msg timestamp="20170920 21:22:38.739" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,020A*', Receive&lt;-'$TA,C,020A*'</msg>
<msg timestamp="20170920 21:22:38.739" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,020A*'
$TA,C,060A*</msg>
<msg timestamp="20170920 21:22:38.739" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,060A*', Receive&lt;-'$TA,C,060A*'</msg>
<msg timestamp="20170920 21:22:38.739" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,060A*'</msg>
<status status="PASS" endtime="20170920 21:22:38.739" starttime="20170920 21:22:34.706"></status>
</kw>
<kw name="Tm500 Configure Logging" library="tdd_ev_robotws">
<doc>This keyword selects TM500's logging items.</doc>
<arguments>
<arg>${ue_log_types}</arg>
</arguments>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: GVER</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: GVER 0x00 Ok 
 PPC-0:
    BSP: 2.0/n/R13
    APP: TM500 LTE VERSION:K4.6.4:REV1:PPC:K4.6.4
 DSP-0: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
    PCB: 0
   VHDL: 0x0062
 DSP-1: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-2: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-3: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-4: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
    PCB: 0
   VHDL: 0x0062
 DSP-5: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-6: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-7: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-8: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
    PCB: 0
   VHDL: 0x101C
 DSP-9: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-10: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-11: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-12: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
    PCB: 0
   VHDL: 0x208A
 DSP-13: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-14: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-15: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 Version Label: LTE-SUE-C0309_TDD_4X2_L1_K_04_06_04_REV55
 UMBRA-0
    API: 13.3.1  Product: 3
    APP: 1.0.149  Built: Sep 25 2014 17:17:27
    CON: 3.5.0  Build: 0
    SIG: 2.1.1  Build: 46
    MMC: 1.7
    Carrier:  Loc: 12  PCB: 3.0 (OWI: 3.0)  SN: 0x4A000001D72F0323  BarCode: 20-1442-1360070-2568
    MOD TX: 0.0.17  Build: 16  Type: 200  PCB: 3.0 (OWI: 3.0)  SN: 0xD000000167A41623  BarCode: 00000044830737250285
    MOD RX: 0.0.31  Build: 34  PCB: 3.0</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@507] TM500 command line response of "GVER":
C: GVER 0x00 Ok 
 PPC-0:
    BSP: 2.0/n/R13
    APP: TM500 LTE VERSION:K4.6.4:REV1:PPC:K4.6.4
 DSP-0: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
    PCB: 0
   VHDL: 0x0062
 DSP-1: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-2: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-3: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-4: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
    PCB: 0
   VHDL: 0x0062
 DSP-5: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-6: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-7: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-8: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
    PCB: 0
   VHDL: 0x101C
 DSP-9: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-10: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-11: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-12: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
    PCB: 0
   VHDL: 0x208A
 DSP-13: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-14: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 DSP-15: 
    APP: TM500 LTE VERSION:K4.6.4:REV1:DSP:K4.6.4
 Version Label: LTE-SUE-C0309_TDD_4X2_L1_K_04_06_04_REV55
 UMBRA-0
    API: 13.3.1  Product: 3
    APP: 1.0.149  Built: Sep 25 2014 17:17:27
    CON: 3.5.0  Build: 0
    SIG: 2.1.1  Build: 46
    MMC: 1.7
    Carrier:  Loc: 12  PCB: 3.0 (OWI: 3.0)  SN: 0x4A000001D72F0323  BarCode: 20-1442-1360070-2568
    MOD TX: 0.0.17  Build: 16  Type: 200  PCB: 3.0 (OWI: 3.0)  SN: 0xD000000167A41623  BarCode: 00000044830737250285
    MOD RX: 0.0.31  Build: 34  PCB: 3.0</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CLEAR_ALL</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CLEAR_ALL 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_ITM 1 1 1 Manual</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_ITM 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 100 0 0 0 UEOVERVIEW</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 1 0 0 0 ProtocolLog</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 CQIREPORTING #Subband 0-24 2</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 262 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 263 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 264 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 100 0 0 0 L1RBPOWERS #Component_Carrier 0,1 0</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 200 0 0 0 L1CELLWATCH</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLSCHRX</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLHARQRX</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 ULHARQTX</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 ULSRS</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLL1L2CONTROL</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 100 0 0 0 L1DLRSPOWER #Radio_Context_ID 0,1 0</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_ITM 0 0 0 Automatic</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_ITM 0x00 ok.</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_END</msg>
<msg timestamp="20170920 21:22:41.317" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_END 0x00 ok.</msg>
<status status="PASS" endtime="20170920 21:22:41.318" starttime="20170920 21:22:38.739"></status>
</kw>
<kw name="Tm500 Start Logging" library="tdd_ev_robotws">
<doc>This keyword starts TM500's logging.</doc>
<msg timestamp="20170920 21:22:41.945" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$START_LOGGING</msg>
<msg timestamp="20170920 21:22:41.945" level="INFO">[tm500.py@1736] TM500 command reply: C: START_LOGGING 0x00 OK. Current logging folder is 'C:\TM500_LOG\/170920_212149_session/170920_212240'</msg>
<msg timestamp="20170920 21:22:41.945" level="INFO">[tm500.py@1352] TM500 command line response of "START LOGGING":
C: START_LOGGING 0x00 OK. Current logging folder is 'C:\TM500_LOG\/170920_212149_session/170920_212240'</msg>
<msg timestamp="20170920 21:22:41.945" level="INFO">[tm500.py@1363] C:\TM500_LOG\170920_212149_session\170920_212240</msg>
<status status="PASS" endtime="20170920 21:22:41.945" starttime="20170920 21:22:41.319"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${modify_tm500_script}</arg>
</arguments>
<assign>
<var>${modify_tm500_script}</var>
</assign>
<msg timestamp="20170920 21:22:41.946" level="INFO">${modify_tm500_script} = []</msg>
<status status="PASS" endtime="20170920 21:22:41.946" starttime="20170920 21:22:41.946"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${modify_tm500_script}</arg>
<arg>forw mte RrcAptConfigCellSelection: ${attach_freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:22:41.947" starttime="20170920 21:22:41.946"></status>
</kw>
<kw name="Tm500 Attach" library="tdd_ev_robotws">
<doc>This keyword does UE attach operation of TM500.</doc>
<arguments>
<arg>${attach_scripts}</arg>
<arg>${modify_tm500_script}</arg>
</arguments>
<assign>
<var>${tm500_attach_result}</var>
</assign>
<msg timestamp="20170920 21:22:53.983" level="INFO">[file_common.py@125] Write file "D:\TA\BTS592\modified_attach_MIMO.txt" succeeded</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE RRCAPTOVERRIDEBANDSUPPORT 2{41 [1 24960 39650 1940 24960 39650 1940] [],43 [1 36000 43590 2000 36000 43590 2000] []}</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE RRCAPTOVERRIDEBANDSUPPORT: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE ACTIVATE -1</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE ACTIVATE CNF: RETURN CODE:0</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE PHYSETRATTYPE 1</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: I: CMPI MTE 0 ACTIVATE IND: RETURN CODE:0

C: FORW 0x00 Ok MTE PHYSETRATTYPE: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE PHYSETTDDCFG 1 7</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE PHYSETTDDCFG: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: SETP RRC_NUM_DL_ANTENNAS 2</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: SETP 0x00 Ok RRC_NUM_DL_ANTENNAS 0x00000002</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE PHYCONFIGSYSCAP 2 4 4</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE PHYCONFIGSYSCAP: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE USIMCONFIG 1([262030020033712 2] [] [] [] []) [] [] [A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5] [CDC202D5123E20F62B6D676AC72CB318 00000000000000000000000000000000 00000000000000000000000000000001 00000000000000000000000000000002 00000000000000000000000000000004 00000000000000000000000000000008 64 0 32 64 96 []] [] []</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE USIMCONFIG: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE RRCAPTCONFIGCELLSELECTION 26050</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE RRCAPTCONFIGCELLSELECTION: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE NASAPTCONFIGCAPABILITY [] [224] [224]</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE NASAPTCONFIGCAPABILITY: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE NASCONFIGEMMREGISTER 0(0 [0] [] [1] [] [] [] [] [])</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE NASCONFIGEMMREGISTER: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE NASAPTCONFIGPLMNSELECTION 26203</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE NASAPTCONFIGPLMNSELECTION: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE ACTIVATE -1</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE ACTIVATE CNF: RETURN CODE:0</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1632] C: FORW 0x00 Ok MTE ACTIVATE CNF: RETURN CODE:0</msg>
<msg timestamp="20170920 21:22:53.983" level="INFO">[tm500.py@1673] TM500 command line received data:
I: CMPI RRC Cell Selection: UE Id: 0
   Cell Info:
      Cell Id: 196 DL Freq: 26050 Cell Type: Suitable
I: CMPI L2 Random Access Initiated :UE Id:0 (Connection Establish: Cell Id 196, Dl Freq 26050)

I: CMPI L2 Random Access Error :UE Id:0 (Result: Contention_Timeout, TC-RNTI: 0xAAE, TimingAdv: 2, PreambleTxCount: 10)

I: CMPI MTE 0 ECM CONNECTION FAILED IND:UE Id:0
NAS: Dc Connection Establishment Failed
I: CMPI MTE 0 EMM REGISTER IND:UE Id:0
NAS: Registraton failure - CONNNECTION FAILURE: Retrying to Attach 
I: CMPI MTE 0 ACTIVATE IND: RETURN CODE:0

I: CMPI RRC Leave Connected Cell Selection: UE Id: 0
   Old Cell Info:
      Cell Id: 196 DL Freq: 26050 Cell Type: -
   New Cell Info:
      Cell Id: 196 DL Freq: 26050 Cell Type: Suitable
I: CMPI L2 Random Access Initiated :UE Id:0 (Connection Establish: Cell Id 196, Dl Freq 26050)</msg>
<msg timestamp="20170920 21:22:53.985" level="FAIL">TM500 command line does not meet "['L2 RANDOM ACCESS COMPLETE', 'ACCESS POINT NAME']"during 10.0</msg>
<status status="FAIL" endtime="20170920 21:22:53.985" starttime="20170920 21:22:41.948"></status>
</kw>
<status status="FAIL" endtime="20170920 21:22:53.985" starttime="20170920 21:21:06.341"></status>
</kw>
<status status="FAIL" endtime="20170920 21:22:53.985" starttime="20170920 21:21:06.336"></status>
</kw>
<status status="FAIL" endtime="20170920 21:22:53.986" starttime="20170920 21:21:06.313"></status>
</kw>
<status status="FAIL" endtime="20170920 21:22:53.986" starttime="20170920 21:21:06.313"></status>
</kw>
<status status="FAIL" endtime="20170920 21:22:53.986" starttime="20170920 21:21:05.785"></status>
</kw>
<status status="FAIL" endtime="20170920 21:22:53.986" starttime="20170920 21:18:21.182"></status>
</kw>
<status status="FAIL" endtime="20170920 21:22:53.986" starttime="20170920 21:18:21.182"></status>
</kw>
<status status="FAIL" endtime="20170920 21:22:53.986" starttime="20170920 21:18:21.182"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 21:22:53.993" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05766850&gt;.</msg>
<status status="PASS" endtime="20170920 21:22:53.993" starttime="20170920 21:22:53.987"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170920 21:22:55.436" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170920 21:22:55.437" starttime="20170920 21:22:53.993"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170920 21:22:55.439" starttime="20170920 21:22:55.437"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:22:55.440" starttime="20170920 21:22:55.439"></status>
</kw>
<msg timestamp="20170920 21:22:55.440" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 21:22:55.440" starttime="20170920 21:22:55.439"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170920 21:22:55.457" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\owner_debug' succeed .</msg>
<status status="PASS" endtime="20170920 21:22:55.457" starttime="20170920 21:22:55.444"></status>
</kw>
<status status="PASS" endtime="20170920 21:22:55.457" starttime="20170920 21:22:55.440"></status>
</kw>
<status status="PASS" endtime="20170920 21:22:55.458" starttime="20170920 21:22:55.440"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170920 21:22:56.164" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170920 21:22:56.164" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 21:22:56.164" starttime="20170920 21:22:55.461"></status>
</kw>
<status status="PASS" endtime="20170920 21:22:56.164" starttime="20170920 21:22:55.458"></status>
</kw>
<status status="PASS" endtime="20170920 21:22:56.164" starttime="20170920 21:22:55.458"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:22:56.166" starttime="20170920 21:22:56.166"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:22:56.166" starttime="20170920 21:22:56.166"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:22:56.170" starttime="20170920 21:22:56.169"></status>
</kw>
<msg timestamp="20170920 21:22:56.170" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170920 21:22:56.170" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170920 21:22:56.170" starttime="20170920 21:22:56.169"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170920 21:22:56.173" starttime="20170920 21:22:56.170"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170920 21:23:00.202" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170920 21:23:00.202" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170920 21:23:00.202" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170920 21:23:00.202" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170920 21:23:00.202" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170920 21:23:00.202" starttime="20170920 21:22:56.174"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:00.202" starttime="20170920 21:22:56.167"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:00.204" starttime="20170920 21:23:00.203"></status>
</kw>
<msg timestamp="20170920 21:23:00.204" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170920 21:23:00.204" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170920 21:23:00.204" starttime="20170920 21:23:00.203"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:00.207" starttime="20170920 21:23:00.204"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170920 21:23:04.236" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170920 21:23:04.236" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170920 21:23:04.236" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170920 21:23:04.236" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170920 21:23:04.236" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170920 21:23:04.237" starttime="20170920 21:23:00.208"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:04.237" starttime="20170920 21:23:00.203"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:04.239" starttime="20170920 21:23:04.238"></status>
</kw>
<msg timestamp="20170920 21:23:04.239" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170920 21:23:04.239" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170920 21:23:04.239" starttime="20170920 21:23:04.237"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:04.246" starttime="20170920 21:23:04.240"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170920 21:23:08.274" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170920 21:23:08.274" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170920 21:23:08.274" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170920 21:23:08.274" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170920 21:23:08.274" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170920 21:23:08.274" starttime="20170920 21:23:04.246"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:08.274" starttime="20170920 21:23:04.237"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170920 21:23:08.282" level="FAIL">Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170920 21:23:08.282" starttime="20170920 21:23:08.275"></status>
</kw>
<msg timestamp="20170920 21:23:08.282" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170920 21:23:08.282" level="INFO">${ret2} = Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170920 21:23:08.283" starttime="20170920 21:23:08.275"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170920 21:23:08.286" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 21:23:08.286" starttime="20170920 21:23:08.283"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:08.286" starttime="20170920 21:23:08.275"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:08.286" starttime="20170920 21:22:56.167"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:08.286" starttime="20170920 21:22:56.166"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170920 21:23:16.325" level="INFO">[tm500.py@591] Prev msg: I: CMPI L2 Random Access Error :UE Id:0 (Result: Contention_Timeout, TC-RNTI: 0x41E5, TimingAdv: 2, PreambleTxCount: 10)

I: CMPI MTE 0 ECM CONNECTION FAILED IND:UE Id:0
NAS: Dc Connection Establishment Failed
I: CMPI MTE 0 EMM REGISTER IND:UE Id:0
NAS: Registraton failure - CONNNECTION FAILURE: Retrying to Attach 
I: CMPI RRC Leave Connected Cell Selection: UE Id: 0
   Old Cell Info:
      Cell Id: 196 DL Freq: 26050 Cell Type: -
   New Cell Info:
      Cell Id: 196 DL Freq: 26050 Cell Type: Suitable
I: CMPI L2 Random Access Initiated :UE Id:0 (Connection Establish: Cell Id 196, Dl Freq 26050)

I: CMPI L2 Random Access Error :UE Id:0 (Result: Max_Preambles_Exceeded, TC-RNTI: -, TimingAdv: -, PreambleTxCount: 10)

I: CMPI MTE 0 ECM CONNECTION FAILED IND:UE Id:0
NAS: Dc Connection Establishment Failed
I: CMPI MTE 0 EMM REGISTER IND:UE Id:0
NAS: Registraton failure - CONNNECTION FAILURE: Retrying to Attach 
I: CMPI MTE 0 EMM REGISTER IND:UE Id:0
NAS: Registration failure - NO SERVICE</msg>
<msg timestamp="20170920 21:23:16.325" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DISCONNECT</msg>
<msg timestamp="20170920 21:23:16.325" level="INFO">[tm500.py@1736] TM500 command reply: I: TMAE 0x1 Warning - Logging is being stopped automatically. Please wait for logging stopped message.
I: TMAE 0x1 Warning - Logging has been stopped automatically.
C: DISCONNECT 0x00 OK</msg>
<msg timestamp="20170920 21:23:16.325" level="INFO">[tm500.py@437] Release TM500 Resource:
sent -&gt; "release"
received &lt;- "Bye!"
Robot Framework remote server at 0.0.0.0:8275 stopping</msg>
<status status="PASS" endtime="20170920 21:23:16.325" starttime="20170920 21:23:08.286"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:16.326" starttime="20170920 21:23:16.325"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:16.326" starttime="20170920 21:22:56.165"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:16.326" starttime="20170920 21:22:56.165"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170920 21:23:16.336" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170920 21:23:16.336" starttime="20170920 21:23:16.327"></status>
</kw>
<msg timestamp="20170920 21:23:16.336" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170920 21:23:16.336" starttime="20170920 21:23:16.326"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:16.339" starttime="20170920 21:23:16.336"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170920 21:23:29.520" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170920 21:23:30.196" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170920 21:23:30.196" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 21:23:30.196" starttime="20170920 21:23:16.339"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170920 21:23:33.282" level="INFO">['fatal'] ['fatal']</msg>
<msg timestamp="20170920 21:23:33.282" level="INFO">[file_control.py@109] *HTML*&lt;a href = "D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\udplog_20170920211208.log"&gt;fail log&lt;/a&gt;
Find '['fatal']' in 'D:\TA\TA_logs\TestLog_20170920210905\ev_logs\FZHR_Operational_Cell_block_unblock_20170920210907\FZHR_Operational_Cell_block_unblock\udplog_20170920211208.log'
write successfully</msg>
<status status="PASS" endtime="20170920 21:23:33.282" starttime="20170920 21:23:30.196"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170920 21:23:33.284" level="FAIL">'FZHR_Operational_Cell_block_unblock' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170920 21:23:33.284" starttime="20170920 21:23:33.283"></status>
</kw>
<msg timestamp="20170920 21:23:33.284" level="INFO">${return1} = ('FAIL', u"'FZHR_Operational_Cell_block_unblock' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170920 21:23:33.284" starttime="20170920 21:23:33.283"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:33.288" starttime="20170920 21:23:33.285"></status>
</kw>
<msg timestamp="20170920 21:23:33.288" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 21:23:33.288" starttime="20170920 21:23:33.284"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:33.292" starttime="20170920 21:23:33.289"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:33.292" starttime="20170920 21:23:33.288"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:33.292" starttime="20170920 21:23:33.292"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:33.293" starttime="20170920 21:23:33.293"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:33.293" starttime="20170920 21:23:33.293"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170920 21:23:33.294" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170920 21:23:33.294" starttime="20170920 21:23:33.294"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:33.299" starttime="20170920 21:23:33.296"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:33.299" starttime="20170920 21:23:33.295"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:33.299" starttime="20170920 21:23:33.295"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:33.303" starttime="20170920 21:23:33.300"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:33.303" starttime="20170920 21:23:33.300"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:33.303" starttime="20170920 21:23:33.299"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:33.307" starttime="20170920 21:23:33.304"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:33.308" starttime="20170920 21:23:33.304"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:33.308" starttime="20170920 21:23:33.304"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170920 21:23:54.430" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[ssh_common.py@203] root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FE148&gt;</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FE148&gt;</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 21:23:31 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05766EE0&gt;</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 21:23:54.430" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05766EE0&gt;</msg>
<msg timestamp="20170920 21:23:54.431" level="INFO">${version} = TL17A_ENB_0000_000337_000000</msg>
<status status="PASS" endtime="20170920 21:23:54.431" starttime="20170920 21:23:33.308"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:54.435" starttime="20170920 21:23:54.432"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:54.435" starttime="20170920 21:23:54.431"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:54.435" starttime="20170920 21:23:54.431"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170920 21:23:54.439" starttime="20170920 21:23:54.436"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:54.439" starttime="20170920 21:23:54.436"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:54.439" starttime="20170920 21:23:54.435"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:54.439" starttime="20170920 21:23:33.294"></status>
</kw>
<status status="PASS" endtime="20170920 21:23:54.440" starttime="20170920 21:22:53.987"></status>
</kw>
<tags>
<tag>owner-shaocheng.chen@nokia.com</tag>
<tag>QC_773297</tag>
</tags>
<status status="FAIL" endtime="20170920 21:23:54.609" critical="yes" starttime="20170920 21:10:49.101">TM500 command line does not meet "['L2 RANDOM ACCESS COMPLETE', 'ACCESS POINT NAME']"during 10.0</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170920 21:23:54.634" starttime="20170920 21:09:06.023"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-shaocheng.chen@nokia.com</stat>
<stat fail="1" pass="0">QC_773297</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHR Operational Cell block unblock" pass="0">FZHR Operational Cell block unblock</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170920 21:09:06.608" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170920 21:21:05.967" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:05.973" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:06.006" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:06.038" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:06.108" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:06.167" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:21:06.227" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 21:23:29.520" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
