<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170714 14:15:23.157" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\TL17A\SISO1\CPRI_Single_FZHR\FZHR_Operational_RF_block_unblock\FZHR_Operational_RF_block_unblock.html" id="s1" name="FZHR Operational RF block unblock">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170714141253//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170714 14:12:56.213" level="INFO">${timestamp} = 20170714141256</msg>
<status status="PASS" endtime="20170714 14:12:56.213" starttime="20170714 14:12:56.165"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170714 14:12:56.214" level="INFO">${FILE_NAME} = FZHR Operational RF block unblock</msg>
<status status="PASS" endtime="20170714 14:12:56.214" starttime="20170714 14:12:56.213"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170714 14:12:56.215" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR Operational RF block unblock_20170714141256</msg>
<status status="PASS" endtime="20170714 14:12:56.215" starttime="20170714 14:12:56.214"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170714 14:12:56.216" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256</msg>
<status status="PASS" endtime="20170714 14:12:56.216" starttime="20170714 14:12:56.215"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170714 14:12:56.217" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256</msg>
<status status="PASS" endtime="20170714 14:12:56.217" starttime="20170714 14:12:56.216"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170714 14:12:56.218" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256"&gt;D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 14:12:56.218" starttime="20170714 14:12:56.217"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170714 14:12:56.219" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256</msg>
<status status="PASS" endtime="20170714 14:12:56.219" starttime="20170714 14:12:56.219"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170714 14:12:56.223" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170714 14:12:56.224" starttime="20170714 14:12:56.219"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170714 14:12:56.246" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170714 14:12:56.247" starttime="20170714 14:12:56.240"></status>
</kw>
<msg timestamp="20170714 14:12:56.247" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170714 14:12:56.247" starttime="20170714 14:12:56.239"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:12:56.248" starttime="20170714 14:12:56.248"></status>
</kw>
<msg timestamp="20170714 14:12:56.248" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170714 14:12:56.248" starttime="20170714 14:12:56.247"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:12:56.257" starttime="20170714 14:12:56.252"></status>
</kw>
<msg timestamp="20170714 14:12:56.257" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256</msg>
<status status="PASS" endtime="20170714 14:12:56.257" starttime="20170714 14:12:56.249"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170714 14:12:56.261" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256</msg>
<status status="PASS" endtime="20170714 14:12:56.261" starttime="20170714 14:12:56.257"></status>
</kw>
<status status="PASS" endtime="20170714 14:12:56.262" starttime="20170714 14:12:56.238"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170714 14:12:56.296" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170714 14:12:56.296" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170714 14:12:56.296" starttime="20170714 14:12:56.263"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:12:56.297" starttime="20170714 14:12:56.297"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170714 14:12:56.297" starttime="20170714 14:12:56.297"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:12:56.298" starttime="20170714 14:12:56.298"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170714 14:12:56.298" starttime="20170714 14:12:56.298"></status>
</kw>
<status status="PASS" endtime="20170714 14:12:56.299" starttime="20170714 14:12:56.262"></status>
</kw>
<status status="PASS" endtime="20170714 14:12:56.299" starttime="20170714 14:12:56.262"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170714 14:13:34.754" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170714 14:13:34.796" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170714 14:13:45.944" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170714 14:13:46.058" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170714 14:13:46.564" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170714 14:13:46.603" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1500012779&amp;token=13a59f6689ec41ab949038e3751e6009af8a7aec0ceea33a636efef5ccbef068&amp;frame=sshservice'</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1500012782&amp;token=d0e70407cc12ef70bad3f9d44e189a1e29fde63e64e929a10efb2e7aca34a98c&amp;frame=RndPortsService'</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ssh_common.py@203] Last login: Fri Jul 14 14:02:59 CST 2017 from 192.168.255.126 on pts/1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058C7F08&gt;</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170714 14:14:10.352" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058C7F08&gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@203] Last login: Fri Jul 14 14:13:04 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0590A670&gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000127_000000.xml
root@fctj-0a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0590A670&gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_resource.py@1130] 
 ****Current BTS version is 'TL17A_ENB_0000_000127_000000' *****</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_resource.py@1160] activeBuildVersion=TL17A_ENB_0000_000127_000000</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@203] Last login: Fri Jul 14 14:13:14 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x047C5A08&gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x047C5A08&gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\SiteConf.xml' is ok. local file size is 119k</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@203] Last login: Fri Jul 14 14:13:35 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058C76E8&gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058C76E8&gt;</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_resource.py@402] The real falsh folder is /ffs/fs1</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[sftp_control.py@176] /ffs/fs1/FileDirectory.xml</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs1/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\FileDirectory_20170714141334.xml' is ok. local file size is 35k</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[sftp_control.py@176] /ffs/fs1/config/SCFC_87.xml</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs1/config/SCFC_87.xml' to 'D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\SCFC_87.xml' is ok. local file size is 139k</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_resource.py@1130] 
 ****Current bbu type is 'ASIA' *****</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_resource.py@1255] HW_BBU_TYPE=ASIA</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_resource.py@1130] 
 ****Current rru type is 'FZHR' *****</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_resource.py@1258] HW_RRU_TYPE=FZHR</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_resource.py@1130] 
 ****Current HW type is '#2720-2CL1-T3-L-14' *****</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[enb_resource.py@1261] BTS_HW_TYPE=#2720-2CL1-T3-L-14</msg>
<msg timestamp="20170714 14:14:10.353" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170714 14:14:10.355" starttime="20170714 14:12:56.300"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:10.355" starttime="20170714 14:12:56.299"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:10.356" starttime="20170714 14:14:10.356"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170714 14:14:10.358" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170714 14:14:10.358" starttime="20170714 14:14:10.357"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170714 14:14:10.361" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170714 14:14:10.361" starttime="20170714 14:14:10.358"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170714 14:14:10.365" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170714 14:14:10.365" starttime="20170714 14:14:10.361"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170714 14:14:10.368" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170714 14:14:10.368" starttime="20170714 14:14:10.365"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170714 14:14:11.813" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170714 14:14:11.813" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170714 14:14:11.813" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170714 14:14:11.813" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170714 14:14:11.813" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170714 14:14:11.813" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x059AEFD0&gt;</msg>
<status status="PASS" endtime="20170714 14:14:11.814" starttime="20170714 14:14:10.368"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170714 14:14:11.815" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x059AEFD0&gt;</msg>
<status status="PASS" endtime="20170714 14:14:11.815" starttime="20170714 14:14:11.814"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170714 14:14:13.022" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x059AEFD0&gt;</msg>
<msg timestamp="20170714 14:14:13.022" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170714 14:14:13.022" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170714 14:14:13.022" starttime="20170714 14:14:11.818"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:13.022" starttime="20170714 14:14:11.815"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:13.023" starttime="20170714 14:14:10.356"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170714 14:14:13.027" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x059AEFD0&gt;.</msg>
<status status="PASS" endtime="20170714 14:14:13.027" starttime="20170714 14:14:13.023"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:13.027" starttime="20170714 14:12:56.165"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:15:19.116" starttime="20170714 14:15:19.110"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170714 14:15:19.130" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170714 14:15:19.130" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x059AEFD0&gt;</msg>
<status status="PASS" endtime="20170714 14:15:19.130" starttime="20170714 14:15:19.117"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170714 14:15:19.133" starttime="20170714 14:15:19.131"></status>
</kw>
<status status="PASS" endtime="20170714 14:15:19.133" starttime="20170714 14:15:19.131"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:15:19.134" starttime="20170714 14:15:19.134"></status>
</kw>
<status status="PASS" endtime="20170714 14:15:19.134" starttime="20170714 14:15:19.133"></status>
</kw>
<status status="PASS" endtime="20170714 14:15:19.135" starttime="20170714 14:15:19.109"></status>
</kw>
<test id="s1-t1" name="FZQE_Operational_RF_Block_Unblock">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170714141253//ev_logs//D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170714 14:14:13.033" level="INFO">${timestamp} = 20170714141413</msg>
<status status="PASS" endtime="20170714 14:14:13.033" starttime="20170714 14:14:13.032"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170714 14:14:13.034" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170714 14:14:13.034" starttime="20170714 14:14:13.033"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170714 14:14:13.034" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170714 14:14:13.034" starttime="20170714 14:14:13.034"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170714 14:14:13.036" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170714 14:14:13.036" starttime="20170714 14:14:13.035"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170714 14:14:13.038" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\FZQE_Operational_RF_Block_Unblock"&gt;D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\FZQE_Operational_RF_Block_Unblock&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170714 14:14:13.038" starttime="20170714 14:14:13.036"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170714 14:14:13.038" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170714 14:14:13.038" starttime="20170714 14:14:13.038"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:13.039" starttime="20170714 14:14:13.039"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:13.041" starttime="20170714 14:14:13.041"></status>
</kw>
<msg timestamp="20170714 14:14:13.041" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170714 14:14:13.041" starttime="20170714 14:14:13.040"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:13.043" starttime="20170714 14:14:13.042"></status>
</kw>
<msg timestamp="20170714 14:14:13.043" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170714 14:14:13.043" starttime="20170714 14:14:13.042"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170714 14:14:13.047" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170714 14:14:13.047" starttime="20170714 14:14:13.043"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170714 14:14:13.047" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170714141253\ev_logs\FZHR_Operational_RF_block_unblock_20170714141256\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170714 14:14:13.048" starttime="20170714 14:14:13.047"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:13.048" starttime="20170714 14:14:13.040"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:13.048" starttime="20170714 14:14:13.032"></status>
</kw>
<kw name="Reset_BTS_If_Not_Onair" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170714 14:14:13.055" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x059AEFD0&gt;.</msg>
<status status="PASS" endtime="20170714 14:14:13.056" starttime="20170714 14:14:13.050"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170714 14:14:17.252" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x059AEFD0&gt;</msg>
<msg timestamp="20170714 14:14:17.252" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170714 14:14:17.252" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170714 14:14:17.252" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170714 14:14:17.252" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170714 14:14:17.252" starttime="20170714 14:14:13.056"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:17.257" starttime="20170714 14:14:17.253"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:17.262" starttime="20170714 14:14:17.258"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Check_BTS_Onair_Status</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Check_BTS_Onair_Status" library="SISO1 Resource">
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170714 14:14:27.068" level="INFO">[infomodel_control.py@157] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170714 14:14:27.068" level="INFO">[infomodel_control.py@161] start infomodel succeed .</msg>
<msg timestamp="20170714 14:14:27.068" level="INFO">[infomodel_control.py@163] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170714 14:14:27.068" starttime="20170714 14:14:17.263"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
<arg>timeout=5</arg>
</arguments>
<msg timestamp="20170714 14:14:32.124" level="FAIL">InfoModelQueryTimeoutException: Query: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' doesn't pass in timeout=5.0. Object does not match given predicates.
/MRBTS-1/RAT-1/MCTRL-1/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-1 : {u'routingState': 'NotRoutable', u'bbCalcState': 'CalculationDone', u'rat': 'LTE', u'gainCalcState': 'NotCalculated', u'carriersState': 'Uninitialized', u'testingState': 'Disabled', u'delayCalculationState': 'NotCalculated', u'feedback': u'', u'stateInfo': {u'automaticBlockState': 'Unblocked', u'blockingState': 'Unblocked', u'administrativeState': 'Unlocked', u'reasoningStatus': ['InvalidCenterFrequencyAndCarrierBandwidth'], u'proceduralState': 'ValidationFailed', u'recoveryLockingState': 'Unlocked', u'operationalState': 'Disabled', u'availabilityStatus': 'Failed'}, u'deploymentCalcState': 'CalculationDone', u'timeDomainState': 'HardwareFullyConfigured'}</msg>
<status status="FAIL" endtime="20170714 14:14:32.124" starttime="20170714 14:14:27.069"></status>
</kw>
<status status="FAIL" endtime="20170714 14:14:32.124" starttime="20170714 14:14:17.262"></status>
</kw>
<msg timestamp="20170714 14:14:32.125" level="INFO">${result} = FAIL</msg>
<msg timestamp="20170714 14:14:32.125" level="INFO">${ret} = InfoModelQueryTimeoutException: Query: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' doesn't pass in timeout=5.0. Object does not match...</msg>
<status status="PASS" endtime="20170714 14:14:32.125" starttime="20170714 14:14:17.262"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170714 14:14:32.886" level="INFO">[infomodel_control.py@186] stop infomodel logger succeed .</msg>
<msg timestamp="20170714 14:14:32.887" level="INFO">[infomodel_control.py@198] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170714 14:14:32.887" starttime="20170714 14:14:32.129"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:32.887" starttime="20170714 14:14:32.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170714 14:14:32.898" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x059AEFD0&gt;.</msg>
<status status="PASS" endtime="20170714 14:14:32.898" starttime="20170714 14:14:32.892"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170714 14:14:37.102" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x059AEFD0&gt;</msg>
<msg timestamp="20170714 14:14:37.102" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170714 14:14:37.102" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170714 14:14:37.103" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170714 14:14:37.103" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170714 14:14:37.103" starttime="20170714 14:14:32.898"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:37.107" starttime="20170714 14:14:37.103"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:37.111" starttime="20170714 14:14:37.107"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
</arguments>
<msg timestamp="20170714 14:14:37.170" level="FAIL">the xpath you given '//*[contains(@distName, 'LNCEL-3')]//*[@name='earfcn']' can not find any xml element</msg>
<status status="FAIL" endtime="20170714 14:14:37.170" starttime="20170714 14:14:37.111"></status>
</kw>
<status status="FAIL" endtime="20170714 14:14:37.170" starttime="20170714 14:14:32.891"></status>
</kw>
<status status="FAIL" endtime="20170714 14:14:37.171" starttime="20170714 14:14:32.887"></status>
</kw>
<status status="FAIL" endtime="20170714 14:14:37.171" starttime="20170714 14:14:13.049"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170714 14:14:37.176" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x059AEFD0&gt;.</msg>
<status status="PASS" endtime="20170714 14:14:37.176" starttime="20170714 14:14:37.172"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170714 14:14:37.815" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170714 14:14:37.815" starttime="20170714 14:14:37.177"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20170714 14:14:37.820" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<status status="PASS" endtime="20170714 14:14:37.820" starttime="20170714 14:14:37.816"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170714 14:14:37.828" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20170714 14:14:37.828" starttime="20170714 14:14:37.821"></status>
</kw>
<msg timestamp="20170714 14:14:37.828" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20170714 14:14:37.829" starttime="20170714 14:14:37.820"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:37.835" starttime="20170714 14:14:37.830"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:37.835" starttime="20170714 14:14:37.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:37.840" starttime="20170714 14:14:37.836"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:37.840" starttime="20170714 14:14:37.835"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:37.842" starttime="20170714 14:14:37.842"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:37.842" starttime="20170714 14:14:37.842"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:37.845" starttime="20170714 14:14:37.845"></status>
</kw>
<msg timestamp="20170714 14:14:37.846" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170714 14:14:37.846" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170714 14:14:37.846" starttime="20170714 14:14:37.844"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:37.850" starttime="20170714 14:14:37.846"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170714 14:14:41.890" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170714 14:14:41.890" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170714 14:14:41.890" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170714 14:14:41.890" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170714 14:14:41.890" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170714 14:14:41.890" starttime="20170714 14:14:37.851"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:41.890" starttime="20170714 14:14:37.844"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:41.892" starttime="20170714 14:14:41.891"></status>
</kw>
<msg timestamp="20170714 14:14:41.892" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170714 14:14:41.892" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170714 14:14:41.892" starttime="20170714 14:14:41.891"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:41.896" starttime="20170714 14:14:41.892"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170714 14:14:45.929" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170714 14:14:45.929" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170714 14:14:45.929" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170714 14:14:45.929" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170714 14:14:45.929" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170714 14:14:45.929" starttime="20170714 14:14:41.896"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:45.929" starttime="20170714 14:14:41.890"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:45.931" starttime="20170714 14:14:45.930"></status>
</kw>
<msg timestamp="20170714 14:14:45.931" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170714 14:14:45.931" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170714 14:14:45.931" starttime="20170714 14:14:45.930"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:45.935" starttime="20170714 14:14:45.932"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170714 14:14:49.966" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170714 14:14:49.966" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170714 14:14:49.966" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170714 14:14:49.966" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170714 14:14:49.966" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170714 14:14:49.966" starttime="20170714 14:14:45.935"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:49.966" starttime="20170714 14:14:45.930"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170714 14:14:49.975" level="FAIL">Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170714 14:14:49.975" starttime="20170714 14:14:49.967"></status>
</kw>
<msg timestamp="20170714 14:14:49.975" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170714 14:14:49.975" level="INFO">${ret2} = Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170714 14:14:49.975" starttime="20170714 14:14:49.967"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170714 14:14:49.979" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170714 14:14:49.979" starttime="20170714 14:14:49.976"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:49.979" starttime="20170714 14:14:49.966"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:49.979" starttime="20170714 14:14:37.843"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:49.979" starttime="20170714 14:14:37.843"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170714 14:14:49.981" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170714 14:14:49.981" starttime="20170714 14:14:49.980"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:49.981" starttime="20170714 14:14:49.981"></status>
</kw>
<status status="FAIL" endtime="20170714 14:14:49.981" starttime="20170714 14:14:37.841"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:49.982" starttime="20170714 14:14:37.841"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170714 14:14:49.989" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170714 14:14:49.989" starttime="20170714 14:14:49.982"></status>
</kw>
<msg timestamp="20170714 14:14:49.989" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170714 14:14:49.989" starttime="20170714 14:14:49.982"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:49.992" starttime="20170714 14:14:49.989"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170714 14:14:57.062" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170714 14:14:57.828" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170714 14:14:57.829" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170714 14:14:57.829" starttime="20170714 14:14:49.993"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:57.830" starttime="20170714 14:14:57.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170714 14:14:57.832" level="FAIL">'FZQE_Operational_RF_Block_Unblock' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170714 14:14:57.832" starttime="20170714 14:14:57.831"></status>
</kw>
<msg timestamp="20170714 14:14:57.832" level="INFO">${return1} = ('FAIL', u"'FZQE_Operational_RF_Block_Unblock' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170714 14:14:57.832" starttime="20170714 14:14:57.831"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:57.836" starttime="20170714 14:14:57.833"></status>
</kw>
<msg timestamp="20170714 14:14:57.837" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170714 14:14:57.837" starttime="20170714 14:14:57.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:57.843" starttime="20170714 14:14:57.838"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:57.843" starttime="20170714 14:14:57.837"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:57.844" starttime="20170714 14:14:57.844"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:57.845" starttime="20170714 14:14:57.845"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:57.845" starttime="20170714 14:14:57.845"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170714 14:14:57.847" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170714 14:14:57.847" starttime="20170714 14:14:57.846"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:57.851" starttime="20170714 14:14:57.848"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:57.851" starttime="20170714 14:14:57.847"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:57.851" starttime="20170714 14:14:57.847"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:57.856" starttime="20170714 14:14:57.853"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:57.856" starttime="20170714 14:14:57.852"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:57.856" starttime="20170714 14:14:57.852"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170714 14:14:57.861" starttime="20170714 14:14:57.857"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:57.861" starttime="20170714 14:14:57.857"></status>
</kw>
<status status="PASS" endtime="20170714 14:14:57.861" starttime="20170714 14:14:57.856"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170714 14:15:19.087" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170714 14:15:19.087" level="INFO">[ssh_common.py@203] Last login: Fri Jul 14 14:13:47 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170714 14:15:19.087" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x059BF2B0&gt;</msg>
<msg timestamp="20170714 14:15:19.087" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170714 14:15:19.087" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170714 14:15:19.087" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x059BF2B0&gt;</msg>
<msg timestamp="20170714 14:15:19.087" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170714 14:15:19.087" level="INFO">[ssh_common.py@203] Last login: Fri Jul 14 14:14:59 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170714 14:15:19.088" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05928AA8&gt;</msg>
<msg timestamp="20170714 14:15:19.088" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170714 14:15:19.088" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000127_000000.xml
root@fctj-0a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170714 14:15:19.088" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05928AA8&gt;</msg>
<msg timestamp="20170714 14:15:19.088" level="INFO">${version} = TL17A_ENB_0000_000127_000000</msg>
<status status="PASS" endtime="20170714 14:15:19.089" starttime="20170714 14:14:57.861"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170714 14:15:19.096" starttime="20170714 14:15:19.090"></status>
</kw>
<status status="PASS" endtime="20170714 14:15:19.096" starttime="20170714 14:15:19.090"></status>
</kw>
<status status="PASS" endtime="20170714 14:15:19.097" starttime="20170714 14:15:19.089"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170714 14:15:19.102" starttime="20170714 14:15:19.099"></status>
</kw>
<status status="PASS" endtime="20170714 14:15:19.102" starttime="20170714 14:15:19.098"></status>
</kw>
<status status="PASS" endtime="20170714 14:15:19.102" starttime="20170714 14:15:19.097"></status>
</kw>
<status status="PASS" endtime="20170714 14:15:19.102" starttime="20170714 14:14:57.846"></status>
</kw>
<status status="PASS" endtime="20170714 14:15:19.103" starttime="20170714 14:14:37.172"></status>
</kw>
<tags>
<tag>owner-chen.feng@nokia.com</tag>
<tag>QC_773298</tag>
</tags>
<status status="FAIL" endtime="20170714 14:15:19.104" critical="yes" starttime="20170714 14:14:13.027">the xpath you given '//*[contains(@distName, 'LNCEL-3')]//*[@name='earfcn']' can not find any xml element</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170714 14:15:19.135" starttime="20170714 14:12:54.833"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-chen.feng@nokia.com</stat>
<stat fail="1" pass="0">QC_773298</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHR Operational RF block unblock" pass="0">FZHR Operational RF block unblock</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170714 14:12:55.406" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170714 14:14:57.062" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
