<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171101 18:05:53.829" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\TL17A\SISO1\CPRI_Single_FZHR\FZHR_Addtional_RF_module_alarm_without_recovery_action_1927\FZHR_Addtional_RF_module_alarm_without_recovery_action_1927.html" id="s1" name="FZHR Addtional RF module alarm without recovery action 1927">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20171101175323//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171101 17:53:26.340" level="INFO">${timestamp} = 20171101175326</msg>
<status status="PASS" endtime="20171101 17:53:26.340" starttime="20171101 17:53:26.289"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20171101 17:53:26.341" level="INFO">${FILE_NAME} = FZHR Addtional RF module alarm without recovery ac</msg>
<status status="PASS" endtime="20171101 17:53:26.341" starttime="20171101 17:53:26.340"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171101 17:53:26.342" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR Addtional RF module alarm without recovery ac_20171101175326</msg>
<status status="PASS" endtime="20171101 17:53:26.342" starttime="20171101 17:53:26.341"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171101 17:53:26.343" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326</msg>
<status status="PASS" endtime="20171101 17:53:26.343" starttime="20171101 17:53:26.342"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171101 17:53:26.343" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326</msg>
<status status="PASS" endtime="20171101 17:53:26.343" starttime="20171101 17:53:26.343"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171101 17:53:26.345" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326"&gt;D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171101 17:53:26.345" starttime="20171101 17:53:26.344"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171101 17:53:26.345" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326</msg>
<status status="PASS" endtime="20171101 17:53:26.346" starttime="20171101 17:53:26.345"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20171101 17:53:26.350" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20171101 17:53:26.350" starttime="20171101 17:53:26.346"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20171101 17:53:26.372" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20171101 17:53:26.372" starttime="20171101 17:53:26.366"></status>
</kw>
<msg timestamp="20171101 17:53:26.372" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20171101 17:53:26.372" starttime="20171101 17:53:26.365"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171101 17:53:26.373" starttime="20171101 17:53:26.373"></status>
</kw>
<msg timestamp="20171101 17:53:26.374" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171101 17:53:26.374" starttime="20171101 17:53:26.373"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20171101 17:53:26.381" starttime="20171101 17:53:26.377"></status>
</kw>
<msg timestamp="20171101 17:53:26.381" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326</msg>
<status status="PASS" endtime="20171101 17:53:26.381" starttime="20171101 17:53:26.374"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171101 17:53:26.385" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326</msg>
<status status="PASS" endtime="20171101 17:53:26.385" starttime="20171101 17:53:26.381"></status>
</kw>
<status status="PASS" endtime="20171101 17:53:26.385" starttime="20171101 17:53:26.364"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20171101 17:53:26.420" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171101 17:53:26.420" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171101 17:53:26.420" starttime="20171101 17:53:26.386"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20171101 17:53:26.420" starttime="20171101 17:53:26.420"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20171101 17:53:26.421" starttime="20171101 17:53:26.421"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20171101 17:53:26.422" starttime="20171101 17:53:26.421"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20171101 17:53:26.422" starttime="20171101 17:53:26.422"></status>
</kw>
<status status="PASS" endtime="20171101 17:53:26.422" starttime="20171101 17:53:26.386"></status>
</kw>
<status status="PASS" endtime="20171101 17:53:26.422" starttime="20171101 17:53:26.385"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20171101 17:54:21.049" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171101 17:54:21.087" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171101 17:54:32.191" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171101 17:54:32.221" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171101 17:54:32.748" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171101 17:54:32.789" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171101 17:55:00.497" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171101 17:55:00.497" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:55:00.497" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:33:04 CST 2017 from 10.69.80.114 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:55:00.497" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054CD288&gt;</msg>
<msg timestamp="20171101 17:55:00.497" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171101 17:55:00.497" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:55:00.497" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054CD288&gt;</msg>
<msg timestamp="20171101 17:55:00.497" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:54:06 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054CDB98&gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000499_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054CDB98&gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:54:17 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055710F8&gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055710F8&gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:54:29 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05571210&gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000499_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05571210&gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_resource.py@1238] 
 ****Current BTS version is 'TL17A_ENB_0000_000499_000000' *****</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_resource.py@1268] activeBuildVersion=TL17A_ENB_0000_000499_000000</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:54:39 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05571300&gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05571300&gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\SiteConf.xml' is ok. local file size is 145k</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:55:00 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053AC9E0&gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053AC9E0&gt;</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_resource.py@500] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FileDirectory_20171101175421.xml' is ok. local file size is 36k</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_163.xml</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/config/SCFC_163.xml' to 'D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\SCFC_163.xml' is ok. local file size is 155k</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_resource.py@1238] 
 ****Current bbu type is 'ASIA' *****</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_resource.py@1363] HW_BBU_TYPE=ASIA</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_resource.py@1238] 
 ****Current rru type is 'FZHR' *****</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_resource.py@1366] HW_RRU_TYPE=FZHR</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_resource.py@1238] 
 ****Current HW type is '#2720-2CL1-T3-L-14' *****</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[enb_resource.py@1369] BTS_HW_TYPE=#2720-2CL1-T3-L-14</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ping_control.py@189] 
Pinging 192.168.200.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.200.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 17:55:00.498" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20171101 17:55:00.501" starttime="20171101 17:53:26.423"></status>
</kw>
<status status="PASS" endtime="20171101 17:55:00.501" starttime="20171101 17:53:26.422"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20171101 17:55:00.502" starttime="20171101 17:55:00.502"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171101 17:55:00.504" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171101 17:55:00.504" starttime="20171101 17:55:00.503"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20171101 17:55:00.509" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20171101 17:55:00.509" starttime="20171101 17:55:00.504"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20171101 17:55:00.513" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20171101 17:55:00.513" starttime="20171101 17:55:00.509"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20171101 17:55:00.518" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20171101 17:55:00.518" starttime="20171101 17:55:00.514"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20171101 17:55:01.970" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20171101 17:55:01.970" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20171101 17:55:01.970" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20171101 17:55:01.970" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20171101 17:55:01.970" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20171101 17:55:01.971" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05520F58&gt;</msg>
<status status="PASS" endtime="20171101 17:55:01.971" starttime="20171101 17:55:00.518"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171101 17:55:01.972" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05520F58&gt;</msg>
<status status="PASS" endtime="20171101 17:55:01.972" starttime="20171101 17:55:01.971"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20171101 17:55:03.187" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05520F58&gt;</msg>
<msg timestamp="20171101 17:55:03.187" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20171101 17:55:03.187" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20171101 17:55:03.187" starttime="20171101 17:55:01.977"></status>
</kw>
<status status="PASS" endtime="20171101 17:55:03.187" starttime="20171101 17:55:01.973"></status>
</kw>
<status status="PASS" endtime="20171101 17:55:03.187" starttime="20171101 17:55:00.503"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171101 17:55:03.191" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05520F58&gt;.</msg>
<status status="PASS" endtime="20171101 17:55:03.192" starttime="20171101 17:55:03.188"></status>
</kw>
<status status="PASS" endtime="20171101 17:55:03.192" starttime="20171101 17:53:26.288"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:50.865" starttime="20171101 18:05:50.865"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20171101 18:05:50.881" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20171101 18:05:50.881" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05520F58&gt;</msg>
<status status="PASS" endtime="20171101 18:05:50.881" starttime="20171101 18:05:50.865"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${zip_pass_log}</arg>
</arguments>
<assign>
<var>${para_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${zip_pass_log}</arg>
</arguments>
<msg timestamp="20171101 18:05:50.881" level="FAIL">Variable ${zip_pass_log} does not exist.</msg>
<status status="FAIL" endtime="20171101 18:05:50.881" starttime="20171101 18:05:50.881"></status>
</kw>
<msg timestamp="20171101 18:05:50.881" level="INFO">${para_exist} = ('FAIL', u'Variable ${zip_pass_log} does not exist.')</msg>
<status status="PASS" endtime="20171101 18:05:50.881" starttime="20171101 18:05:50.881"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS' == '${para_exist[0]}'</arg>
<arg>${zip_pass_log}</arg>
<arg>${True}</arg>
</arguments>
<assign>
<var>${zip_log}</var>
</assign>
<msg timestamp="20171101 18:05:50.881" level="INFO">${zip_log} = True</msg>
<status status="PASS" endtime="20171101 18:05:50.881" starttime="20171101 18:05:50.881"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:50.896" starttime="20171101 18:05:50.896"></status>
</kw>
<msg timestamp="20171101 18:05:50.896" level="INFO">${status} = PASS</msg>
<msg timestamp="20171101 18:05:50.896" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20171101 18:05:50.896" starttime="20171101 18:05:50.896"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:50.896" starttime="20171101 18:05:50.896"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:50.896" starttime="20171101 18:05:50.896"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:50.896" starttime="20171101 18:05:50.865"></status>
</kw>
<test id="s1-t1" name="FZHR_RF_alarm_1927">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20171101175323//ev_logs//D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171101 17:55:03.197" level="INFO">${timestamp} = 20171101175503</msg>
<status status="PASS" endtime="20171101 17:55:03.197" starttime="20171101 17:55:03.197"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171101 17:55:03.198" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927</msg>
<status status="PASS" endtime="20171101 17:55:03.198" starttime="20171101 17:55:03.198"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171101 17:55:03.199" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927</msg>
<status status="PASS" endtime="20171101 17:55:03.199" starttime="20171101 17:55:03.199"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171101 17:55:03.200" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927</msg>
<status status="PASS" endtime="20171101 17:55:03.200" starttime="20171101 17:55:03.199"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171101 17:55:03.201" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927"&gt;D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171101 17:55:03.201" starttime="20171101 17:55:03.200"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171101 17:55:03.202" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927</msg>
<status status="PASS" endtime="20171101 17:55:03.202" starttime="20171101 17:55:03.201"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20171101 17:55:03.203" starttime="20171101 17:55:03.202"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20171101 17:55:03.205" starttime="20171101 17:55:03.204"></status>
</kw>
<msg timestamp="20171101 17:55:03.205" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171101 17:55:03.205" starttime="20171101 17:55:03.204"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171101 17:55:03.206" starttime="20171101 17:55:03.206"></status>
</kw>
<msg timestamp="20171101 17:55:03.206" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171101 17:55:03.206" starttime="20171101 17:55:03.205"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20171101 17:55:03.210" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927</msg>
<status status="PASS" endtime="20171101 17:55:03.210" starttime="20171101 17:55:03.206"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171101 17:55:03.211" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927</msg>
<status status="PASS" endtime="20171101 17:55:03.211" starttime="20171101 17:55:03.210"></status>
</kw>
<status status="PASS" endtime="20171101 17:55:03.211" starttime="20171101 17:55:03.203"></status>
</kw>
<status status="PASS" endtime="20171101 17:55:03.211" starttime="20171101 17:55:03.196"></status>
</kw>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171101 17:55:03.219" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05520F58&gt;.</msg>
<status status="PASS" endtime="20171101 17:55:03.219" starttime="20171101 17:55:03.212"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20171101 17:55:07.414" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05520F58&gt;</msg>
<msg timestamp="20171101 17:55:07.414" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20171101 17:55:07.414" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20171101 17:55:07.415" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20171101 17:55:07.415" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20171101 17:55:07.415" starttime="20171101 17:55:03.219"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20171101 17:55:07.419" starttime="20171101 17:55:07.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171101 17:55:07.422" starttime="20171101 17:55:07.419"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
</arguments>
<msg timestamp="20171101 17:56:00.960" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171101 17:56:00.991" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171101 17:56:12.095" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171101 17:56:12.457" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171101 17:56:12.464" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:55:12 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055714E0&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055714E0&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:55:47 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05571418&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000499_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05571418&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[enb_resource.py@457] enable ssh and rdport failed.</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:55:58 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0534D490&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0534D490&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:56:08 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0534DE18&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000499_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0534DE18&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:56:19 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04EA4B20&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04EA4B20&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[enb_resource.py@500] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927\FileDirectory_20171101175549.xml' is ok. local file size is 36k</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.129</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 17:56:40 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04EA4A58&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@258] Execute command: rm -rf /ffs/fs2/config/hwf.bin.gz</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@314] Get Response: rm -rf /ffs/fs2/config/hwf.bin.gz
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04EA4A58&gt;</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[sftp_control.py@61] sftp upload from 'D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927\scf_modified.xml' to '/ffs/fs2/config/SCFC_163.xml' is ok.</msg>
<msg timestamp="20171101 17:56:12.465" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_163.xml</msg>
<status status="PASS" endtime="20171101 17:56:12.467" starttime="20171101 17:55:07.423"></status>
</kw>
<kw name="Restart Bts Until Onair" library="tdd_ev_robotws">
<doc>restart bts with powerbreaker and then wait until it is onair.</doc>
<arguments>
<arg>bts_powerbreak_port=${bts_powerbreak}</arg>
</arguments>
<msg timestamp="20171101 18:02:24.422" level="INFO">Exit code: 1</msg>
<msg timestamp="20171101 18:02:24.422" level="INFO">STDOUT
</msg>
<msg timestamp="20171101 18:02:24.422" level="INFO">STDERR
Started InfoModel server PYRO:TA_infomodel_server@localhost:35502
</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[facom.py@60] Power off port 3 succeed!</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[facom.py@60] Power off port 6 succeed!</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[facom.py@83] Power on port 3 succeed!</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[facom.py@83] Power on port 6 succeed!</msg>
<msg timestamp="20171101 18:02:24.432" level="INFO">[tools_resource.py@39] restart port '['FACOM:10.56.7.128:3', 'FACOM:10.56.7.128:6']' with powerbreak succeed !</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[btslog_control.py@118] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[btslog_control.py@175] use ip is 192.168.255.126</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927" already exists, no need to create it again.</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[infomodel_control.py@156] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[infomodel_control.py@160] start infomodel succeed .</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[infomodel_control.py@162] start infomodel logger succeed .</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'UploadOngoing', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'UploadOngoing', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': None, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': None, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will try another way</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will sleep and try again</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@228] infomodel check every cell onair succeed !</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[enb_resource.py@350] bts log check onair msg succeed !</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[infomodel_control.py@213] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927\im_20171101180224' succeed .</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[infomodel_control.py@185] stop infomodel logger succeed .</msg>
<msg timestamp="20171101 18:02:24.433" level="INFO">[infomodel_control.py@197] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171101 18:02:24.438" starttime="20171101 17:56:12.467"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:24.438" starttime="20171101 17:55:03.212"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<arguments>
<arg>alarm_start</arg>
</arguments>
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20171101 18:02:24.896" level="INFO">[btslog_control.py@118] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20171101 18:02:24.896" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20171101 18:02:24.897" starttime="20171101 18:02:24.440"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20171101 18:02:34.935" level="INFO">[infomodel_control.py@156] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20171101 18:02:34.935" level="INFO">[infomodel_control.py@160] start infomodel succeed .</msg>
<msg timestamp="20171101 18:02:34.935" level="INFO">[infomodel_control.py@162] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20171101 18:02:34.935" starttime="20171101 18:02:24.897"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20171101 18:02:34.936" level="INFO">${case_execute_log_name} = alarm_start</msg>
<status status="PASS" endtime="20171101 18:02:34.937" starttime="20171101 18:02:34.936"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:34.937" starttime="20171101 18:02:24.439"></status>
</kw>
<kw name="Get_RRU_IP" library="SISO1 Resource">
<assign>
<var>${RRU_IP}</var>
</assign>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>query=get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=${RRU_SERINUM}]</arg>
</arguments>
<assign>
<var>${rmode_info}</var>
</assign>
<msg timestamp="20171101 18:02:35.981" level="INFO">[infomodel_control.py@326] query infomodel: 'get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=6Q163504154]' succeed .</msg>
<msg timestamp="20171101 18:02:35.981" level="INFO">${rmode_info} = [{u'macAddress': u'60:A8:FE:F2:70:F7', u'hwVariant': None, u'identityDN': None, u'l3Protocol': u'CPRI_RP1', u'routingDirectionCalculated': u'CCW', u'productCode': u'473791A.101', u'readyForMapping': T...</msg>
<status status="PASS" endtime="20171101 18:02:35.981" starttime="20171101 18:02:34.938"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${rmode_info}</arg>
</arguments>
<msg timestamp="20171101 18:02:35.982" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20171101 18:02:35.982" starttime="20171101 18:02:35.982"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rmode_info[0].ipAddress}</arg>
</arguments>
<msg timestamp="20171101 18:02:35.983" level="INFO">172.16.9.130</msg>
<status status="PASS" endtime="20171101 18:02:35.983" starttime="20171101 18:02:35.982"></status>
</kw>
<msg timestamp="20171101 18:02:35.983" level="INFO">${RRU_IP} = 172.16.9.130</msg>
<status status="PASS" endtime="20171101 18:02:35.983" starttime="20171101 18:02:34.937"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_trigger}</arg>
<arg>23</arg>
<arg>new</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20171101 18:02:46.582" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 18:02:46.582" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 18:03:03 CST 2017 from 10.69.80.114 on pts/0
root@fctj-0a:~ &gt;</msg>
<status status="PASS" endtime="20171101 18:02:46.582" starttime="20171101 18:02:36.091"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20171101 18:02:46.583" starttime="20171101 18:02:46.583"></status>
</kw>
<msg timestamp="20171101 18:02:46.583" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20171101 18:02:46.583" starttime="20171101 18:02:46.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20171101 18:02:46.720" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05717B98&gt;</msg>
<msg timestamp="20171101 18:02:46.720" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20171101 18:02:46.720" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x1015	0x1016	0x1018	2
root@fctj-0a:~ &gt;</msg>
<status status="PASS" endtime="20171101 18:02:46.720" starttime="20171101 18:02:46.589"></status>
</kw>
<msg timestamp="20171101 18:02:46.720" level="INFO">${ret} = lxc-ls --active
0x1015	0x1016	0x1018	2
root@fctj-0a:~ &gt;</msg>
<status status="PASS" endtime="20171101 18:02:46.720" starttime="20171101 18:02:46.584"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<msg timestamp="20171101 18:02:46.729" level="FAIL">'lxc-ls --active
0x1015	0x1016	0x1018	2
root@fctj-0a:~ &gt;' does not match '0x2018'</msg>
<status status="FAIL" endtime="20171101 18:02:46.729" starttime="20171101 18:02:46.728"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:46.729" starttime="20171101 18:02:46.727"></status>
</kw>
<msg timestamp="20171101 18:02:46.729" level="INFO">${ret1} = ('FAIL', u"'lxc-ls --active\n0x1015\t0x1016\t0x1018\t2\nroot@fctj-0a:~ &gt;' does not match '0x2018'")</msg>
<status status="PASS" endtime="20171101 18:02:46.729" starttime="20171101 18:02:46.721"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<status status="PASS" endtime="20171101 18:02:46.737" starttime="20171101 18:02:46.737"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:46.737" starttime="20171101 18:02:46.736"></status>
</kw>
<msg timestamp="20171101 18:02:46.737" level="INFO">${ret2} = ('PASS', '0x1018')</msg>
<status status="PASS" endtime="20171101 18:02:46.737" starttime="20171101 18:02:46.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<status status="PASS" endtime="20171101 18:02:46.746" starttime="20171101 18:02:46.741"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:46.746" starttime="20171101 18:02:46.738"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<msg timestamp="20171101 18:02:46.889" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05717B98&gt;</msg>
<msg timestamp="20171101 18:02:46.890" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x1018</msg>
<msg timestamp="20171101 18:02:46.890" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x1018
root@0x1018:~ &gt;</msg>
<status status="PASS" endtime="20171101 18:02:46.890" starttime="20171101 18:02:46.755"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:46.890" starttime="20171101 18:02:46.751"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:46.890" starttime="20171101 18:02:46.747"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20171101 18:02:46.894" starttime="20171101 18:02:46.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:02:46.898" starttime="20171101 18:02:46.894"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:02:46.902" starttime="20171101 18:02:46.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20171101 18:02:46.907" starttime="20171101 18:02:46.906"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:46.907" starttime="20171101 18:02:46.902"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<msg timestamp="20171101 18:02:47.033" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05717B98&gt;</msg>
<msg timestamp="20171101 18:02:47.034" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.9.130 23</msg>
<msg timestamp="20171101 18:02:47.034" level="INFO">[ssh_common.py@314] Get Response: telnet 172.16.9.130 23
Trying 172.16.9.130...
Connected to 172.16.9.130.
Escape character is '^]'.


Poky (Yocto Project Reference Distro) 2.0 bcm-tddlte-zynq7




bcm-tddlte-zynq7 login:</msg>
<status status="PASS" endtime="20171101 18:02:47.034" starttime="20171101 18:02:46.911"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:47.034" starttime="20171101 18:02:46.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>root</arg>
</arguments>
<msg timestamp="20171101 18:02:47.156" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05717B98&gt;</msg>
<msg timestamp="20171101 18:02:47.156" level="INFO">[ssh_common.py@258] Execute command: root</msg>
<msg timestamp="20171101 18:02:47.156" level="INFO">[ssh_common.py@314] Get Response: root
Password:</msg>
<status status="PASS" endtime="20171101 18:02:47.156" starttime="20171101 18:02:47.038"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:47.156" starttime="20171101 18:02:47.034"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20171101 18:02:47.161" starttime="20171101 18:02:47.161"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:47.161" starttime="20171101 18:02:47.157"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>root</arg>
</arguments>
<msg timestamp="20171101 18:02:47.290" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05717B98&gt;</msg>
<msg timestamp="20171101 18:02:47.290" level="INFO">[ssh_common.py@258] Execute command: root</msg>
<msg timestamp="20171101 18:02:47.290" level="INFO">[ssh_common.py@314] Get Response: 
root@bcm-tddlte-zynq7:~#</msg>
<status status="PASS" endtime="20171101 18:02:47.290" starttime="20171101 18:02:47.165"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:47.290" starttime="20171101 18:02:47.162"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20171101 18:02:47.425" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05717B98&gt;</msg>
<msg timestamp="20171101 18:02:47.425" level="INFO">[ssh_common.py@258] Execute command: /run/rfsh.sh sendFault 1275 2 0 0 0 0</msg>
<msg timestamp="20171101 18:02:47.425" level="INFO">[ssh_common.py@314] Get Response: /run/rfsh.sh sendFault 1275 2 0 0 0 0
AaShell&gt; root@bcm-tddlte-zynq7:~#</msg>
<status status="PASS" endtime="20171101 18:02:47.425" starttime="20171101 18:02:47.294"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:47.425" starttime="20171101 18:02:47.291"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20171101 18:02:47.543" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05717B98&gt;</msg>
<status status="PASS" endtime="20171101 18:02:47.543" starttime="20171101 18:02:47.425"></status>
</kw>
<status status="PASS" endtime="20171101 18:02:47.544" starttime="20171101 18:02:36.090"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>alarm_start</arg>
<arg>${msg_check_list_alarm_start}</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${msg_check_list}</arg>
<arg>timeout=130</arg>
</arguments>
<msg timestamp="20171101 18:04:57.664" level="FAIL">InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/BTS_L-1/LNBTS-1/LNCEL-*/ALARM_L-* is [alarmInformation.faultId=1927]=3' doesn't pass in timeout=130.0. Actual count = 0</msg>
<status status="FAIL" endtime="20171101 18:04:57.664" starttime="20171101 18:02:47.545"></status>
</kw>
<status status="FAIL" endtime="20171101 18:04:57.664" starttime="20171101 18:02:47.544"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171101 18:04:57.664" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05520F58&gt;.</msg>
<status status="PASS" endtime="20171101 18:04:57.664" starttime="20171101 18:04:57.664"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20171101 18:04:58.413" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20171101 18:04:58.413" starttime="20171101 18:04:57.664"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20171101 18:04:58.429" starttime="20171101 18:04:58.413"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:04:58.429" starttime="20171101 18:04:58.429"></status>
</kw>
<msg timestamp="20171101 18:04:58.429" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20171101 18:04:58.429" starttime="20171101 18:04:58.429"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20171101 18:04:58.444" level="INFO">[infomodel_control.py@213] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927\alarm_start' succeed .</msg>
<status status="PASS" endtime="20171101 18:04:58.444" starttime="20171101 18:04:58.429"></status>
</kw>
<status status="PASS" endtime="20171101 18:04:58.444" starttime="20171101 18:04:58.429"></status>
</kw>
<status status="PASS" endtime="20171101 18:04:58.444" starttime="20171101 18:04:58.429"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20171101 18:04:58.741" level="INFO">Exit code: 1</msg>
<msg timestamp="20171101 18:04:58.741" level="INFO">STDOUT
</msg>
<msg timestamp="20171101 18:04:58.741" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:41307
</msg>
<msg timestamp="20171101 18:04:58.741" level="INFO">[infomodel_control.py@185] stop infomodel logger succeed .</msg>
<msg timestamp="20171101 18:04:58.741" level="INFO">[infomodel_control.py@197] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171101 18:04:58.741" starttime="20171101 18:04:58.444"></status>
</kw>
<status status="PASS" endtime="20171101 18:04:58.741" starttime="20171101 18:04:58.444"></status>
</kw>
<status status="PASS" endtime="20171101 18:04:58.741" starttime="20171101 18:04:58.444"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:04:58.741" starttime="20171101 18:04:58.741"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:04:58.741" starttime="20171101 18:04:58.741"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20171101 18:04:58.756" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20171101 18:04:58.756" starttime="20171101 18:04:58.741"></status>
</kw>
<msg timestamp="20171101 18:04:58.756" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20171101 18:04:58.756" starttime="20171101 18:04:58.741"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:04:58.756" starttime="20171101 18:04:58.756"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20171101 18:04:58.756" starttime="20171101 18:04:58.756"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20171101 18:04:58.756" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20171101 18:04:58.756" starttime="20171101 18:04:58.756"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:04:58.756" starttime="20171101 18:04:58.756"></status>
</kw>
<msg timestamp="20171101 18:04:58.756" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171101 18:04:58.756" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171101 18:04:58.756" starttime="20171101 18:04:58.756"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171101 18:04:58.772" starttime="20171101 18:04:58.756"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171101 18:05:02.843" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20171101 18:05:02.843" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171101 18:05:02.843" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171101 18:05:02.843" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171101 18:05:02.843" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171101 18:05:02.843" starttime="20171101 18:04:58.772"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:02.843" starttime="20171101 18:04:58.756"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:02.859" starttime="20171101 18:05:02.859"></status>
</kw>
<msg timestamp="20171101 18:05:02.859" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171101 18:05:02.859" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171101 18:05:02.859" starttime="20171101 18:05:02.859"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:02.859" starttime="20171101 18:05:02.859"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171101 18:05:06.946" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20171101 18:05:06.946" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171101 18:05:06.946" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171101 18:05:06.946" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171101 18:05:06.946" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171101 18:05:06.946" starttime="20171101 18:05:02.859"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:06.946" starttime="20171101 18:05:02.843"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:06.946" starttime="20171101 18:05:06.946"></status>
</kw>
<msg timestamp="20171101 18:05:06.946" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171101 18:05:06.946" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171101 18:05:06.946" starttime="20171101 18:05:06.946"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:06.946" starttime="20171101 18:05:06.946"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171101 18:05:11.033" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20171101 18:05:11.033" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171101 18:05:11.033" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171101 18:05:11.033" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171101 18:05:11.033" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171101 18:05:11.033" starttime="20171101 18:05:06.946"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:11.033" starttime="20171101 18:05:06.946"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20171101 18:05:11.033" level="FAIL">Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20171101 18:05:11.033" starttime="20171101 18:05:11.033"></status>
</kw>
<msg timestamp="20171101 18:05:11.033" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20171101 18:05:11.033" level="INFO">${ret2} = Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20171101 18:05:11.033" starttime="20171101 18:05:11.033"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20171101 18:05:11.049" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171101 18:05:11.049" starttime="20171101 18:05:11.033"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:11.049" starttime="20171101 18:05:11.033"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:11.049" starttime="20171101 18:04:58.756"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:11.049" starttime="20171101 18:04:58.756"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:11.049" starttime="20171101 18:05:11.049"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20171101 18:05:11.049" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20171101 18:05:11.049" starttime="20171101 18:05:11.049"></status>
</kw>
<status status="FAIL" endtime="20171101 18:05:11.049" starttime="20171101 18:04:58.741"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:11.049" starttime="20171101 18:04:58.741"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20171101 18:05:11.049" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20171101 18:05:11.049" starttime="20171101 18:05:11.049"></status>
</kw>
<msg timestamp="20171101 18:05:11.049" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20171101 18:05:11.049" starttime="20171101 18:05:11.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:11.065" starttime="20171101 18:05:11.049"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20171101 18:05:26.139" level="INFO">Exit code: 1</msg>
<msg timestamp="20171101 18:05:26.139" level="INFO">STDOUT
</msg>
<msg timestamp="20171101 18:05:26.139" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:36921
</msg>
<msg timestamp="20171101 18:05:26.763" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20171101 18:05:26.763" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171101 18:05:26.763" starttime="20171101 18:05:11.065"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20171101 18:05:29.634" level="INFO">['fatal'] ['fatal']</msg>
<msg timestamp="20171101 18:05:29.634" level="INFO">[file_control.py@109] *HTML*&lt;a href = "D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927\udplog_20171101175617.log"&gt;fail log&lt;/a&gt;
Find '['fatal']' in 'D:\TA\TA_logs\TestLog_20171101175323\ev_logs\FZHR_Addtional_RF_module_alarm_without_recovery_ac_20171101175326\FZHR_RF_alarm_1927\udplog_20171101175617.log'
write successfully</msg>
<status status="PASS" endtime="20171101 18:05:29.634" starttime="20171101 18:05:26.763"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20171101 18:05:29.634" level="FAIL">'FZHR_RF_alarm_1927' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20171101 18:05:29.634" starttime="20171101 18:05:29.634"></status>
</kw>
<msg timestamp="20171101 18:05:29.634" level="INFO">${return1} = ('FAIL', u"'FZHR_RF_alarm_1927' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20171101 18:05:29.634" starttime="20171101 18:05:29.634"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:29.634" starttime="20171101 18:05:29.634"></status>
</kw>
<msg timestamp="20171101 18:05:29.634" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20171101 18:05:29.634" starttime="20171101 18:05:29.634"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:29.634" starttime="20171101 18:05:29.634"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:29.634" starttime="20171101 18:05:29.634"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:29.634" starttime="20171101 18:05:29.634"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:29.634" starttime="20171101 18:05:29.634"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:29.634" starttime="20171101 18:05:29.634"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171101 18:05:29.634" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171101 18:05:29.634" starttime="20171101 18:05:29.634"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:29.649" starttime="20171101 18:05:29.649"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:29.649" starttime="20171101 18:05:29.649"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:29.649" starttime="20171101 18:05:29.649"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:29.649" starttime="20171101 18:05:29.649"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:29.649" starttime="20171101 18:05:29.649"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:29.649" starttime="20171101 18:05:29.649"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:29.649" starttime="20171101 18:05:29.649"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:29.649" starttime="20171101 18:05:29.649"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:29.649" starttime="20171101 18:05:29.649"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20171101 18:05:50.850" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 18:03:16 CST 2017 from 192.168.255.126 on pts/1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0559FD28&gt;</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0559FD28&gt;</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[ssh_common.py@203] Last login: Wed Nov  1 18:06:09 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0573AE40&gt;</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000499_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0573AE40&gt;</msg>
<msg timestamp="20171101 18:05:50.850" level="INFO">${version} = TL17A_ENB_0000_000499_000000</msg>
<status status="PASS" endtime="20171101 18:05:50.850" starttime="20171101 18:05:29.649"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:50.850" starttime="20171101 18:05:50.850"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:50.850" starttime="20171101 18:05:50.850"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:50.850" starttime="20171101 18:05:50.850"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20171101 18:05:50.865" starttime="20171101 18:05:50.850"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:50.865" starttime="20171101 18:05:50.850"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:50.865" starttime="20171101 18:05:50.850"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:50.865" starttime="20171101 18:05:29.634"></status>
</kw>
<status status="PASS" endtime="20171101 18:05:50.865" starttime="20171101 18:04:57.664"></status>
</kw>
<tags>
<tag>owner-shaocheng.chen@nokia.com</tag>
<tag>QC_773300</tag>
</tags>
<status status="FAIL" endtime="20171101 18:05:50.865" critical="yes" starttime="20171101 17:55:03.192">InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/BTS_L-1/LNBTS-1/LNCEL-*/ALARM_L-* is [alarmInformation.faultId=1927]=3' doesn't pass in timeout=130.0. Actual count = 0</status>
</test>
<doc>TD-LTE I&amp;V AIR</doc>
<status status="FAIL" endtime="20171101 18:05:50.896" starttime="20171101 17:53:24.927"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-shaocheng.chen@nokia.com</stat>
<stat fail="1" pass="0">QC_773300</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHR Addtional RF module alarm without recovery action 1927" pass="0">FZHR Addtional RF module alarm without recovery action 1927</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171101 17:53:24.954" level="ERROR">Error in file 'D:\TA\Test_Case_Svn\TL17A\SISO1\CPRI_Single_FZHR\FZHR_Addtional_RF_module_alarm_without_recovery_action_1927\FZHR_Addtional_RF_module_alarm_without_recovery_action_1927.html': Resource file 'RobotWS.html' does not exist.</msg>
<msg timestamp="20171101 17:53:25.612" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
</errors>
</robot>
