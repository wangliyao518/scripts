<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170920 15:57:38.455" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\TL17A\SISO1\CPRI_Single_FZHR\FZHR_Operational_RF_power_off_then_on\FZHR_Operational_RF_power_off_then_on.html" id="s1" name="FZHR Operational RF power off then on">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170920151904//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170920 15:46:23.017" level="INFO">${timestamp} = 20170920154623</msg>
<status status="PASS" endtime="20170920 15:46:23.017" starttime="20170920 15:46:22.979"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170920 15:46:23.018" level="INFO">${FILE_NAME} = FZHR Operational RF power off then on</msg>
<status status="PASS" endtime="20170920 15:46:23.018" starttime="20170920 15:46:23.017"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170920 15:46:23.019" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR Operational RF power off then on_20170920154623</msg>
<status status="PASS" endtime="20170920 15:46:23.019" starttime="20170920 15:46:23.018"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170920 15:46:23.019" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623</msg>
<status status="PASS" endtime="20170920 15:46:23.020" starttime="20170920 15:46:23.019"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170920 15:46:23.020" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623</msg>
<status status="PASS" endtime="20170920 15:46:23.020" starttime="20170920 15:46:23.020"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170920 15:46:23.022" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623"&gt;D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170920 15:46:23.022" starttime="20170920 15:46:23.020"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170920 15:46:23.023" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623</msg>
<status status="PASS" endtime="20170920 15:46:23.023" starttime="20170920 15:46:23.022"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170920 15:46:23.026" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170920 15:46:23.026" starttime="20170920 15:46:23.023"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170920 15:46:23.045" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170920 15:46:23.045" starttime="20170920 15:46:23.039"></status>
</kw>
<msg timestamp="20170920 15:46:23.045" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170920 15:46:23.045" starttime="20170920 15:46:23.038"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:23.046" starttime="20170920 15:46:23.046"></status>
</kw>
<msg timestamp="20170920 15:46:23.046" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 15:46:23.046" starttime="20170920 15:46:23.045"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:23.053" starttime="20170920 15:46:23.050"></status>
</kw>
<msg timestamp="20170920 15:46:23.053" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623</msg>
<status status="PASS" endtime="20170920 15:46:23.053" starttime="20170920 15:46:23.046"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170920 15:46:23.057" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623</msg>
<status status="PASS" endtime="20170920 15:46:23.057" starttime="20170920 15:46:23.053"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:23.057" starttime="20170920 15:46:23.038"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170920 15:46:23.085" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 15:46:23.085" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170920 15:46:23.085" starttime="20170920 15:46:23.058"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:23.086" starttime="20170920 15:46:23.086"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:23.086" starttime="20170920 15:46:23.086"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:23.087" starttime="20170920 15:46:23.087"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:23.087" starttime="20170920 15:46:23.087"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:23.087" starttime="20170920 15:46:23.058"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:23.088" starttime="20170920 15:46:23.057"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170920 15:47:22.871" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 15:47:22.905" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 15:47:33.981" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 15:47:34.043" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 15:47:34.558" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 15:47:34.591" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:46:05 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057B1328&gt;</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057B1328&gt;</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:46:21 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057B1328&gt;</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057B1328&gt;</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1505893604&amp;token=e605b908c302dc86a52e5cdd2db6db1c21bf511d3a7b1c90dfaee789a5c0d58f&amp;frame=sshservice'</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:48:02.460" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1505893607&amp;token=0d47e1a48e12b3626c56ab1c7b701e53342075991e8d6dd87df613243ba07b57&amp;frame=RndPortsService'</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:46:32 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0589B9B8&gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0589B9B8&gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:46:49 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0589BE90&gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0589BE90&gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_resource.py@1141] 
 ****Current BTS version is 'TL17A_ENB_0000_000337_000000' *****</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_resource.py@1171] activeBuildVersion=TL17A_ENB_0000_000337_000000</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:46:59 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0589BF08&gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0589BF08&gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\SiteConf.xml' is ok. local file size is 132k</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:47:20 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0579C710&gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0579C710&gt;</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_resource.py@403] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FileDirectory_20170920154722.xml' is ok. local file size is 36k</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_143.xml</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/config/SCFC_143.xml' to 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\SCFC_143.xml' is ok. local file size is 125k</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_resource.py@1141] 
 ****Current bbu type is 'ASIA' *****</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_resource.py@1266] HW_BBU_TYPE=ASIA</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_resource.py@1141] 
 ****Current rru type is 'FZHR' *****</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_resource.py@1269] HW_RRU_TYPE=FZHR</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_resource.py@1141] 
 ****Current HW type is '#3044A-2CL1-T2-L-2' *****</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[enb_resource.py@1272] BTS_HW_TYPE=#3044A-2CL1-T2-L-2</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ping_control.py@189] 
Pinging 192.168.200.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.200.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:48:02.461" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170920 15:48:02.464" starttime="20170920 15:46:23.088"></status>
</kw>
<status status="PASS" endtime="20170920 15:48:02.464" starttime="20170920 15:46:23.088"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170920 15:48:02.465" starttime="20170920 15:48:02.465"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170920 15:48:02.466" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170920 15:48:02.466" starttime="20170920 15:48:02.466"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170920 15:48:02.470" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170920 15:48:02.470" starttime="20170920 15:48:02.467"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170920 15:48:02.475" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170920 15:48:02.475" starttime="20170920 15:48:02.471"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170920 15:48:02.478" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170920 15:48:02.478" starttime="20170920 15:48:02.476"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170920 15:48:03.912" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170920 15:48:03.912" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170920 15:48:03.912" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170920 15:48:03.912" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170920 15:48:03.912" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 15:48:03.912" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x058B0350&gt;</msg>
<status status="PASS" endtime="20170920 15:48:03.912" starttime="20170920 15:48:02.479"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:48:03.913" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x058B0350&gt;</msg>
<status status="PASS" endtime="20170920 15:48:03.913" starttime="20170920 15:48:03.912"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170920 15:48:05.113" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x058B0350&gt;</msg>
<msg timestamp="20170920 15:48:05.113" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170920 15:48:05.113" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170920 15:48:05.113" starttime="20170920 15:48:03.916"></status>
</kw>
<status status="PASS" endtime="20170920 15:48:05.113" starttime="20170920 15:48:03.913"></status>
</kw>
<status status="PASS" endtime="20170920 15:48:05.114" starttime="20170920 15:48:02.465"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:48:05.118" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x058B0350&gt;.</msg>
<status status="PASS" endtime="20170920 15:48:05.118" starttime="20170920 15:48:05.114"></status>
</kw>
<status status="PASS" endtime="20170920 15:48:05.118" starttime="20170920 15:46:22.979"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:33.583" starttime="20170920 15:57:33.580"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170920 15:57:33.590" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170920 15:57:33.590" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x058B0350&gt;</msg>
<status status="PASS" endtime="20170920 15:57:33.590" starttime="20170920 15:57:33.583"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${need_zip} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${need_zip} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:33.592" starttime="20170920 15:57:33.592"></status>
</kw>
<msg timestamp="20170920 15:57:33.592" level="INFO">${status} = PASS</msg>
<msg timestamp="20170920 15:57:33.592" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20170920 15:57:33.592" starttime="20170920 15:57:33.591"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${need_zip} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${need_zip} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:33.594" starttime="20170920 15:57:33.593"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:33.594" starttime="20170920 15:57:33.593"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:33.594" starttime="20170920 15:57:33.580"></status>
</kw>
<test id="s1-t1" name="FZHR_Operational_RF_power_off_then_on">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170920151904//ev_logs//D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170920 15:48:05.123" level="INFO">${timestamp} = 20170920154805</msg>
<status status="PASS" endtime="20170920 15:48:05.123" starttime="20170920 15:48:05.122"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170920 15:48:05.123" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20170920 15:48:05.124" starttime="20170920 15:48:05.123"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170920 15:48:05.124" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20170920 15:48:05.124" starttime="20170920 15:48:05.124"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170920 15:48:05.125" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20170920 15:48:05.125" starttime="20170920 15:48:05.125"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170920 15:48:05.126" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on"&gt;D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170920 15:48:05.126" starttime="20170920 15:48:05.125"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170920 15:48:05.127" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20170920 15:48:05.127" starttime="20170920 15:48:05.127"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170920 15:48:05.128" starttime="20170920 15:48:05.127"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:48:05.130" starttime="20170920 15:48:05.129"></status>
</kw>
<msg timestamp="20170920 15:48:05.130" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 15:48:05.130" starttime="20170920 15:48:05.129"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:48:05.131" starttime="20170920 15:48:05.131"></status>
</kw>
<msg timestamp="20170920 15:48:05.131" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 15:48:05.131" starttime="20170920 15:48:05.130"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170920 15:48:05.134" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20170920 15:48:05.134" starttime="20170920 15:48:05.131"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170920 15:48:05.135" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20170920 15:48:05.135" starttime="20170920 15:48:05.135"></status>
</kw>
<status status="PASS" endtime="20170920 15:48:05.135" starttime="20170920 15:48:05.128"></status>
</kw>
<status status="PASS" endtime="20170920 15:48:05.136" starttime="20170920 15:48:05.122"></status>
</kw>
<kw name="Reset_BTS_If_Ini_Earfcn_Unmatch" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${ini_earfcn_check}</arg>
</arguments>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170920 15:48:13.286" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170920 15:48:13.286" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170920 15:48:13.286" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170920 15:48:13.286" starttime="20170920 15:48:05.137"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Query_Infomodel_With_Multi_Condition</arg>
<arg>${ini_earfcn_check}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Query_Infomodel_With_Multi_Condition" library="SISO1 Resource">
<arguments>
<arg>${ini_earfcn_check}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${condition_list}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170920 15:48:13.288" level="INFO">Length is 1</msg>
<msg timestamp="20170920 15:48:13.288" level="INFO">${ret} = 1</msg>
<status status="PASS" endtime="20170920 15:48:13.288" starttime="20170920 15:48:13.287"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${ret} ]">
<kw type="foritem" name="${num} = 0">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20170920 15:48:23.366" level="FAIL">InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]=3' doesn't pass in timeout=10.0. Actual count = 6</msg>
<status status="FAIL" endtime="20170920 15:48:23.366" starttime="20170920 15:48:13.288"></status>
</kw>
<status status="FAIL" endtime="20170920 15:48:23.366" starttime="20170920 15:48:13.288"></status>
</kw>
<status status="FAIL" endtime="20170920 15:48:23.366" starttime="20170920 15:48:13.288"></status>
</kw>
<status status="FAIL" endtime="20170920 15:48:23.366" starttime="20170920 15:48:13.287"></status>
</kw>
<msg timestamp="20170920 15:48:23.367" level="INFO">${result} = FAIL</msg>
<msg timestamp="20170920 15:48:23.367" level="INFO">${ret} = InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]=3' doesn't pass in timeout=10.0. Actual count = 6</msg>
<status status="PASS" endtime="20170920 15:48:23.367" starttime="20170920 15:48:13.286"></status>
</kw>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170920 15:48:24.067" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170920 15:48:24.068" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 15:48:24.068" starttime="20170920 15:48:23.367"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:48:24.078" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x058B0350&gt;.</msg>
<status status="PASS" endtime="20170920 15:48:24.078" starttime="20170920 15:48:24.072"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170920 15:48:28.274" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x058B0350&gt;</msg>
<msg timestamp="20170920 15:48:28.274" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170920 15:48:28.274" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170920 15:48:28.275" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170920 15:48:28.275" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170920 15:48:28.275" starttime="20170920 15:48:24.078"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:48:28.278" starttime="20170920 15:48:28.275"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170920 15:48:28.281" starttime="20170920 15:48:28.278"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
</arguments>
<msg timestamp="20170920 15:49:27.611" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 15:49:27.643" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 15:49:38.700" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 15:49:39.034" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:47:32 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058BCEE0&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058BCEE0&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:48:27 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058BC530&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058BC530&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1505893729&amp;token=43c1da3002249a6166822a4c0bdcaa128ba8be7460e14637dbd90a834b72ab23&amp;frame=sshservice'</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1505893731&amp;token=f83d104260bd577984b87448560ae97a240fdb6c00c7ccd6a7c7e26d973e3876&amp;frame=RndPortsService'</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:48:37 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058A25A8&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058A25A8&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:48:54 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058A2BE8&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058A2BE8&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:49:04 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058A2BE8&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058A2BE8&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[enb_resource.py@403] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on\FileDirectory_20170920154916.xml' is ok. local file size is 36k</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.129</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:49:25 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058A2A80&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@258] Execute command: rm -rf /ffs/fs2/config/hwf.bin.gz</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@314] Get Response: rm -rf /ffs/fs2/config/hwf.bin.gz
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058A2A80&gt;</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[sftp_control.py@61] sftp upload from 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on\scf_modified.xml' to '/ffs/fs2/config/SCFC_143.xml' is ok.</msg>
<msg timestamp="20170920 15:49:39.046" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_143.xml</msg>
<status status="PASS" endtime="20170920 15:49:39.048" starttime="20170920 15:48:28.282"></status>
</kw>
<kw name="Restart Bts Until Onair" library="tdd_ev_robotws">
<doc>restart bts with powerbreaker and then wait until it is onair.</doc>
<arguments>
<arg>bts_powerbreak_port=${bts_powerbreak}</arg>
</arguments>
<msg timestamp="20170920 15:55:49.082" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[facom.py@60] Power off port 3 succeed!</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[facom.py@60] Power off port 6 succeed!</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[facom.py@83] Power on port 3 succeed!</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 15:55:49.082" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[facom.py@83] Power on port 6 succeed!</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[tools_resource.py@39] restart port '['FACOM:10.56.7.128:3', 'FACOM:10.56.7.128:6']' with powerbreak succeed !</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on" already exists, no need to create it again.</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'UploadOngoing', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'UploadOngoing', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'UploadOngoing', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': None, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': None, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.083" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will try another way</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will sleep and try again</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@225] infomodel check every cell onair succeed !</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[enb_resource.py@253] bts log check onair msg succeed !</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on\im_20170920155548' succeed .</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170920 15:55:49.084" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 15:55:49.088" starttime="20170920 15:49:39.049"></status>
</kw>
<status status="PASS" endtime="20170920 15:55:49.088" starttime="20170920 15:48:24.071"></status>
</kw>
<status status="PASS" endtime="20170920 15:55:49.088" starttime="20170920 15:48:24.068"></status>
</kw>
<status status="PASS" endtime="20170920 15:55:49.088" starttime="20170920 15:48:05.136"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${total_times} ]">
<kw type="foritem" name="${num} = 0">
<kw name="_RF_Power_off_then_on_and_Attach">
<doc>Operation with RF</doc>
<arguments>
<arg>${num}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:55:49.094" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x058B0350&gt;.</msg>
<status status="PASS" endtime="20170920 15:55:49.094" starttime="20170920 15:55:49.090"></status>
</kw>
<kw name="Restart Device With Powerbreaker" library="tdd_ev_robotws">
<doc>restart powerbreak_port device use powerbreaker.</doc>
<arguments>
<arg>${BTS_POWERBREAK_PORT[1]}</arg>
</arguments>
<msg timestamp="20170920 15:55:54.184" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20170920 15:55:54.184" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 15:55:54.184" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170920 15:55:54.184" level="INFO">[facom.py@60] Power off port 6 succeed!</msg>
<msg timestamp="20170920 15:55:54.184" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20170920 15:55:54.184" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 15:55:54.184" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170920 15:55:54.184" level="INFO">[facom.py@83] Power on port 6 succeed!</msg>
<msg timestamp="20170920 15:55:54.184" level="INFO">[tools_resource.py@39] restart port 'FACOM:10.56.7.128:6' with powerbreak succeed !</msg>
<status status="PASS" endtime="20170920 15:55:54.185" starttime="20170920 15:55:49.094"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>20 sec</arg>
</arguments>
<msg timestamp="20170920 15:56:14.185" level="INFO">Slept 20 seconds</msg>
<status status="PASS" endtime="20170920 15:56:14.185" starttime="20170920 15:55:54.185"></status>
</kw>
<kw name="Check Bts Until Onair" library="tdd_ev_robotws">
<doc>check bts until all cell is onair with infomodel, and have PBCH in udp log.</doc>
<arguments>
<arg>log_name=bts_power_reset_${num}</arg>
</arguments>
<msg timestamp="20170920 15:56:26.770" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20170920 15:56:26.770" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on" already exists, no need to create it again.</msg>
<msg timestamp="20170920 15:56:26.770" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 15:56:26.770" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170920 15:56:26.770" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170920 15:56:26.770" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<msg timestamp="20170920 15:56:26.770" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:56:26.770" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will try another way</msg>
<msg timestamp="20170920 15:56:26.770" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:56:26.771" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will sleep and try again</msg>
<msg timestamp="20170920 15:56:26.771" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:56:26.771" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20170920 15:56:26.771" level="INFO">[enb_resource.py@225] infomodel check every cell onair succeed !</msg>
<msg timestamp="20170920 15:56:26.771" level="INFO">[enb_resource.py@253] bts log check onair msg succeed !</msg>
<msg timestamp="20170920 15:56:26.771" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on\im_20170920155626' succeed .</msg>
<msg timestamp="20170920 15:56:26.771" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170920 15:56:26.771" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 15:56:26.771" starttime="20170920 15:56:14.185"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<arguments>
<arg>bts_attach_${num}</arg>
</arguments>
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170920 15:56:27.081" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20170920 15:56:27.081" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170920 15:56:27.081" starttime="20170920 15:56:26.773"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170920 15:56:35.419" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170920 15:56:35.419" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170920 15:56:35.419" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170920 15:56:35.420" starttime="20170920 15:56:27.082"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170920 15:56:35.420" level="INFO">${case_execute_log_name} = bts_attach_0</msg>
<status status="PASS" endtime="20170920 15:56:35.420" starttime="20170920 15:56:35.420"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:35.421" starttime="20170920 15:56:26.772"></status>
</kw>
<kw name="UE_Attach_SISO1" library="SISO1 Resource">
<doc>Example</doc>
<arguments>
<arg>1:2:3</arg>
</arguments>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${cell_id}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{cell_list}</var>
</assign>
<msg timestamp="20170920 15:56:35.426" level="INFO">@{cell_list} = [ 1 | 2 | 3 ]</msg>
<status status="PASS" endtime="20170920 15:56:35.426" starttime="20170920 15:56:35.425"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${cell_list}</arg>
</arguments>
<assign>
<var>${cell_list_length}</var>
</assign>
<msg timestamp="20170920 15:56:35.426" level="INFO">Length is 3</msg>
<msg timestamp="20170920 15:56:35.426" level="INFO">${cell_list_length} = 3</msg>
<status status="PASS" endtime="20170920 15:56:35.427" starttime="20170920 15:56:35.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Split String</arg>
<arg>${attach_earfcn}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${earfcn_list1}</var>
</assign>
<msg timestamp="20170920 15:56:35.430" level="INFO">${earfcn_list1} = None</msg>
<status status="PASS" endtime="20170920 15:56:35.430" starttime="20170920 15:56:35.427"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Change_Earfcn_To_Freqency</arg>
<arg>${earfcn_list1}</arg>
</arguments>
<assign>
<var>${freqency_list1}</var>
<var>${band_list1}</var>
</assign>
<msg timestamp="20170920 15:56:35.433" level="INFO">${freqency_list1} = None</msg>
<msg timestamp="20170920 15:56:35.434" level="INFO">${band_list1} = None</msg>
<status status="PASS" endtime="20170920 15:56:35.434" starttime="20170920 15:56:35.430"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Get_Earfcn_From_Infomodel</arg>
</arguments>
<assign>
<var>${earfcn_list2}</var>
<var>${freqency_list2}</var>
<var>${band_list2}</var>
</assign>
<kw name="Get_Earfcn_From_Infomodel" library="SISO1 Resource">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>get list /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1</arg>
</arguments>
<assign>
<var>@{ret_earfcn}</var>
</assign>
<msg timestamp="20170920 15:56:36.411" level="INFO">[infomodel_control.py@328] query infomodel: 'get list /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1' succeed .</msg>
<msg timestamp="20170920 15:56:36.411" level="INFO">@{ret_earfcn} = [ InfoModelObject /MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-3/CARRIER_GROUP_L-1: {u'fcnULs': [40940L], u'fcnDLs': [40940L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-3/CARRIER_GROUP_L-1', u's...</msg>
<status status="PASS" endtime="20170920 15:56:36.411" starttime="20170920 15:56:35.438"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${ret_earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.412" starttime="20170920 15:56:36.411"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${earfcn_list}</var>
</assign>
<msg timestamp="20170920 15:56:36.412" level="INFO">${earfcn_list} = []</msg>
<status status="PASS" endtime="20170920 15:56:36.412" starttime="20170920 15:56:36.412"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${freqency_list}</var>
</assign>
<msg timestamp="20170920 15:56:36.413" level="INFO">${freqency_list} = []</msg>
<status status="PASS" endtime="20170920 15:56:36.413" starttime="20170920 15:56:36.413"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${band_list}</var>
</assign>
<msg timestamp="20170920 15:56:36.413" level="INFO">${band_list} = []</msg>
<status status="PASS" endtime="20170920 15:56:36.413" starttime="20170920 15:56:36.413"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_OFFSET}</arg>
</arguments>
<assign>
<var>${offset_dict}</var>
</assign>
<msg timestamp="20170920 15:56:36.414" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.418" level="INFO">${offset_dict} = {u'38': u'1205', u'40': u'1565', u'39': u'1945', u'41': u'1469', u'42': u'759', u'43': u'759', u'37': u'1845', u'36': u'1765', u'35': u'1785', u'34': u'1610', u'33': u'1700'}</msg>
<status status="PASS" endtime="20170920 15:56:36.418" starttime="20170920 15:56:36.414"></status>
</kw>
<kw type="for" name="${index} IN [ @{ret_earfcn} ]">
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-1/CARRIER_GROUP_L-1: {u'fcnULs': [40540L], u'fcnDLs': [40540L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-1/CARRIER_GROUP_L-1', u'sta...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:56:36.419" level="INFO">${index.earfcn} = 40540</msg>
<status status="PASS" endtime="20170920 15:56:36.419" starttime="20170920 15:56:36.419"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.420" starttime="20170920 15:56:36.420"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:56:36.421" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.423" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:56:36.423" starttime="20170920 15:56:36.421"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:56:36.423" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.423" starttime="20170920 15:56:36.423"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.425" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.425" starttime="20170920 15:56:36.424"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.428" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.428" starttime="20170920 15:56:36.425"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.429" starttime="20170920 15:56:36.429"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.429" starttime="20170920 15:56:36.424"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.430" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.430" starttime="20170920 15:56:36.429"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.433" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.433" starttime="20170920 15:56:36.430"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.434" starttime="20170920 15:56:36.434"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.434" starttime="20170920 15:56:36.429"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.435" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.435" starttime="20170920 15:56:36.434"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.439" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.439" starttime="20170920 15:56:36.435"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.439" starttime="20170920 15:56:36.439"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.439" starttime="20170920 15:56:36.434"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.440" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.440" starttime="20170920 15:56:36.440"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.444" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:56:36.444" starttime="20170920 15:56:36.440"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:56:36.444" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:56:36.444" starttime="20170920 15:56:36.444"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.444" starttime="20170920 15:56:36.439"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.444" starttime="20170920 15:56:36.424"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.448" starttime="20170920 15:56:36.445"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.451" level="INFO">${bts_band} = 41</msg>
<status status="PASS" endtime="20170920 15:56:36.451" starttime="20170920 15:56:36.448"></status>
</kw>
<msg timestamp="20170920 15:56:36.451" level="INFO">${attach_band} = 41</msg>
<status status="PASS" endtime="20170920 15:56:36.452" starttime="20170920 15:56:36.420"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.452" level="INFO">${attach_band} = 41</msg>
<status status="PASS" endtime="20170920 15:56:36.452" starttime="20170920 15:56:36.452"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.453" starttime="20170920 15:56:36.452"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:56:36.453" level="INFO">${offset} = 1469</msg>
<status status="PASS" endtime="20170920 15:56:36.453" starttime="20170920 15:56:36.453"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:56:36.457" level="INFO">${freq} = 25850.0</msg>
<status status="PASS" endtime="20170920 15:56:36.457" starttime="20170920 15:56:36.454"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:56:36.458" level="INFO">${fq} = 25850</msg>
<status status="PASS" endtime="20170920 15:56:36.458" starttime="20170920 15:56:36.457"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:56:36.458" level="INFO">${freqency} = 25850</msg>
<status status="PASS" endtime="20170920 15:56:36.458" starttime="20170920 15:56:36.458"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.459" starttime="20170920 15:56:36.459"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.459" starttime="20170920 15:56:36.419"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-2/CARRIER_GROUP_L-1: {u'fcnULs': [38100L], u'fcnDLs': [38100L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-2/CARRIER_GROUP_L-1', u'sta...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:56:36.460" level="INFO">${index.earfcn} = 38100</msg>
<status status="PASS" endtime="20170920 15:56:36.460" starttime="20170920 15:56:36.460"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.461" starttime="20170920 15:56:36.460"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:56:36.462" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.467" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:56:36.467" starttime="20170920 15:56:36.461"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:56:36.467" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.467" starttime="20170920 15:56:36.467"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.469" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.469" starttime="20170920 15:56:36.468"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.472" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:56:36.472" starttime="20170920 15:56:36.469"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:56:36.473" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:56:36.473" starttime="20170920 15:56:36.473"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.473" starttime="20170920 15:56:36.468"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.473" starttime="20170920 15:56:36.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.477" starttime="20170920 15:56:36.473"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.480" level="INFO">${bts_band} = 38</msg>
<status status="PASS" endtime="20170920 15:56:36.480" starttime="20170920 15:56:36.477"></status>
</kw>
<msg timestamp="20170920 15:56:36.481" level="INFO">${attach_band} = 38</msg>
<status status="PASS" endtime="20170920 15:56:36.481" starttime="20170920 15:56:36.461"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.481" level="INFO">${attach_band} = 38</msg>
<status status="PASS" endtime="20170920 15:56:36.481" starttime="20170920 15:56:36.481"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.482" starttime="20170920 15:56:36.482"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:56:36.482" level="INFO">${offset} = 1205</msg>
<status status="PASS" endtime="20170920 15:56:36.483" starttime="20170920 15:56:36.482"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:56:36.486" level="INFO">${freq} = 26050.0</msg>
<status status="PASS" endtime="20170920 15:56:36.486" starttime="20170920 15:56:36.483"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:56:36.487" level="INFO">${fq} = 26050</msg>
<status status="PASS" endtime="20170920 15:56:36.487" starttime="20170920 15:56:36.486"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:56:36.488" level="INFO">${freqency} = 26050</msg>
<status status="PASS" endtime="20170920 15:56:36.488" starttime="20170920 15:56:36.487"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.488" starttime="20170920 15:56:36.488"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.488" starttime="20170920 15:56:36.459"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-3/CARRIER_GROUP_L-1: {u'fcnULs': [40940L], u'fcnDLs': [40940L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-3/CARRIER_GROUP_L-1', u'sta...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:56:36.489" level="INFO">${index.earfcn} = 40940</msg>
<status status="PASS" endtime="20170920 15:56:36.489" starttime="20170920 15:56:36.489"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.490" starttime="20170920 15:56:36.489"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:56:36.491" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.493" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:56:36.493" starttime="20170920 15:56:36.491"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:56:36.493" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.493" starttime="20170920 15:56:36.493"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.494" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.494" starttime="20170920 15:56:36.494"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.498" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.498" starttime="20170920 15:56:36.495"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.499" starttime="20170920 15:56:36.499"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.499" starttime="20170920 15:56:36.494"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.500" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.500" starttime="20170920 15:56:36.500"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.504" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.504" starttime="20170920 15:56:36.500"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.504" starttime="20170920 15:56:36.504"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.504" starttime="20170920 15:56:36.499"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.505" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.505" starttime="20170920 15:56:36.505"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.509" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.509" starttime="20170920 15:56:36.505"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.510" starttime="20170920 15:56:36.509"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.510" starttime="20170920 15:56:36.504"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.510" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.511" starttime="20170920 15:56:36.510"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.514" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:56:36.514" starttime="20170920 15:56:36.511"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:56:36.515" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:56:36.515" starttime="20170920 15:56:36.514"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.515" starttime="20170920 15:56:36.510"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.515" starttime="20170920 15:56:36.493"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.519" starttime="20170920 15:56:36.515"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.522" level="INFO">${bts_band} = 41</msg>
<status status="PASS" endtime="20170920 15:56:36.522" starttime="20170920 15:56:36.519"></status>
</kw>
<msg timestamp="20170920 15:56:36.523" level="INFO">${attach_band} = 41</msg>
<status status="PASS" endtime="20170920 15:56:36.523" starttime="20170920 15:56:36.490"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.523" level="INFO">${attach_band} = 41</msg>
<status status="PASS" endtime="20170920 15:56:36.523" starttime="20170920 15:56:36.523"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.525" starttime="20170920 15:56:36.524"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:56:36.525" level="INFO">${offset} = 1469</msg>
<status status="PASS" endtime="20170920 15:56:36.525" starttime="20170920 15:56:36.525"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:56:36.531" level="INFO">${freq} = 26250.0</msg>
<status status="PASS" endtime="20170920 15:56:36.531" starttime="20170920 15:56:36.526"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:56:36.531" level="INFO">${fq} = 26250</msg>
<status status="PASS" endtime="20170920 15:56:36.531" starttime="20170920 15:56:36.531"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:56:36.532" level="INFO">${freqency} = 26250</msg>
<status status="PASS" endtime="20170920 15:56:36.532" starttime="20170920 15:56:36.532"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.532" starttime="20170920 15:56:36.532"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.533" starttime="20170920 15:56:36.488"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6512/CARRIER_GROUP_L-1: {u'fcnULs': [42490L], u'fcnDLs': [42490L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6512/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:56:36.533" level="INFO">${index.earfcn} = 42490</msg>
<status status="PASS" endtime="20170920 15:56:36.533" starttime="20170920 15:56:36.533"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.534" starttime="20170920 15:56:36.534"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:56:36.535" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.537" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:56:36.537" starttime="20170920 15:56:36.535"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:56:36.538" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.538" starttime="20170920 15:56:36.537"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.539" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.540" starttime="20170920 15:56:36.538"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.544" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.544" starttime="20170920 15:56:36.540"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.545" starttime="20170920 15:56:36.544"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.545" starttime="20170920 15:56:36.538"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.546" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.546" starttime="20170920 15:56:36.545"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.551" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.551" starttime="20170920 15:56:36.546"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.552" starttime="20170920 15:56:36.551"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.552" starttime="20170920 15:56:36.545"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.552" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.553" starttime="20170920 15:56:36.552"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.556" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.556" starttime="20170920 15:56:36.553"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.557" starttime="20170920 15:56:36.556"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.557" starttime="20170920 15:56:36.552"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.558" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.558" starttime="20170920 15:56:36.557"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.563" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.563" starttime="20170920 15:56:36.558"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.564" starttime="20170920 15:56:36.563"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.564" starttime="20170920 15:56:36.557"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.565" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.565" starttime="20170920 15:56:36.564"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.568" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:56:36.568" starttime="20170920 15:56:36.565"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:56:36.569" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:56:36.569" starttime="20170920 15:56:36.569"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.569" starttime="20170920 15:56:36.564"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.569" starttime="20170920 15:56:36.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.574" starttime="20170920 15:56:36.570"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.577" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.577" starttime="20170920 15:56:36.574"></status>
</kw>
<msg timestamp="20170920 15:56:36.578" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.578" starttime="20170920 15:56:36.534"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.578" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.578" starttime="20170920 15:56:36.578"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.579" starttime="20170920 15:56:36.579"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:56:36.580" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 15:56:36.580" starttime="20170920 15:56:36.579"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:56:36.584" level="INFO">${freq} = 34900.0</msg>
<status status="PASS" endtime="20170920 15:56:36.584" starttime="20170920 15:56:36.580"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:56:36.585" level="INFO">${fq} = 34900</msg>
<status status="PASS" endtime="20170920 15:56:36.585" starttime="20170920 15:56:36.585"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:56:36.586" level="INFO">${freqency} = 34900</msg>
<status status="PASS" endtime="20170920 15:56:36.586" starttime="20170920 15:56:36.585"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.586" starttime="20170920 15:56:36.586"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.586" starttime="20170920 15:56:36.533"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6513/CARRIER_GROUP_L-1: {u'fcnULs': [42690L], u'fcnDLs': [42690L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6513/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:56:36.587" level="INFO">${index.earfcn} = 42690</msg>
<status status="PASS" endtime="20170920 15:56:36.587" starttime="20170920 15:56:36.587"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.588" starttime="20170920 15:56:36.588"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:56:36.589" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.592" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:56:36.592" starttime="20170920 15:56:36.589"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:56:36.592" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.592" starttime="20170920 15:56:36.592"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.593" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.593" starttime="20170920 15:56:36.593"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.598" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.598" starttime="20170920 15:56:36.594"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.598" starttime="20170920 15:56:36.598"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.598" starttime="20170920 15:56:36.593"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.599" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.599" starttime="20170920 15:56:36.599"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.606" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.606" starttime="20170920 15:56:36.599"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.607" starttime="20170920 15:56:36.606"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.607" starttime="20170920 15:56:36.599"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.607" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.608" starttime="20170920 15:56:36.607"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.612" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.613" starttime="20170920 15:56:36.608"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.613" starttime="20170920 15:56:36.613"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.613" starttime="20170920 15:56:36.607"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.614" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.614" starttime="20170920 15:56:36.614"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.618" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.619" starttime="20170920 15:56:36.614"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.619" starttime="20170920 15:56:36.619"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.619" starttime="20170920 15:56:36.613"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.620" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.620" starttime="20170920 15:56:36.619"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.625" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:56:36.625" starttime="20170920 15:56:36.621"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:56:36.626" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:56:36.626" starttime="20170920 15:56:36.626"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.626" starttime="20170920 15:56:36.619"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.626" starttime="20170920 15:56:36.592"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.629" starttime="20170920 15:56:36.627"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.634" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.634" starttime="20170920 15:56:36.630"></status>
</kw>
<msg timestamp="20170920 15:56:36.634" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.634" starttime="20170920 15:56:36.588"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.635" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.635" starttime="20170920 15:56:36.635"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.636" starttime="20170920 15:56:36.635"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:56:36.637" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 15:56:36.637" starttime="20170920 15:56:36.636"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:56:36.640" level="INFO">${freq} = 35100.0</msg>
<status status="PASS" endtime="20170920 15:56:36.640" starttime="20170920 15:56:36.637"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:56:36.641" level="INFO">${fq} = 35100</msg>
<status status="PASS" endtime="20170920 15:56:36.641" starttime="20170920 15:56:36.640"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:56:36.641" level="INFO">${freqency} = 35100</msg>
<status status="PASS" endtime="20170920 15:56:36.641" starttime="20170920 15:56:36.641"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.643" starttime="20170920 15:56:36.642"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.643" starttime="20170920 15:56:36.587"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6514/CARRIER_GROUP_L-1: {u'fcnULs': [42490L], u'fcnDLs': [42490L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6514/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:56:36.644" level="INFO">${index.earfcn} = 42490</msg>
<status status="PASS" endtime="20170920 15:56:36.644" starttime="20170920 15:56:36.644"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.645" starttime="20170920 15:56:36.645"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:56:36.646" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.648" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:56:36.648" starttime="20170920 15:56:36.646"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:56:36.649" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.649" starttime="20170920 15:56:36.649"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.653" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.653" starttime="20170920 15:56:36.651"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.657" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.657" starttime="20170920 15:56:36.654"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.658" starttime="20170920 15:56:36.658"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.658" starttime="20170920 15:56:36.650"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.659" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.659" starttime="20170920 15:56:36.658"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.664" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.664" starttime="20170920 15:56:36.659"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.665" starttime="20170920 15:56:36.664"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.665" starttime="20170920 15:56:36.658"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.666" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.666" starttime="20170920 15:56:36.665"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.669" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.669" starttime="20170920 15:56:36.666"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.670" starttime="20170920 15:56:36.670"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.670" starttime="20170920 15:56:36.665"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.671" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.671" starttime="20170920 15:56:36.670"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.676" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.676" starttime="20170920 15:56:36.671"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.677" starttime="20170920 15:56:36.676"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.677" starttime="20170920 15:56:36.670"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.677" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.678" starttime="20170920 15:56:36.677"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.681" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:56:36.681" starttime="20170920 15:56:36.678"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:56:36.682" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:56:36.682" starttime="20170920 15:56:36.682"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.682" starttime="20170920 15:56:36.677"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.682" starttime="20170920 15:56:36.649"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.687" starttime="20170920 15:56:36.684"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.690" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.690" starttime="20170920 15:56:36.687"></status>
</kw>
<msg timestamp="20170920 15:56:36.690" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.690" starttime="20170920 15:56:36.645"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.691" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.691" starttime="20170920 15:56:36.690"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.691" starttime="20170920 15:56:36.691"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:56:36.692" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 15:56:36.692" starttime="20170920 15:56:36.692"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:56:36.697" level="INFO">${freq} = 34900.0</msg>
<status status="PASS" endtime="20170920 15:56:36.697" starttime="20170920 15:56:36.692"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:56:36.698" level="INFO">${fq} = 34900</msg>
<status status="PASS" endtime="20170920 15:56:36.698" starttime="20170920 15:56:36.697"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:56:36.698" level="INFO">${freqency} = 34900</msg>
<status status="PASS" endtime="20170920 15:56:36.698" starttime="20170920 15:56:36.698"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.699" starttime="20170920 15:56:36.699"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.699" starttime="20170920 15:56:36.644"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6515/CARRIER_GROUP_L-1: {u'fcnULs': [42690L], u'fcnDLs': [42690L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6515/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:56:36.700" level="INFO">${index.earfcn} = 42690</msg>
<status status="PASS" endtime="20170920 15:56:36.700" starttime="20170920 15:56:36.699"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.701" starttime="20170920 15:56:36.700"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:56:36.702" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.704" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:56:36.704" starttime="20170920 15:56:36.701"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:56:36.704" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.704" starttime="20170920 15:56:36.704"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.706" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.706" starttime="20170920 15:56:36.705"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.709" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.709" starttime="20170920 15:56:36.706"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.710" starttime="20170920 15:56:36.710"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.710" starttime="20170920 15:56:36.705"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.711" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.711" starttime="20170920 15:56:36.710"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.715" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.715" starttime="20170920 15:56:36.711"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.716" starttime="20170920 15:56:36.716"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.716" starttime="20170920 15:56:36.710"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.717" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.717" starttime="20170920 15:56:36.716"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.720" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.720" starttime="20170920 15:56:36.717"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.721" starttime="20170920 15:56:36.721"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.721" starttime="20170920 15:56:36.716"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.722" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.722" starttime="20170920 15:56:36.721"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.725" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:56:36.725" starttime="20170920 15:56:36.722"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.726" starttime="20170920 15:56:36.726"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.726" starttime="20170920 15:56:36.721"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:56:36.727" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 15:56:36.727" starttime="20170920 15:56:36.726"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:56:36.731" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:56:36.731" starttime="20170920 15:56:36.727"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:56:36.731" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:56:36.731" starttime="20170920 15:56:36.731"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.731" starttime="20170920 15:56:36.726"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.731" starttime="20170920 15:56:36.704"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.735" starttime="20170920 15:56:36.732"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.738" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.738" starttime="20170920 15:56:36.735"></status>
</kw>
<msg timestamp="20170920 15:56:36.739" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.739" starttime="20170920 15:56:36.701"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:56:36.739" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:56:36.739" starttime="20170920 15:56:36.739"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.740" starttime="20170920 15:56:36.740"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:56:36.740" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 15:56:36.740" starttime="20170920 15:56:36.740"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:56:36.744" level="INFO">${freq} = 35100.0</msg>
<status status="PASS" endtime="20170920 15:56:36.744" starttime="20170920 15:56:36.741"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:56:36.746" level="INFO">${fq} = 35100</msg>
<status status="PASS" endtime="20170920 15:56:36.746" starttime="20170920 15:56:36.745"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:56:36.746" level="INFO">${freqency} = 35100</msg>
<status status="PASS" endtime="20170920 15:56:36.746" starttime="20170920 15:56:36.746"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.747" starttime="20170920 15:56:36.747"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.747" starttime="20170920 15:56:36.699"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.747" starttime="20170920 15:56:36.418"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.747" starttime="20170920 15:56:35.437"></status>
</kw>
<msg timestamp="20170920 15:56:36.747" level="INFO">${earfcn_list2} = [u'40540', u'38100', u'40940', u'42490', u'42690', u'42490', u'42690']</msg>
<msg timestamp="20170920 15:56:36.747" level="INFO">${freqency_list2} = [u'25850', u'26050', u'26250', u'34900', u'35100', u'34900', u'35100']</msg>
<msg timestamp="20170920 15:56:36.747" level="INFO">${band_list2} = [u'41', u'38', u'41', u'42', u'42', u'42', u'42']</msg>
<status status="PASS" endtime="20170920 15:56:36.748" starttime="20170920 15:56:35.434"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${earfcn_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<assign>
<var>${earfcn_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.754" starttime="20170920 15:56:36.751"></status>
</kw>
<msg timestamp="20170920 15:56:36.755" level="INFO">${earfcn_list} = [u'40540', u'38100', u'40940', u'42490', u'42690', u'42490', u'42690']</msg>
<status status="PASS" endtime="20170920 15:56:36.755" starttime="20170920 15:56:36.748"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${freqency_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<assign>
<var>${freqency_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.761" starttime="20170920 15:56:36.758"></status>
</kw>
<msg timestamp="20170920 15:56:36.762" level="INFO">${freqency_list} = [u'25850', u'26050', u'26250', u'34900', u'35100', u'34900', u'35100']</msg>
<status status="PASS" endtime="20170920 15:56:36.762" starttime="20170920 15:56:36.755"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${band_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<assign>
<var>${band_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.769" starttime="20170920 15:56:36.766"></status>
</kw>
<msg timestamp="20170920 15:56:36.769" level="INFO">${band_list} = [u'41', u'38', u'41', u'42', u'42', u'42', u'42']</msg>
<status status="PASS" endtime="20170920 15:56:36.769" starttime="20170920 15:56:36.762"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${cell_index1}</var>
</assign>
<msg timestamp="20170920 15:56:36.769" level="INFO">${cell_index1} = 0</msg>
<status status="PASS" endtime="20170920 15:56:36.770" starttime="20170920 15:56:36.769"></status>
</kw>
<kw type="for" name="${cell_index2} IN [ @{cell_list} ]">
<kw type="foritem" name="${cell_index2} = 1">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Evaluate</arg>
<arg>${cell_index1}</arg>
<arg>ELSE</arg>
<arg>Evaluate</arg>
<arg>${cell_index2}-1</arg>
</arguments>
<assign>
<var>${cell_index}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${cell_index2}-1</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.778" starttime="20170920 15:56:36.774"></status>
</kw>
<msg timestamp="20170920 15:56:36.778" level="INFO">${cell_index} = 0</msg>
<status status="PASS" endtime="20170920 15:56:36.778" starttime="20170920 15:56:36.770"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='CPE'</arg>
<arg>Run Keyword If</arg>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.786" starttime="20170920 15:56:36.782"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:36.786" starttime="20170920 15:56:36.778"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='CPE'</arg>
<arg>CPE_Attach_SISO1_src</arg>
<arg>${earfcn_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${band_list[${cell_index}]}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:36.789" starttime="20170920 15:56:36.786"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='TM500'</arg>
<arg>TM500_Attach_SISO1_src</arg>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="TM500_Attach_SISO1_src" library="SISO1 Resource">
<arguments>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="Tm500 Setup" library="tdd_ev_robotws">
<doc>tm500 setup.</doc>
<msg timestamp="20170920 15:56:37.124" level="INFO">[robot_func.py@29] Can't get variable '${TM500_PC_CONNECTION}' ! details: 'Variable '${TM500_PC_CONNECTION}' not found.'</msg>
<msg timestamp="20170920 15:56:37.124" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170920 15:56:37.124" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170920 15:56:37.124" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170920 15:56:37.124" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170920 15:56:37.124" level="WARN">[telnet_common.py@394] Telnet: Eof detected</msg>
<msg timestamp="20170920 15:56:37.124" level="WARN">[telnet_common.py@424] Telnet: &lt;&lt;expect 2017-09-20 15:56:37 no any pattern matched</msg>
<msg timestamp="20170920 15:56:37.124" level="WARN">[telnet_common.py@235] Get Response:  
Workstation allows only 10 simultaneous telnet connections.

Telnet Server has closed the connection</msg>
<msg timestamp="20170920 15:56:37.129" level="FAIL">No match found for prompt "'[\\;\[\.\-a-zA-Z0-9\s]+@.*[$&gt;#]{1}\s{0,1}$', '[CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$' or '^[a-zA-Z0-9@_\-\(\)\.\s]*[$#&gt;]{1}\s{0,1}$'" in 90.0sec, detail info: " 
Workstation allows only 10 simultaneous telnet connections.

Telnet Server has closed the connection
"</msg>
<status status="FAIL" endtime="20170920 15:56:37.129" starttime="20170920 15:56:36.794"></status>
</kw>
<status status="FAIL" endtime="20170920 15:56:37.129" starttime="20170920 15:56:36.793"></status>
</kw>
<status status="FAIL" endtime="20170920 15:56:37.129" starttime="20170920 15:56:36.789"></status>
</kw>
<status status="FAIL" endtime="20170920 15:56:37.129" starttime="20170920 15:56:36.770"></status>
</kw>
<status status="FAIL" endtime="20170920 15:56:37.130" starttime="20170920 15:56:36.770"></status>
</kw>
<status status="FAIL" endtime="20170920 15:56:37.130" starttime="20170920 15:56:35.425"></status>
</kw>
<status status="FAIL" endtime="20170920 15:56:37.130" starttime="20170920 15:55:49.089"></status>
</kw>
<status status="FAIL" endtime="20170920 15:56:37.130" starttime="20170920 15:55:49.089"></status>
</kw>
<status status="FAIL" endtime="20170920 15:56:37.130" starttime="20170920 15:55:49.088"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:56:37.135" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x058B0350&gt;.</msg>
<status status="PASS" endtime="20170920 15:56:37.136" starttime="20170920 15:56:37.131"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170920 15:56:37.922" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170920 15:56:37.922" starttime="20170920 15:56:37.136"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170920 15:56:37.925" starttime="20170920 15:56:37.923"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:37.926" starttime="20170920 15:56:37.925"></status>
</kw>
<msg timestamp="20170920 15:56:37.926" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 15:56:37.926" starttime="20170920 15:56:37.925"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170920 15:56:37.943" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on\bts_attach_0' succeed .</msg>
<status status="PASS" endtime="20170920 15:56:37.943" starttime="20170920 15:56:37.930"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:37.943" starttime="20170920 15:56:37.926"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:37.943" starttime="20170920 15:56:37.926"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170920 15:56:38.675" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170920 15:56:38.675" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 15:56:38.676" starttime="20170920 15:56:37.948"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:38.676" starttime="20170920 15:56:37.944"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:38.676" starttime="20170920 15:56:37.944"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:38.677" starttime="20170920 15:56:38.677"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:38.677" starttime="20170920 15:56:38.677"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:38.680" starttime="20170920 15:56:38.679"></status>
</kw>
<msg timestamp="20170920 15:56:38.680" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170920 15:56:38.680" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170920 15:56:38.680" starttime="20170920 15:56:38.679"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:38.683" starttime="20170920 15:56:38.680"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170920 15:56:42.711" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170920 15:56:42.711" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170920 15:56:42.711" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170920 15:56:42.711" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170920 15:56:42.711" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170920 15:56:42.711" starttime="20170920 15:56:38.683"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:42.711" starttime="20170920 15:56:38.678"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:42.713" starttime="20170920 15:56:42.712"></status>
</kw>
<msg timestamp="20170920 15:56:42.713" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170920 15:56:42.713" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170920 15:56:42.713" starttime="20170920 15:56:42.712"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:42.716" starttime="20170920 15:56:42.713"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170920 15:56:46.743" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170920 15:56:46.743" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170920 15:56:46.743" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170920 15:56:46.743" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170920 15:56:46.743" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170920 15:56:46.744" starttime="20170920 15:56:42.716"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:46.744" starttime="20170920 15:56:42.711"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:46.746" starttime="20170920 15:56:46.745"></status>
</kw>
<msg timestamp="20170920 15:56:46.746" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170920 15:56:46.746" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170920 15:56:46.746" starttime="20170920 15:56:46.745"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:46.749" starttime="20170920 15:56:46.746"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170920 15:56:50.776" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170920 15:56:50.776" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170920 15:56:50.776" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170920 15:56:50.776" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170920 15:56:50.777" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170920 15:56:50.777" starttime="20170920 15:56:46.749"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:50.777" starttime="20170920 15:56:46.744"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170920 15:56:50.785" level="FAIL">Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170920 15:56:50.785" starttime="20170920 15:56:50.778"></status>
</kw>
<msg timestamp="20170920 15:56:50.785" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170920 15:56:50.785" level="INFO">${ret2} = Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170920 15:56:50.785" starttime="20170920 15:56:50.777"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170920 15:56:50.788" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:56:50.788" starttime="20170920 15:56:50.785"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:50.788" starttime="20170920 15:56:50.777"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:50.788" starttime="20170920 15:56:38.678"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:50.788" starttime="20170920 15:56:38.678"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170920 15:56:55.796" level="INFO">[tm500.py@437] Release TM500 Resource:
sent -&gt; "release"
received &lt;- "10.56.6.32"</msg>
<status status="PASS" endtime="20170920 15:56:55.796" starttime="20170920 15:56:50.789"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:55.796" starttime="20170920 15:56:55.796"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:55.797" starttime="20170920 15:56:38.676"></status>
</kw>
<status status="PASS" endtime="20170920 15:56:55.797" starttime="20170920 15:56:38.676"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170920 15:56:55.803" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170920 15:56:55.803" starttime="20170920 15:56:55.797"></status>
</kw>
<msg timestamp="20170920 15:56:55.803" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170920 15:56:55.803" starttime="20170920 15:56:55.797"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:56:55.807" starttime="20170920 15:56:55.804"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170920 15:57:09.626" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170920 15:57:10.302" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170920 15:57:10.302" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 15:57:10.302" starttime="20170920 15:56:55.807"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170920 15:57:12.402" level="INFO">['fatal'] ['fatal']
['fatal'] ['fatal']</msg>
<msg timestamp="20170920 15:57:12.402" level="INFO">[file_control.py@109] *HTML*&lt;a href = "D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on\udplog_20170920154944.log"&gt;fail log&lt;/a&gt;
Find '['fatal']' in 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_power_off_then_on_20170920154623\FZHR_Operational_RF_power_off_then_on\udplog_20170920154944.log'
write successfully</msg>
<status status="PASS" endtime="20170920 15:57:12.402" starttime="20170920 15:57:10.302"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170920 15:57:12.404" level="FAIL">'FZHR_Operational_RF_power_off_then_on' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170920 15:57:12.404" starttime="20170920 15:57:12.403"></status>
</kw>
<msg timestamp="20170920 15:57:12.404" level="INFO">${return1} = ('FAIL', u"'FZHR_Operational_RF_power_off_then_on' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170920 15:57:12.404" starttime="20170920 15:57:12.403"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:12.408" starttime="20170920 15:57:12.405"></status>
</kw>
<msg timestamp="20170920 15:57:12.408" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 15:57:12.408" starttime="20170920 15:57:12.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:12.411" starttime="20170920 15:57:12.408"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:12.411" starttime="20170920 15:57:12.408"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:12.412" starttime="20170920 15:57:12.412"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:12.412" starttime="20170920 15:57:12.412"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:12.413" starttime="20170920 15:57:12.413"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170920 15:57:12.414" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170920 15:57:12.414" starttime="20170920 15:57:12.413"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:12.418" starttime="20170920 15:57:12.415"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:12.418" starttime="20170920 15:57:12.414"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:12.418" starttime="20170920 15:57:12.414"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:12.422" starttime="20170920 15:57:12.419"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:12.422" starttime="20170920 15:57:12.418"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:12.422" starttime="20170920 15:57:12.418"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:12.426" starttime="20170920 15:57:12.423"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:12.426" starttime="20170920 15:57:12.423"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:12.426" starttime="20170920 15:57:12.422"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170920 15:57:33.565" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[ssh_common.py@203] root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05B050F8&gt;</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05B050F8&gt;</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:57:11 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x059E5BE8&gt;</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x059E5BE8&gt;</msg>
<msg timestamp="20170920 15:57:33.565" level="INFO">${version} = TL17A_ENB_0000_000337_000000</msg>
<status status="PASS" endtime="20170920 15:57:33.565" starttime="20170920 15:57:12.426"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:33.570" starttime="20170920 15:57:33.567"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:33.570" starttime="20170920 15:57:33.566"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:33.570" starttime="20170920 15:57:33.566"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170920 15:57:33.574" starttime="20170920 15:57:33.571"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:33.574" starttime="20170920 15:57:33.571"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:33.574" starttime="20170920 15:57:33.571"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:33.575" starttime="20170920 15:57:12.413"></status>
</kw>
<status status="PASS" endtime="20170920 15:57:33.575" starttime="20170920 15:56:37.131"></status>
</kw>
<tags>
<tag>owner-shaocheng.chen@nokia.com</tag>
<tag>QC_773299</tag>
</tags>
<status status="FAIL" endtime="20170920 15:57:33.575" critical="yes" starttime="20170920 15:48:05.118">No match found for prompt "'[\\;\[\.\-a-zA-Z0-9\s]+@.*[$&gt;#]{1}\s{0,1}$', '[CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$' or '^[a-zA-Z0-9@_\-\(\)\.\s]*[$#&gt;]{1}\s{0,1}$'" in 90.0sec, detail info: " 
Workstation allows only 10 simultaneous telnet connections.

Telnet Server has closed the connection
"</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170920 15:57:33.594" starttime="20170920 15:46:21.875"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-shaocheng.chen@nokia.com</stat>
<stat fail="1" pass="0">QC_773299</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHR Operational RF power off then on" pass="0">FZHR Operational RF power off then on</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170920 15:46:22.346" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170920 15:56:36.414" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.421" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.462" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.491" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.535" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.589" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.646" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:36.702" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:56:37.124" level="WARN">[telnet_common.py@394] Telnet: Eof detected</msg>
<msg timestamp="20170920 15:56:37.124" level="WARN">[telnet_common.py@424] Telnet: &lt;&lt;expect 2017-09-20 15:56:37 no any pattern matched</msg>
<msg timestamp="20170920 15:56:37.124" level="WARN">[telnet_common.py@235] Get Response:  
Workstation allows only 10 simultaneous telnet connections.

Telnet Server has closed the connection</msg>
<msg timestamp="20170920 15:57:09.626" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
