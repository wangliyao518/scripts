<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171031 19:46:06.820" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\TL17A\SISO1\CPRI_Single_FZHR\FZHR_Operational_RF_power_off_then_on\FZHR_Operational_RF_power_off_then_on.html" id="s1" name="FZHR Operational RF power off then on">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20171031172853//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171031 19:34:59.232" level="INFO">${timestamp} = 20171031193459</msg>
<status status="PASS" endtime="20171031 19:34:59.232" starttime="20171031 19:34:59.187"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20171031 19:34:59.233" level="INFO">${FILE_NAME} = FZHR Operational RF power off then on</msg>
<status status="PASS" endtime="20171031 19:34:59.233" starttime="20171031 19:34:59.233"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171031 19:34:59.234" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR Operational RF power off then on_20171031193459</msg>
<status status="PASS" endtime="20171031 19:34:59.234" starttime="20171031 19:34:59.234"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171031 19:34:59.235" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459</msg>
<status status="PASS" endtime="20171031 19:34:59.235" starttime="20171031 19:34:59.235"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171031 19:34:59.236" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459</msg>
<status status="PASS" endtime="20171031 19:34:59.236" starttime="20171031 19:34:59.235"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171031 19:34:59.237" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459"&gt;D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171031 19:34:59.237" starttime="20171031 19:34:59.236"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171031 19:34:59.237" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459</msg>
<status status="PASS" endtime="20171031 19:34:59.237" starttime="20171031 19:34:59.237"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20171031 19:34:59.241" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20171031 19:34:59.241" starttime="20171031 19:34:59.238"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20171031 19:34:59.261" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20171031 19:34:59.261" starttime="20171031 19:34:59.255"></status>
</kw>
<msg timestamp="20171031 19:34:59.262" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20171031 19:34:59.262" starttime="20171031 19:34:59.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:34:59.263" starttime="20171031 19:34:59.262"></status>
</kw>
<msg timestamp="20171031 19:34:59.263" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171031 19:34:59.263" starttime="20171031 19:34:59.262"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:34:59.270" starttime="20171031 19:34:59.266"></status>
</kw>
<msg timestamp="20171031 19:34:59.270" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459</msg>
<status status="PASS" endtime="20171031 19:34:59.270" starttime="20171031 19:34:59.263"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171031 19:34:59.274" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459</msg>
<status status="PASS" endtime="20171031 19:34:59.274" starttime="20171031 19:34:59.270"></status>
</kw>
<status status="PASS" endtime="20171031 19:34:59.274" starttime="20171031 19:34:59.254"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20171031 19:34:59.312" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171031 19:34:59.312" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171031 19:34:59.312" starttime="20171031 19:34:59.275"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:34:59.313" starttime="20171031 19:34:59.313"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20171031 19:34:59.314" starttime="20171031 19:34:59.313"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:34:59.314" starttime="20171031 19:34:59.314"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20171031 19:34:59.314" starttime="20171031 19:34:59.314"></status>
</kw>
<status status="PASS" endtime="20171031 19:34:59.315" starttime="20171031 19:34:59.275"></status>
</kw>
<status status="PASS" endtime="20171031 19:34:59.315" starttime="20171031 19:34:59.274"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20171031 19:35:54.012" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171031 19:35:54.059" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171031 19:36:05.229" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171031 19:36:05.260" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171031 19:36:05.775" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171031 19:36:05.821" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:35:16 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0545C9E0&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0545C9E0&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:35:34 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05445508&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000475_000000.xml
root@fctj-0a:/ffs/fs1 &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05445508&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:35:45 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05523B98&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05523B98&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:35:56 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05523CB0&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000475_000000.xml
root@fctj-0a:/ffs/fs1 &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05523CB0&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_resource.py@1238] 
 ****Current BTS version is 'TL17A_ENB_0000_000475_000000' *****</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_resource.py@1268] activeBuildVersion=TL17A_ENB_0000_000475_000000</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:36:07 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05523F80&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05523F80&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\SiteConf.xml' is ok. local file size is 142k</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:36:28 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05306D78&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05306D78&gt;</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_resource.py@500] The real falsh folder is /ffs/fs1</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[sftp_control.py@176] /ffs/fs1/FileDirectory.xml</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs1/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FileDirectory_20171031193554.xml' is ok. local file size is 36k</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[sftp_control.py@176] /ffs/fs1/config/SCFC_160.xml</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs1/config/SCFC_160.xml' to 'D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\SCFC_160.xml' is ok. local file size is 155k</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_resource.py@1238] 
 ****Current bbu type is 'ASIA' *****</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_resource.py@1363] HW_BBU_TYPE=ASIA</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_resource.py@1238] 
 ****Current rru type is 'FZHR' *****</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_resource.py@1366] HW_RRU_TYPE=FZHR</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_resource.py@1238] 
 ****Current HW type is '#2720-2CL1-T3-L-14' *****</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[enb_resource.py@1369] BTS_HW_TYPE=#2720-2CL1-T3-L-14</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ping_control.py@189] 
Pinging 192.168.200.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.200.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171031 19:36:33.511" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20171031 19:36:33.511" starttime="20171031 19:34:59.315"></status>
</kw>
<status status="PASS" endtime="20171031 19:36:33.511" starttime="20171031 19:34:59.315"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20171031 19:36:33.511" starttime="20171031 19:36:33.511"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171031 19:36:33.511" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171031 19:36:33.511" starttime="20171031 19:36:33.511"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20171031 19:36:33.511" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20171031 19:36:33.511" starttime="20171031 19:36:33.511"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20171031 19:36:33.511" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20171031 19:36:33.511" starttime="20171031 19:36:33.511"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20171031 19:36:33.527" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20171031 19:36:33.527" starttime="20171031 19:36:33.511"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20171031 19:36:35.009" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20171031 19:36:35.009" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20171031 19:36:35.009" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20171031 19:36:35.009" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20171031 19:36:35.009" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20171031 19:36:35.009" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0556EAD0&gt;</msg>
<status status="PASS" endtime="20171031 19:36:35.009" starttime="20171031 19:36:33.527"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171031 19:36:35.009" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0556EAD0&gt;</msg>
<status status="PASS" endtime="20171031 19:36:35.009" starttime="20171031 19:36:35.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20171031 19:36:36.273" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0556EAD0&gt;</msg>
<msg timestamp="20171031 19:36:36.273" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20171031 19:36:36.273" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20171031 19:36:36.273" starttime="20171031 19:36:35.009"></status>
</kw>
<status status="PASS" endtime="20171031 19:36:36.273" starttime="20171031 19:36:35.009"></status>
</kw>
<status status="PASS" endtime="20171031 19:36:36.273" starttime="20171031 19:36:33.511"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171031 19:36:36.273" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0556EAD0&gt;.</msg>
<status status="PASS" endtime="20171031 19:36:36.273" starttime="20171031 19:36:36.273"></status>
</kw>
<status status="PASS" endtime="20171031 19:36:36.273" starttime="20171031 19:34:59.186"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:46:03.294" starttime="20171031 19:46:03.294"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20171031 19:46:03.310" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20171031 19:46:03.310" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0556EAD0&gt;</msg>
<status status="PASS" endtime="20171031 19:46:03.310" starttime="20171031 19:46:03.294"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${zip_pass_log}</arg>
</arguments>
<assign>
<var>${para_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${zip_pass_log}</arg>
</arguments>
<msg timestamp="20171031 19:46:03.310" level="FAIL">Variable ${zip_pass_log} does not exist.</msg>
<status status="FAIL" endtime="20171031 19:46:03.310" starttime="20171031 19:46:03.310"></status>
</kw>
<msg timestamp="20171031 19:46:03.310" level="INFO">${para_exist} = ('FAIL', u'Variable ${zip_pass_log} does not exist.')</msg>
<status status="PASS" endtime="20171031 19:46:03.310" starttime="20171031 19:46:03.310"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS' == '${para_exist[0]}'</arg>
<arg>${zip_pass_log}</arg>
<arg>${True}</arg>
</arguments>
<assign>
<var>${zip_log}</var>
</assign>
<msg timestamp="20171031 19:46:03.310" level="INFO">${zip_log} = True</msg>
<status status="PASS" endtime="20171031 19:46:03.310" starttime="20171031 19:46:03.310"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20171031 19:46:03.310" starttime="20171031 19:46:03.310"></status>
</kw>
<msg timestamp="20171031 19:46:03.310" level="INFO">${status} = PASS</msg>
<msg timestamp="20171031 19:46:03.310" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20171031 19:46:03.310" starttime="20171031 19:46:03.310"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:46:03.310" starttime="20171031 19:46:03.310"></status>
</kw>
<status status="PASS" endtime="20171031 19:46:03.310" starttime="20171031 19:46:03.310"></status>
</kw>
<status status="PASS" endtime="20171031 19:46:03.310" starttime="20171031 19:46:03.294"></status>
</kw>
<test id="s1-t1" name="FZHR_Operational_RF_power_off_then_on">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20171031172853//ev_logs//D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171031 19:36:36.288" level="INFO">${timestamp} = 20171031193636</msg>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171031 19:36:36.288" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171031 19:36:36.288" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171031 19:36:36.288" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171031 19:36:36.288" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on"&gt;D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171031 19:36:36.288" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<msg timestamp="20171031 19:36:36.288" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<msg timestamp="20171031 19:36:36.288" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171031 19:36:36.288" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20171031 19:36:36.304" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20171031 19:36:36.304" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171031 19:36:36.304" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on</msg>
<status status="PASS" endtime="20171031 19:36:36.304" starttime="20171031 19:36:36.304"></status>
</kw>
<status status="PASS" endtime="20171031 19:36:36.304" starttime="20171031 19:36:36.288"></status>
</kw>
<status status="PASS" endtime="20171031 19:36:36.304" starttime="20171031 19:36:36.288"></status>
</kw>
<kw name="Reset_BTS_If_Ini_Earfcn_Unmatch" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${ini_earfcn_check}</arg>
</arguments>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20171031 19:36:44.606" level="INFO">[infomodel_control.py@156] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20171031 19:36:44.606" level="INFO">[infomodel_control.py@160] start infomodel succeed .</msg>
<msg timestamp="20171031 19:36:44.606" level="INFO">[infomodel_control.py@162] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20171031 19:36:44.606" starttime="20171031 19:36:36.304"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Query_Infomodel_With_Multi_Condition</arg>
<arg>${ini_earfcn_check}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Query_Infomodel_With_Multi_Condition" library="SISO1 Resource">
<arguments>
<arg>${ini_earfcn_check}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${condition_list}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20171031 19:36:44.606" level="INFO">Length is 1</msg>
<msg timestamp="20171031 19:36:44.606" level="INFO">${ret} = 1</msg>
<status status="PASS" endtime="20171031 19:36:44.606" starttime="20171031 19:36:44.606"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${ret} ]">
<kw type="foritem" name="${num} = 0">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20171031 19:36:54.668" level="FAIL">InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]=3' doesn't pass in timeout=10.0. Actual count = 7</msg>
<status status="FAIL" endtime="20171031 19:36:54.668" starttime="20171031 19:36:44.606"></status>
</kw>
<status status="FAIL" endtime="20171031 19:36:54.668" starttime="20171031 19:36:44.606"></status>
</kw>
<status status="FAIL" endtime="20171031 19:36:54.668" starttime="20171031 19:36:44.606"></status>
</kw>
<status status="FAIL" endtime="20171031 19:36:54.668" starttime="20171031 19:36:44.606"></status>
</kw>
<msg timestamp="20171031 19:36:54.668" level="INFO">${result} = FAIL</msg>
<msg timestamp="20171031 19:36:54.668" level="INFO">${ret} = InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]=3' doesn't pass in timeout=10.0. Actual count = 7</msg>
<status status="PASS" endtime="20171031 19:36:54.668" starttime="20171031 19:36:44.606"></status>
</kw>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20171031 19:36:54.949" level="INFO">Exit code: 1</msg>
<msg timestamp="20171031 19:36:54.949" level="INFO">STDOUT
</msg>
<msg timestamp="20171031 19:36:54.949" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:40046
</msg>
<msg timestamp="20171031 19:36:54.949" level="INFO">[infomodel_control.py@185] stop infomodel logger succeed .</msg>
<msg timestamp="20171031 19:36:54.949" level="INFO">[infomodel_control.py@197] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171031 19:36:54.949" starttime="20171031 19:36:54.668"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171031 19:36:54.949" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0556EAD0&gt;.</msg>
<status status="PASS" endtime="20171031 19:36:54.949" starttime="20171031 19:36:54.949"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20171031 19:36:59.208" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0556EAD0&gt;</msg>
<msg timestamp="20171031 19:36:59.208" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20171031 19:36:59.208" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20171031 19:36:59.208" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20171031 19:36:59.208" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20171031 19:36:59.208" starttime="20171031 19:36:54.949"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:36:59.223" starttime="20171031 19:36:59.208"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171031 19:36:59.223" starttime="20171031 19:36:59.223"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
</arguments>
<msg timestamp="20171031 19:37:53.012" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171031 19:37:53.043" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171031 19:38:04.229" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171031 19:38:04.681" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:36:40 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0559CF08&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0559CF08&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:37:34 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0559CEE0&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000475_000000.xml
root@fctj-0a:/ffs/fs1 &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0559CEE0&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[enb_resource.py@457] enable ssh and rdport failed.</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:37:45 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0556EEE0&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0556EEE0&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:37:55 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0556E288&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000475_000000.xml
root@fctj-0a:/ffs/fs1 &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0556E288&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:38:06 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054416E8&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054416E8&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[enb_resource.py@500] The real falsh folder is /ffs/fs1</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[sftp_control.py@176] /ffs/fs1/FileDirectory.xml</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs1/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on\FileDirectory_20171031193741.xml' is ok. local file size is 36k</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.129</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:38:27 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055794B8&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@258] Execute command: rm -rf /ffs/fs1/config/hwf.bin.gz</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@314] Get Response: rm -rf /ffs/fs1/config/hwf.bin.gz
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055794B8&gt;</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[sftp_control.py@61] sftp upload from 'D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on\scf_modified.xml' to '/ffs/fs1/config/SCFC_160.xml' is ok.</msg>
<msg timestamp="20171031 19:38:04.712" level="INFO">[sftp_control.py@176] /ffs/fs1/config/SCFC_160.xml</msg>
<status status="PASS" endtime="20171031 19:38:04.712" starttime="20171031 19:36:59.223"></status>
</kw>
<kw name="Restart Bts Until Onair" library="tdd_ev_robotws">
<doc>restart bts with powerbreaker and then wait until it is onair.</doc>
<arguments>
<arg>bts_powerbreak_port=${bts_powerbreak}</arg>
</arguments>
<msg timestamp="20171031 19:44:22.946" level="INFO">Exit code: 1</msg>
<msg timestamp="20171031 19:44:22.946" level="INFO">STDOUT
</msg>
<msg timestamp="20171031 19:44:22.946" level="INFO">STDERR
Started InfoModel server PYRO:TA_infomodel_server@localhost:35540
</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[facom.py@60] Power off port 3 succeed!</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[facom.py@60] Power off port 6 succeed!</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[facom.py@83] Power on port 3 succeed!</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[facom.py@83] Power on port 6 succeed!</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[tools_resource.py@39] restart port '['FACOM:10.56.7.128:3', 'FACOM:10.56.7.128:6']' with powerbreak succeed !</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[btslog_control.py@118] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[btslog_control.py@175] use ip is 192.168.255.126</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on" already exists, no need to create it again.</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[infomodel_control.py@156] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[infomodel_control.py@160] start infomodel succeed .</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[infomodel_control.py@162] start infomodel logger succeed .</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'UploadOngoing', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'UploadOngoing', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'UploadOngoing', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'UploadOngoing', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'commissioned', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@214] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@225] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': u'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': u'Idle', u'stateInfo': {u'blockingState': u'Unblocked', u'testingState': u'Disabled', u'usageState': u'Active', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'softwareState': u'Deployed', u'proceduralState': u'integrated to RAN', u'operationalState': u'Enabled', u'availabilityStatus': u'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will try another way</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will sleep and try again</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@228] infomodel check every cell onair succeed !</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[enb_resource.py@350] bts log check onair msg succeed !</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[infomodel_control.py@213] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on\im_20171031194422' succeed .</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[infomodel_control.py@185] stop infomodel logger succeed .</msg>
<msg timestamp="20171031 19:44:22.961" level="INFO">[infomodel_control.py@197] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171031 19:44:22.961" starttime="20171031 19:38:04.712"></status>
</kw>
<status status="PASS" endtime="20171031 19:44:22.961" starttime="20171031 19:36:54.949"></status>
</kw>
<status status="PASS" endtime="20171031 19:44:22.961" starttime="20171031 19:36:54.949"></status>
</kw>
<status status="PASS" endtime="20171031 19:44:22.961" starttime="20171031 19:36:36.304"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${total_times} ]">
<kw type="foritem" name="${num} = 0">
<kw name="_RF_Power_off_then_on_and_Attach">
<doc>Operation with RF</doc>
<arguments>
<arg>${num}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171031 19:44:22.961" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0556EAD0&gt;.</msg>
<status status="PASS" endtime="20171031 19:44:22.961" starttime="20171031 19:44:22.961"></status>
</kw>
<kw name="Restart Device With Powerbreaker" library="tdd_ev_robotws">
<doc>restart powerbreak_port device use powerbreaker.</doc>
<arguments>
<arg>${BTS_POWERBREAK_PORT[1]}</arg>
</arguments>
<msg timestamp="20171031 19:44:28.062" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20171031 19:44:28.062" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171031 19:44:28.062" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20171031 19:44:28.062" level="INFO">[facom.py@60] Power off port 6 succeed!</msg>
<msg timestamp="20171031 19:44:28.062" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20171031 19:44:28.062" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171031 19:44:28.062" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20171031 19:44:28.062" level="INFO">[facom.py@83] Power on port 6 succeed!</msg>
<msg timestamp="20171031 19:44:28.062" level="INFO">[tools_resource.py@39] restart port 'FACOM:10.56.7.128:6' with powerbreak succeed !</msg>
<status status="PASS" endtime="20171031 19:44:28.062" starttime="20171031 19:44:22.961"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>20 sec</arg>
</arguments>
<msg timestamp="20171031 19:44:48.062" level="INFO">Slept 20 seconds</msg>
<status status="PASS" endtime="20171031 19:44:48.062" starttime="20171031 19:44:28.062"></status>
</kw>
<kw name="Check Bts Until Onair" library="tdd_ev_robotws">
<doc>check bts until all cell is onair with infomodel, and have PBCH in udp log.</doc>
<arguments>
<arg>log_name=bts_power_reset_${num}</arg>
</arguments>
<msg timestamp="20171031 19:45:00.295" level="INFO">Exit code: 1</msg>
<msg timestamp="20171031 19:45:00.295" level="INFO">STDOUT
</msg>
<msg timestamp="20171031 19:45:00.295" level="INFO">STDERR
Started InfoModel server PYRO:TA_infomodel_server@localhost:41411
</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[btslog_control.py@118] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on" already exists, no need to create it again.</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[infomodel_control.py@156] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[infomodel_control.py@160] start infomodel succeed .</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[infomodel_control.py@162] start infomodel logger succeed .</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[enb_resource.py@185] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will try another way</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[enb_resource.py@202] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will sleep and try again</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[infomodel_control.py@326] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[enb_resource.py@228] infomodel check every cell onair succeed !</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[enb_resource.py@350] bts log check onair msg succeed !</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[infomodel_control.py@213] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on\im_20171031194459' succeed .</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[infomodel_control.py@185] stop infomodel logger succeed .</msg>
<msg timestamp="20171031 19:45:00.311" level="INFO">[infomodel_control.py@197] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171031 19:45:00.311" starttime="20171031 19:44:48.062"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<arguments>
<arg>bts_attach_${num}</arg>
</arguments>
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20171031 19:45:00.670" level="INFO">[btslog_control.py@118] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20171031 19:45:00.670" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20171031 19:45:00.670" starttime="20171031 19:45:00.311"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20171031 19:45:08.785" level="INFO">[infomodel_control.py@156] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20171031 19:45:08.785" level="INFO">[infomodel_control.py@160] start infomodel succeed .</msg>
<msg timestamp="20171031 19:45:08.785" level="INFO">[infomodel_control.py@162] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20171031 19:45:08.785" starttime="20171031 19:45:00.670"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20171031 19:45:08.785" level="INFO">${case_execute_log_name} = bts_attach_0</msg>
<status status="PASS" endtime="20171031 19:45:08.785" starttime="20171031 19:45:08.785"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:08.785" starttime="20171031 19:45:00.311"></status>
</kw>
<kw name="UE_Attach_SISO1" library="SISO1 Resource">
<doc>Example</doc>
<arguments>
<arg>1:2:3</arg>
</arguments>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${cell_id}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{cell_list}</var>
</assign>
<msg timestamp="20171031 19:45:08.800" level="INFO">@{cell_list} = [ 1 | 2 | 3 ]</msg>
<status status="PASS" endtime="20171031 19:45:08.800" starttime="20171031 19:45:08.800"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${cell_list}</arg>
</arguments>
<assign>
<var>${cell_list_length}</var>
</assign>
<msg timestamp="20171031 19:45:08.800" level="INFO">Length is 3</msg>
<msg timestamp="20171031 19:45:08.800" level="INFO">${cell_list_length} = 3</msg>
<status status="PASS" endtime="20171031 19:45:08.800" starttime="20171031 19:45:08.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Split String</arg>
<arg>${attach_earfcn}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${earfcn_list1}</var>
</assign>
<msg timestamp="20171031 19:45:08.800" level="INFO">${earfcn_list1} = None</msg>
<status status="PASS" endtime="20171031 19:45:08.800" starttime="20171031 19:45:08.800"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Change_Earfcn_To_Freqency</arg>
<arg>${earfcn_list1}</arg>
</arguments>
<assign>
<var>${freqency_list1}</var>
<var>${band_list1}</var>
</assign>
<msg timestamp="20171031 19:45:08.800" level="INFO">${freqency_list1} = None</msg>
<msg timestamp="20171031 19:45:08.800" level="INFO">${band_list1} = None</msg>
<status status="PASS" endtime="20171031 19:45:08.800" starttime="20171031 19:45:08.800"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Get_Earfcn_From_Infomodel</arg>
</arguments>
<assign>
<var>${earfcn_list2}</var>
<var>${freqency_list2}</var>
<var>${band_list2}</var>
</assign>
<kw name="Get_Earfcn_From_Infomodel" library="SISO1 Resource">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>get list /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-*/LNCEL_M-*</arg>
</arguments>
<assign>
<var>@{ret_earfcn}</var>
</assign>
<msg timestamp="20171031 19:45:09.830" level="INFO">[infomodel_control.py@326] query infomodel: 'get list /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-*/LNCEL_M-*' succeed .</msg>
<msg timestamp="20171031 19:45:09.830" level="INFO">@{ret_earfcn} = [ InfoModelObject /MRBTS-1/RAT-1/MCTRL-4/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-3/LNCEL_M-6514: {u'ulChBw': u'20MHz', u'dlChBw': u'20MHz', 'dist_name': u'/MRBTS-1/RAT-1/MCTRL-4/BBTOP_M-1/MRBTS_M-1/LNBTS...</msg>
<status status="PASS" endtime="20171031 19:45:09.830" starttime="20171031 19:45:08.816"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${ret_earfcn}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:09.830" starttime="20171031 19:45:09.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${earfcn_list}</var>
</assign>
<msg timestamp="20171031 19:45:09.830" level="INFO">${earfcn_list} = []</msg>
<status status="PASS" endtime="20171031 19:45:09.830" starttime="20171031 19:45:09.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${freqency_list}</var>
</assign>
<msg timestamp="20171031 19:45:09.830" level="INFO">${freqency_list} = []</msg>
<status status="PASS" endtime="20171031 19:45:09.830" starttime="20171031 19:45:09.830"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${band_list}</var>
</assign>
<msg timestamp="20171031 19:45:09.830" level="INFO">${band_list} = []</msg>
<status status="PASS" endtime="20171031 19:45:09.830" starttime="20171031 19:45:09.830"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_OFFSET}</arg>
</arguments>
<assign>
<var>${offset_dict}</var>
</assign>
<msg timestamp="20171031 19:45:09.845" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20171031 19:45:09.845" level="INFO">${offset_dict} = {u'38': u'1205', u'40': u'1565', u'39': u'1945', u'41': u'1469', u'42': u'759', u'43': u'759', u'37': u'1845', u'36': u'1765', u'35': u'1785', u'34': u'1610', u'33': u'1700'}</msg>
<status status="PASS" endtime="20171031 19:45:09.845" starttime="20171031 19:45:09.845"></status>
</kw>
<kw type="for" name="${index} IN [ @{ret_earfcn} ]">
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/MCTRL-1/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-1/LNCEL_M-1: {u'ulChBw': u'20MHz', u'dlChBw': u'20MHz', 'dist_name': u'/MRBTS-1/RAT-1/MCTRL-1/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.earfcnDl}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20171031 19:45:09.845" level="FAIL">Resolving variable '${index.earfcnDl}' failed: KeyError: 'earfcnDl'</msg>
<status status="FAIL" endtime="20171031 19:45:09.845" starttime="20171031 19:45:09.845"></status>
</kw>
<status status="FAIL" endtime="20171031 19:45:09.845" starttime="20171031 19:45:09.845"></status>
</kw>
<status status="FAIL" endtime="20171031 19:45:09.845" starttime="20171031 19:45:09.845"></status>
</kw>
<status status="FAIL" endtime="20171031 19:45:09.845" starttime="20171031 19:45:08.816"></status>
</kw>
<status status="FAIL" endtime="20171031 19:45:09.845" starttime="20171031 19:45:08.816"></status>
</kw>
<status status="FAIL" endtime="20171031 19:45:09.845" starttime="20171031 19:45:08.800"></status>
</kw>
<status status="FAIL" endtime="20171031 19:45:09.845" starttime="20171031 19:44:22.961"></status>
</kw>
<status status="FAIL" endtime="20171031 19:45:09.845" starttime="20171031 19:44:22.961"></status>
</kw>
<status status="FAIL" endtime="20171031 19:45:09.845" starttime="20171031 19:44:22.961"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171031 19:45:09.845" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0556EAD0&gt;.</msg>
<status status="PASS" endtime="20171031 19:45:09.845" starttime="20171031 19:45:09.845"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20171031 19:45:10.828" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20171031 19:45:10.828" starttime="20171031 19:45:09.845"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20171031 19:45:10.859" starttime="20171031 19:45:10.828"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:10.859" starttime="20171031 19:45:10.859"></status>
</kw>
<msg timestamp="20171031 19:45:10.859" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20171031 19:45:10.859" starttime="20171031 19:45:10.859"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20171031 19:45:10.875" level="INFO">[infomodel_control.py@213] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on\bts_attach_0' succeed .</msg>
<status status="PASS" endtime="20171031 19:45:10.875" starttime="20171031 19:45:10.859"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:10.875" starttime="20171031 19:45:10.859"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:10.875" starttime="20171031 19:45:10.859"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20171031 19:45:11.156" level="INFO">Exit code: 1</msg>
<msg timestamp="20171031 19:45:11.156" level="INFO">STDOUT
</msg>
<msg timestamp="20171031 19:45:11.156" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:38132
</msg>
<msg timestamp="20171031 19:45:11.156" level="INFO">[infomodel_control.py@185] stop infomodel logger succeed .</msg>
<msg timestamp="20171031 19:45:11.156" level="INFO">[infomodel_control.py@197] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171031 19:45:11.156" starttime="20171031 19:45:10.875"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:11.156" starttime="20171031 19:45:10.875"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:11.156" starttime="20171031 19:45:10.875"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:11.156" starttime="20171031 19:45:11.156"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:11.156" starttime="20171031 19:45:11.156"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20171031 19:45:11.171" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20171031 19:45:11.171" starttime="20171031 19:45:11.156"></status>
</kw>
<msg timestamp="20171031 19:45:11.171" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20171031 19:45:11.171" starttime="20171031 19:45:11.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:11.171" starttime="20171031 19:45:11.171"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:11.171" starttime="20171031 19:45:11.171"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20171031 19:45:11.171" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20171031 19:45:11.171" starttime="20171031 19:45:11.171"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:11.171" starttime="20171031 19:45:11.171"></status>
</kw>
<msg timestamp="20171031 19:45:11.171" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171031 19:45:11.171" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171031 19:45:11.171" starttime="20171031 19:45:11.171"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:11.187" starttime="20171031 19:45:11.171"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171031 19:45:15.259" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20171031 19:45:15.259" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171031 19:45:15.259" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171031 19:45:15.259" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171031 19:45:15.259" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171031 19:45:15.259" starttime="20171031 19:45:11.187"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:15.259" starttime="20171031 19:45:11.171"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:15.274" starttime="20171031 19:45:15.259"></status>
</kw>
<msg timestamp="20171031 19:45:15.274" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171031 19:45:15.274" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171031 19:45:15.274" starttime="20171031 19:45:15.259"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:15.274" starttime="20171031 19:45:15.274"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171031 19:45:19.330" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20171031 19:45:19.330" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171031 19:45:19.330" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171031 19:45:19.330" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171031 19:45:19.330" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171031 19:45:19.330" starttime="20171031 19:45:15.274"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:19.330" starttime="20171031 19:45:15.259"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:19.346" starttime="20171031 19:45:19.346"></status>
</kw>
<msg timestamp="20171031 19:45:19.346" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171031 19:45:19.346" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171031 19:45:19.346" starttime="20171031 19:45:19.330"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:19.346" starttime="20171031 19:45:19.346"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171031 19:45:23.402" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20171031 19:45:23.402" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20171031 19:45:23.402" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20171031 19:45:23.402" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20171031 19:45:23.402" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20171031 19:45:23.402" starttime="20171031 19:45:19.346"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:23.402" starttime="20171031 19:45:19.330"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20171031 19:45:23.417" level="FAIL">Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20171031 19:45:23.417" starttime="20171031 19:45:23.402"></status>
</kw>
<msg timestamp="20171031 19:45:23.417" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20171031 19:45:23.417" level="INFO">${ret2} = Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20171031 19:45:23.417" starttime="20171031 19:45:23.402"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20171031 19:45:23.417" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171031 19:45:23.417" starttime="20171031 19:45:23.417"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:23.417" starttime="20171031 19:45:23.402"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:23.417" starttime="20171031 19:45:11.171"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:23.417" starttime="20171031 19:45:11.171"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:23.417" starttime="20171031 19:45:23.417"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20171031 19:45:23.433" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20171031 19:45:23.433" starttime="20171031 19:45:23.417"></status>
</kw>
<status status="FAIL" endtime="20171031 19:45:23.433" starttime="20171031 19:45:11.156"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:23.433" starttime="20171031 19:45:11.156"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20171031 19:45:23.433" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20171031 19:45:23.433" starttime="20171031 19:45:23.433"></status>
</kw>
<msg timestamp="20171031 19:45:23.433" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20171031 19:45:23.433" starttime="20171031 19:45:23.433"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:23.433" starttime="20171031 19:45:23.433"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20171031 19:45:39.020" level="INFO">Exit code: 1</msg>
<msg timestamp="20171031 19:45:39.020" level="INFO">STDOUT
</msg>
<msg timestamp="20171031 19:45:39.020" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:37400
</msg>
<msg timestamp="20171031 19:45:39.613" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20171031 19:45:39.613" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171031 19:45:39.613" starttime="20171031 19:45:23.433"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20171031 19:45:42.031" level="INFO">['fatal'] ['fatal']
['fatal'] ['fatal']</msg>
<msg timestamp="20171031 19:45:42.031" level="INFO">[file_control.py@109] *HTML*&lt;a href = "D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on\udplog_20171031193809.log"&gt;fail log&lt;/a&gt;
Find '['fatal']' in 'D:\TA\TA_logs\TestLog_20171031172853\ev_logs\FZHR_Operational_RF_power_off_then_on_20171031193459\FZHR_Operational_RF_power_off_then_on\udplog_20171031193809.log'
write successfully</msg>
<status status="PASS" endtime="20171031 19:45:42.031" starttime="20171031 19:45:39.613"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20171031 19:45:42.031" level="FAIL">'FZHR_Operational_RF_power_off_then_on' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20171031 19:45:42.031" starttime="20171031 19:45:42.031"></status>
</kw>
<msg timestamp="20171031 19:45:42.031" level="INFO">${return1} = ('FAIL', u"'FZHR_Operational_RF_power_off_then_on' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20171031 19:45:42.031" starttime="20171031 19:45:42.031"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:42.031" starttime="20171031 19:45:42.031"></status>
</kw>
<msg timestamp="20171031 19:45:42.031" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20171031 19:45:42.031" starttime="20171031 19:45:42.031"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.031"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.031"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.047"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.047"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.047"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171031 19:45:42.047" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.047"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.047"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.047"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.047"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.047"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.047"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:42.047" starttime="20171031 19:45:42.047"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20171031 19:45:42.062" starttime="20171031 19:45:42.047"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:42.062" starttime="20171031 19:45:42.047"></status>
</kw>
<status status="PASS" endtime="20171031 19:45:42.062" starttime="20171031 19:45:42.047"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20171031 19:46:03.278" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[ssh_common.py@203] root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05830170&gt;</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05830170&gt;</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[ssh_common.py@203] Last login: Tue Oct 31 19:46:17 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056B5B98&gt;</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000475_000000.xml
root@fctj-0a:/ffs/fs1 &gt;</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056B5B98&gt;</msg>
<msg timestamp="20171031 19:46:03.278" level="INFO">${version} = TL17A_ENB_0000_000475_000000</msg>
<status status="PASS" endtime="20171031 19:46:03.278" starttime="20171031 19:45:42.062"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20171031 19:46:03.278" starttime="20171031 19:46:03.278"></status>
</kw>
<status status="PASS" endtime="20171031 19:46:03.278" starttime="20171031 19:46:03.278"></status>
</kw>
<status status="PASS" endtime="20171031 19:46:03.278" starttime="20171031 19:46:03.278"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20171031 19:46:03.278" starttime="20171031 19:46:03.278"></status>
</kw>
<status status="PASS" endtime="20171031 19:46:03.294" starttime="20171031 19:46:03.278"></status>
</kw>
<status status="PASS" endtime="20171031 19:46:03.294" starttime="20171031 19:46:03.278"></status>
</kw>
<status status="PASS" endtime="20171031 19:46:03.294" starttime="20171031 19:45:42.047"></status>
</kw>
<status status="PASS" endtime="20171031 19:46:03.294" starttime="20171031 19:45:09.845"></status>
</kw>
<tags>
<tag>owner-shaocheng.chen@nokia.com</tag>
<tag>QC_773299</tag>
</tags>
<status status="FAIL" endtime="20171031 19:46:03.294" critical="yes" starttime="20171031 19:36:36.273">Resolving variable '${index.earfcnDl}' failed: KeyError: 'earfcnDl'</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20171031 19:46:03.310" starttime="20171031 19:34:57.649"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-shaocheng.chen@nokia.com</stat>
<stat fail="1" pass="0">QC_773299</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHR Operational RF power off then on" pass="0">FZHR Operational RF power off then on</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171031 19:34:58.358" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20171031 19:45:09.845" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
</errors>
</robot>
