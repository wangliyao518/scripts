<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170920 15:46:19.747" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\TL17A\SISO1\CPRI_Single_FZHR\FZHR_Operational_RF_block_unblock\FZHR_Operational_RF_block_unblock.html" id="s1" name="FZHR Operational RF block unblock">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170920151904//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170920 15:32:25.387" level="INFO">${timestamp} = 20170920153225</msg>
<status status="PASS" endtime="20170920 15:32:25.387" starttime="20170920 15:32:25.346"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170920 15:32:25.388" level="INFO">${FILE_NAME} = FZHR Operational RF block unblock</msg>
<status status="PASS" endtime="20170920 15:32:25.388" starttime="20170920 15:32:25.387"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170920 15:32:25.389" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR Operational RF block unblock_20170920153225</msg>
<status status="PASS" endtime="20170920 15:32:25.389" starttime="20170920 15:32:25.388"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170920 15:32:25.390" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225</msg>
<status status="PASS" endtime="20170920 15:32:25.390" starttime="20170920 15:32:25.389"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170920 15:32:25.390" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225</msg>
<status status="PASS" endtime="20170920 15:32:25.390" starttime="20170920 15:32:25.390"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170920 15:32:25.391" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225"&gt;D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170920 15:32:25.392" starttime="20170920 15:32:25.391"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170920 15:32:25.392" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225</msg>
<status status="PASS" endtime="20170920 15:32:25.392" starttime="20170920 15:32:25.392"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170920 15:32:25.396" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170920 15:32:25.396" starttime="20170920 15:32:25.392"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170920 15:32:25.415" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170920 15:32:25.416" starttime="20170920 15:32:25.409"></status>
</kw>
<msg timestamp="20170920 15:32:25.416" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170920 15:32:25.416" starttime="20170920 15:32:25.409"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:32:25.417" starttime="20170920 15:32:25.416"></status>
</kw>
<msg timestamp="20170920 15:32:25.417" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 15:32:25.417" starttime="20170920 15:32:25.416"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:32:25.423" starttime="20170920 15:32:25.420"></status>
</kw>
<msg timestamp="20170920 15:32:25.423" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225</msg>
<status status="PASS" endtime="20170920 15:32:25.424" starttime="20170920 15:32:25.417"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170920 15:32:25.427" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225</msg>
<status status="PASS" endtime="20170920 15:32:25.427" starttime="20170920 15:32:25.424"></status>
</kw>
<status status="PASS" endtime="20170920 15:32:25.427" starttime="20170920 15:32:25.408"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170920 15:32:25.455" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 15:32:25.455" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170920 15:32:25.455" starttime="20170920 15:32:25.429"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:32:25.456" starttime="20170920 15:32:25.456"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170920 15:32:25.456" starttime="20170920 15:32:25.456"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:32:25.457" starttime="20170920 15:32:25.457"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170920 15:32:25.457" starttime="20170920 15:32:25.457"></status>
</kw>
<status status="PASS" endtime="20170920 15:32:25.457" starttime="20170920 15:32:25.428"></status>
</kw>
<status status="PASS" endtime="20170920 15:32:25.457" starttime="20170920 15:32:25.428"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170920 15:33:25.450" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 15:33:25.484" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 15:33:36.543" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 15:33:36.573" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 15:33:37.066" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 15:33:37.100" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:32:05 CST 2017 from 192.168.255.126 on pts/1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056671C0&gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056671C0&gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:32:24 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056688F0&gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056688F0&gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1505892767&amp;token=30add6d3a5ba0ad40271ede74f79fa5955516e54cdfd5b0d107c7585238f62a3&amp;frame=sshservice'</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1505892769&amp;token=849a2eb659c5c9254ea8f43fa7061f611775f08ae526d061b84f5e251e5d3a9f&amp;frame=RndPortsService'</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:32:34 CST 2017 from 192.168.255.126 on pts/1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05783AD0&gt;</msg>
<msg timestamp="20170920 15:34:04.961" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05783AD0&gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:32:51 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05783FA8&gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05783FA8&gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_resource.py@1141] 
 ****Current BTS version is 'TL17A_ENB_0000_000337_000000' *****</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_resource.py@1171] activeBuildVersion=TL17A_ENB_0000_000337_000000</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:33:02 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05788878&gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05788878&gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\SiteConf.xml' is ok. local file size is 133k</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:33:23 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0566A670&gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0566A670&gt;</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_resource.py@403] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FileDirectory_20170920153325.xml' is ok. local file size is 36k</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_143.xml</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/config/SCFC_143.xml' to 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\SCFC_143.xml' is ok. local file size is 125k</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_resource.py@1141] 
 ****Current bbu type is 'ASIA' *****</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_resource.py@1266] HW_BBU_TYPE=ASIA</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_resource.py@1141] 
 ****Current rru type is 'FZHR' *****</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_resource.py@1269] HW_RRU_TYPE=FZHR</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_resource.py@1141] 
 ****Current HW type is '#3044A-2CL1-T2-L-2' *****</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[enb_resource.py@1272] BTS_HW_TYPE=#3044A-2CL1-T2-L-2</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ping_control.py@189] 
Pinging 192.168.200.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.200.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:34:04.962" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170920 15:34:04.964" starttime="20170920 15:32:25.458"></status>
</kw>
<status status="PASS" endtime="20170920 15:34:04.964" starttime="20170920 15:32:25.458"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170920 15:34:04.965" starttime="20170920 15:34:04.965"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170920 15:34:04.966" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170920 15:34:04.966" starttime="20170920 15:34:04.966"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170920 15:34:04.970" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170920 15:34:04.970" starttime="20170920 15:34:04.967"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170920 15:34:04.973" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170920 15:34:04.973" starttime="20170920 15:34:04.970"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170920 15:34:04.976" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170920 15:34:04.976" starttime="20170920 15:34:04.973"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170920 15:34:06.409" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170920 15:34:06.409" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170920 15:34:06.409" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170920 15:34:06.409" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170920 15:34:06.409" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 15:34:06.409" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<status status="PASS" endtime="20170920 15:34:06.409" starttime="20170920 15:34:04.976"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:34:06.410" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<status status="PASS" endtime="20170920 15:34:06.410" starttime="20170920 15:34:06.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170920 15:34:07.609" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<msg timestamp="20170920 15:34:07.609" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170920 15:34:07.609" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170920 15:34:07.610" starttime="20170920 15:34:06.414"></status>
</kw>
<status status="PASS" endtime="20170920 15:34:07.610" starttime="20170920 15:34:06.411"></status>
</kw>
<status status="PASS" endtime="20170920 15:34:07.610" starttime="20170920 15:34:04.965"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:34:07.614" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;.</msg>
<status status="PASS" endtime="20170920 15:34:07.614" starttime="20170920 15:34:07.610"></status>
</kw>
<status status="PASS" endtime="20170920 15:34:07.615" starttime="20170920 15:32:25.346"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:16.975" starttime="20170920 15:46:16.972"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170920 15:46:16.983" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170920 15:46:16.983" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<status status="PASS" endtime="20170920 15:46:16.983" starttime="20170920 15:46:16.975"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${need_zip} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${need_zip} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:16.984" starttime="20170920 15:46:16.984"></status>
</kw>
<msg timestamp="20170920 15:46:16.985" level="INFO">${status} = PASS</msg>
<msg timestamp="20170920 15:46:16.985" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20170920 15:46:16.985" starttime="20170920 15:46:16.984"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${need_zip} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${need_zip} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:16.986" starttime="20170920 15:46:16.985"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:16.986" starttime="20170920 15:46:16.985"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:16.986" starttime="20170920 15:46:16.972"></status>
</kw>
<test id="s1-t1" name="FZQE_Operational_RF_Block_Unblock">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170920151904//ev_logs//D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170920 15:34:07.620" level="INFO">${timestamp} = 20170920153407</msg>
<status status="PASS" endtime="20170920 15:34:07.620" starttime="20170920 15:34:07.619"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170920 15:34:07.621" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170920 15:34:07.621" starttime="20170920 15:34:07.620"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170920 15:34:07.621" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170920 15:34:07.621" starttime="20170920 15:34:07.621"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170920 15:34:07.622" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170920 15:34:07.622" starttime="20170920 15:34:07.622"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170920 15:34:07.623" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock"&gt;D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170920 15:34:07.623" starttime="20170920 15:34:07.623"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170920 15:34:07.624" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170920 15:34:07.624" starttime="20170920 15:34:07.624"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170920 15:34:07.625" starttime="20170920 15:34:07.624"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:34:07.627" starttime="20170920 15:34:07.626"></status>
</kw>
<msg timestamp="20170920 15:34:07.627" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 15:34:07.627" starttime="20170920 15:34:07.626"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:34:07.628" starttime="20170920 15:34:07.627"></status>
</kw>
<msg timestamp="20170920 15:34:07.628" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 15:34:07.628" starttime="20170920 15:34:07.627"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170920 15:34:07.631" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170920 15:34:07.631" starttime="20170920 15:34:07.628"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170920 15:34:07.632" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock</msg>
<status status="PASS" endtime="20170920 15:34:07.632" starttime="20170920 15:34:07.632"></status>
</kw>
<status status="PASS" endtime="20170920 15:34:07.632" starttime="20170920 15:34:07.625"></status>
</kw>
<status status="PASS" endtime="20170920 15:34:07.632" starttime="20170920 15:34:07.619"></status>
</kw>
<kw name="Reset_BTS_If_Not_Onair" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:34:07.638" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;.</msg>
<status status="PASS" endtime="20170920 15:34:07.638" starttime="20170920 15:34:07.634"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170920 15:34:11.834" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<msg timestamp="20170920 15:34:11.834" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170920 15:34:11.834" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170920 15:34:11.834" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170920 15:34:11.835" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170920 15:34:11.835" starttime="20170920 15:34:07.638"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:34:11.839" starttime="20170920 15:34:11.835"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170920 15:34:11.843" starttime="20170920 15:34:11.839"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Check_BTS_Onair_Status</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Check_BTS_Onair_Status" library="SISO1 Resource">
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170920 15:34:21.109" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170920 15:34:21.109" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170920 15:34:21.109" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170920 15:34:21.109" starttime="20170920 15:34:11.844"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
<arg>timeout=5</arg>
</arguments>
<msg timestamp="20170920 15:34:26.178" level="FAIL">InfoModelQueryTimeoutException: Query: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' doesn't pass in timeout=5.0. Object does not match given predicates.
/MRBTS-1/RAT-1/MCTRL-1/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-1 : {u'routingState': 'Routable', u'bbCalcState': 'CalculationDone', u'rat': 'LTE', u'gainCalcState': 'NotCalculated', u'carriersState': 'UpdatedTiming', u'testingState': 'Disabled', u'delayCalculationState': 'CalculationDone', u'feedback': u'', u'stateInfo': {u'automaticBlockState': 'Unblocked', u'blockingState': 'Blocked', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'proceduralState': 'Validated', u'recoveryLockingState': 'Unlocked', u'operationalState': 'Disabled', u'availabilityStatus': 'Online'}, u'deploymentCalcState': 'CalculationDone', u'timeDomainState': 'HardwareFullyConfigured'}</msg>
<status status="FAIL" endtime="20170920 15:34:26.178" starttime="20170920 15:34:21.109"></status>
</kw>
<status status="FAIL" endtime="20170920 15:34:26.178" starttime="20170920 15:34:11.843"></status>
</kw>
<msg timestamp="20170920 15:34:26.178" level="INFO">${result} = FAIL</msg>
<msg timestamp="20170920 15:34:26.178" level="INFO">${ret} = InfoModelQueryTimeoutException: Query: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' doesn't pass in timeout=5.0. Object does not match...</msg>
<status status="PASS" endtime="20170920 15:34:26.178" starttime="20170920 15:34:11.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170920 15:34:26.884" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170920 15:34:26.884" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 15:34:26.884" starttime="20170920 15:34:26.182"></status>
</kw>
<status status="PASS" endtime="20170920 15:34:26.884" starttime="20170920 15:34:26.179"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:34:26.895" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;.</msg>
<status status="PASS" endtime="20170920 15:34:26.896" starttime="20170920 15:34:26.890"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170920 15:34:31.089" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<msg timestamp="20170920 15:34:31.089" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170920 15:34:31.089" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170920 15:34:31.089" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170920 15:34:31.089" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170920 15:34:31.089" starttime="20170920 15:34:26.896"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:34:31.093" starttime="20170920 15:34:31.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170920 15:34:31.096" starttime="20170920 15:34:31.093"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
</arguments>
<msg timestamp="20170920 15:35:29.877" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 15:35:29.914" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 15:35:41.028" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170920 15:35:41.483" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:33:34 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05788B20&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05788B20&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:34:30 CST 2017 from 10.69.80.114 on pts/1
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05788B20&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05788B20&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1505892891&amp;token=a6f292967afed19edc5caada3d494574940b779a1fb7cc5ffe495ae6d135383a&amp;frame=sshservice'</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1505892894&amp;token=e99bce7bb1e583f5468332ecc20d66cf75cb44861873a4788cbe746efc645073&amp;frame=RndPortsService'</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:34:40 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05783A30&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05783A30&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:34:56 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0566A7B0&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0566A7B0&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:35:06 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0566A7B0&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0566A7B0&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[enb_resource.py@403] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\FileDirectory_20170920153518.xml' is ok. local file size is 36k</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.129</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:35:27 CST 2017 from 192.168.255.126 on ssh
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057A0C10&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@258] Execute command: rm -rf /ffs/fs2/config/hwf.bin.gz</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@314] Get Response: rm -rf /ffs/fs2/config/hwf.bin.gz
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057A0C10&gt;</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[sftp_control.py@61] sftp upload from 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\scf_modified.xml' to '/ffs/fs2/config/SCFC_143.xml' is ok.</msg>
<msg timestamp="20170920 15:35:41.491" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_143.xml</msg>
<status status="PASS" endtime="20170920 15:35:41.493" starttime="20170920 15:34:31.096"></status>
</kw>
<kw name="Restart Bts Until Onair" library="tdd_ev_robotws">
<doc>restart bts with powerbreaker and then wait until it is onair.</doc>
<arguments>
<arg>bts_powerbreak_port=${bts_powerbreak}</arg>
</arguments>
<msg timestamp="20170920 15:41:51.270" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[facom.py@60] Power off port 3 succeed!</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[facom.py@60] Power off port 6 succeed!</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[facom.py@83] Power on port 3 succeed!</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[facom.py@83] Power on port 6 succeed!</msg>
<msg timestamp="20170920 15:41:51.270" level="INFO">[tools_resource.py@39] restart port '['FACOM:10.56.7.128:3', 'FACOM:10.56.7.128:6']' with powerbreak succeed !</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock" already exists, no need to create it again.</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, InfoModel objects not found.
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'UploadOngoing', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'commissioned', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.271" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-1/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 592L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will try another way</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will sleep and try again</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@225] infomodel check every cell onair succeed !</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[enb_resource.py@253] bts log check onair msg succeed !</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\im_20170920154150' succeed .</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170920 15:41:51.272" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 15:41:51.275" starttime="20170920 15:35:41.494"></status>
</kw>
<status status="PASS" endtime="20170920 15:41:51.276" starttime="20170920 15:34:26.890"></status>
</kw>
<status status="PASS" endtime="20170920 15:41:51.276" starttime="20170920 15:34:26.885"></status>
</kw>
<status status="PASS" endtime="20170920 15:41:51.276" starttime="20170920 15:34:07.633"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${total_times} ]">
<kw type="foritem" name="${num} = 0">
<kw name="_RF_Block_Unblock_and_Attach">
<doc>Operation with BTS</doc>
<arguments>
<arg>${num}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:41:51.281" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;.</msg>
<status status="PASS" endtime="20170920 15:41:51.282" starttime="20170920 15:41:51.277"></status>
</kw>
<kw name="Kill Sitemanager Process" library="tdd_ev_robotws">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20170920 15:41:55.150" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<msg timestamp="20170920 15:41:55.150" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170920 15:41:55.150" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\SISO1-632\ROOT\CIMV2:Win32_Process.Handle="6924"

Instance deletion successful.


C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 15:41:55.150" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<msg timestamp="20170920 15:41:55.150" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170920 15:41:55.150" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\SISO1-632\ROOT\CIMV2:Win32_Process.Handle="4332"

Instance deletion successful.


C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 15:41:55.150" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<msg timestamp="20170920 15:41:55.150" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170920 15:41:55.150" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170920 15:41:55.150" starttime="20170920 15:41:51.282"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20170920 15:41:55.156" starttime="20170920 15:41:55.156"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20170920 15:41:55.159" starttime="20170920 15:41:55.156"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170920 15:41:55.160" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\TA\\TA_logs\\TestLog_20170920151904\\ev_logs\\FZHR_Operational_RF_block_unblock_20170920153225\\FZQE_Operational_RF_Bloc...</msg>
<status status="PASS" endtime="20170920 15:41:55.160" starttime="20170920 15:41:55.159"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:41:55.160" starttime="20170920 15:41:55.160"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170920 15:42:47.061" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\GUILog\qtp_log20170920154155\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20170920 15:42:47.062" starttime="20170920 15:41:55.161"></status>
</kw>
<status status="PASS" endtime="20170920 15:42:47.062" starttime="20170920 15:41:55.155"></status>
</kw>
<kw name="GUI SM HW Action" library="gui_resource">
<doc>this keyword is used for most HW operation,such as block,unblock,reset</doc>
<arguments>
<arg>RRU</arg>
<arg>${RRU1_INFO.NODE}</arg>
<arg>Block</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>HWType=${HWType}</arg>
<arg>HWID=${HWID}</arg>
<arg>HWAction=${HWAction}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170920 15:42:47.064" level="INFO">${para_list} = [u'HWType=RRU', u'HWID=1.1.1.1', u'HWAction=Block', u'LogPath=D:\\TA\\TA_logs\\TestLog_20170920151904\\ev_logs\\FZHR_Operational_RF_block_unblock_20170920153225\\FZQE_Operational_RF_Block_Unblock\\']</msg>
<status status="PASS" endtime="20170920 15:42:47.064" starttime="20170920 15:42:47.064"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}HW_Action</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170920 15:43:22.004" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\HW_Action is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\HW_Action ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
HWType="RRU"
HWID="1.1.1.1"
HWAction="Block"
LogPath="D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\GUILog\qtp_log20170920154247\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20170920 15:43:22.004" starttime="20170920 15:42:47.064"></status>
</kw>
<status status="PASS" endtime="20170920 15:43:22.004" starttime="20170920 15:42:47.063"></status>
</kw>
<kw name="GUI SM Alarm Oper" library="gui_resource">
<doc>this keyword provide check Active/History alarm in BTS SiteManager window</doc>
<arguments>
<arg>CheckAlarm_AdditionalInfo</arg>
<arg>Active</arg>
<arg>Severity=Critical;;Fault Name=Unit blocked (0048)</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>AlarmType=${AlarmType}</arg>
<arg>OperType=${OperType}</arg>
<arg>AlarmInfo=${AlarmInfo}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170920 15:43:22.006" level="INFO">${para_list} = [u'AlarmType=Active', u'OperType=CheckAlarm_AdditionalInfo', u'AlarmInfo=Severity=Critical;;Fault Name=Unit blocked (0048)', u'LogPath=D:\\TA\\TA_logs\\TestLog_20170920151904\\ev_logs\\FZHR_Operationa...</msg>
<status status="PASS" endtime="20170920 15:43:22.006" starttime="20170920 15:43:22.005"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Alarm_Oper</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170920 15:43:29.699" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Alarm_Oper is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Alarm_Oper ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
AlarmType="Active"
OperType="CheckAlarm_AdditionalInfo"
AlarmInfo="Severity=Critical;;Fault Name=Unit blocked (0048)"
LogPath="D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\GUILog\qtp_log20170920154322\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20170920 15:43:29.699" starttime="20170920 15:43:22.006"></status>
</kw>
<status status="PASS" endtime="20170920 15:43:29.699" starttime="20170920 15:43:22.005"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5 sec</arg>
</arguments>
<msg timestamp="20170920 15:43:34.700" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20170920 15:43:34.700" starttime="20170920 15:43:29.699"></status>
</kw>
<kw name="GUI SM HW Action" library="gui_resource">
<doc>this keyword is used for most HW operation,such as block,unblock,reset</doc>
<arguments>
<arg>RRU</arg>
<arg>${RRU1_INFO.NODE}</arg>
<arg>Unblock</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>HWType=${HWType}</arg>
<arg>HWID=${HWID}</arg>
<arg>HWAction=${HWAction}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170920 15:43:34.703" level="INFO">${para_list} = [u'HWType=RRU', u'HWID=1.1.1.1', u'HWAction=Unblock', u'LogPath=D:\\TA\\TA_logs\\TestLog_20170920151904\\ev_logs\\FZHR_Operational_RF_block_unblock_20170920153225\\FZQE_Operational_RF_Block_Unblock\\'...</msg>
<status status="PASS" endtime="20170920 15:43:34.703" starttime="20170920 15:43:34.702"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}HW_Action</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170920 15:43:51.727" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\HW_Action is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\HW_Action ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
HWType="RRU"
HWID="1.1.1.1"
HWAction="Unblock"
LogPath="D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\GUILog\qtp_log20170920154334\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20170920 15:43:51.728" starttime="20170920 15:43:34.703"></status>
</kw>
<status status="PASS" endtime="20170920 15:43:51.728" starttime="20170920 15:43:34.701"></status>
</kw>
<kw name="Check Bts Until Onair" library="tdd_ev_robotws">
<doc>check bts until all cell is onair with infomodel, and have PBCH in udp log.</doc>
<arguments>
<arg>log_name=RF_block_unblock_${num}</arg>
</arguments>
<msg timestamp="20170920 15:44:04.578" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock" already exists, no need to create it again.</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will try another way</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-*/LCELL-* is [stateInfo.proceduralState=onAirDone]' doesn't pass in timeout=1.0. Not found any object matching given dist name.
, it will sleep and try again</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[enb_resource.py@225] infomodel check every cell onair succeed !</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[enb_resource.py@253] bts log check onair msg succeed !</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\im_20170920154403' succeed .</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170920 15:44:04.578" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 15:44:04.579" starttime="20170920 15:43:51.728"></status>
</kw>
<kw name="Kill Sitemanager Process" library="tdd_ev_robotws">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20170920 15:44:08.467" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<msg timestamp="20170920 15:44:08.467" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170920 15:44:08.467" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\SISO1-632\ROOT\CIMV2:Win32_Process.Handle="2724"

Instance deletion successful.


C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 15:44:08.467" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<msg timestamp="20170920 15:44:08.467" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170920 15:44:08.467" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\SISO1-632\ROOT\CIMV2:Win32_Process.Handle="1784"

Instance deletion successful.


C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170920 15:44:08.467" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;</msg>
<msg timestamp="20170920 15:44:08.467" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170920 15:44:08.467" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.


C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170920 15:44:08.468" starttime="20170920 15:44:04.579"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20170920 15:44:08.473" starttime="20170920 15:44:08.473"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20170920 15:44:08.476" starttime="20170920 15:44:08.473"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170920 15:44:08.477" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\TA\\TA_logs\\TestLog_20170920151904\\ev_logs\\FZHR_Operational_RF_block_unblock_20170920153225\\FZQE_Operational_RF_Bloc...</msg>
<status status="PASS" endtime="20170920 15:44:08.477" starttime="20170920 15:44:08.477"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:44:08.478" starttime="20170920 15:44:08.478"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170920 15:44:55.991" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\GUILog\qtp_log20170920154408\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20170920 15:44:55.991" starttime="20170920 15:44:08.478"></status>
</kw>
<status status="PASS" endtime="20170920 15:44:55.991" starttime="20170920 15:44:08.472"></status>
</kw>
<kw name="GUI SM Check BTS HW Status" library="gui_resource">
<doc>This keyword is used to check the status on BTS Hardware panel.</doc>
<arguments>
<arg>AllCell</arg>
<arg>Operational state=Enabled;;Working state=Working</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>CompName=${CompName}</arg>
<arg>CheckField=${CheckField}</arg>
<arg>WaitTime=${WaitTime}</arg>
<arg>CheckSameFlag=${CheckSameFlag}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170920 15:44:55.994" level="INFO">${para_list} = [u'CompName=AllCell', u'CheckField=Operational state=Enabled;;Working state=Working', u'WaitTime=0', u'CheckSameFlag=1', u'LogPath=D:\\TA\\TA_logs\\TestLog_20170920151904\\ev_logs\\FZHR_Operational_RF...</msg>
<status status="PASS" endtime="20170920 15:44:55.994" starttime="20170920 15:44:55.993"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Check_BTS_HW_Status</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:44:55.994" starttime="20170920 15:44:55.994"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Check_BTS_HW_Status</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170920 15:45:10.208" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Check_BTS_HW_Status is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Check_BTS_HW_Status ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
CompName="AllCell"
CheckField="Operational state=Enabled;;Working state=Working"
WaitTime="0"
CheckSameFlag="1"
LogPath="D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\GUILog\qtp_log20170920154455\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20170920 15:45:10.208" starttime="20170920 15:44:55.994"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:10.208" starttime="20170920 15:44:55.992"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<arguments>
<arg>bts_attach_${num}</arg>
</arguments>
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170920 15:45:10.511" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20170920 15:45:10.511" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170920 15:45:10.511" starttime="20170920 15:45:10.209"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170920 15:45:18.922" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170920 15:45:18.922" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170920 15:45:18.922" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170920 15:45:18.922" starttime="20170920 15:45:10.512"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170920 15:45:18.923" level="INFO">${case_execute_log_name} = bts_attach_0</msg>
<status status="PASS" endtime="20170920 15:45:18.923" starttime="20170920 15:45:18.922"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:18.923" starttime="20170920 15:45:10.209"></status>
</kw>
<kw name="UE_Attach_SISO1" library="SISO1 Resource">
<doc>Example</doc>
<arguments>
<arg>1:2</arg>
</arguments>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${cell_id}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{cell_list}</var>
</assign>
<msg timestamp="20170920 15:45:18.929" level="INFO">@{cell_list} = [ 1 | 2 ]</msg>
<status status="PASS" endtime="20170920 15:45:18.929" starttime="20170920 15:45:18.928"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${cell_list}</arg>
</arguments>
<assign>
<var>${cell_list_length}</var>
</assign>
<msg timestamp="20170920 15:45:18.929" level="INFO">Length is 2</msg>
<msg timestamp="20170920 15:45:18.929" level="INFO">${cell_list_length} = 2</msg>
<status status="PASS" endtime="20170920 15:45:18.929" starttime="20170920 15:45:18.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Split String</arg>
<arg>${attach_earfcn}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${earfcn_list1}</var>
</assign>
<msg timestamp="20170920 15:45:18.933" level="INFO">${earfcn_list1} = None</msg>
<status status="PASS" endtime="20170920 15:45:18.933" starttime="20170920 15:45:18.930"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Change_Earfcn_To_Freqency</arg>
<arg>${earfcn_list1}</arg>
</arguments>
<assign>
<var>${freqency_list1}</var>
<var>${band_list1}</var>
</assign>
<msg timestamp="20170920 15:45:18.936" level="INFO">${freqency_list1} = None</msg>
<msg timestamp="20170920 15:45:18.936" level="INFO">${band_list1} = None</msg>
<status status="PASS" endtime="20170920 15:45:18.936" starttime="20170920 15:45:18.933"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Get_Earfcn_From_Infomodel</arg>
</arguments>
<assign>
<var>${earfcn_list2}</var>
<var>${freqency_list2}</var>
<var>${band_list2}</var>
</assign>
<kw name="Get_Earfcn_From_Infomodel" library="SISO1 Resource">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>get list /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1</arg>
</arguments>
<assign>
<var>@{ret_earfcn}</var>
</assign>
<msg timestamp="20170920 15:45:20.370" level="INFO">[infomodel_control.py@328] query infomodel: 'get list /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1' succeed .</msg>
<msg timestamp="20170920 15:45:20.371" level="INFO">@{ret_earfcn} = [ InfoModelObject /MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-2/CARRIER_GROUP_L-1: {u'fcnULs': [38100L], u'fcnDLs': [38100L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-2/CARRIER_GROUP_L-1', u's...</msg>
<status status="PASS" endtime="20170920 15:45:20.371" starttime="20170920 15:45:18.941"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${ret_earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.371" starttime="20170920 15:45:20.371"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${earfcn_list}</var>
</assign>
<msg timestamp="20170920 15:45:20.372" level="INFO">${earfcn_list} = []</msg>
<status status="PASS" endtime="20170920 15:45:20.372" starttime="20170920 15:45:20.372"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${freqency_list}</var>
</assign>
<msg timestamp="20170920 15:45:20.372" level="INFO">${freqency_list} = []</msg>
<status status="PASS" endtime="20170920 15:45:20.372" starttime="20170920 15:45:20.372"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${band_list}</var>
</assign>
<msg timestamp="20170920 15:45:20.373" level="INFO">${band_list} = []</msg>
<status status="PASS" endtime="20170920 15:45:20.373" starttime="20170920 15:45:20.373"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_OFFSET}</arg>
</arguments>
<assign>
<var>${offset_dict}</var>
</assign>
<msg timestamp="20170920 15:45:20.373" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.376" level="INFO">${offset_dict} = {u'38': u'1205', u'40': u'1565', u'39': u'1945', u'41': u'1469', u'42': u'759', u'43': u'759', u'37': u'1845', u'36': u'1765', u'35': u'1785', u'34': u'1610', u'33': u'1700'}</msg>
<status status="PASS" endtime="20170920 15:45:20.376" starttime="20170920 15:45:20.373"></status>
</kw>
<kw type="for" name="${index} IN [ @{ret_earfcn} ]">
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-1/CARRIER_GROUP_L-1: {u'fcnULs': [37900L], u'fcnDLs': [37900L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-1/CARRIER_GROUP_L-1', u'sta...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:45:20.377" level="INFO">${index.earfcn} = 37900</msg>
<status status="PASS" endtime="20170920 15:45:20.377" starttime="20170920 15:45:20.376"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.378" starttime="20170920 15:45:20.377"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:45:20.380" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.382" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:45:20.382" starttime="20170920 15:45:20.380"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:45:20.382" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.383" starttime="20170920 15:45:20.382"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.384" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.384" starttime="20170920 15:45:20.383"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.387" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:45:20.387" starttime="20170920 15:45:20.384"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:45:20.389" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:45:20.389" starttime="20170920 15:45:20.388"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.389" starttime="20170920 15:45:20.383"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.389" starttime="20170920 15:45:20.383"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.392" starttime="20170920 15:45:20.389"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.396" level="INFO">${bts_band} = 38</msg>
<status status="PASS" endtime="20170920 15:45:20.396" starttime="20170920 15:45:20.393"></status>
</kw>
<msg timestamp="20170920 15:45:20.396" level="INFO">${attach_band} = 38</msg>
<status status="PASS" endtime="20170920 15:45:20.396" starttime="20170920 15:45:20.379"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.396" level="INFO">${attach_band} = 38</msg>
<status status="PASS" endtime="20170920 15:45:20.396" starttime="20170920 15:45:20.396"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.397" starttime="20170920 15:45:20.397"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:45:20.398" level="INFO">${offset} = 1205</msg>
<status status="PASS" endtime="20170920 15:45:20.399" starttime="20170920 15:45:20.397"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:45:20.402" level="INFO">${freq} = 25850.0</msg>
<status status="PASS" endtime="20170920 15:45:20.402" starttime="20170920 15:45:20.399"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:45:20.403" level="INFO">${fq} = 25850</msg>
<status status="PASS" endtime="20170920 15:45:20.403" starttime="20170920 15:45:20.403"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:45:20.403" level="INFO">${freqency} = 25850</msg>
<status status="PASS" endtime="20170920 15:45:20.404" starttime="20170920 15:45:20.403"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.404" starttime="20170920 15:45:20.404"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.404" starttime="20170920 15:45:20.376"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-2/CARRIER_GROUP_L-1: {u'fcnULs': [38100L], u'fcnDLs': [38100L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-1/LNBTS_L-1/LNCEL_L-2/CARRIER_GROUP_L-1', u'sta...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:45:20.405" level="INFO">${index.earfcn} = 38100</msg>
<status status="PASS" endtime="20170920 15:45:20.405" starttime="20170920 15:45:20.405"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.406" starttime="20170920 15:45:20.405"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:45:20.407" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.409" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:45:20.409" starttime="20170920 15:45:20.407"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:45:20.410" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.410" starttime="20170920 15:45:20.410"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.411" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.411" starttime="20170920 15:45:20.411"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.415" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:45:20.415" starttime="20170920 15:45:20.411"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:45:20.415" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:45:20.415" starttime="20170920 15:45:20.415"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.415" starttime="20170920 15:45:20.410"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.415" starttime="20170920 15:45:20.410"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.419" starttime="20170920 15:45:20.416"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.423" level="INFO">${bts_band} = 38</msg>
<status status="PASS" endtime="20170920 15:45:20.423" starttime="20170920 15:45:20.420"></status>
</kw>
<msg timestamp="20170920 15:45:20.423" level="INFO">${attach_band} = 38</msg>
<status status="PASS" endtime="20170920 15:45:20.423" starttime="20170920 15:45:20.406"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.424" level="INFO">${attach_band} = 38</msg>
<status status="PASS" endtime="20170920 15:45:20.424" starttime="20170920 15:45:20.424"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.425" starttime="20170920 15:45:20.424"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:45:20.425" level="INFO">${offset} = 1205</msg>
<status status="PASS" endtime="20170920 15:45:20.425" starttime="20170920 15:45:20.425"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:45:20.429" level="INFO">${freq} = 26050.0</msg>
<status status="PASS" endtime="20170920 15:45:20.429" starttime="20170920 15:45:20.425"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:45:20.430" level="INFO">${fq} = 26050</msg>
<status status="PASS" endtime="20170920 15:45:20.430" starttime="20170920 15:45:20.430"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:45:20.431" level="INFO">${freqency} = 26050</msg>
<status status="PASS" endtime="20170920 15:45:20.431" starttime="20170920 15:45:20.430"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.431" starttime="20170920 15:45:20.431"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.431" starttime="20170920 15:45:20.404"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6512/CARRIER_GROUP_L-1: {u'fcnULs': [42490L], u'fcnDLs': [42490L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6512/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:45:20.432" level="INFO">${index.earfcn} = 42490</msg>
<status status="PASS" endtime="20170920 15:45:20.432" starttime="20170920 15:45:20.432"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.433" starttime="20170920 15:45:20.432"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:45:20.434" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.435" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:45:20.435" starttime="20170920 15:45:20.434"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:45:20.436" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.436" starttime="20170920 15:45:20.436"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.437" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.437" starttime="20170920 15:45:20.437"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.441" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.441" starttime="20170920 15:45:20.437"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.442" starttime="20170920 15:45:20.442"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.442" starttime="20170920 15:45:20.436"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.443" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.443" starttime="20170920 15:45:20.442"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.446" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.447" starttime="20170920 15:45:20.443"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.447" starttime="20170920 15:45:20.447"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.447" starttime="20170920 15:45:20.442"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.448" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.448" starttime="20170920 15:45:20.447"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.452" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.452" starttime="20170920 15:45:20.448"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.453" starttime="20170920 15:45:20.452"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.453" starttime="20170920 15:45:20.447"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.454" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.454" starttime="20170920 15:45:20.453"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.457" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.457" starttime="20170920 15:45:20.454"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.458" starttime="20170920 15:45:20.457"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.458" starttime="20170920 15:45:20.453"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.458" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.458" starttime="20170920 15:45:20.458"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.463" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:45:20.463" starttime="20170920 15:45:20.459"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:45:20.463" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:45:20.463" starttime="20170920 15:45:20.463"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.463" starttime="20170920 15:45:20.458"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.463" starttime="20170920 15:45:20.436"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.466" starttime="20170920 15:45:20.464"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.470" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.470" starttime="20170920 15:45:20.467"></status>
</kw>
<msg timestamp="20170920 15:45:20.470" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.470" starttime="20170920 15:45:20.433"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.471" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.471" starttime="20170920 15:45:20.471"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.472" starttime="20170920 15:45:20.471"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:45:20.472" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 15:45:20.472" starttime="20170920 15:45:20.472"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:45:20.476" level="INFO">${freq} = 34900.0</msg>
<status status="PASS" endtime="20170920 15:45:20.476" starttime="20170920 15:45:20.473"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:45:20.476" level="INFO">${fq} = 34900</msg>
<status status="PASS" endtime="20170920 15:45:20.476" starttime="20170920 15:45:20.476"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:45:20.477" level="INFO">${freqency} = 34900</msg>
<status status="PASS" endtime="20170920 15:45:20.477" starttime="20170920 15:45:20.477"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.478" starttime="20170920 15:45:20.477"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.478" starttime="20170920 15:45:20.431"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6513/CARRIER_GROUP_L-1: {u'fcnULs': [42690L], u'fcnDLs': [42690L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6513/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:45:20.479" level="INFO">${index.earfcn} = 42690</msg>
<status status="PASS" endtime="20170920 15:45:20.479" starttime="20170920 15:45:20.478"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.479" starttime="20170920 15:45:20.479"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:45:20.481" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.482" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:45:20.482" starttime="20170920 15:45:20.481"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:45:20.483" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.483" starttime="20170920 15:45:20.483"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.484" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.484" starttime="20170920 15:45:20.484"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.488" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.488" starttime="20170920 15:45:20.484"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.488" starttime="20170920 15:45:20.488"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.488" starttime="20170920 15:45:20.483"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.489" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.489" starttime="20170920 15:45:20.489"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.494" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.494" starttime="20170920 15:45:20.490"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.495" starttime="20170920 15:45:20.495"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.495" starttime="20170920 15:45:20.489"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.497" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.497" starttime="20170920 15:45:20.496"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.502" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.502" starttime="20170920 15:45:20.497"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.502" starttime="20170920 15:45:20.502"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.502" starttime="20170920 15:45:20.496"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.503" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.503" starttime="20170920 15:45:20.503"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.507" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.507" starttime="20170920 15:45:20.503"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.507" starttime="20170920 15:45:20.507"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.507" starttime="20170920 15:45:20.502"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.508" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.508" starttime="20170920 15:45:20.508"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.512" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:45:20.512" starttime="20170920 15:45:20.508"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:45:20.513" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:45:20.513" starttime="20170920 15:45:20.512"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.513" starttime="20170920 15:45:20.507"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.513" starttime="20170920 15:45:20.483"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.516" starttime="20170920 15:45:20.513"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.519" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.519" starttime="20170920 15:45:20.516"></status>
</kw>
<msg timestamp="20170920 15:45:20.519" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.519" starttime="20170920 15:45:20.479"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.520" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.520" starttime="20170920 15:45:20.520"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.521" starttime="20170920 15:45:20.521"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:45:20.522" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 15:45:20.522" starttime="20170920 15:45:20.521"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:45:20.525" level="INFO">${freq} = 35100.0</msg>
<status status="PASS" endtime="20170920 15:45:20.525" starttime="20170920 15:45:20.522"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:45:20.526" level="INFO">${fq} = 35100</msg>
<status status="PASS" endtime="20170920 15:45:20.526" starttime="20170920 15:45:20.525"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:45:20.526" level="INFO">${freqency} = 35100</msg>
<status status="PASS" endtime="20170920 15:45:20.526" starttime="20170920 15:45:20.526"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.527" starttime="20170920 15:45:20.527"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.527" starttime="20170920 15:45:20.478"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6514/CARRIER_GROUP_L-1: {u'fcnULs': [42490L], u'fcnDLs': [42490L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6514/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:45:20.528" level="INFO">${index.earfcn} = 42490</msg>
<status status="PASS" endtime="20170920 15:45:20.528" starttime="20170920 15:45:20.527"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.528" starttime="20170920 15:45:20.528"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:45:20.529" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.531" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:45:20.531" starttime="20170920 15:45:20.529"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:45:20.532" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.532" starttime="20170920 15:45:20.532"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.533" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.533" starttime="20170920 15:45:20.532"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.537" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.537" starttime="20170920 15:45:20.533"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.537" starttime="20170920 15:45:20.537"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.537" starttime="20170920 15:45:20.532"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.538" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.538" starttime="20170920 15:45:20.538"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.542" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.542" starttime="20170920 15:45:20.538"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.543" starttime="20170920 15:45:20.542"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.543" starttime="20170920 15:45:20.537"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.544" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.544" starttime="20170920 15:45:20.543"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.547" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.547" starttime="20170920 15:45:20.544"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.548" starttime="20170920 15:45:20.547"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.548" starttime="20170920 15:45:20.543"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.548" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.549" starttime="20170920 15:45:20.548"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.553" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.553" starttime="20170920 15:45:20.549"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.553" starttime="20170920 15:45:20.553"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.553" starttime="20170920 15:45:20.548"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.554" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.554" starttime="20170920 15:45:20.553"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.557" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:45:20.557" starttime="20170920 15:45:20.554"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:45:20.558" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:45:20.558" starttime="20170920 15:45:20.558"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.558" starttime="20170920 15:45:20.553"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.558" starttime="20170920 15:45:20.532"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.562" starttime="20170920 15:45:20.558"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.566" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.566" starttime="20170920 15:45:20.563"></status>
</kw>
<msg timestamp="20170920 15:45:20.566" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.566" starttime="20170920 15:45:20.529"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.567" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.567" starttime="20170920 15:45:20.566"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.567" starttime="20170920 15:45:20.567"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:45:20.568" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 15:45:20.568" starttime="20170920 15:45:20.568"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:45:20.572" level="INFO">${freq} = 34900.0</msg>
<status status="PASS" endtime="20170920 15:45:20.572" starttime="20170920 15:45:20.568"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:45:20.573" level="INFO">${fq} = 34900</msg>
<status status="PASS" endtime="20170920 15:45:20.573" starttime="20170920 15:45:20.572"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:45:20.573" level="INFO">${freqency} = 34900</msg>
<status status="PASS" endtime="20170920 15:45:20.574" starttime="20170920 15:45:20.573"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.574" starttime="20170920 15:45:20.574"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.574" starttime="20170920 15:45:20.527"></status>
</kw>
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6515/CARRIER_GROUP_L-1: {u'fcnULs': [42690L], u'fcnDLs': [42690L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-6515/CARRIER_GROUP_L-1',...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170920 15:45:20.575" level="INFO">${index.earfcn} = 42690</msg>
<status status="PASS" endtime="20170920 15:45:20.575" starttime="20170920 15:45:20.574"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.576" starttime="20170920 15:45:20.575"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170920 15:45:20.577" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.579" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170920 15:45:20.579" starttime="20170920 15:45:20.576"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170920 15:45:20.579" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.579" starttime="20170920 15:45:20.579"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.581" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.581" starttime="20170920 15:45:20.580"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.586" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.586" starttime="20170920 15:45:20.581"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.586" starttime="20170920 15:45:20.586"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.586" starttime="20170920 15:45:20.580"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.587" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.587" starttime="20170920 15:45:20.586"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.591" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.591" starttime="20170920 15:45:20.587"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.592" starttime="20170920 15:45:20.591"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.592" starttime="20170920 15:45:20.586"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.594" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.594" starttime="20170920 15:45:20.594"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.598" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.598" starttime="20170920 15:45:20.595"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.598" starttime="20170920 15:45:20.598"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.598" starttime="20170920 15:45:20.592"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.599" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.599" starttime="20170920 15:45:20.599"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.603" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170920 15:45:20.603" starttime="20170920 15:45:20.599"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.604" starttime="20170920 15:45:20.604"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.604" starttime="20170920 15:45:20.598"></status>
</kw>
<kw type="foritem" name="${index} = 42">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170920 15:45:20.605" level="INFO">@{temp1} = [ 41590 | 43589 ]</msg>
<status status="PASS" endtime="20170920 15:45:20.605" starttime="20170920 15:45:20.604"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170920 15:45:20.609" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170920 15:45:20.609" starttime="20170920 15:45:20.606"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170920 15:45:20.610" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:45:20.610" starttime="20170920 15:45:20.609"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.610" starttime="20170920 15:45:20.604"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.610" starttime="20170920 15:45:20.579"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.614" starttime="20170920 15:45:20.610"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.617" level="INFO">${bts_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.617" starttime="20170920 15:45:20.614"></status>
</kw>
<msg timestamp="20170920 15:45:20.617" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.617" starttime="20170920 15:45:20.576"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170920 15:45:20.618" level="INFO">${attach_band} = 42</msg>
<status status="PASS" endtime="20170920 15:45:20.618" starttime="20170920 15:45:20.618"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.619" starttime="20170920 15:45:20.618"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170920 15:45:20.619" level="INFO">${offset} = 759</msg>
<status status="PASS" endtime="20170920 15:45:20.619" starttime="20170920 15:45:20.619"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170920 15:45:20.624" level="INFO">${freq} = 35100.0</msg>
<status status="PASS" endtime="20170920 15:45:20.624" starttime="20170920 15:45:20.619"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170920 15:45:20.625" level="INFO">${fq} = 35100</msg>
<status status="PASS" endtime="20170920 15:45:20.625" starttime="20170920 15:45:20.624"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170920 15:45:20.625" level="INFO">${freqency} = 35100</msg>
<status status="PASS" endtime="20170920 15:45:20.625" starttime="20170920 15:45:20.625"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.626" starttime="20170920 15:45:20.626"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.626" starttime="20170920 15:45:20.574"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.626" starttime="20170920 15:45:20.376"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.626" starttime="20170920 15:45:18.941"></status>
</kw>
<msg timestamp="20170920 15:45:20.626" level="INFO">${earfcn_list2} = [u'37900', u'38100', u'42490', u'42690', u'42490', u'42690']</msg>
<msg timestamp="20170920 15:45:20.626" level="INFO">${freqency_list2} = [u'25850', u'26050', u'34900', u'35100', u'34900', u'35100']</msg>
<msg timestamp="20170920 15:45:20.627" level="INFO">${band_list2} = [u'38', u'38', u'42', u'42', u'42', u'42']</msg>
<status status="PASS" endtime="20170920 15:45:20.627" starttime="20170920 15:45:18.936"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${earfcn_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<assign>
<var>${earfcn_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.634" starttime="20170920 15:45:20.630"></status>
</kw>
<msg timestamp="20170920 15:45:20.634" level="INFO">${earfcn_list} = [u'37900', u'38100', u'42490', u'42690', u'42490', u'42690']</msg>
<status status="PASS" endtime="20170920 15:45:20.634" starttime="20170920 15:45:20.627"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${freqency_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<assign>
<var>${freqency_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.641" starttime="20170920 15:45:20.638"></status>
</kw>
<msg timestamp="20170920 15:45:20.641" level="INFO">${freqency_list} = [u'25850', u'26050', u'34900', u'35100', u'34900', u'35100']</msg>
<status status="PASS" endtime="20170920 15:45:20.641" starttime="20170920 15:45:20.634"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${band_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<assign>
<var>${band_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.649" starttime="20170920 15:45:20.645"></status>
</kw>
<msg timestamp="20170920 15:45:20.649" level="INFO">${band_list} = [u'38', u'38', u'42', u'42', u'42', u'42']</msg>
<status status="PASS" endtime="20170920 15:45:20.649" starttime="20170920 15:45:20.642"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${cell_index1}</var>
</assign>
<msg timestamp="20170920 15:45:20.649" level="INFO">${cell_index1} = 0</msg>
<status status="PASS" endtime="20170920 15:45:20.649" starttime="20170920 15:45:20.649"></status>
</kw>
<kw type="for" name="${cell_index2} IN [ @{cell_list} ]">
<kw type="foritem" name="${cell_index2} = 1">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Evaluate</arg>
<arg>${cell_index1}</arg>
<arg>ELSE</arg>
<arg>Evaluate</arg>
<arg>${cell_index2}-1</arg>
</arguments>
<assign>
<var>${cell_index}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${cell_index2}-1</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.661" starttime="20170920 15:45:20.655"></status>
</kw>
<msg timestamp="20170920 15:45:20.661" level="INFO">${cell_index} = 0</msg>
<status status="PASS" endtime="20170920 15:45:20.661" starttime="20170920 15:45:20.650"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='CPE'</arg>
<arg>Run Keyword If</arg>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.669" starttime="20170920 15:45:20.665"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:20.669" starttime="20170920 15:45:20.661"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='CPE'</arg>
<arg>CPE_Attach_SISO1_src</arg>
<arg>${earfcn_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${band_list[${cell_index}]}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:20.672" starttime="20170920 15:45:20.669"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='TM500'</arg>
<arg>TM500_Attach_SISO1_src</arg>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="TM500_Attach_SISO1_src" library="SISO1 Resource">
<arguments>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="Tm500 Setup" library="tdd_ev_robotws">
<doc>tm500 setup.</doc>
<msg timestamp="20170920 15:45:21.080" level="INFO">[robot_func.py@29] Can't get variable '${TM500_PC_CONNECTION}' ! details: 'Variable '${TM500_PC_CONNECTION}' not found.'</msg>
<msg timestamp="20170920 15:45:21.080" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170920 15:45:21.080" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170920 15:45:21.080" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170920 15:45:21.080" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170920 15:45:21.080" level="WARN">[telnet_common.py@394] Telnet: Eof detected</msg>
<msg timestamp="20170920 15:45:21.080" level="WARN">[telnet_common.py@424] Telnet: &lt;&lt;expect 2017-09-20 15:45:21 no any pattern matched</msg>
<msg timestamp="20170920 15:45:21.080" level="WARN">[telnet_common.py@235] Get Response:  
Workstation allows only 10 simultaneous telnet connections.

Telnet Server has closed the connection</msg>
<msg timestamp="20170920 15:45:21.085" level="FAIL">No match found for prompt "'[\\;\[\.\-a-zA-Z0-9\s]+@.*[$&gt;#]{1}\s{0,1}$', '[CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$' or '^[a-zA-Z0-9@_\-\(\)\.\s]*[$#&gt;]{1}\s{0,1}$'" in 90.0sec, detail info: " 
Workstation allows only 10 simultaneous telnet connections.

Telnet Server has closed the connection
"</msg>
<status status="FAIL" endtime="20170920 15:45:21.085" starttime="20170920 15:45:20.677"></status>
</kw>
<status status="FAIL" endtime="20170920 15:45:21.085" starttime="20170920 15:45:20.676"></status>
</kw>
<status status="FAIL" endtime="20170920 15:45:21.086" starttime="20170920 15:45:20.672"></status>
</kw>
<status status="FAIL" endtime="20170920 15:45:21.086" starttime="20170920 15:45:20.650"></status>
</kw>
<status status="FAIL" endtime="20170920 15:45:21.086" starttime="20170920 15:45:20.649"></status>
</kw>
<status status="FAIL" endtime="20170920 15:45:21.086" starttime="20170920 15:45:18.926"></status>
</kw>
<status status="FAIL" endtime="20170920 15:45:21.086" starttime="20170920 15:41:51.277"></status>
</kw>
<status status="FAIL" endtime="20170920 15:45:21.086" starttime="20170920 15:41:51.277"></status>
</kw>
<status status="FAIL" endtime="20170920 15:45:21.086" starttime="20170920 15:41:51.276"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170920 15:45:21.092" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.32:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0579A120&gt;.</msg>
<status status="PASS" endtime="20170920 15:45:21.092" starttime="20170920 15:45:21.087"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170920 15:45:21.620" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170920 15:45:21.620" starttime="20170920 15:45:21.092"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170920 15:45:21.624" starttime="20170920 15:45:21.621"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:21.625" starttime="20170920 15:45:21.624"></status>
</kw>
<msg timestamp="20170920 15:45:21.625" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 15:45:21.625" starttime="20170920 15:45:21.624"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170920 15:45:21.643" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\bts_attach_0' succeed .</msg>
<status status="PASS" endtime="20170920 15:45:21.643" starttime="20170920 15:45:21.629"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:21.643" starttime="20170920 15:45:21.626"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:21.643" starttime="20170920 15:45:21.625"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170920 15:45:22.338" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170920 15:45:22.338" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 15:45:22.338" starttime="20170920 15:45:21.647"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:22.339" starttime="20170920 15:45:21.644"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:22.339" starttime="20170920 15:45:21.643"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:22.340" starttime="20170920 15:45:22.340"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:22.341" starttime="20170920 15:45:22.341"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:22.343" starttime="20170920 15:45:22.342"></status>
</kw>
<msg timestamp="20170920 15:45:22.343" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170920 15:45:22.343" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170920 15:45:22.343" starttime="20170920 15:45:22.342"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:22.346" starttime="20170920 15:45:22.343"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170920 15:45:26.375" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170920 15:45:26.375" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170920 15:45:26.375" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170920 15:45:26.375" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170920 15:45:26.375" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170920 15:45:26.376" starttime="20170920 15:45:22.347"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:26.376" starttime="20170920 15:45:22.341"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:26.377" starttime="20170920 15:45:26.377"></status>
</kw>
<msg timestamp="20170920 15:45:26.377" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170920 15:45:26.377" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170920 15:45:26.377" starttime="20170920 15:45:26.376"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:26.381" starttime="20170920 15:45:26.378"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170920 15:45:30.409" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170920 15:45:30.409" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170920 15:45:30.409" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170920 15:45:30.409" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170920 15:45:30.409" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170920 15:45:30.410" starttime="20170920 15:45:26.381"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:30.410" starttime="20170920 15:45:26.376"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:30.412" starttime="20170920 15:45:30.411"></status>
</kw>
<msg timestamp="20170920 15:45:30.412" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170920 15:45:30.412" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170920 15:45:30.412" starttime="20170920 15:45:30.410"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:30.415" starttime="20170920 15:45:30.412"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170920 15:45:34.449" level="INFO">$TA,C,02F0*</msg>
<msg timestamp="20170920 15:45:34.449" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,02F0*', Receive&lt;-'$TA,C,02F0*'</msg>
<msg timestamp="20170920 15:45:34.449" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,02*', Receive&lt;-'$TA,C,02F0*'
$TA,C,06F0*</msg>
<msg timestamp="20170920 15:45:34.449" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,06F0*', Receive&lt;-'$TA,C,06F0*'</msg>
<msg timestamp="20170920 15:45:34.449" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,06*', Receive&lt;-'$TA,C,06F0*'</msg>
<status status="PASS" endtime="20170920 15:45:34.449" starttime="20170920 15:45:30.415"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:34.449" starttime="20170920 15:45:30.410"></status>
</kw>
<kw type="foritem" name="${index} = 4">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170920 15:45:34.457" level="FAIL">Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170920 15:45:34.457" starttime="20170920 15:45:34.450"></status>
</kw>
<msg timestamp="20170920 15:45:34.457" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170920 15:45:34.457" level="INFO">${ret2} = Variable ${CELL4_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170920 15:45:34.457" starttime="20170920 15:45:34.449"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170920 15:45:34.460" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170920 15:45:34.460" starttime="20170920 15:45:34.457"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:34.460" starttime="20170920 15:45:34.449"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:34.460" starttime="20170920 15:45:22.341"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:34.460" starttime="20170920 15:45:22.341"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170920 15:45:39.467" level="INFO">[tm500.py@437] Release TM500 Resource:
sent -&gt; "release"
received &lt;- "10.56.6.32"</msg>
<status status="PASS" endtime="20170920 15:45:39.467" starttime="20170920 15:45:34.461"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:39.467" starttime="20170920 15:45:39.467"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:39.468" starttime="20170920 15:45:22.339"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:39.468" starttime="20170920 15:45:22.339"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170920 15:45:39.475" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170920 15:45:39.475" starttime="20170920 15:45:39.469"></status>
</kw>
<msg timestamp="20170920 15:45:39.475" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170920 15:45:39.475" starttime="20170920 15:45:39.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:39.479" starttime="20170920 15:45:39.476"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170920 15:45:53.283" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170920 15:45:53.943" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170920 15:45:53.943" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170920 15:45:53.944" starttime="20170920 15:45:39.479"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170920 15:45:55.805" level="INFO">['fatal'] ['fatal']
['fatal'] ['fatal']</msg>
<msg timestamp="20170920 15:45:55.805" level="INFO">[file_control.py@109] *HTML*&lt;a href = "D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\udplog_20170920153546.log"&gt;fail log&lt;/a&gt;
Find '['fatal']' in 'D:\TA\TA_logs\TestLog_20170920151904\ev_logs\FZHR_Operational_RF_block_unblock_20170920153225\FZQE_Operational_RF_Block_Unblock\udplog_20170920153546.log'
write successfully</msg>
<status status="PASS" endtime="20170920 15:45:55.805" starttime="20170920 15:45:53.944"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170920 15:45:55.807" level="FAIL">'FZQE_Operational_RF_Block_Unblock' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170920 15:45:55.807" starttime="20170920 15:45:55.806"></status>
</kw>
<msg timestamp="20170920 15:45:55.807" level="INFO">${return1} = ('FAIL', u"'FZQE_Operational_RF_Block_Unblock' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170920 15:45:55.807" starttime="20170920 15:45:55.806"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:55.811" starttime="20170920 15:45:55.808"></status>
</kw>
<msg timestamp="20170920 15:45:55.811" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170920 15:45:55.811" starttime="20170920 15:45:55.807"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:55.815" starttime="20170920 15:45:55.811"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:55.815" starttime="20170920 15:45:55.811"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:55.815" starttime="20170920 15:45:55.815"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:55.816" starttime="20170920 15:45:55.815"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:55.816" starttime="20170920 15:45:55.816"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170920 15:45:55.817" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170920 15:45:55.817" starttime="20170920 15:45:55.817"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:55.821" starttime="20170920 15:45:55.818"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:55.821" starttime="20170920 15:45:55.818"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:55.821" starttime="20170920 15:45:55.818"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:55.826" starttime="20170920 15:45:55.823"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:55.826" starttime="20170920 15:45:55.822"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:55.826" starttime="20170920 15:45:55.822"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170920 15:45:55.830" starttime="20170920 15:45:55.827"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:55.830" starttime="20170920 15:45:55.827"></status>
</kw>
<status status="PASS" endtime="20170920 15:45:55.830" starttime="20170920 15:45:55.826"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170920 15:46:16.958" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:46:16.958" level="INFO">[ssh_common.py@203] root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:46:16.958" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058D71C0&gt;</msg>
<msg timestamp="20170920 15:46:16.958" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170920 15:46:16.958" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:46:16.958" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x058D71C0&gt;</msg>
<msg timestamp="20170920 15:46:16.958" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170920 15:46:16.958" level="INFO">[ssh_common.py@203] Last login: Wed Sep 20 15:45:54 CST 2017 from 192.168.255.126 on pts/0
root@fctj-0a:~ &gt;</msg>
<msg timestamp="20170920 15:46:16.958" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05788620&gt;</msg>
<msg timestamp="20170920 15:46:16.959" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170920 15:46:16.959" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL17A_ENB_0000_000337_000000.xml
root@fctj-0a:/ffs/fs2 &gt;</msg>
<msg timestamp="20170920 15:46:16.959" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05788620&gt;</msg>
<msg timestamp="20170920 15:46:16.959" level="INFO">${version} = TL17A_ENB_0000_000337_000000</msg>
<status status="PASS" endtime="20170920 15:46:16.959" starttime="20170920 15:45:55.830"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:16.964" starttime="20170920 15:46:16.961"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:16.964" starttime="20170920 15:46:16.960"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:16.964" starttime="20170920 15:46:16.960"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170920 15:46:16.968" starttime="20170920 15:46:16.965"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:16.969" starttime="20170920 15:46:16.965"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:16.969" starttime="20170920 15:46:16.965"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:16.969" starttime="20170920 15:45:55.816"></status>
</kw>
<status status="PASS" endtime="20170920 15:46:16.969" starttime="20170920 15:45:21.087"></status>
</kw>
<tags>
<tag>owner-chen.feng@nokia.com</tag>
<tag>QC_773298</tag>
</tags>
<status status="FAIL" endtime="20170920 15:46:16.969" critical="yes" starttime="20170920 15:34:07.615">No match found for prompt "'[\\;\[\.\-a-zA-Z0-9\s]+@.*[$&gt;#]{1}\s{0,1}$', '[CDEFGHcdefgh]:[\\/\-a-zA-Z0-9\s\._~&amp;\(\)]*[^\s]&gt;\s?$' or '^[a-zA-Z0-9@_\-\(\)\.\s]*[$#&gt;]{1}\s{0,1}$'" in 90.0sec, detail info: " 
Workstation allows only 10 simultaneous telnet connections.

Telnet Server has closed the connection
"</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170920 15:46:16.986" starttime="20170920 15:32:24.158"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-chen.feng@nokia.com</stat>
<stat fail="1" pass="0">QC_773298</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHR Operational RF block unblock" pass="0">FZHR Operational RF block unblock</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170920 15:32:24.701" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170920 15:45:20.373" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.380" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.407" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.434" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.481" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.529" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:20.577" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170920 15:45:21.080" level="WARN">[telnet_common.py@394] Telnet: Eof detected</msg>
<msg timestamp="20170920 15:45:21.080" level="WARN">[telnet_common.py@424] Telnet: &lt;&lt;expect 2017-09-20 15:45:21 no any pattern matched</msg>
<msg timestamp="20170920 15:45:21.080" level="WARN">[telnet_common.py@235] Get Response:  
Workstation allows only 10 simultaneous telnet connections.

Telnet Server has closed the connection</msg>
<msg timestamp="20170920 15:45:53.283" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
