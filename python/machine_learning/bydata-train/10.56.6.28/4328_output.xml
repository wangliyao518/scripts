<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170719 17:18:41.550" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\CRT\FZHQ_ASMI\FZHQ_T1_Operational_RF_block_unblock\FZHQ_T1_Operational_RF_block_unblock.robot" id="s1" name="FZHQ T1 Operational RF block unblock">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170719170707//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170719 17:07:09.134" level="INFO">${timestamp} = 20170719170709</msg>
<status status="PASS" endtime="20170719 17:07:09.134" starttime="20170719 17:07:09.098"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170719 17:07:09.135" level="INFO">${FILE_NAME} = FZHQ T1 Operational RF block unblock</msg>
<status status="PASS" endtime="20170719 17:07:09.135" starttime="20170719 17:07:09.134"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170719 17:07:09.136" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ T1 Operational RF block unblock_20170719170709</msg>
<status status="PASS" endtime="20170719 17:07:09.136" starttime="20170719 17:07:09.135"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170719 17:07:09.137" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709</msg>
<status status="PASS" endtime="20170719 17:07:09.137" starttime="20170719 17:07:09.136"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170719 17:07:09.137" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709</msg>
<status status="PASS" endtime="20170719 17:07:09.137" starttime="20170719 17:07:09.137"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170719 17:07:09.138" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709"&gt;D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170719 17:07:09.138" starttime="20170719 17:07:09.138"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170719 17:07:09.139" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709</msg>
<status status="PASS" endtime="20170719 17:07:09.139" starttime="20170719 17:07:09.139"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170719 17:07:09.142" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170719 17:07:09.142" starttime="20170719 17:07:09.139"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170719 17:07:09.161" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170719 17:07:09.161" starttime="20170719 17:07:09.156"></status>
</kw>
<msg timestamp="20170719 17:07:09.162" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170719 17:07:09.162" starttime="20170719 17:07:09.155"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:07:09.163" starttime="20170719 17:07:09.162"></status>
</kw>
<msg timestamp="20170719 17:07:09.163" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170719 17:07:09.163" starttime="20170719 17:07:09.162"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:07:09.170" starttime="20170719 17:07:09.166"></status>
</kw>
<msg timestamp="20170719 17:07:09.170" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709</msg>
<status status="PASS" endtime="20170719 17:07:09.170" starttime="20170719 17:07:09.163"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170719 17:07:09.174" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709</msg>
<status status="PASS" endtime="20170719 17:07:09.174" starttime="20170719 17:07:09.170"></status>
</kw>
<status status="PASS" endtime="20170719 17:07:09.174" starttime="20170719 17:07:09.155"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170719 17:07:09.195" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170719 17:07:09.195" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170719 17:07:09.195" starttime="20170719 17:07:09.175"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:07:09.196" starttime="20170719 17:07:09.196"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170719 17:07:09.196" starttime="20170719 17:07:09.196"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:07:09.197" starttime="20170719 17:07:09.197"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170719 17:07:09.197" starttime="20170719 17:07:09.197"></status>
</kw>
<status status="PASS" endtime="20170719 17:07:09.197" starttime="20170719 17:07:09.175"></status>
</kw>
<status status="PASS" endtime="20170719 17:07:09.198" starttime="20170719 17:07:09.174"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 17:02:44 CST 2017 from 10.69.80.114 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05689738&gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05689738&gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 17:07:10 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05694F08&gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05694F08&gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 17:07:21 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05694418&gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05694418&gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 17:07:31 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05694EE0&gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05694EE0&gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 17:07:42 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0571C260&gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0571C260&gt;</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170719 17:08:25.912" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170719 17:08:25.914" starttime="20170719 17:07:09.198"></status>
</kw>
<status status="PASS" endtime="20170719 17:08:25.914" starttime="20170719 17:07:09.198"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170719 17:08:25.915" starttime="20170719 17:08:25.914"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170719 17:08:25.916" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170719 17:08:25.916" starttime="20170719 17:08:25.915"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170719 17:08:25.919" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170719 17:08:25.919" starttime="20170719 17:08:25.916"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170719 17:08:25.922" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170719 17:08:25.922" starttime="20170719 17:08:25.919"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170719 17:08:25.926" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170719 17:08:25.926" starttime="20170719 17:08:25.923"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170719 17:08:27.317" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170719 17:08:27.317" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170719 17:08:27.317" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170719 17:08:27.317" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170719 17:08:27.317" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:08:27.318" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;</msg>
<status status="PASS" endtime="20170719 17:08:27.318" starttime="20170719 17:08:25.926"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170719 17:08:27.319" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;</msg>
<status status="PASS" endtime="20170719 17:08:27.319" starttime="20170719 17:08:27.318"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170719 17:08:28.526" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;</msg>
<msg timestamp="20170719 17:08:28.527" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170719 17:08:28.527" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170719 17:08:28.527" starttime="20170719 17:08:27.323"></status>
</kw>
<status status="PASS" endtime="20170719 17:08:28.527" starttime="20170719 17:08:27.319"></status>
</kw>
<status status="PASS" endtime="20170719 17:08:28.527" starttime="20170719 17:08:25.915"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170719 17:08:28.530" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;.</msg>
<status status="PASS" endtime="20170719 17:08:28.530" starttime="20170719 17:08:28.527"></status>
</kw>
<status status="PASS" endtime="20170719 17:08:28.531" starttime="20170719 17:07:09.098"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:37.047" starttime="20170719 17:18:37.044"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170719 17:18:37.063" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170719 17:18:37.063" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;</msg>
<msg timestamp="20170719 17:18:37.063" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170719 17:18:37.063" level="INFO">[telnet_common.py@189] Disconnect from 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<status status="PASS" endtime="20170719 17:18:37.063" starttime="20170719 17:18:37.048"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:37.064" starttime="20170719 17:18:37.064"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:37.064" starttime="20170719 17:18:37.064"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:37.065" starttime="20170719 17:18:37.065"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:37.065" starttime="20170719 17:18:37.065"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:37.066" starttime="20170719 17:18:37.044"></status>
</kw>
<test id="s1-t1" name="FZHQ_T1_Operational_RF_block_unblock">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170719170707//ev_logs//D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170719 17:08:28.537" level="INFO">${timestamp} = 20170719170828</msg>
<status status="PASS" endtime="20170719 17:08:28.537" starttime="20170719 17:08:28.537"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170719 17:08:28.539" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 17:08:28.539" starttime="20170719 17:08:28.538"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170719 17:08:28.540" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 17:08:28.540" starttime="20170719 17:08:28.539"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170719 17:08:28.540" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 17:08:28.540" starttime="20170719 17:08:28.540"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170719 17:08:28.541" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock"&gt;D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170719 17:08:28.542" starttime="20170719 17:08:28.541"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170719 17:08:28.542" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 17:08:28.542" starttime="20170719 17:08:28.542"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170719 17:08:28.543" starttime="20170719 17:08:28.542"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:08:28.545" starttime="20170719 17:08:28.544"></status>
</kw>
<msg timestamp="20170719 17:08:28.545" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170719 17:08:28.545" starttime="20170719 17:08:28.544"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:08:28.546" starttime="20170719 17:08:28.546"></status>
</kw>
<msg timestamp="20170719 17:08:28.546" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170719 17:08:28.546" starttime="20170719 17:08:28.545"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170719 17:08:28.550" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 17:08:28.550" starttime="20170719 17:08:28.546"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170719 17:08:28.551" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 17:08:28.551" starttime="20170719 17:08:28.550"></status>
</kw>
<status status="PASS" endtime="20170719 17:08:28.551" starttime="20170719 17:08:28.543"></status>
</kw>
<status status="PASS" endtime="20170719 17:08:28.551" starttime="20170719 17:08:28.536"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170719 17:08:28.572" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=37710 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmp12nupa --insecure</msg>
<msg timestamp="20170719 17:08:30.582" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 17:08:30.582" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 17:08:34.613" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 17:08:34.613" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 17:08:38.628" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 17:08:38.628" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 17:08:41.635" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170719 17:08:41.635" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 48314, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170719 17:08:49.149" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 48314, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170719 17:08:51.913" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 48314, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170719 17:08:51.913" starttime="20170719 17:08:28.551"></status>
</kw>
<status status="PASS" endtime="20170719 17:08:51.913" starttime="20170719 17:08:28.532"></status>
</kw>
<kw name="Reset_BTS_If_Ini_State_Unmatch" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${ini_state_check}</arg>
</arguments>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170719 17:09:01.092" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170719 17:09:01.092" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170719 17:09:01.092" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170719 17:09:01.092" starttime="20170719 17:08:51.915"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Query_Infomodel_With_Multi_Condition</arg>
<arg>${ini_state_check}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Query_Infomodel_With_Multi_Condition" library="SISO1 Resource">
<arguments>
<arg>${ini_state_check}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${condition_list}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170719 17:09:01.094" level="INFO">Length is 1</msg>
<msg timestamp="20170719 17:09:01.094" level="INFO">${ret} = 1</msg>
<status status="PASS" endtime="20170719 17:09:01.094" starttime="20170719 17:09:01.094"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${ret} ]">
<kw type="foritem" name="${num} = 0">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20170719 17:09:11.173" level="FAIL">InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=onAirDone] = 1' doesn't pass in timeout=10.0. Actual count = 0</msg>
<status status="FAIL" endtime="20170719 17:09:11.173" starttime="20170719 17:09:01.095"></status>
</kw>
<status status="FAIL" endtime="20170719 17:09:11.173" starttime="20170719 17:09:01.094"></status>
</kw>
<status status="FAIL" endtime="20170719 17:09:11.174" starttime="20170719 17:09:01.094"></status>
</kw>
<status status="FAIL" endtime="20170719 17:09:11.174" starttime="20170719 17:09:01.093"></status>
</kw>
<msg timestamp="20170719 17:09:11.174" level="INFO">${result} = FAIL</msg>
<msg timestamp="20170719 17:09:11.174" level="INFO">${ret} = InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=onAirDone] = 1' doesn't pass in timeout=10.0. Actual count = 0</msg>
<status status="PASS" endtime="20170719 17:09:11.174" starttime="20170719 17:09:01.093"></status>
</kw>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170719 17:09:11.798" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170719 17:09:11.798" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170719 17:09:11.798" starttime="20170719 17:09:11.174"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170719 17:09:11.810" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;.</msg>
<status status="PASS" endtime="20170719 17:09:11.810" starttime="20170719 17:09:11.803"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170719 17:09:15.997" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;</msg>
<msg timestamp="20170719 17:09:15.997" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170719 17:09:15.997" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170719 17:09:15.997" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170719 17:09:15.998" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170719 17:09:15.998" starttime="20170719 17:09:11.810"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:09:16.001" starttime="20170719 17:09:15.998"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170719 17:09:16.004" starttime="20170719 17:09:16.001"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>bts_host=${ADMIN.IP}</arg>
<arg>bts_port=${ADMIN.PORT}</arg>
<arg>use_ssl=${ADMIN.USE_SSL}</arg>
<arg>skip_parameter_relation_errors=${ADMIN.SKIP_PARAMETER_RELATION_ERRORS}</arg>
</arguments>
<msg timestamp="20170719 17:09:58.333" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.1 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_uploadscf.log --interval=5000 --cli-port=35841 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpcw9ba4 --insecure</msg>
<msg timestamp="20170719 17:10:00.334" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 17:10:00.334" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 17:10:04.341" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 17:10:04.341" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 17:10:08.344" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 17:10:08.344" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 17:10:11.857" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170719 17:10:11.857" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 88501, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170719 17:10:19.440" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 88501, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170719 17:10:22.103" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 88501, "requestMessage": "onAir"}}</msg>
<msg timestamp="20170719 17:10:22.110" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 81130, "parameters": {"name": "downloadPlan", "parameters": {"skipParameterRelationErrors": true, "inputFileContent": "", "btsId": "797", "shouldBeActivated": true}}}}</msg>
<msg timestamp="20170719 17:10:22.141" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"type": "SIZE", "id": 81130}}</msg>
<msg timestamp="20170719 17:10:22.141" level="INFO">Send message: {"type": "FILE_TRANSFER", "payload": {"data": 84333, "type": "SIZE", "id": 81130}}</msg>
<msg timestamp="20170719 17:10:22.172" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"length": 84333, "type": "READ", "id": 81130, "offset": 0}}</msg>
<msg timestamp="20170719 17:10:22.223" level="INFO">Send message: {"type": "FILE_TRANSFER", "payload": {"data": "PD94bWwgdm ... &lt;type 'str'&gt; of lenght: 112444", "type": "READ", "id": 81130}}</msg>
<msg timestamp="20170719 17:10:28.036" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 81130, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170719 17:10:33.036" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 81130, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170719 17:10:35.199" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"type": "CLOSE_READER", "id": 81130}}</msg>
<msg timestamp="20170719 17:10:35.199" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 81130, "requestMessage": {"validationResult": {"niddValidationResult": {"status": "OK", "logs": {"objectsOccurencesErrors": null, "invalidObjectsDistnames": null, "definitionErrors": null, "skippedElementsErrors": null}}, "pdlValidationResult": {"status": "FAIL", "logs": ["rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 275", "rule faile ... &lt;type 'unicode'&gt; of lenght: 265", "rule faile ... &lt;type 'unicode'&gt; of lenght: 142", "rule faile ... &lt;type 'unicode'&gt; of lenght: 119", "rule faile ... &lt;type 'unicode'&gt; of lenght: 237", "rule faile ... &lt;type 'unicode'&gt; of lenght: 138", "rule faile ... &lt;type 'unicode'&gt; of lenght: 162", "rule faile ... &lt;type 'unicode'&gt; of lenght: 140", "rule faile ... &lt;type 'unicode'&gt; of lenght: 130", "rule faile ... &lt;type 'unicode'&gt; of lenght: 176", "rule faile ... &lt;type 'unicode'&gt; of lenght: 314", "rule faile ... &lt;type 'unicode'&gt; of lenght: 293", "rule faile ... &lt;type 'unicode'&gt; of lenght: 244", "rule faile ... &lt;type 'unicode'&gt; of lenght: 242", "rule faile ... &lt;type 'unicode'&gt; of lenght: 123", "rule faile ... &lt;type 'unicode'&gt; of lenght: 127", "rule faile ... &lt;type 'unicode'&gt; of lenght: 360", "rule faile ... &lt;type 'unicode'&gt; of lenght: 103", "rule faile ... &lt;type 'unicode'&gt; of lenght: 92", "rule faile ... &lt;type 'unicode'&gt; of lenght: 103", "rule faile ... &lt;type 'unicode'&gt; of lenght: 92", "rule faile ... &lt;type 'unicode'&gt; of lenght: 137", "rule faile ... &lt;type 'unicode'&gt; of lenght: 138", "rule faile ... &lt;type 'unicode'&gt; of lenght: 110", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 160"]}}}}}</msg>
<msg timestamp="20170719 17:10:35.453" level="INFO">Exit code: 1</msg>
<msg timestamp="20170719 17:10:35.453" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:35841
</msg>
<msg timestamp="20170719 17:10:35.453" level="INFO">STDERR
</msg>
<msg timestamp="20170719 17:10:35.457" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:10:35.457" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 17:07:52 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:10:35.457" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05727DA0&gt;</msg>
<msg timestamp="20170719 17:10:35.457" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170719 17:10:35.457" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:10:35.457" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05727DA0&gt;</msg>
<msg timestamp="20170719 17:10:35.457" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:10:35.457" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 17:09:17 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:10:35.457" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05737918&gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05737918&gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 17:09:27 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05664D50&gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05664D50&gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 17:09:38 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05689738&gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05689738&gt;</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[enb_resource.py@371] Start to setup admin</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[enb_resource.py@374] Start to perform commissioning</msg>
<msg timestamp="20170719 17:10:35.458" level="INFO">[enb_resource.py@380] Start to teardown admin</msg>
<status status="PASS" endtime="20170719 17:10:35.459" starttime="20170719 17:09:16.004"></status>
</kw>
<kw name="Restart Bts Until Onair" library="tdd_ev_robotws">
<doc>restart bts with powerbreaker and then wait until it is onair.</doc>
<arguments>
<arg>bts_powerbreak_port=${bts_powerbreak}</arg>
</arguments>
<msg timestamp="20170719 17:15:14.723" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[facom.py@60] Power off port 1 succeed!</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[facom.py@60] Power off port 1 succeed!</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[facom.py@83] Power on port 1 succeed!</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[facom.py@83] Power on port 1 succeed!</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[tools_resource.py@39] restart port '['FACOM:10.69.66.100:1', 'FACOM:10.56.7.144:1']' with powerbreak succeed !</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock" already exists, no need to create it again.</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.723" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Online'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.operationalState=Enabled]' succeed .</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@225] infomodel check every cell onair succeed !</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[enb_resource.py@253] bts log check onair msg succeed !</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock\im_20170719171513' succeed .</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170719 17:15:14.724" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170719 17:15:14.727" starttime="20170719 17:10:35.459"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:14.727" starttime="20170719 17:09:11.802"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:14.727" starttime="20170719 17:09:11.799"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:14.727" starttime="20170719 17:08:51.914"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170719 17:15:14.950" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20170719 17:15:14.950" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170719 17:15:14.950" starttime="20170719 17:15:14.729"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170719 17:15:24.784" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170719 17:15:24.784" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170719 17:15:24.784" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170719 17:15:24.784" starttime="20170719 17:15:14.950"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170719 17:15:24.785" level="INFO">${case_execute_log_name} = owner_debug</msg>
<status status="PASS" endtime="20170719 17:15:24.785" starttime="20170719 17:15:24.784"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:24.785" starttime="20170719 17:15:14.728"></status>
</kw>
<kw name="Get_BTS_DN" library="SISO1 Resource">
<arguments>
<arg>RMOD_L</arg>
</arguments>
<assign>
<var>${RMOD_L_DN}</var>
</assign>
<kw name="Get Objects By Class Name" library="ute_admin">
<doc>Get objects by class name.</doc>
<arguments>
<arg>${DN_Name}</arg>
</arguments>
<assign>
<var>${DN_LIST1}</var>
</assign>
<msg timestamp="20170719 17:15:24.787" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 21933, "parameters": {"name": "getItemsByClassName", "parameters": {"className": "RMOD_L"}}}}</msg>
<msg timestamp="20170719 17:15:24.952" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 21933, "requestMessage": [{"distName": "/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1", "parameters": {"macAddress": "00:00:02:01:00:35", "hwVariant": null, "identityDN": null, "l3Protocol": "CPRI_RP1", "routingDirectionCalculated": "CCW", "productCode": "473106A.X11", "filterIpAddress": "1.1.1.1", "supportsLineRateAutoNegotiation": false, "supportsMultiRouter": false, "l3MinorProtocolVersion": 0, "hwVersion": "X11  ", "bpfForRadioAvailabilityState": "Unknown", "supportsChaining": false, "routingDirectionApplied": "CCW", "sourceEthernetBBswitchDN": "", "productName": "FZHQ", "masterAgentDN": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 51", "supportsMixedLinkRates": "Unknown", "tempNetActId": 1, "frameForwardingDelay": [], "serialNumber": "RY151105157", "l3MajorProtocolVersion": 1, "stateInfo": {"usageState": "Active", "detectionState": "Done", "workingState": "dedicated", "availabilityStatus": "Online", "administrativeState": "Unlocked", "operationalState": "Enabled", "reasoningStatus": [], "proceduralState": "ethernetEnabled"}, "filterMacAddress": "aa:bb:cc:dd:ee:ff", "ipAddress": "172.16.17.128"}}]}}</msg>
<msg timestamp="20170719 17:15:24.952" level="INFO">${DN_LIST1} = [{u'distName': u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1', u'parameters': {u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': u'CPRI_RP1', u'routingDirectionC...</msg>
<status status="PASS" endtime="20170719 17:15:24.952" starttime="20170719 17:15:24.786"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${DN_LIST1}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:24.953" starttime="20170719 17:15:24.953"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${DN_LIST}</var>
</assign>
<msg timestamp="20170719 17:15:24.954" level="INFO">${DN_LIST} = []</msg>
<status status="PASS" endtime="20170719 17:15:24.954" starttime="20170719 17:15:24.953"></status>
</kw>
<kw type="for" name="${index} IN [ @{DN_LIST1} ]">
<kw type="foritem" name="${index} = {u'distName': u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1', u'parameters': {u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': u'CPRI_RP1', u'routingDirectionCa...">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${DN_LIST}</arg>
<arg>${index.distName}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:24.955" starttime="20170719 17:15:24.954"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:24.955" starttime="20170719 17:15:24.954"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:24.955" starttime="20170719 17:15:24.954"></status>
</kw>
<msg timestamp="20170719 17:15:24.955" level="INFO">${RMOD_L_DN} = [u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1']</msg>
<status status="PASS" endtime="20170719 17:15:24.955" starttime="20170719 17:15:24.786"></status>
</kw>
<kw name="Get_BTS_DN" library="SISO1 Resource">
<arguments>
<arg>LNCEL_L</arg>
</arguments>
<assign>
<var>${LNCEL_L_DN}</var>
</assign>
<kw name="Get Objects By Class Name" library="ute_admin">
<doc>Get objects by class name.</doc>
<arguments>
<arg>${DN_Name}</arg>
</arguments>
<assign>
<var>${DN_LIST1}</var>
</assign>
<msg timestamp="20170719 17:15:24.958" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 38098, "parameters": {"name": "getItemsByClassName", "parameters": {"className": "LNCEL_L"}}}}</msg>
<msg timestamp="20170719 17:15:24.998" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 38098, "requestMessage": [{"distName": "/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1", "parameters": {"ulChBw": "20MHz", "attachedLncelDNs": [], "maxPucchResourceSize": null, "actMicroDtx": false, "stateInfo": {"ecgiReportedInFaultReq": null, "reasoningStatus": [], "administrativeState": "Unlocked", "suggestedEnergySaving": "notEnergySaving", "s1LinkState": "Available", "barringState": "NotBarred", "energySaving": "notEnergySaving", "mappingState": "ReadyForSetup"}, "phyCellId": 121, "caPoolId": 0, "dlChBw": "20MHz", "requestedNumberOfUeToBeSupportedFromFaultReq": null, "lcrId": 1, "paDNs": [], "allowedNumberOfUeWithTheCurrentConfigurationFromFaultReq": null, "technology": "tdd", "type": "Local", "helperLncelDN": ""}}]}}</msg>
<msg timestamp="20170719 17:15:24.999" level="INFO">${DN_LIST1} = [{u'distName': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1', u'parameters': {u'ulChBw': u'20MHz', u'attachedLncelDNs': [], u'maxPucchResourceSize': None, u'actMicroDtx': False, u'stateInfo': {u'ecgiRep...</msg>
<status status="PASS" endtime="20170719 17:15:24.999" starttime="20170719 17:15:24.956"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${DN_LIST1}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:24.999" starttime="20170719 17:15:24.999"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${DN_LIST}</var>
</assign>
<msg timestamp="20170719 17:15:25.000" level="INFO">${DN_LIST} = []</msg>
<status status="PASS" endtime="20170719 17:15:25.000" starttime="20170719 17:15:25.000"></status>
</kw>
<kw type="for" name="${index} IN [ @{DN_LIST1} ]">
<kw type="foritem" name="${index} = {u'distName': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1', u'parameters': {u'ulChBw': u'20MHz', u'attachedLncelDNs': [], u'maxPucchResourceSize': None, u'actMicroDtx': False, u'stateInfo': {u'ecgiRepo...">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${DN_LIST}</arg>
<arg>${index.distName}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:25.003" starttime="20170719 17:15:25.003"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:25.003" starttime="20170719 17:15:25.000"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:25.003" starttime="20170719 17:15:25.000"></status>
</kw>
<msg timestamp="20170719 17:15:25.004" level="INFO">${LNCEL_L_DN} = [u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1']</msg>
<status status="PASS" endtime="20170719 17:15:25.004" starttime="20170719 17:15:24.956"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${total_times} ]">
<kw type="foritem" name="${num} = 0">
<kw name="_RF_Block_Unblock_and_Attach">
<doc>Operation with BTS</doc>
<arguments>
<arg>${RMOD_L_DN[0]}</arg>
<arg>${LNCEL_L_DN[0]}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170719 17:15:25.009" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;.</msg>
<status status="PASS" endtime="20170719 17:15:25.009" starttime="20170719 17:15:25.005"></status>
</kw>
<kw name="Block" library="ute_admin">
<doc>Preform block procedure.</doc>
<arguments>
<arg>dist_name=${RMOD_DN}</arg>
</arguments>
<msg timestamp="20170719 17:15:25.010" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 86309, "parameters": {"name": "block", "parameters": {"distName": "/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1"}}}}</msg>
<msg timestamp="20170719 17:15:29.073" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 86309, "requestMessage": ""}}</msg>
<status status="PASS" endtime="20170719 17:15:29.073" starttime="20170719 17:15:25.009"></status>
</kw>
<kw name="Wait For Alarm Presence" library="ute_admin">
<doc>Wait for alarm presence. Checks if alaram with given parameters exists.</doc>
<arguments>
<arg>${LNCEL_L_DN}</arg>
<arg>alarmInformation.faultId=${48}</arg>
</arguments>
<msg timestamp="20170719 17:15:29.074" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 8492, "parameters": {"name": "waitForAlarms", "parameters": {"alarmProperties": {"alarmInformation.faultId": 48}, "operationType": "presence", "timeout": 10000.0, "parentDistName": "/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1"}}}}</msg>
<msg timestamp="20170719 17:15:32.388" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 8492, "requestMessage": [{"transportInformation": {"reportedNumber": null, "notificationId": null, "faultSourceObject": null, "argumentInfo": null, "probableCause": null}, "alarmInformation": {"alarmActivity": "Set", "alarmNumber": 7653, "faultId": 48, "alarmSeverity": "Critical", "eventType": "QualityOfService", "alarmText": {"alarmDetailNbr": 48, "faultDescription": "Unit blocked", "alarmAdditionalInfo": {"additionalFaultReason": null, "sourceIPAddr": null, "destinationPortNum": null, "supplDestinationIPAddr": null, "supplAlarmInfo": null, "shared": null, "destinationIPAddr": null, "additionalFaultID": 48}, "groupDescription": null, "alarmDetail": "Unit blocked"}, "togglingId": null, "alarmAttribute": [], "faultSeverity": "Critical", "observationTime": "20170719171532.480+0800", "groupId": null}, "unitInformation": {"reportingResource": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 66", "alarmingResource": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 66"}}]}}</msg>
<status status="PASS" endtime="20170719 17:15:32.388" starttime="20170719 17:15:29.073"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5 sec</arg>
</arguments>
<msg timestamp="20170719 17:15:37.389" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20170719 17:15:37.389" starttime="20170719 17:15:32.388"></status>
</kw>
<kw name="Unblock" library="ute_admin">
<doc>Preform unblock procedure.</doc>
<arguments>
<arg>dist_name=${RMOD_DN}</arg>
</arguments>
<msg timestamp="20170719 17:15:37.391" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 83324, "parameters": {"name": "unblock", "parameters": {"distName": "/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1"}}}}</msg>
<msg timestamp="20170719 17:15:39.005" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 83324, "requestMessage": ""}}</msg>
<status status="PASS" endtime="20170719 17:15:39.005" starttime="20170719 17:15:37.389"></status>
</kw>
<kw name="Wait For Alarm Deletion" library="ute_admin">
<doc>Wait for alarm deletion. Checks if alaram with given parameters not exist.</doc>
<arguments>
<arg>${LNCEL_L_DN}</arg>
<arg>alarmInformation.faultId=${48}</arg>
</arguments>
<msg timestamp="20170719 17:15:39.006" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 53722, "parameters": {"name": "waitForAlarms", "parameters": {"alarmProperties": {"alarmInformation.faultId": 48}, "operationType": "deletion", "timeout": 10000.0, "parentDistName": "/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1"}}}}</msg>
<msg timestamp="20170719 17:15:39.569" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 53722, "requestMessage": []}}</msg>
<status status="PASS" endtime="20170719 17:15:39.569" starttime="20170719 17:15:39.005"></status>
</kw>
<kw name="Wait_BTS_Until_Onair" library="SISO1 Resource">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10 sec</arg>
</arguments>
<msg timestamp="20170719 17:15:49.570" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170719 17:15:49.570" starttime="20170719 17:15:39.570"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>8 min</arg>
<arg>20 sec</arg>
<arg>Query Infomodel</arg>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170719 17:15:49.707" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<status status="PASS" endtime="20170719 17:15:49.707" starttime="20170719 17:15:49.571"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.707" starttime="20170719 17:15:49.570"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.708" starttime="20170719 17:15:39.569"></status>
</kw>
<kw name="UE_Attach_SISO1" library="SISO1 Resource">
<doc>Example</doc>
<arguments>
<arg>1</arg>
</arguments>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${cell_id}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{cell_list}</var>
</assign>
<msg timestamp="20170719 17:15:49.712" level="INFO">@{cell_list} = [ 1 ]</msg>
<status status="PASS" endtime="20170719 17:15:49.712" starttime="20170719 17:15:49.712"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${cell_list}</arg>
</arguments>
<assign>
<var>${cell_list_length}</var>
</assign>
<msg timestamp="20170719 17:15:49.712" level="INFO">Length is 1</msg>
<msg timestamp="20170719 17:15:49.713" level="INFO">${cell_list_length} = 1</msg>
<status status="PASS" endtime="20170719 17:15:49.713" starttime="20170719 17:15:49.712"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Split String</arg>
<arg>${attach_earfcn}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${earfcn_list1}</var>
</assign>
<msg timestamp="20170719 17:15:49.716" level="INFO">${earfcn_list1} = None</msg>
<status status="PASS" endtime="20170719 17:15:49.716" starttime="20170719 17:15:49.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Change_Earfcn_To_Freqency</arg>
<arg>${earfcn_list1}</arg>
</arguments>
<assign>
<var>${freqency_list1}</var>
<var>${band_list1}</var>
</assign>
<msg timestamp="20170719 17:15:49.719" level="INFO">${freqency_list1} = None</msg>
<msg timestamp="20170719 17:15:49.719" level="INFO">${band_list1} = None</msg>
<status status="PASS" endtime="20170719 17:15:49.719" starttime="20170719 17:15:49.716"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Get_Earfcn_From_Infomodel</arg>
</arguments>
<assign>
<var>${earfcn_list2}</var>
<var>${freqency_list2}</var>
<var>${band_list2}</var>
</assign>
<kw name="Get_Earfcn_From_Infomodel" library="SISO1 Resource">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>get list /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1</arg>
</arguments>
<assign>
<var>@{ret_earfcn}</var>
</assign>
<msg timestamp="20170719 17:15:49.793" level="INFO">[infomodel_control.py@328] query infomodel: 'get list /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1' succeed .</msg>
<msg timestamp="20170719 17:15:49.793" level="INFO">@{ret_earfcn} = [ InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1/CARRIER_GROUP_L-1: {u'fcnULs': [40890L], u'fcnDLs': [40890L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1/CARRIER_GROUP_L-1', u's...</msg>
<status status="PASS" endtime="20170719 17:15:49.793" starttime="20170719 17:15:49.723"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${ret_earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.794" starttime="20170719 17:15:49.794"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${earfcn_list}</var>
</assign>
<msg timestamp="20170719 17:15:49.795" level="INFO">${earfcn_list} = []</msg>
<status status="PASS" endtime="20170719 17:15:49.795" starttime="20170719 17:15:49.795"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${freqency_list}</var>
</assign>
<msg timestamp="20170719 17:15:49.796" level="INFO">${freqency_list} = []</msg>
<status status="PASS" endtime="20170719 17:15:49.796" starttime="20170719 17:15:49.795"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${band_list}</var>
</assign>
<msg timestamp="20170719 17:15:49.797" level="INFO">${band_list} = []</msg>
<status status="PASS" endtime="20170719 17:15:49.797" starttime="20170719 17:15:49.796"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_OFFSET}</arg>
</arguments>
<assign>
<var>${offset_dict}</var>
</assign>
<msg timestamp="20170719 17:15:49.798" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170719 17:15:49.801" level="INFO">${offset_dict} = {u'38': u'1205', u'40': u'1565', u'39': u'1945', u'41': u'1469', u'42': u'759', u'43': u'759', u'37': u'1845', u'36': u'1765', u'35': u'1785', u'34': u'1610', u'33': u'1700'}</msg>
<status status="PASS" endtime="20170719 17:15:49.801" starttime="20170719 17:15:49.797"></status>
</kw>
<kw type="for" name="${index} IN [ @{ret_earfcn} ]">
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1/CARRIER_GROUP_L-1: {u'fcnULs': [40890L], u'fcnDLs': [40890L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1/CARRIER_GROUP_L-1', u'sta...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170719 17:15:49.802" level="INFO">${index.earfcn} = 40890</msg>
<status status="PASS" endtime="20170719 17:15:49.802" starttime="20170719 17:15:49.802"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.803" starttime="20170719 17:15:49.802"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170719 17:15:49.804" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170719 17:15:49.806" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170719 17:15:49.806" starttime="20170719 17:15:49.804"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170719 17:15:49.807" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170719 17:15:49.807" starttime="20170719 17:15:49.806"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170719 17:15:49.808" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170719 17:15:49.808" starttime="20170719 17:15:49.807"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170719 17:15:49.811" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170719 17:15:49.811" starttime="20170719 17:15:49.808"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.812" starttime="20170719 17:15:49.812"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.812" starttime="20170719 17:15:49.807"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170719 17:15:49.813" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170719 17:15:49.813" starttime="20170719 17:15:49.812"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170719 17:15:49.816" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170719 17:15:49.816" starttime="20170719 17:15:49.813"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.817" starttime="20170719 17:15:49.817"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.817" starttime="20170719 17:15:49.812"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170719 17:15:49.818" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170719 17:15:49.818" starttime="20170719 17:15:49.817"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170719 17:15:49.822" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170719 17:15:49.822" starttime="20170719 17:15:49.818"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.822" starttime="20170719 17:15:49.822"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.822" starttime="20170719 17:15:49.817"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170719 17:15:49.823" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170719 17:15:49.823" starttime="20170719 17:15:49.822"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170719 17:15:49.827" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170719 17:15:49.827" starttime="20170719 17:15:49.823"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170719 17:15:49.827" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170719 17:15:49.827" starttime="20170719 17:15:49.827"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.827" starttime="20170719 17:15:49.822"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.828" starttime="20170719 17:15:49.807"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.832" starttime="20170719 17:15:49.828"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170719 17:15:49.837" level="INFO">${bts_band} = 41</msg>
<status status="PASS" endtime="20170719 17:15:49.837" starttime="20170719 17:15:49.832"></status>
</kw>
<msg timestamp="20170719 17:15:49.837" level="INFO">${attach_band} = 41</msg>
<status status="PASS" endtime="20170719 17:15:49.837" starttime="20170719 17:15:49.803"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170719 17:15:49.838" level="INFO">${attach_band} = 41</msg>
<status status="PASS" endtime="20170719 17:15:49.838" starttime="20170719 17:15:49.838"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.839" starttime="20170719 17:15:49.839"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170719 17:15:49.840" level="INFO">${offset} = 1469</msg>
<status status="PASS" endtime="20170719 17:15:49.840" starttime="20170719 17:15:49.839"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170719 17:15:49.845" level="INFO">${freq} = 26200.0</msg>
<status status="PASS" endtime="20170719 17:15:49.845" starttime="20170719 17:15:49.840"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170719 17:15:49.846" level="INFO">${fq} = 26200</msg>
<status status="PASS" endtime="20170719 17:15:49.846" starttime="20170719 17:15:49.845"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170719 17:15:49.847" level="INFO">${freqency} = 26200</msg>
<status status="PASS" endtime="20170719 17:15:49.847" starttime="20170719 17:15:49.846"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.848" starttime="20170719 17:15:49.848"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.848" starttime="20170719 17:15:49.801"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.848" starttime="20170719 17:15:49.801"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.849" starttime="20170719 17:15:49.723"></status>
</kw>
<msg timestamp="20170719 17:15:49.849" level="INFO">${earfcn_list2} = [u'40890']</msg>
<msg timestamp="20170719 17:15:49.849" level="INFO">${freqency_list2} = [u'26200']</msg>
<msg timestamp="20170719 17:15:49.849" level="INFO">${band_list2} = [u'41']</msg>
<status status="PASS" endtime="20170719 17:15:49.849" starttime="20170719 17:15:49.720"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${earfcn_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<assign>
<var>${earfcn_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.859" starttime="20170719 17:15:49.854"></status>
</kw>
<msg timestamp="20170719 17:15:49.859" level="INFO">${earfcn_list} = [u'40890']</msg>
<status status="PASS" endtime="20170719 17:15:49.859" starttime="20170719 17:15:49.849"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${freqency_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<assign>
<var>${freqency_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.868" starttime="20170719 17:15:49.864"></status>
</kw>
<msg timestamp="20170719 17:15:49.869" level="INFO">${freqency_list} = [u'26200']</msg>
<status status="PASS" endtime="20170719 17:15:49.869" starttime="20170719 17:15:49.859"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${band_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<assign>
<var>${band_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.878" starttime="20170719 17:15:49.874"></status>
</kw>
<msg timestamp="20170719 17:15:49.878" level="INFO">${band_list} = [u'41']</msg>
<status status="PASS" endtime="20170719 17:15:49.879" starttime="20170719 17:15:49.869"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${cell_index1}</var>
</assign>
<msg timestamp="20170719 17:15:49.879" level="INFO">${cell_index1} = 0</msg>
<status status="PASS" endtime="20170719 17:15:49.879" starttime="20170719 17:15:49.879"></status>
</kw>
<kw type="for" name="${cell_index2} IN [ @{cell_list} ]">
<kw type="foritem" name="${cell_index2} = 1">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Evaluate</arg>
<arg>${cell_index1}</arg>
<arg>ELSE</arg>
<arg>Evaluate</arg>
<arg>${cell_index2}-1</arg>
</arguments>
<assign>
<var>${cell_index}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${cell_index2}-1</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.890" starttime="20170719 17:15:49.885"></status>
</kw>
<msg timestamp="20170719 17:15:49.890" level="INFO">${cell_index} = 0</msg>
<status status="PASS" endtime="20170719 17:15:49.890" starttime="20170719 17:15:49.880"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='CPE'</arg>
<arg>Run Keyword If</arg>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.900" starttime="20170719 17:15:49.895"></status>
</kw>
<status status="PASS" endtime="20170719 17:15:49.900" starttime="20170719 17:15:49.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='CPE'</arg>
<arg>CPE_Attach_SISO1_src</arg>
<arg>${earfcn_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${band_list[${cell_index}]}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:15:49.904" starttime="20170719 17:15:49.900"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='TM500'</arg>
<arg>TM500_Attach_SISO1_src</arg>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="TM500_Attach_SISO1_src" library="SISO1 Resource">
<arguments>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="Tm500 Setup" library="tdd_ev_robotws">
<doc>tm500 setup.</doc>
<msg timestamp="20170719 17:15:51.795" level="INFO">${TM500_PC_CONNECTION} = 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[robot_func.py@29] Can't get variable '${TM500_PC_CONNECTION}' ! details: 'Variable '${TM500_PC_CONNECTION}' not found.'</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;.</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',tdd_ev_robotws.__version__"</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',tdd_ev_robotws.__version__"
*SEP* 1.0.1

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.477" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@276] Execute command: "D:\TA\trunk_soam\tdd_ev_robotws\tools\psexec.exe" -i -d python "D:\TA\trunk_soam\tdd_ev_robotws\tools\robotremoteserver.py"  -l tdd_ev_robotws -i 0.0.0.0 -p 8275 -s True</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@306] Get Response: "D:\TA\trunk_soam\tdd_ev_robotws\tools\psexec.exe" -i -d python "D:\TA\trunk_soam\tdd_ev_robotws\tools\robotremoteserver.py"  -l tdd_ev_robotws -i 0.0.0.0 -p 8275 -s True

PsExec v1.98 - Execute processes remotely
Copyright (C) 2001-2010 Mark Russinovich
Sysinternals - www.sysinternals.com

python started with process ID 6060.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[process_control.py@74] Process start successed ! process id: 6060</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[remote_lib_control.py@62] start remote server succeed !</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[tm500.py@108] have setup Remotelib instance: RemoteLibInstance: 10.69.71.199:8275</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[tm500.py@408] Request TM500 Resource:
sent -&gt; "request:15:1"
received &lt;- "Welcome! Please use it, You are No.1 in 1 user queue.

"</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[tm500.py@412] Get TM500 resource success!</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;.</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@276] Execute command: ls "C:\Program Files\FileZilla Server"</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@306] Get Response: ls "C:\Program Files\FileZilla Server"
ls: cannot access 'C:\Program Files\FileZilla Server': No such file or directory

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;.</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[file_control.py@332] copyfile2local command: 'D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock\FileZilla server.xml"'</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:10 minutes &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@276] Execute command: D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock\FileZilla server.xml"</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@306] Get Response: D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock\FileZilla server.xml"

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@276] Execute command: echo ERRORCODE is: %ERRORLEVEL%</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@306] Get Response: echo ERRORCODE is: %ERRORLEVEL%
ERRORCODE is: 0

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[file_common.py@168] Copy file "D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock\FileZilla server.xml" to "D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock\FileZilla server.xml.change_bak" succeeded.</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[filezilla_control.py@182] Filezilla configed right, no need to change TM500 version.</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;.</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$CLOSE</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[tm500.py@1736] TM500 command reply: C: CLOSE 0x00 ok.</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@276] Execute command: TASKKILL /F /T /IM TmaApplication.exe</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@306] Get Response: TASKKILL /F /T /IM TmaApplication.exe
ERROR: The process "TmaApplication.exe" not found.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@278] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@276] Execute command: "D:\TA\trunk_soam\tdd_ev_robotws\tools\Server_Client\client.exe" localhost "C:\Program Files (x86)\Aeroflex\TM500\LTE - LSC 1.2.0\Test Mobile Application\TmaApplication.exe" /u \"Default User\" /c y /p 5003 /a n</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.478" level="INFO">[telnet_common.py@276] Execute command: Ctrl-C</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[telnet_common.py@306] Get Response: Server Keep Alive Message Interval is [4 bytes]: '3'
Keep Alive Message from Server Received [3 bytes]: '(be 0 3)' 
Keep Alive Message from Server Received [3 bytes]: '(be 0 3)' 
^C
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057472B0&gt;</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@591] Prev msg:</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DISCONNECT</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: DISCONNECT 0x00 OK</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$CONNECT</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: CONNECT 0x00 ok. Waiting for User to Configure Test Mobile</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: GSTS</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: GSTS 0x00 Ok Reset</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: ABOT 0 0 1</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: ABOT 0x00 Ok 0x0000001e</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: SELR 0 0 RC1 COMBINED</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: SELR 0x00 Ok</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: EREF 0 0 0</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: EREF 0x00 Ok</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: GETR</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: GETR 0x00 Ok 
Radio cards
==============
*  Card   : UMBRA2 LTE (20MHz)
   Slot   : RC1
   Chassis: 0
   Context: 0
   RF     : type 200
   A:  DL : 400.0 - 4000.0 MHz
       UL : 400.0 - 4000.0 MHz
   B:  DL : 0.0 - 0.0 MHz
       UL : 0.0 - 0.0 MHz
==============
   Card   : UMBRA2 LTE (20MHz)
   Slot   : RC2
   Chassis: 0
   Context: -
   RF     : type 17
   A:  DL : 2110.0 - 2170.0 MHz
       UL : 1920.0 - 1980.0 MHz
   B:  DL : 1880.0 - 1920.0 MHz
       UL : 1880.0 - 1920.0 MHz</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: SCFG NAS_MODE</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: SCFG 0x00 Ok NAS_MODE</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: STRT</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: STRT 0x00 Ok</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DATA_LOG_FOLDER 1 "C:\TM500_log\"</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: DATA_LOG_FOLDER 0x00 ok.</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DATA_LOG_OPTIONS 0 1 0</msg>
<msg timestamp="20170719 17:17:18.479" level="INFO">[tm500.py@1736] TM500 command reply: C: DATA_LOG_OPTIONS 0x00 ok.</msg>
<status status="PASS" endtime="20170719 17:17:18.483" starttime="20170719 17:15:49.910"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Use_Tag}</arg>
<arg>used</arg>
</arguments>
<msg timestamp="20170719 17:17:18.488" level="INFO">${TM500_Use_Tag} = used</msg>
<status status="PASS" endtime="20170719 17:17:18.488" starttime="20170719 17:17:18.484"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${cell_id}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170719 17:17:22.525" level="INFO">$TA,C,081E*</msg>
<msg timestamp="20170719 17:17:22.525" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,081E*', Receive&lt;-'$TA,C,081E*'</msg>
<msg timestamp="20170719 17:17:22.526" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,081E*'
$TA,C,161E*</msg>
<msg timestamp="20170719 17:17:22.526" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,161E*', Receive&lt;-'$TA,C,161E*'</msg>
<msg timestamp="20170719 17:17:22.526" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,161E*'</msg>
<status status="PASS" endtime="20170719 17:17:22.526" starttime="20170719 17:17:18.488"></status>
</kw>
<kw name="Tm500 Configure Logging" library="tdd_ev_robotws">
<doc>This keyword selects TM500's logging items.</doc>
<arguments>
<arg>${ue_log_types}</arg>
</arguments>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: GVER</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: GVER 0x00 Ok 
 PPC-0:
    BSP: 2.0/q/R13
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-0: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-1: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-2: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-3: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-4: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-5: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-6: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-7: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-8: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x101C
 DSP-9: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-10: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-11: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-12: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x208A
 DSP-13: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-14: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-15: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 Version Label: LSC_1_2_0_REV01
 UMBRA-0
    API: 19.2.1  Product: 3
    APP: 1.0.170  Built: Jun 20 2016 14:03:54
    CON: 3.5.3  Build: 0
    SIG: 2.1.1  Build: 46
    MMC: 1.7
    Carrier:  Loc: 13  PCB: 3.0 (OWI: 3.0)  SN: 0x9A000001D5F93823  BarCode: 20-1435-1360070-2517
    MOD TX: 0.0.17  Build: 16  Type: 200  PCB: 3.0 (OWI: 3.0)  SN: 0x6700000167952823  BarCode: 00000044830737250112
    MOD RX: 0.0.31  Build: 34  PCB: 3.0</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@507] TM500 command line response of "GVER":
C: GVER 0x00 Ok 
 PPC-0:
    BSP: 2.0/q/R13
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-0: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-1: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-2: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-3: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-4: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-5: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-6: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-7: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-8: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x101C
 DSP-9: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-10: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-11: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-12: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x208A
 DSP-13: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-14: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-15: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 Version Label: LSC_1_2_0_REV01
 UMBRA-0
    API: 19.2.1  Product: 3
    APP: 1.0.170  Built: Jun 20 2016 14:03:54
    CON: 3.5.3  Build: 0
    SIG: 2.1.1  Build: 46
    MMC: 1.7
    Carrier:  Loc: 13  PCB: 3.0 (OWI: 3.0)  SN: 0x9A000001D5F93823  BarCode: 20-1435-1360070-2517
    MOD TX: 0.0.17  Build: 16  Type: 200  PCB: 3.0 (OWI: 3.0)  SN: 0x6700000167952823  BarCode: 00000044830737250112
    MOD RX: 0.0.31  Build: 34  PCB: 3.0</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CLEAR_ALL</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CLEAR_ALL 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_ITM 1 1 1 Manual</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_ITM 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 100 0 0 0 UEOVERVIEW</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 1 0 0 0 ProtocolLog</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 CQIREPORTING #Subband 0-24 2</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 262 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 263 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 264 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 100 0 0 0 L1RBPOWERS #Component_Carrier 0,1 0</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 200 0 0 0 L1CELLWATCH</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLSCHRX</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.901" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLHARQRX</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 ULHARQTX</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 ULSRS</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLL1L2CONTROL</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 100 0 0 0 L1DLRSPOWER #Radio_Context_ID 0,1 0</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_ITM 0 0 0 Automatic</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_ITM 0x00 ok.</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_END</msg>
<msg timestamp="20170719 17:17:24.902" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_END 0x00 ok.</msg>
<status status="PASS" endtime="20170719 17:17:24.903" starttime="20170719 17:17:22.526"></status>
</kw>
<kw name="Tm500 Start Logging" library="tdd_ev_robotws">
<doc>This keyword starts TM500's logging.</doc>
<msg timestamp="20170719 17:17:25.668" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$START_LOGGING</msg>
<msg timestamp="20170719 17:17:25.668" level="INFO">[tm500.py@1736] TM500 command reply: I: TMAE 0x0 Information - Connecting to Protocol logging port 25699</msg>
<msg timestamp="20170719 17:17:25.668" level="INFO">[tm500.py@1352] TM500 command line response of "START LOGGING":
I: TMAE 0x0 Information - Connecting to Protocol logging port 25699
C: START_LOGGING 0x00 OK. Current logging folder is 'C:\TM500_LOG\/170719_171824_session/170719_171831'</msg>
<msg timestamp="20170719 17:17:25.668" level="INFO">[tm500.py@1363] C:\TM500_LOG\170719_171824_session\170719_171831</msg>
<status status="PASS" endtime="20170719 17:17:25.668" starttime="20170719 17:17:24.903"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${modify_tm500_script}</arg>
</arguments>
<assign>
<var>${modify_tm500_script}</var>
</assign>
<msg timestamp="20170719 17:17:25.669" level="INFO">${modify_tm500_script} = []</msg>
<status status="PASS" endtime="20170719 17:17:25.669" starttime="20170719 17:17:25.669"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${modify_tm500_script}</arg>
<arg>forw mte RrcAptConfigCellSelection: ${attach_freqency}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:25.670" starttime="20170719 17:17:25.669"></status>
</kw>
<kw name="Tm500 Attach" library="tdd_ev_robotws">
<doc>This keyword does UE attach operation of TM500.</doc>
<arguments>
<arg>${attach_scripts}</arg>
<arg>${modify_tm500_script}</arg>
</arguments>
<assign>
<var>${tm500_attach_result}</var>
</assign>
<msg timestamp="20170719 17:17:35.770" level="INFO">[file_common.py@125] Write file "D:\TA\BTS797\modified_attach_MIMO.txt" succeeded</msg>
<msg timestamp="20170719 17:17:35.770" level="INFO">[tm500.py@1728] TM500 command to be sent: SETP RRC_NUM_DL_ANTENNAS 4</msg>
<msg timestamp="20170719 17:17:35.770" level="INFO">[tm500.py@1736] TM500 command reply: C: SETP 0x00 Ok RRC_NUM_DL_ANTENNAS 0x00000004</msg>
<msg timestamp="20170719 17:17:35.770" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE USIMCONFIG 1([262030020000522 2] [] [] [] []) [] [] [A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5] [CDC202D5123E20F62B6D676AC72CB318 00000000000000000000000000000000 00000000000000000000000000000001 00000000000000000000000000000002 00000000000000000000000000000004 00000000000000000000000000000008 64 0 32 64 96]</msg>
<msg timestamp="20170719 17:17:35.770" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE USIMCONFIG: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170719 17:17:35.770" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE PHYCONFIGSYSCAP 2 4 4</msg>
<msg timestamp="20170719 17:17:35.770" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE PHYCONFIGSYSCAP: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170719 17:17:35.770" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE PHYSETTDDCFG 1 7</msg>
<msg timestamp="20170719 17:17:35.770" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x06 Failure of the command(s):
		FORW : Failure MTE PHYSETTDDCFG: RETURN CODE:6 FAILED TM500 LTE TDD not licensed or PhySetRATType not set</msg>
<msg timestamp="20170719 17:17:35.771" level="FAIL">TM500 return message does NOT contain "Ok"! ("Ok" is case insensitive)</msg>
<status status="FAIL" endtime="20170719 17:17:35.771" starttime="20170719 17:17:25.670"></status>
</kw>
<status status="FAIL" endtime="20170719 17:17:35.771" starttime="20170719 17:15:49.909"></status>
</kw>
<status status="FAIL" endtime="20170719 17:17:35.771" starttime="20170719 17:15:49.904"></status>
</kw>
<status status="FAIL" endtime="20170719 17:17:35.772" starttime="20170719 17:15:49.880"></status>
</kw>
<status status="FAIL" endtime="20170719 17:17:35.772" starttime="20170719 17:15:49.879"></status>
</kw>
<status status="FAIL" endtime="20170719 17:17:35.772" starttime="20170719 17:15:49.711"></status>
</kw>
<status status="FAIL" endtime="20170719 17:17:35.772" starttime="20170719 17:15:25.004"></status>
</kw>
<status status="FAIL" endtime="20170719 17:17:35.772" starttime="20170719 17:15:25.004"></status>
</kw>
<status status="FAIL" endtime="20170719 17:17:35.772" starttime="20170719 17:15:25.004"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170719 17:17:35.777" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x057373F0&gt;.</msg>
<status status="PASS" endtime="20170719 17:17:35.777" starttime="20170719 17:17:35.773"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170719 17:17:36.202" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170719 17:17:36.202" starttime="20170719 17:17:35.777"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170719 17:17:36.210" starttime="20170719 17:17:36.202"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:36.211" starttime="20170719 17:17:36.210"></status>
</kw>
<msg timestamp="20170719 17:17:36.211" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170719 17:17:36.211" starttime="20170719 17:17:36.210"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170719 17:17:36.225" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock\owner_debug' succeed .</msg>
<status status="PASS" endtime="20170719 17:17:36.225" starttime="20170719 17:17:36.215"></status>
</kw>
<status status="PASS" endtime="20170719 17:17:36.225" starttime="20170719 17:17:36.212"></status>
</kw>
<status status="PASS" endtime="20170719 17:17:36.225" starttime="20170719 17:17:36.211"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170719 17:17:36.878" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170719 17:17:36.878" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170719 17:17:36.878" starttime="20170719 17:17:36.229"></status>
</kw>
<status status="PASS" endtime="20170719 17:17:36.878" starttime="20170719 17:17:36.226"></status>
</kw>
<status status="PASS" endtime="20170719 17:17:36.878" starttime="20170719 17:17:36.225"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170719 17:17:37.129" level="INFO">Exit code: 1</msg>
<msg timestamp="20170719 17:17:37.129" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:37710
</msg>
<msg timestamp="20170719 17:17:37.129" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170719 17:17:37.130" starttime="20170719 17:17:36.879"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:37.131" starttime="20170719 17:17:37.131"></status>
</kw>
<status status="PASS" endtime="20170719 17:17:37.131" starttime="20170719 17:17:37.130"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:37.132" starttime="20170719 17:17:37.132"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:37.133" starttime="20170719 17:17:37.133"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170719 17:17:37.140" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170719 17:17:37.140" starttime="20170719 17:17:37.134"></status>
</kw>
<msg timestamp="20170719 17:17:37.140" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170719 17:17:37.140" starttime="20170719 17:17:37.133"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:37.145" starttime="20170719 17:17:37.141"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:37.148" starttime="20170719 17:17:37.145"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170719 17:17:55.241" level="INFO">[tm500.py@591] Prev msg:</msg>
<msg timestamp="20170719 17:17:55.242" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DISCONNECT</msg>
<msg timestamp="20170719 17:17:55.242" level="INFO">[tm500.py@1736] TM500 command reply: I: TMAE 0x1 Warning - Logging is being stopped automatically. Please wait for logging stopped message.
I: TMAE 0x1 Warning - Logging has been stopped automatically.
C: DISCONNECT 0x00 OK</msg>
<msg timestamp="20170719 17:17:55.242" level="INFO">[tm500.py@437] Release TM500 Resource:
sent -&gt; "release"
received &lt;- "Bye!"
Robot Framework remote server at 0.0.0.0:8275 stopping</msg>
<status status="PASS" endtime="20170719 17:17:55.242" starttime="20170719 17:17:37.148"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:55.244" starttime="20170719 17:17:55.243"></status>
</kw>
<msg timestamp="20170719 17:17:55.244" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170719 17:17:55.244" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170719 17:17:55.244" starttime="20170719 17:17:55.243"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:55.247" starttime="20170719 17:17:55.244"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170719 17:17:59.270" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170719 17:17:59.270" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170719 17:17:59.270" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170719 17:17:59.270" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170719 17:17:59.270" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170719 17:17:59.270" starttime="20170719 17:17:55.247"></status>
</kw>
<status status="PASS" endtime="20170719 17:17:59.270" starttime="20170719 17:17:55.243"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:59.271" starttime="20170719 17:17:59.271"></status>
</kw>
<msg timestamp="20170719 17:17:59.272" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170719 17:17:59.272" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170719 17:17:59.272" starttime="20170719 17:17:59.271"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170719 17:17:59.275" starttime="20170719 17:17:59.272"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170719 17:18:03.305" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170719 17:18:03.305" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170719 17:18:03.305" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170719 17:18:03.305" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170719 17:18:03.305" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170719 17:18:03.305" starttime="20170719 17:17:59.275"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:03.305" starttime="20170719 17:17:59.270"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170719 17:18:03.313" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170719 17:18:03.313" starttime="20170719 17:18:03.306"></status>
</kw>
<msg timestamp="20170719 17:18:03.313" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170719 17:18:03.313" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170719 17:18:03.314" starttime="20170719 17:18:03.306"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170719 17:18:03.317" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170719 17:18:03.317" starttime="20170719 17:18:03.314"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:03.317" starttime="20170719 17:18:03.306"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:03.317" starttime="20170719 17:17:55.242"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:03.317" starttime="20170719 17:17:55.242"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:03.318" starttime="20170719 17:18:03.317"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170719 17:18:03.321" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170719 17:18:03.321" starttime="20170719 17:18:03.318"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:03.321" starttime="20170719 17:17:37.132"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:03.321" starttime="20170719 17:17:37.131"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170719 17:18:03.328" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170719 17:18:03.328" starttime="20170719 17:18:03.322"></status>
</kw>
<msg timestamp="20170719 17:18:03.329" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170719 17:18:03.329" starttime="20170719 17:18:03.322"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:03.332" starttime="20170719 17:18:03.329"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170719 17:18:14.323" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170719 17:18:14.902" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170719 17:18:14.902" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170719 17:18:14.902" starttime="20170719 17:18:03.332"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170719 17:18:15.864" level="INFO">['fatal'] ['fatal']</msg>
<msg timestamp="20170719 17:18:15.865" level="INFO">[file_control.py@109] *HTML*&lt;a href = "D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock\udplog_20170719171040.log"&gt;fail log&lt;/a&gt;
Find '['fatal']' in 'D:\TA\TA_logs\TestLog_20170719170707\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719170709\FZHQ_T1_Operational_RF_block_unblock\udplog_20170719171040.log'
write successfully</msg>
<status status="PASS" endtime="20170719 17:18:15.865" starttime="20170719 17:18:14.903"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170719 17:18:15.866" level="FAIL">'FZHQ_T1_Operational_RF_block_unblock' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170719 17:18:15.866" starttime="20170719 17:18:15.866"></status>
</kw>
<msg timestamp="20170719 17:18:15.866" level="INFO">${return1} = ('FAIL', u"'FZHQ_T1_Operational_RF_block_unblock' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170719 17:18:15.866" starttime="20170719 17:18:15.865"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:15.870" starttime="20170719 17:18:15.867"></status>
</kw>
<msg timestamp="20170719 17:18:15.870" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170719 17:18:15.870" starttime="20170719 17:18:15.867"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:15.874" starttime="20170719 17:18:15.871"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:15.874" starttime="20170719 17:18:15.870"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:15.874" starttime="20170719 17:18:15.874"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:15.875" starttime="20170719 17:18:15.874"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:15.875" starttime="20170719 17:18:15.875"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170719 17:18:15.876" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170719 17:18:15.876" starttime="20170719 17:18:15.876"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:15.881" starttime="20170719 17:18:15.877"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:15.881" starttime="20170719 17:18:15.877"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:15.881" starttime="20170719 17:18:15.877"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:15.885" starttime="20170719 17:18:15.882"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:15.885" starttime="20170719 17:18:15.881"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:15.885" starttime="20170719 17:18:15.881"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:15.888" starttime="20170719 17:18:15.886"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:15.889" starttime="20170719 17:18:15.885"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:15.889" starttime="20170719 17:18:15.885"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170719 17:18:37.032" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[ssh_common.py@203] root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05941198&gt;</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05941198&gt;</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 17:18:17 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05747710&gt;</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05747710&gt;</msg>
<msg timestamp="20170719 17:18:37.032" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170719 17:18:37.033" starttime="20170719 17:18:15.889"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:37.037" starttime="20170719 17:18:37.034"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:37.037" starttime="20170719 17:18:37.033"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:37.037" starttime="20170719 17:18:37.033"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170719 17:18:37.041" starttime="20170719 17:18:37.038"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:37.041" starttime="20170719 17:18:37.038"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:37.041" starttime="20170719 17:18:37.037"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:37.041" starttime="20170719 17:18:15.875"></status>
</kw>
<status status="PASS" endtime="20170719 17:18:37.041" starttime="20170719 17:17:35.773"></status>
</kw>
<tags>
<tag>owner-xingqiang.wu@nokia.com</tag>
<tag>QC_443311</tag>
</tags>
<status status="FAIL" endtime="20170719 17:18:37.042" critical="yes" starttime="20170719 17:08:28.531">TM500 return message does NOT contain "Ok"! ("Ok" is case insensitive)</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170719 17:18:37.066" starttime="20170719 17:07:08.010"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-xingqiang.wu@nokia.com</stat>
<stat fail="1" pass="0">QC_443311</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T1 Operational RF block unblock" pass="0">FZHQ T1 Operational RF block unblock</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170719 17:07:08.475" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170719 17:15:49.798" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170719 17:15:49.804" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170719 17:18:14.323" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
