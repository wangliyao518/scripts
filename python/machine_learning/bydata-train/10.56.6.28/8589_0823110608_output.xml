<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170823 11:06:09.091" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\VeCN\SISO1\CRT\FZHQ_ASMI\FZHQ_T1_RF_module_alarm_without_recovery_action_1906\FZHQ_T1_RF_module_alarm_without_recovery_action_1906.robot" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170823105821//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170823 10:58:22.818" level="INFO">${timestamp} = 20170823105822</msg>
<status status="PASS" endtime="20170823 10:58:22.818" starttime="20170823 10:58:22.781"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170823 10:58:22.819" level="INFO">${FILE_NAME} = FZHQ T1 RF module alarm without recovery action 19</msg>
<status status="PASS" endtime="20170823 10:58:22.819" starttime="20170823 10:58:22.818"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170823 10:58:22.820" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ T1 RF module alarm without recovery action 19_20170823105822</msg>
<status status="PASS" endtime="20170823 10:58:22.821" starttime="20170823 10:58:22.820"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170823 10:58:22.821" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822</msg>
<status status="PASS" endtime="20170823 10:58:22.822" starttime="20170823 10:58:22.821"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 10:58:22.823" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822</msg>
<status status="PASS" endtime="20170823 10:58:22.823" starttime="20170823 10:58:22.822"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 10:58:22.824" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822"&gt;D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 10:58:22.824" starttime="20170823 10:58:22.823"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 10:58:22.825" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822</msg>
<status status="PASS" endtime="20170823 10:58:22.825" starttime="20170823 10:58:22.825"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170823 10:58:22.829" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170823 10:58:22.829" starttime="20170823 10:58:22.825"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170823 10:58:22.848" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170823 10:58:22.848" starttime="20170823 10:58:22.842"></status>
</kw>
<msg timestamp="20170823 10:58:22.849" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170823 10:58:22.849" starttime="20170823 10:58:22.842"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 10:58:22.850" starttime="20170823 10:58:22.849"></status>
</kw>
<msg timestamp="20170823 10:58:22.850" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 10:58:22.850" starttime="20170823 10:58:22.849"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170823 10:58:22.856" starttime="20170823 10:58:22.853"></status>
</kw>
<msg timestamp="20170823 10:58:22.856" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822</msg>
<status status="PASS" endtime="20170823 10:58:22.856" starttime="20170823 10:58:22.850"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170823 10:58:22.860" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822</msg>
<status status="PASS" endtime="20170823 10:58:22.860" starttime="20170823 10:58:22.857"></status>
</kw>
<status status="PASS" endtime="20170823 10:58:22.860" starttime="20170823 10:58:22.841"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170823 10:58:22.881" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 10:58:22.881" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 10:58:22.881" starttime="20170823 10:58:22.861"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170823 10:58:22.882" starttime="20170823 10:58:22.882"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170823 10:58:22.882" starttime="20170823 10:58:22.882"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170823 10:58:22.883" starttime="20170823 10:58:22.883"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170823 10:58:22.883" starttime="20170823 10:58:22.883"></status>
</kw>
<status status="PASS" endtime="20170823 10:58:22.883" starttime="20170823 10:58:22.861"></status>
</kw>
<status status="PASS" endtime="20170823 10:58:22.883" starttime="20170823 10:58:22.860"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 10:49:10 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05516B98&gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05516B98&gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 10:58:23 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0557E8F0&gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0557E8F0&gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 10:58:34 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05544210&gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05544210&gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 10:58:44 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05541648&gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05541648&gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 10:58:55 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045FE030&gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045FE030&gt;</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170823 10:59:39.662" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170823 10:59:39.662" starttime="20170823 10:58:22.884"></status>
</kw>
<status status="PASS" endtime="20170823 10:59:39.662" starttime="20170823 10:58:22.884"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170823 10:59:39.662" starttime="20170823 10:59:39.662"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170823 10:59:39.662" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170823 10:59:39.662" starttime="20170823 10:59:39.662"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170823 10:59:39.662" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170823 10:59:39.662" starttime="20170823 10:59:39.662"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170823 10:59:39.662" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170823 10:59:39.662" starttime="20170823 10:59:39.662"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170823 10:59:39.662" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170823 10:59:39.662" starttime="20170823 10:59:39.662"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170823 10:59:41.105" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170823 10:59:41.105" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170823 10:59:41.105" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170823 10:59:41.105" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170823 10:59:41.105" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170823 10:59:41.105" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055D8D50&gt;</msg>
<status status="PASS" endtime="20170823 10:59:41.105" starttime="20170823 10:59:39.662"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 10:59:41.105" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055D8D50&gt;</msg>
<status status="PASS" endtime="20170823 10:59:41.105" starttime="20170823 10:59:41.105"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170823 10:59:42.301" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055D8D50&gt;</msg>
<msg timestamp="20170823 10:59:42.301" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170823 10:59:42.301" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170823 10:59:42.301" starttime="20170823 10:59:41.105"></status>
</kw>
<status status="PASS" endtime="20170823 10:59:42.301" starttime="20170823 10:59:41.105"></status>
</kw>
<status status="PASS" endtime="20170823 10:59:42.301" starttime="20170823 10:59:39.662"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 10:59:42.301" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055D8D50&gt;.</msg>
<status status="PASS" endtime="20170823 10:59:42.301" starttime="20170823 10:59:42.301"></status>
</kw>
<status status="PASS" endtime="20170823 10:59:42.301" starttime="20170823 10:58:22.781"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:06:06.598" starttime="20170823 11:06:06.598"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170823 11:06:06.598" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170823 11:06:06.598" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055D8D50&gt;</msg>
<status status="PASS" endtime="20170823 11:06:06.598" starttime="20170823 11:06:06.598"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170823 11:06:06.598" starttime="20170823 11:06:06.598"></status>
</kw>
<status status="PASS" endtime="20170823 11:06:06.598" starttime="20170823 11:06:06.598"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:06:06.598" starttime="20170823 11:06:06.598"></status>
</kw>
<status status="PASS" endtime="20170823 11:06:06.598" starttime="20170823 11:06:06.598"></status>
</kw>
<status status="PASS" endtime="20170823 11:06:06.598" starttime="20170823 11:06:06.598"></status>
</kw>
<test id="s1-t1" name="FZHQ_RF_alarm_1906">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170823105821//ev_logs//D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170823 10:59:42.317" level="INFO">${timestamp} = 20170823105942</msg>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170823 10:59:42.317" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170823 10:59:42.317" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 10:59:42.317" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 10:59:42.317" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906"&gt;D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 10:59:42.317" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<msg timestamp="20170823 10:59:42.317" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<msg timestamp="20170823 10:59:42.317" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170823 10:59:42.317" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170823 10:59:42.317" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<status status="PASS" endtime="20170823 10:59:42.317" starttime="20170823 10:59:42.317"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170823 10:59:42.332" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=40933 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpxnklnh --insecure</msg>
<msg timestamp="20170823 10:59:44.368" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 10:59:44.368" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 10:59:48.396" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 10:59:48.396" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 10:59:52.454" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 10:59:52.454" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 10:59:55.476" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170823 10:59:55.476" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 69008, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170823 11:00:02.508" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 69008, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170823 11:00:04.853" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 69008, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170823 11:00:04.853" starttime="20170823 10:59:42.332"></status>
</kw>
<status status="PASS" endtime="20170823 11:00:04.853" starttime="20170823 10:59:42.301"></status>
</kw>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 11:00:04.853" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055D8D50&gt;.</msg>
<status status="PASS" endtime="20170823 11:00:04.853" starttime="20170823 11:00:04.853"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170823 11:00:09.085" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055D8D50&gt;</msg>
<msg timestamp="20170823 11:00:09.085" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170823 11:00:09.085" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170823 11:00:09.085" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170823 11:00:09.085" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170823 11:00:09.085" starttime="20170823 11:00:04.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:00:09.085" starttime="20170823 11:00:09.085"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170823 11:00:09.085" starttime="20170823 11:00:09.085"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>bts_host=${ADMIN.IP}</arg>
<arg>bts_port=${ADMIN.PORT}</arg>
<arg>use_ssl=${ADMIN.USE_SSL}</arg>
<arg>skip_parameter_relation_errors=${ADMIN.SKIP_PARAMETER_RELATION_ERRORS}</arg>
</arguments>
<msg timestamp="20170823 11:00:51.523" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.1 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_uploadscf.log --interval=5000 --cli-port=36333 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpjjywhr --insecure</msg>
<msg timestamp="20170823 11:00:53.593" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 11:00:53.593" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 11:00:57.609" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 11:00:57.609" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 11:01:01.652" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 11:01:01.652" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 11:01:04.695" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170823 11:01:04.695" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 39456, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170823 11:01:11.737" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 39456, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170823 11:01:14.039" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 39456, "requestMessage": "onAir"}}</msg>
<msg timestamp="20170823 11:01:14.039" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 98639, "parameters": {"name": "downloadPlan", "parameters": {"skipParameterRelationErrors": true, "inputFileContent": "", "btsId": "797", "shouldBeActivated": true}}}}</msg>
<msg timestamp="20170823 11:01:14.085" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"type": "SIZE", "id": 98639}}</msg>
<msg timestamp="20170823 11:01:14.085" level="INFO">Send message: {"type": "FILE_TRANSFER", "payload": {"data": 85738, "type": "SIZE", "id": 98639}}</msg>
<msg timestamp="20170823 11:01:14.117" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"length": 85738, "type": "READ", "id": 98639, "offset": 0}}</msg>
<msg timestamp="20170823 11:01:14.163" level="INFO">Send message: {"type": "FILE_TRANSFER", "payload": {"data": "PD94bWwgdm ... &lt;type 'str'&gt; of lenght: 114320", "type": "READ", "id": 98639}}</msg>
<msg timestamp="20170823 11:01:19.521" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 98639, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170823 11:01:24.577" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 98639, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170823 11:01:26.867" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"type": "CLOSE_READER", "id": 98639}}</msg>
<msg timestamp="20170823 11:01:26.867" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 98639, "requestMessage": {"validationResult": {"niddValidationResult": {"status": "OK", "logs": {"objectsOccurencesErrors": null, "invalidObjectsDistnames": null, "definitionErrors": null, "skippedElementsErrors": null}}, "pdlValidationResult": {"status": "FAIL", "logs": ["rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 172", "rule faile ... &lt;type 'unicode'&gt; of lenght: 275", "rule faile ... &lt;type 'unicode'&gt; of lenght: 265", "rule faile ... &lt;type 'unicode'&gt; of lenght: 142", "rule faile ... &lt;type 'unicode'&gt; of lenght: 119", "rule faile ... &lt;type 'unicode'&gt; of lenght: 237", "rule faile ... &lt;type 'unicode'&gt; of lenght: 138", "rule faile ... &lt;type 'unicode'&gt; of lenght: 162", "rule faile ... &lt;type 'unicode'&gt; of lenght: 140", "rule faile ... &lt;type 'unicode'&gt; of lenght: 130", "rule faile ... &lt;type 'unicode'&gt; of lenght: 176", "rule faile ... &lt;type 'unicode'&gt; of lenght: 314", "rule faile ... &lt;type 'unicode'&gt; of lenght: 293", "rule faile ... &lt;type 'unicode'&gt; of lenght: 244", "rule faile ... &lt;type 'unicode'&gt; of lenght: 242", "rule faile ... &lt;type 'unicode'&gt; of lenght: 123", "rule faile ... &lt;type 'unicode'&gt; of lenght: 127", "rule faile ... &lt;type 'unicode'&gt; of lenght: 360", "rule faile ... &lt;type 'unicode'&gt; of lenght: 103", "rule faile ... &lt;type 'unicode'&gt; of lenght: 92", "rule faile ... &lt;type 'unicode'&gt; of lenght: 103", "rule faile ... &lt;type 'unicode'&gt; of lenght: 92", "rule faile ... &lt;type 'unicode'&gt; of lenght: 137", "rule faile ... &lt;type 'unicode'&gt; of lenght: 138", "rule faile ... &lt;type 'unicode'&gt; of lenght: 110", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 160"]}}}}}</msg>
<msg timestamp="20170823 11:01:27.121" level="INFO">Exit code: 1</msg>
<msg timestamp="20170823 11:01:27.121" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:36333
</msg>
<msg timestamp="20170823 11:01:27.121" level="INFO">STDERR
</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 10:59:06 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055D8C60&gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055D8C60&gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 11:00:10 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E1940&gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E1940&gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 11:00:20 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E1D78&gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E1D78&gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 11:00:31 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E1D78&gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E1D78&gt;</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[enb_resource.py@371] Start to setup admin</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[enb_resource.py@374] Start to perform commissioning</msg>
<msg timestamp="20170823 11:01:27.126" level="INFO">[enb_resource.py@380] Start to teardown admin</msg>
<status status="PASS" endtime="20170823 11:01:27.127" starttime="20170823 11:00:09.085"></status>
</kw>
<kw name="Restart Bts Until Onair" library="tdd_ev_robotws">
<doc>restart bts with powerbreaker and then wait until it is onair.</doc>
<arguments>
<arg>bts_powerbreak_port=${bts_powerbreak}</arg>
</arguments>
<msg timestamp="20170823 11:05:25.650" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[facom.py@60] Power off port 1 succeed!</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[facom.py@60] Power off port 1 succeed!</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[facom.py@83] Power on port 1 succeed!</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[facom.py@83] Power on port 1 succeed!</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[tools_resource.py@39] restart port '['FACOM:10.69.66.100:1', 'FACOM:10.56.7.144:1']' with powerbreak succeed !</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906" already exists, no need to create it again.</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.650" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@225] infomodel check every cell onair succeed !</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[enb_resource.py@253] bts log check onair msg succeed !</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906\im_20170823110525' succeed .</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170823 11:05:25.651" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170823 11:05:25.653" starttime="20170823 11:01:27.128"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:25.654" starttime="20170823 11:00:04.853"></status>
</kw>
<kw name="Get_RRU_IP" library="SISO1 Resource">
<assign>
<var>${RRU_IP}</var>
</assign>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>query=get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=${RRU_SERINUM}]</arg>
</arguments>
<assign>
<var>${rmode_info}</var>
</assign>
<msg timestamp="20170823 11:05:25.728" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 11:05:25.728" starttime="20170823 11:05:25.655"></status>
</kw>
<status status="FAIL" endtime="20170823 11:05:25.728" starttime="20170823 11:05:25.654"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 11:05:25.728" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055D8D50&gt;.</msg>
<status status="PASS" endtime="20170823 11:05:25.728" starttime="20170823 11:05:25.728"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170823 11:05:26.118" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170823 11:05:26.118" starttime="20170823 11:05:25.728"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20170823 11:05:26.118" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<status status="PASS" endtime="20170823 11:05:26.118" starttime="20170823 11:05:26.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170823 11:05:26.134" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20170823 11:05:26.134" starttime="20170823 11:05:26.118"></status>
</kw>
<msg timestamp="20170823 11:05:26.134" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20170823 11:05:26.134" starttime="20170823 11:05:26.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:26.134" starttime="20170823 11:05:26.134"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:26.134" starttime="20170823 11:05:26.134"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:26.134" starttime="20170823 11:05:26.134"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:26.134" starttime="20170823 11:05:26.134"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170823 11:05:26.399" level="INFO">Exit code: 1</msg>
<msg timestamp="20170823 11:05:26.399" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:40933
</msg>
<msg timestamp="20170823 11:05:26.399" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170823 11:05:26.399" starttime="20170823 11:05:26.134"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:26.399" starttime="20170823 11:05:26.399"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:26.399" starttime="20170823 11:05:26.399"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:26.399" starttime="20170823 11:05:26.399"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:26.399" starttime="20170823 11:05:26.399"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170823 11:05:26.415" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170823 11:05:26.415" starttime="20170823 11:05:26.399"></status>
</kw>
<msg timestamp="20170823 11:05:26.415" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170823 11:05:26.415" starttime="20170823 11:05:26.399"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:26.415" starttime="20170823 11:05:26.415"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:26.430" starttime="20170823 11:05:26.415"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170823 11:05:26.430" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 11:05:26.430" starttime="20170823 11:05:26.430"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:26.430" starttime="20170823 11:05:26.430"></status>
</kw>
<msg timestamp="20170823 11:05:26.430" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170823 11:05:26.430" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170823 11:05:26.430" starttime="20170823 11:05:26.430"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:26.430" starttime="20170823 11:05:26.430"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170823 11:05:30.493" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170823 11:05:30.493" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170823 11:05:30.493" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170823 11:05:30.493" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170823 11:05:30.493" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170823 11:05:30.493" starttime="20170823 11:05:26.430"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:30.493" starttime="20170823 11:05:26.430"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:30.493" starttime="20170823 11:05:30.493"></status>
</kw>
<msg timestamp="20170823 11:05:30.493" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170823 11:05:30.493" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170823 11:05:30.493" starttime="20170823 11:05:30.493"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:30.493" starttime="20170823 11:05:30.493"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170823 11:05:34.576" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170823 11:05:34.576" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170823 11:05:34.576" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170823 11:05:34.576" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170823 11:05:34.576" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170823 11:05:34.576" starttime="20170823 11:05:30.509"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:34.576" starttime="20170823 11:05:30.493"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170823 11:05:34.591" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170823 11:05:34.591" starttime="20170823 11:05:34.576"></status>
</kw>
<msg timestamp="20170823 11:05:34.591" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170823 11:05:34.591" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170823 11:05:34.591" starttime="20170823 11:05:34.576"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170823 11:05:34.591" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170823 11:05:34.591" starttime="20170823 11:05:34.591"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:34.591" starttime="20170823 11:05:34.576"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:34.591" starttime="20170823 11:05:26.430"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:34.591" starttime="20170823 11:05:26.430"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:34.591" starttime="20170823 11:05:34.591"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170823 11:05:34.591" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170823 11:05:34.591" starttime="20170823 11:05:34.591"></status>
</kw>
<status status="FAIL" endtime="20170823 11:05:34.591" starttime="20170823 11:05:26.399"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:34.591" starttime="20170823 11:05:26.399"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170823 11:05:34.607" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170823 11:05:34.607" starttime="20170823 11:05:34.591"></status>
</kw>
<msg timestamp="20170823 11:05:34.607" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170823 11:05:34.607" starttime="20170823 11:05:34.591"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:34.607" starttime="20170823 11:05:34.607"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170823 11:05:44.119" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170823 11:05:44.681" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170823 11:05:44.681" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170823 11:05:44.681" starttime="20170823 11:05:34.607"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170823 11:05:45.399" level="INFO">[file_control.py@109] *HTML*&lt;a href = "D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906\udplog_20170823110132.log"&gt;fail log&lt;/a&gt;
Find '['fatal']' in 'D:\TA\TA_logs\TestLog_20170823105821\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823105822\FZHQ_RF_alarm_1906\udplog_20170823110132.log'
write successfully</msg>
<status status="PASS" endtime="20170823 11:05:45.399" starttime="20170823 11:05:44.681"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170823 11:05:45.415" level="FAIL">'FZHQ_RF_alarm_1906' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170823 11:05:45.415" starttime="20170823 11:05:45.415"></status>
</kw>
<msg timestamp="20170823 11:05:45.415" level="INFO">${return1} = ('FAIL', u"'FZHQ_RF_alarm_1906' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170823 11:05:45.415" starttime="20170823 11:05:45.415"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:45.415" starttime="20170823 11:05:45.415"></status>
</kw>
<msg timestamp="20170823 11:05:45.415" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 11:05:45.415" starttime="20170823 11:05:45.415"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:45.415" starttime="20170823 11:05:45.415"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:45.415" starttime="20170823 11:05:45.415"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:45.415" starttime="20170823 11:05:45.415"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:45.415" starttime="20170823 11:05:45.415"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:45.415" starttime="20170823 11:05:45.415"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170823 11:05:45.431" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170823 11:05:45.431" starttime="20170823 11:05:45.431"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:45.431" starttime="20170823 11:05:45.431"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:45.431" starttime="20170823 11:05:45.431"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:45.431" starttime="20170823 11:05:45.431"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:45.431" starttime="20170823 11:05:45.431"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:45.431" starttime="20170823 11:05:45.431"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:45.431" starttime="20170823 11:05:45.431"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170823 11:05:45.446" starttime="20170823 11:05:45.446"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:45.446" starttime="20170823 11:05:45.446"></status>
</kw>
<status status="PASS" endtime="20170823 11:05:45.446" starttime="20170823 11:05:45.431"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170823 11:06:06.582" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[ssh_common.py@203] root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0554C0F8&gt;</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0554C0F8&gt;</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 11:05:46 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05595FD0&gt;</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05595FD0&gt;</msg>
<msg timestamp="20170823 11:06:06.582" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170823 11:06:06.582" starttime="20170823 11:05:45.446"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170823 11:06:06.582" starttime="20170823 11:06:06.582"></status>
</kw>
<status status="PASS" endtime="20170823 11:06:06.582" starttime="20170823 11:06:06.582"></status>
</kw>
<status status="PASS" endtime="20170823 11:06:06.582" starttime="20170823 11:06:06.582"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170823 11:06:06.582" starttime="20170823 11:06:06.582"></status>
</kw>
<status status="PASS" endtime="20170823 11:06:06.582" starttime="20170823 11:06:06.582"></status>
</kw>
<status status="PASS" endtime="20170823 11:06:06.582" starttime="20170823 11:06:06.582"></status>
</kw>
<status status="PASS" endtime="20170823 11:06:06.582" starttime="20170823 11:05:45.431"></status>
</kw>
<status status="PASS" endtime="20170823 11:06:06.582" starttime="20170823 11:05:25.728"></status>
</kw>
<tags>
<tag>owner-sue.nie@nokia.com</tag>
<tag>QC_720749</tag>
</tags>
<status status="FAIL" endtime="20170823 11:06:06.582" critical="yes" starttime="20170823 10:59:42.301">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170823 11:06:06.598" starttime="20170823 10:58:21.728"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-sue.nie@nokia.com</stat>
<stat fail="1" pass="0">QC_720749</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906" pass="0">FZHQ T1 RF module alarm without recovery action 1906</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170823 10:58:22.165" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170823 10:58:22.761" level="ERROR">Error in file 'D:\TA\SBTS00_TDD\VeCN\SISO1\CRT\FZHQ_ASMI\FZHQ_T1_RF_module_alarm_without_recovery_action_1906\FZHQ_T1_RF_module_alarm_without_recovery_action_1906.robot': Setting variable '${msg_check_list_alarm_cancel}' failed: Variable '${LNCEL_DN}' not found. Did you mean:
    ${LNCEL_L_DN}
    ${CELL_M_DN}</msg>
<msg timestamp="20170823 10:58:22.768" level="ERROR">Error in file 'D:\TA\SBTS00_TDD\VeCN\SISO1\CRT\FZHQ_ASMI\FZHQ_T1_RF_module_alarm_without_recovery_action_1906\FZHQ_T1_RF_module_alarm_without_recovery_action_1906.robot': Setting variable '${msg_check_list_alarm_start}' failed: Variable '${LNCEL_DN}' not found. Did you mean:
    ${LNCEL_L_DN}
    ${CELL_M_DN}</msg>
<msg timestamp="20170823 11:05:44.119" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
