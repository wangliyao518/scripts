<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170823 13:35:34.615" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\VeCN\SISO1\CRT\FZHQ_ASMI\FZHQ_T1_RF_module_alarm_without_recovery_action_1906\FZHQ_T1_RF_module_alarm_without_recovery_action_1906.robot" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170823133244//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170823 13:32:46.102" level="INFO">${timestamp} = 20170823133246</msg>
<status status="PASS" endtime="20170823 13:32:46.103" starttime="20170823 13:32:46.066"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170823 13:32:46.104" level="INFO">${FILE_NAME} = FZHQ T1 RF module alarm without recovery action 19</msg>
<status status="PASS" endtime="20170823 13:32:46.104" starttime="20170823 13:32:46.103"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170823 13:32:46.105" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ T1 RF module alarm without recovery action 19_20170823133246</msg>
<status status="PASS" endtime="20170823 13:32:46.105" starttime="20170823 13:32:46.104"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170823 13:32:46.106" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246</msg>
<status status="PASS" endtime="20170823 13:32:46.106" starttime="20170823 13:32:46.105"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 13:32:46.106" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246</msg>
<status status="PASS" endtime="20170823 13:32:46.106" starttime="20170823 13:32:46.106"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 13:32:46.107" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246"&gt;D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 13:32:46.108" starttime="20170823 13:32:46.107"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 13:32:46.108" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246</msg>
<status status="PASS" endtime="20170823 13:32:46.108" starttime="20170823 13:32:46.108"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170823 13:32:46.112" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170823 13:32:46.112" starttime="20170823 13:32:46.109"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170823 13:32:46.133" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170823 13:32:46.133" starttime="20170823 13:32:46.127"></status>
</kw>
<msg timestamp="20170823 13:32:46.133" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170823 13:32:46.133" starttime="20170823 13:32:46.126"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:32:46.134" starttime="20170823 13:32:46.134"></status>
</kw>
<msg timestamp="20170823 13:32:46.134" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:32:46.134" starttime="20170823 13:32:46.133"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:32:46.141" starttime="20170823 13:32:46.138"></status>
</kw>
<msg timestamp="20170823 13:32:46.141" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246</msg>
<status status="PASS" endtime="20170823 13:32:46.141" starttime="20170823 13:32:46.134"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170823 13:32:46.145" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246</msg>
<status status="PASS" endtime="20170823 13:32:46.145" starttime="20170823 13:32:46.141"></status>
</kw>
<status status="PASS" endtime="20170823 13:32:46.145" starttime="20170823 13:32:46.125"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170823 13:32:46.166" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 13:32:46.166" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 13:32:46.167" starttime="20170823 13:32:46.146"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:32:46.167" starttime="20170823 13:32:46.167"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170823 13:32:46.168" starttime="20170823 13:32:46.168"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:32:46.168" starttime="20170823 13:32:46.168"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170823 13:32:46.169" starttime="20170823 13:32:46.169"></status>
</kw>
<status status="PASS" endtime="20170823 13:32:46.169" starttime="20170823 13:32:46.146"></status>
</kw>
<status status="PASS" endtime="20170823 13:32:46.169" starttime="20170823 13:32:46.145"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:31:15 CST 2017 from 10.69.80.114 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056E2BE8&gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056E2BE8&gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:32:47 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FF788&gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FF788&gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:32:57 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FE8C8&gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FE8C8&gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:33:08 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FF6E8&gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FF6E8&gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:33:18 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x048A4C10&gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x048A4C10&gt;</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170823 13:34:02.619" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170823 13:34:02.621" starttime="20170823 13:32:46.170"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:02.621" starttime="20170823 13:32:46.169"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:02.622" starttime="20170823 13:34:02.621"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170823 13:34:02.623" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170823 13:34:02.623" starttime="20170823 13:34:02.622"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170823 13:34:02.626" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170823 13:34:02.627" starttime="20170823 13:34:02.623"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170823 13:34:02.630" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170823 13:34:02.630" starttime="20170823 13:34:02.627"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170823 13:34:02.633" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170823 13:34:02.633" starttime="20170823 13:34:02.630"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170823 13:34:04.025" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170823 13:34:04.025" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170823 13:34:04.025" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170823 13:34:04.025" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170823 13:34:04.025" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170823 13:34:04.025" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0575BD78&gt;</msg>
<status status="PASS" endtime="20170823 13:34:04.025" starttime="20170823 13:34:02.634"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 13:34:04.026" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0575BD78&gt;</msg>
<status status="PASS" endtime="20170823 13:34:04.026" starttime="20170823 13:34:04.026"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170823 13:34:05.214" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0575BD78&gt;</msg>
<msg timestamp="20170823 13:34:05.214" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170823 13:34:05.214" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170823 13:34:05.215" starttime="20170823 13:34:04.030"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:05.215" starttime="20170823 13:34:04.027"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:05.215" starttime="20170823 13:34:02.622"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 13:34:05.218" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0575BD78&gt;.</msg>
<status status="PASS" endtime="20170823 13:34:05.219" starttime="20170823 13:34:05.215"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:05.219" starttime="20170823 13:32:46.066"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:29.785" starttime="20170823 13:35:29.782"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170823 13:35:29.791" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170823 13:35:29.791" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0575BD78&gt;</msg>
<status status="PASS" endtime="20170823 13:35:29.792" starttime="20170823 13:35:29.785"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:29.793" starttime="20170823 13:35:29.792"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:29.793" starttime="20170823 13:35:29.792"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:29.794" starttime="20170823 13:35:29.794"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:29.794" starttime="20170823 13:35:29.793"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:29.794" starttime="20170823 13:35:29.781"></status>
</kw>
<test id="s1-t1" name="FZHQ_RF_alarm_1906">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170823133244//ev_logs//D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170823 13:34:05.224" level="INFO">${timestamp} = 20170823133405</msg>
<status status="PASS" endtime="20170823 13:34:05.224" starttime="20170823 13:34:05.224"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170823 13:34:05.225" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:34:05.225" starttime="20170823 13:34:05.225"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170823 13:34:05.226" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:34:05.226" starttime="20170823 13:34:05.225"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 13:34:05.227" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:34:05.227" starttime="20170823 13:34:05.226"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 13:34:05.246" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246\FZHQ_RF_alarm_1906"&gt;D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246\FZHQ_RF_alarm_1906&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 13:34:05.246" starttime="20170823 13:34:05.227"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 13:34:05.247" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:34:05.247" starttime="20170823 13:34:05.246"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:05.248" starttime="20170823 13:34:05.247"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:05.250" starttime="20170823 13:34:05.249"></status>
</kw>
<msg timestamp="20170823 13:34:05.250" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:34:05.250" starttime="20170823 13:34:05.249"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:05.251" starttime="20170823 13:34:05.251"></status>
</kw>
<msg timestamp="20170823 13:34:05.251" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:34:05.251" starttime="20170823 13:34:05.250"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170823 13:34:05.255" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:34:05.255" starttime="20170823 13:34:05.251"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170823 13:34:05.256" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:34:05.256" starttime="20170823 13:34:05.255"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:05.256" starttime="20170823 13:34:05.249"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:05.256" starttime="20170823 13:34:05.223"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170823 13:34:05.258" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=35455 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpoy94za --insecure</msg>
<msg timestamp="20170823 13:34:07.374" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 13:34:07.374" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 13:34:11.344" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 13:34:11.344" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 13:34:15.407" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 13:34:15.407" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 13:34:18.407" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170823 13:34:18.407" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 17274, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170823 13:34:25.670" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 17274, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170823 13:34:28.233" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 17274, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170823 13:34:28.233" starttime="20170823 13:34:05.256"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:28.233" starttime="20170823 13:34:05.220"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<arguments>
<arg>alarm_start</arg>
</arguments>
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170823 13:34:28.481" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170823 13:34:28.482" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170823 13:34:28.482" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246\FZHQ_RF_alarm_1906" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170823 13:34:28.482" starttime="20170823 13:34:28.235"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170823 13:34:37.656" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170823 13:34:37.656" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170823 13:34:37.656" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170823 13:34:37.656" starttime="20170823 13:34:28.482"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170823 13:34:37.657" level="INFO">${case_execute_log_name} = alarm_start</msg>
<status status="PASS" endtime="20170823 13:34:37.657" starttime="20170823 13:34:37.657"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:37.657" starttime="20170823 13:34:28.234"></status>
</kw>
<kw name="Get_RRU_IP" library="SISO1 Resource">
<assign>
<var>${RRU_IP}</var>
</assign>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>query=get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=${RRU_SERINUM}]</arg>
</arguments>
<assign>
<var>${rmode_info}</var>
</assign>
<msg timestamp="20170823 13:34:38.161" level="INFO">[infomodel_control.py@328] query infomodel: 'get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=RY151105157]' succeed .</msg>
<msg timestamp="20170823 13:34:38.161" level="INFO">${rmode_info} = [{u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': 'CPRI_RP1', u'routingDirectionCalculated': 'CCW', u'productCode': u'473106A.X11', u'filterIpAddress': u'1...</msg>
<status status="PASS" endtime="20170823 13:34:38.161" starttime="20170823 13:34:37.659"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${rmode_info}</arg>
</arguments>
<msg timestamp="20170823 13:34:38.162" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20170823 13:34:38.162" starttime="20170823 13:34:38.161"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rmode_info[0].ipAddress}</arg>
</arguments>
<msg timestamp="20170823 13:34:38.162" level="INFO">172.16.17.128</msg>
<status status="PASS" endtime="20170823 13:34:38.162" starttime="20170823 13:34:38.162"></status>
</kw>
<msg timestamp="20170823 13:34:38.163" level="INFO">${RRU_IP} = 172.16.17.128</msg>
<status status="PASS" endtime="20170823 13:34:38.163" starttime="20170823 13:34:37.658"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_trigger}</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20170823 13:34:48.555" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:34:48.555" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:33:29 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:34:48.555" starttime="20170823 13:34:38.164"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:48.557" starttime="20170823 13:34:48.556"></status>
</kw>
<msg timestamp="20170823 13:34:48.557" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20170823 13:34:48.557" starttime="20170823 13:34:48.556"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20170823 13:34:48.683" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FF6E8&gt;</msg>
<msg timestamp="20170823 13:34:48.683" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20170823 13:34:48.683" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:34:48.684" starttime="20170823 13:34:48.561"></status>
</kw>
<msg timestamp="20170823 13:34:48.684" level="INFO">${ret} = lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:34:48.684" starttime="20170823 13:34:48.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:48.689" starttime="20170823 13:34:48.688"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:48.689" starttime="20170823 13:34:48.688"></status>
</kw>
<msg timestamp="20170823 13:34:48.689" level="INFO">${ret1} = ('PASS', '0x2018')</msg>
<status status="PASS" endtime="20170823 13:34:48.689" starttime="20170823 13:34:48.684"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<msg timestamp="20170823 13:34:48.695" level="FAIL">'lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;' does not match '0x1018'</msg>
<status status="FAIL" endtime="20170823 13:34:48.695" starttime="20170823 13:34:48.694"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:48.695" starttime="20170823 13:34:48.694"></status>
</kw>
<msg timestamp="20170823 13:34:48.695" level="INFO">${ret2} = ('FAIL', u"'lxc-ls --active\n0x2015\t0x2016\t0x2018\t0x201b\nroot@fctj-4a:~ &gt;' does not match '0x1018'")</msg>
<status status="PASS" endtime="20170823 13:34:48.695" starttime="20170823 13:34:48.689"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<msg timestamp="20170823 13:34:48.822" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FF6E8&gt;</msg>
<msg timestamp="20170823 13:34:48.822" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x2018</msg>
<msg timestamp="20170823 13:34:48.823" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x2018
root@0x2018:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:34:48.823" starttime="20170823 13:34:48.703"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:48.823" starttime="20170823 13:34:48.699"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:48.823" starttime="20170823 13:34:48.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:48.830" starttime="20170823 13:34:48.827"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:48.830" starttime="20170823 13:34:48.824"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:48.835" starttime="20170823 13:34:48.835"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:48.835" starttime="20170823 13:34:48.831"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<msg timestamp="20170823 13:34:49.009" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FF6E8&gt;</msg>
<msg timestamp="20170823 13:34:49.009" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.17.128 2323</msg>
<msg timestamp="20170823 13:34:49.009" level="INFO">[ssh_common.py@314] Get Response: 
Trying 172.16.17.1</msg>
<status status="PASS" endtime="20170823 13:34:49.009" starttime="20170823 13:34:48.839"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:49.009" starttime="20170823 13:34:48.836"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20170823 13:34:49.183" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FF6E8&gt;</msg>
<msg timestamp="20170823 13:34:49.183" level="INFO">[ssh_common.py@258] Execute command: sendFault 1104 0 0 0 0 0</msg>
<msg timestamp="20170823 13:34:49.183" level="INFO">[ssh_common.py@314] Get Response:</msg>
<status status="PASS" endtime="20170823 13:34:49.183" starttime="20170823 13:34:49.013"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:49.183" starttime="20170823 13:34:49.010"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:49.187" starttime="20170823 13:34:49.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:49.191" starttime="20170823 13:34:49.188"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:49.195" starttime="20170823 13:34:49.192"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:49.199" starttime="20170823 13:34:49.195"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:49.202" starttime="20170823 13:34:49.199"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:49.206" starttime="20170823 13:34:49.203"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20170823 13:34:49.224" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056FF6E8&gt;</msg>
<status status="PASS" endtime="20170823 13:34:49.224" starttime="20170823 13:34:49.206"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:49.224" starttime="20170823 13:34:38.163"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>alarm_start</arg>
<arg>${msg_check_list_alarm_start}</arg>
</arguments>
<msg timestamp="20170823 13:34:49.225" level="FAIL">Keyword '_Check Alarm Status' expected 1 argument, got 2.</msg>
<status status="FAIL" endtime="20170823 13:34:49.225" starttime="20170823 13:34:49.225"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 13:34:49.230" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0575BD78&gt;.</msg>
<status status="PASS" endtime="20170823 13:34:49.230" starttime="20170823 13:34:49.226"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170823 13:34:49.617" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170823 13:34:49.617" starttime="20170823 13:34:49.230"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170823 13:34:49.664" starttime="20170823 13:34:49.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:49.665" starttime="20170823 13:34:49.665"></status>
</kw>
<msg timestamp="20170823 13:34:49.665" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:34:49.665" starttime="20170823 13:34:49.664"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170823 13:34:49.680" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170823133244\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823133246\FZHQ_RF_alarm_1906\alarm_start' succeed .</msg>
<status status="PASS" endtime="20170823 13:34:49.681" starttime="20170823 13:34:49.669"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:49.681" starttime="20170823 13:34:49.666"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:49.681" starttime="20170823 13:34:49.665"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170823 13:34:50.305" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170823 13:34:50.305" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170823 13:34:50.305" starttime="20170823 13:34:49.685"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:50.305" starttime="20170823 13:34:49.682"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:50.305" starttime="20170823 13:34:49.681"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170823 13:34:50.556" level="INFO">Exit code: 1</msg>
<msg timestamp="20170823 13:34:50.556" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:35455
</msg>
<msg timestamp="20170823 13:34:50.556" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170823 13:34:50.560" starttime="20170823 13:34:50.306"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:50.561" starttime="20170823 13:34:50.561"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:50.561" starttime="20170823 13:34:50.561"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:50.563" starttime="20170823 13:34:50.563"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:50.563" starttime="20170823 13:34:50.563"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170823 13:34:50.570" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170823 13:34:50.570" starttime="20170823 13:34:50.564"></status>
</kw>
<msg timestamp="20170823 13:34:50.570" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170823 13:34:50.570" starttime="20170823 13:34:50.563"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:50.573" starttime="20170823 13:34:50.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:50.576" starttime="20170823 13:34:50.574"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170823 13:34:50.577" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 13:34:50.578" starttime="20170823 13:34:50.577"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:50.580" starttime="20170823 13:34:50.579"></status>
</kw>
<msg timestamp="20170823 13:34:50.580" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170823 13:34:50.580" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170823 13:34:50.580" starttime="20170823 13:34:50.579"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:50.583" starttime="20170823 13:34:50.580"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170823 13:34:54.606" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170823 13:34:54.606" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170823 13:34:54.606" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170823 13:34:54.606" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170823 13:34:54.606" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170823 13:34:54.606" starttime="20170823 13:34:50.583"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:54.607" starttime="20170823 13:34:50.579"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:54.608" starttime="20170823 13:34:54.607"></status>
</kw>
<msg timestamp="20170823 13:34:54.608" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170823 13:34:54.608" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170823 13:34:54.608" starttime="20170823 13:34:54.607"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:54.612" starttime="20170823 13:34:54.608"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170823 13:34:58.635" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170823 13:34:58.636" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170823 13:34:58.636" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170823 13:34:58.636" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170823 13:34:58.636" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170823 13:34:58.636" starttime="20170823 13:34:54.612"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:58.636" starttime="20170823 13:34:54.607"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170823 13:34:58.643" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170823 13:34:58.643" starttime="20170823 13:34:58.637"></status>
</kw>
<msg timestamp="20170823 13:34:58.644" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170823 13:34:58.644" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170823 13:34:58.644" starttime="20170823 13:34:58.636"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170823 13:34:58.647" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170823 13:34:58.647" starttime="20170823 13:34:58.644"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:58.647" starttime="20170823 13:34:58.636"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:58.647" starttime="20170823 13:34:50.578"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:58.647" starttime="20170823 13:34:50.578"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:58.648" starttime="20170823 13:34:58.647"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170823 13:34:58.651" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170823 13:34:58.651" starttime="20170823 13:34:58.648"></status>
</kw>
<status status="FAIL" endtime="20170823 13:34:58.651" starttime="20170823 13:34:50.562"></status>
</kw>
<status status="PASS" endtime="20170823 13:34:58.651" starttime="20170823 13:34:50.562"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170823 13:34:58.658" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170823 13:34:58.658" starttime="20170823 13:34:58.652"></status>
</kw>
<msg timestamp="20170823 13:34:58.658" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170823 13:34:58.658" starttime="20170823 13:34:58.652"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:34:58.661" starttime="20170823 13:34:58.658"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170823 13:35:08.010" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170823 13:35:08.591" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170823 13:35:08.591" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170823 13:35:08.591" starttime="20170823 13:34:58.661"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170823 13:35:08.619" level="INFO">['fatal'] ['fatal']</msg>
<status status="PASS" endtime="20170823 13:35:08.619" starttime="20170823 13:35:08.592"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170823 13:35:08.621" level="FAIL">'FZHQ_RF_alarm_1906' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170823 13:35:08.621" starttime="20170823 13:35:08.620"></status>
</kw>
<msg timestamp="20170823 13:35:08.621" level="INFO">${return1} = ('FAIL', u"'FZHQ_RF_alarm_1906' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170823 13:35:08.621" starttime="20170823 13:35:08.620"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:08.625" starttime="20170823 13:35:08.622"></status>
</kw>
<msg timestamp="20170823 13:35:08.625" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:35:08.625" starttime="20170823 13:35:08.621"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:08.629" starttime="20170823 13:35:08.626"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:08.629" starttime="20170823 13:35:08.626"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:08.630" starttime="20170823 13:35:08.630"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:08.630" starttime="20170823 13:35:08.630"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:08.631" starttime="20170823 13:35:08.631"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170823 13:35:08.632" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170823 13:35:08.632" starttime="20170823 13:35:08.632"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:08.636" starttime="20170823 13:35:08.633"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:08.636" starttime="20170823 13:35:08.633"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:08.636" starttime="20170823 13:35:08.632"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:08.641" starttime="20170823 13:35:08.637"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:08.641" starttime="20170823 13:35:08.637"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:08.641" starttime="20170823 13:35:08.636"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:08.646" starttime="20170823 13:35:08.643"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:08.646" starttime="20170823 13:35:08.642"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:08.646" starttime="20170823 13:35:08.642"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170823 13:35:29.767" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:34:39 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056E2CB0&gt;</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056E2CB0&gt;</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:35:09 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x048A4C10&gt;</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 13:35:29.767" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x048A4C10&gt;</msg>
<msg timestamp="20170823 13:35:29.768" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170823 13:35:29.768" starttime="20170823 13:35:08.646"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:29.772" starttime="20170823 13:35:29.769"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:29.772" starttime="20170823 13:35:29.769"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:29.772" starttime="20170823 13:35:29.768"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170823 13:35:29.776" starttime="20170823 13:35:29.773"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:29.777" starttime="20170823 13:35:29.773"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:29.777" starttime="20170823 13:35:29.773"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:29.777" starttime="20170823 13:35:08.631"></status>
</kw>
<status status="PASS" endtime="20170823 13:35:29.777" starttime="20170823 13:34:49.226"></status>
</kw>
<tags>
<tag>owner-sue.nie@nokia.com</tag>
<tag>QC_720749</tag>
</tags>
<status status="FAIL" endtime="20170823 13:35:29.777" critical="yes" starttime="20170823 13:34:05.219">Keyword '_Check Alarm Status' expected 1 argument, got 2.</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170823 13:35:29.794" starttime="20170823 13:32:45.008"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-sue.nie@nokia.com</stat>
<stat fail="1" pass="0">QC_720749</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906" pass="0">FZHQ T1 RF module alarm without recovery action 1906</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170823 13:32:45.454" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170823 13:35:08.010" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
