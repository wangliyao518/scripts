<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170823 14:53:43.975" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\VeCN\SISO1\CRT\FZHQ_ASMI\FZHQ_T1_RF_module_alarm_without_recovery_action_1906\FZHQ_T1_RF_module_alarm_without_recovery_action_1906.robot" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170823144626//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170823 14:46:28.424" level="INFO">${timestamp} = 20170823144628</msg>
<status status="PASS" endtime="20170823 14:46:28.424" starttime="20170823 14:46:28.389"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170823 14:46:28.425" level="INFO">${FILE_NAME} = FZHQ T1 RF module alarm without recovery action 19</msg>
<status status="PASS" endtime="20170823 14:46:28.425" starttime="20170823 14:46:28.425"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170823 14:46:28.426" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ T1 RF module alarm without recovery action 19_20170823144628</msg>
<status status="PASS" endtime="20170823 14:46:28.426" starttime="20170823 14:46:28.425"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170823 14:46:28.427" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628</msg>
<status status="PASS" endtime="20170823 14:46:28.427" starttime="20170823 14:46:28.426"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 14:46:28.427" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628</msg>
<status status="PASS" endtime="20170823 14:46:28.427" starttime="20170823 14:46:28.427"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 14:46:28.428" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628"&gt;D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 14:46:28.428" starttime="20170823 14:46:28.428"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 14:46:28.429" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628</msg>
<status status="PASS" endtime="20170823 14:46:28.429" starttime="20170823 14:46:28.429"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170823 14:46:28.433" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170823 14:46:28.433" starttime="20170823 14:46:28.429"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170823 14:46:28.457" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170823 14:46:28.457" starttime="20170823 14:46:28.451"></status>
</kw>
<msg timestamp="20170823 14:46:28.457" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170823 14:46:28.457" starttime="20170823 14:46:28.450"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:46:28.458" starttime="20170823 14:46:28.458"></status>
</kw>
<msg timestamp="20170823 14:46:28.458" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 14:46:28.458" starttime="20170823 14:46:28.458"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:46:28.465" starttime="20170823 14:46:28.462"></status>
</kw>
<msg timestamp="20170823 14:46:28.465" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628</msg>
<status status="PASS" endtime="20170823 14:46:28.465" starttime="20170823 14:46:28.459"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170823 14:46:28.468" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628</msg>
<status status="PASS" endtime="20170823 14:46:28.469" starttime="20170823 14:46:28.465"></status>
</kw>
<status status="PASS" endtime="20170823 14:46:28.469" starttime="20170823 14:46:28.450"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170823 14:46:28.495" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 14:46:28.495" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 14:46:28.495" starttime="20170823 14:46:28.470"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:46:28.496" starttime="20170823 14:46:28.496"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170823 14:46:28.497" starttime="20170823 14:46:28.496"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:46:28.497" starttime="20170823 14:46:28.497"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170823 14:46:28.498" starttime="20170823 14:46:28.497"></status>
</kw>
<status status="PASS" endtime="20170823 14:46:28.498" starttime="20170823 14:46:28.469"></status>
</kw>
<status status="PASS" endtime="20170823 14:46:28.498" starttime="20170823 14:46:28.469"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:45:28 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055D77B0&gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055D77B0&gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:46:29 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055C58C8&gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055C58C8&gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:46:40 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055C5328&gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055C5328&gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:46:50 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:47:45.124" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055C58A0&gt;</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055C58A0&gt;</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:47:01 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045787D8&gt;</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045787D8&gt;</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170823 14:47:45.125" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170823 14:47:45.127" starttime="20170823 14:46:28.498"></status>
</kw>
<status status="PASS" endtime="20170823 14:47:45.127" starttime="20170823 14:46:28.498"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170823 14:47:45.128" starttime="20170823 14:47:45.128"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170823 14:47:45.130" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170823 14:47:45.130" starttime="20170823 14:47:45.129"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170823 14:47:45.135" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170823 14:47:45.135" starttime="20170823 14:47:45.130"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170823 14:47:45.140" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170823 14:47:45.141" starttime="20170823 14:47:45.136"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170823 14:47:45.146" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170823 14:47:45.146" starttime="20170823 14:47:45.141"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170823 14:47:46.557" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170823 14:47:46.557" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170823 14:47:46.557" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170823 14:47:46.557" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170823 14:47:46.557" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170823 14:47:46.558" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05683DC8&gt;</msg>
<status status="PASS" endtime="20170823 14:47:46.558" starttime="20170823 14:47:45.146"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 14:47:46.559" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05683DC8&gt;</msg>
<status status="PASS" endtime="20170823 14:47:46.559" starttime="20170823 14:47:46.558"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170823 14:47:47.748" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05683DC8&gt;</msg>
<msg timestamp="20170823 14:47:47.748" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170823 14:47:47.748" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170823 14:47:47.749" starttime="20170823 14:47:46.564"></status>
</kw>
<status status="PASS" endtime="20170823 14:47:47.749" starttime="20170823 14:47:46.560"></status>
</kw>
<status status="PASS" endtime="20170823 14:47:47.749" starttime="20170823 14:47:45.128"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 14:47:47.752" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05683DC8&gt;.</msg>
<status status="PASS" endtime="20170823 14:47:47.752" starttime="20170823 14:47:47.749"></status>
</kw>
<status status="PASS" endtime="20170823 14:47:47.753" starttime="20170823 14:46:28.389"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:40.074" starttime="20170823 14:53:40.071"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170823 14:53:40.081" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170823 14:53:40.081" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05683DC8&gt;</msg>
<status status="PASS" endtime="20170823 14:53:40.082" starttime="20170823 14:53:40.075"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Zip File" library="tdd_ev_robotws">
<doc>This keyword can zip specific files.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<msg timestamp="20170823 14:53:40.167" level="INFO">[zip_control.py@325]</msg>
<msg timestamp="20170823 14:53:40.167" level="INFO">[zip_control.py@331] zip D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628 to D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628.zip failed!</msg>
<status status="PASS" endtime="20170823 14:53:40.167" starttime="20170823 14:53:40.083"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:40.167" starttime="20170823 14:53:40.082"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:40.167" starttime="20170823 14:53:40.082"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Remove Directory" library="OperatingSystem">
<doc>Removes the directory pointed to by the given ``path``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20170823 14:53:40.173" html="yes" level="INFO">Removed directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628"&gt;D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 14:53:40.173" starttime="20170823 14:53:40.169"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:40.173" starttime="20170823 14:53:40.168"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:40.173" starttime="20170823 14:53:40.168"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:40.174" starttime="20170823 14:53:40.071"></status>
</kw>
<test id="s1-t1" name="FZHQ_RF_alarm_1906">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170823144626//ev_logs//D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170823 14:47:47.758" level="INFO">${timestamp} = 20170823144747</msg>
<status status="PASS" endtime="20170823 14:47:47.758" starttime="20170823 14:47:47.758"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170823 14:47:47.759" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 14:47:47.759" starttime="20170823 14:47:47.758"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170823 14:47:47.760" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 14:47:47.760" starttime="20170823 14:47:47.759"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 14:47:47.760" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 14:47:47.760" starttime="20170823 14:47:47.760"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 14:47:47.761" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628\FZHQ_RF_alarm_1906"&gt;D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628\FZHQ_RF_alarm_1906&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 14:47:47.761" starttime="20170823 14:47:47.761"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 14:47:47.762" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 14:47:47.762" starttime="20170823 14:47:47.762"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170823 14:47:47.763" starttime="20170823 14:47:47.762"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:47:47.765" starttime="20170823 14:47:47.764"></status>
</kw>
<msg timestamp="20170823 14:47:47.765" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 14:47:47.765" starttime="20170823 14:47:47.764"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:47:47.766" starttime="20170823 14:47:47.765"></status>
</kw>
<msg timestamp="20170823 14:47:47.766" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 14:47:47.766" starttime="20170823 14:47:47.765"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170823 14:47:47.770" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 14:47:47.770" starttime="20170823 14:47:47.766"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170823 14:47:47.771" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 14:47:47.771" starttime="20170823 14:47:47.770"></status>
</kw>
<status status="PASS" endtime="20170823 14:47:47.771" starttime="20170823 14:47:47.763"></status>
</kw>
<status status="PASS" endtime="20170823 14:47:47.771" starttime="20170823 14:47:47.757"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170823 14:47:47.773" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=40453 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpfioplb --insecure</msg>
<msg timestamp="20170823 14:47:49.776" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 14:47:49.776" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 14:47:53.775" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 14:47:53.775" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 14:47:57.775" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 14:47:57.775" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 14:48:00.775" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170823 14:48:00.775" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 68123, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170823 14:48:08.138" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68123, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170823 14:48:10.801" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 68123, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170823 14:48:10.801" starttime="20170823 14:47:47.771"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:10.801" starttime="20170823 14:47:47.754"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<arguments>
<arg>alarm_start</arg>
</arguments>
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170823 14:48:11.055" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170823 14:48:11.055" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170823 14:48:11.055" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628\FZHQ_RF_alarm_1906" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170823 14:48:11.055" starttime="20170823 14:48:10.803"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170823 14:48:19.624" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170823 14:48:19.624" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170823 14:48:19.624" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170823 14:48:19.625" starttime="20170823 14:48:11.056"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170823 14:48:19.625" level="INFO">${case_execute_log_name} = alarm_start</msg>
<status status="PASS" endtime="20170823 14:48:19.625" starttime="20170823 14:48:19.625"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:19.626" starttime="20170823 14:48:10.802"></status>
</kw>
<kw name="Get_RRU_IP" library="SISO1 Resource">
<assign>
<var>${RRU_IP}</var>
</assign>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>query=get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=${RRU_SERINUM}]</arg>
</arguments>
<assign>
<var>${rmode_info}</var>
</assign>
<msg timestamp="20170823 14:48:20.145" level="INFO">[infomodel_control.py@328] query infomodel: 'get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=RY151105157]' succeed .</msg>
<msg timestamp="20170823 14:48:20.145" level="INFO">${rmode_info} = [{u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': 'CPRI_RP1', u'routingDirectionCalculated': 'CCW', u'productCode': u'473106A.X11', u'filterIpAddress': u'1...</msg>
<status status="PASS" endtime="20170823 14:48:20.146" starttime="20170823 14:48:19.627"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${rmode_info}</arg>
</arguments>
<msg timestamp="20170823 14:48:20.146" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20170823 14:48:20.146" starttime="20170823 14:48:20.146"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rmode_info[0].ipAddress}</arg>
</arguments>
<msg timestamp="20170823 14:48:20.147" level="INFO">172.16.17.128</msg>
<status status="PASS" endtime="20170823 14:48:20.147" starttime="20170823 14:48:20.147"></status>
</kw>
<msg timestamp="20170823 14:48:20.147" level="INFO">${RRU_IP} = 172.16.17.128</msg>
<status status="PASS" endtime="20170823 14:48:20.147" starttime="20170823 14:48:19.626"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_trigger}</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20170823 14:48:30.579" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:48:30.579" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:47:11 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:48:30.579" starttime="20170823 14:48:20.149"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20170823 14:48:30.581" starttime="20170823 14:48:30.580"></status>
</kw>
<msg timestamp="20170823 14:48:30.581" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20170823 14:48:30.581" starttime="20170823 14:48:30.580"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20170823 14:48:30.712" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB7D8&gt;</msg>
<msg timestamp="20170823 14:48:30.712" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20170823 14:48:30.712" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:48:30.713" starttime="20170823 14:48:30.585"></status>
</kw>
<msg timestamp="20170823 14:48:30.713" level="INFO">${ret} = lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:48:30.713" starttime="20170823 14:48:30.581"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<status status="PASS" endtime="20170823 14:48:30.718" starttime="20170823 14:48:30.717"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:30.718" starttime="20170823 14:48:30.717"></status>
</kw>
<msg timestamp="20170823 14:48:30.718" level="INFO">${ret1} = ('PASS', '0x2018')</msg>
<status status="PASS" endtime="20170823 14:48:30.718" starttime="20170823 14:48:30.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<msg timestamp="20170823 14:48:30.723" level="FAIL">'lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;' does not match '0x1018'</msg>
<status status="FAIL" endtime="20170823 14:48:30.723" starttime="20170823 14:48:30.722"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:30.723" starttime="20170823 14:48:30.722"></status>
</kw>
<msg timestamp="20170823 14:48:30.723" level="INFO">${ret2} = ('FAIL', u"'lxc-ls --active\n0x2015\t0x2016\t0x2018\t0x201b\nroot@fctj-4a:~ &gt;' does not match '0x1018'")</msg>
<status status="PASS" endtime="20170823 14:48:30.723" starttime="20170823 14:48:30.718"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<msg timestamp="20170823 14:48:30.864" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB7D8&gt;</msg>
<msg timestamp="20170823 14:48:30.864" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x2018</msg>
<msg timestamp="20170823 14:48:30.864" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x2018
root@0x2018:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:48:30.865" starttime="20170823 14:48:30.730"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:30.865" starttime="20170823 14:48:30.727"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:30.865" starttime="20170823 14:48:30.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<status status="PASS" endtime="20170823 14:48:30.872" starttime="20170823 14:48:30.869"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:30.872" starttime="20170823 14:48:30.865"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20170823 14:48:30.876" starttime="20170823 14:48:30.876"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:30.876" starttime="20170823 14:48:30.872"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<msg timestamp="20170823 14:48:31.052" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB7D8&gt;</msg>
<msg timestamp="20170823 14:48:31.052" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.17.128 2323</msg>
<msg timestamp="20170823 14:48:31.052" level="INFO">[ssh_common.py@314] Get Response: 
Trying 172.16.17.1</msg>
<status status="PASS" endtime="20170823 14:48:31.052" starttime="20170823 14:48:30.880"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:31.052" starttime="20170823 14:48:30.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20170823 14:48:31.243" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB7D8&gt;</msg>
<msg timestamp="20170823 14:48:31.243" level="INFO">[ssh_common.py@258] Execute command: sendFault 1104 0 0 0 0 0</msg>
<msg timestamp="20170823 14:48:31.243" level="INFO">[ssh_common.py@314] Get Response:</msg>
<status status="PASS" endtime="20170823 14:48:31.243" starttime="20170823 14:48:31.057"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:31.243" starttime="20170823 14:48:31.053"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20170823 14:48:31.247" starttime="20170823 14:48:31.244"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<status status="PASS" endtime="20170823 14:48:31.251" starttime="20170823 14:48:31.247"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 14:48:31.254" starttime="20170823 14:48:31.251"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20170823 14:48:31.258" starttime="20170823 14:48:31.255"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 14:48:31.261" starttime="20170823 14:48:31.258"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:48:31.265" starttime="20170823 14:48:31.261"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20170823 14:48:31.299" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB7D8&gt;</msg>
<status status="PASS" endtime="20170823 14:48:31.299" starttime="20170823 14:48:31.265"></status>
</kw>
<status status="PASS" endtime="20170823 14:48:31.300" starttime="20170823 14:48:20.148"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>${msg_check_list_alarm_start}</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${msg_check_list}</arg>
<arg>timeout=240</arg>
</arguments>
<msg timestamp="20170823 14:50:32.541" level="INFO">[infomodel_control.py@328] query infomodel: '/MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/ALARM_L-* is [alarmInformation.faultId=1906]' succeed .</msg>
<status status="PASS" endtime="20170823 14:50:32.542" starttime="20170823 14:48:31.301"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:32.542" starttime="20170823 14:48:31.300"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_cancel}</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20170823 14:50:42.928" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:50:42.929" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:48:21 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:50:42.929" starttime="20170823 14:50:32.545"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:42.930" starttime="20170823 14:50:42.930"></status>
</kw>
<msg timestamp="20170823 14:50:42.930" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20170823 14:50:42.930" starttime="20170823 14:50:42.929"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20170823 14:50:43.056" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056ED9B8&gt;</msg>
<msg timestamp="20170823 14:50:43.056" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20170823 14:50:43.056" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:50:43.056" starttime="20170823 14:50:42.935"></status>
</kw>
<msg timestamp="20170823 14:50:43.056" level="INFO">${ret} = lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:50:43.056" starttime="20170823 14:50:42.931"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:43.062" starttime="20170823 14:50:43.061"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:43.062" starttime="20170823 14:50:43.061"></status>
</kw>
<msg timestamp="20170823 14:50:43.062" level="INFO">${ret1} = ('PASS', '0x2018')</msg>
<status status="PASS" endtime="20170823 14:50:43.063" starttime="20170823 14:50:43.057"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<msg timestamp="20170823 14:50:43.068" level="FAIL">'lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;' does not match '0x1018'</msg>
<status status="FAIL" endtime="20170823 14:50:43.069" starttime="20170823 14:50:43.068"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:43.069" starttime="20170823 14:50:43.067"></status>
</kw>
<msg timestamp="20170823 14:50:43.069" level="INFO">${ret2} = ('FAIL', u"'lxc-ls --active\n0x2015\t0x2016\t0x2018\t0x201b\nroot@fctj-4a:~ &gt;' does not match '0x1018'")</msg>
<status status="PASS" endtime="20170823 14:50:43.069" starttime="20170823 14:50:43.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<msg timestamp="20170823 14:50:43.211" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056ED9B8&gt;</msg>
<msg timestamp="20170823 14:50:43.211" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x2018</msg>
<msg timestamp="20170823 14:50:43.211" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x2018
root@0x2018:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:50:43.211" starttime="20170823 14:50:43.080"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:43.211" starttime="20170823 14:50:43.075"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:43.211" starttime="20170823 14:50:43.069"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:43.219" starttime="20170823 14:50:43.215"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:43.219" starttime="20170823 14:50:43.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:43.224" starttime="20170823 14:50:43.224"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:43.224" starttime="20170823 14:50:43.220"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<msg timestamp="20170823 14:50:43.395" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056ED9B8&gt;</msg>
<msg timestamp="20170823 14:50:43.395" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.17.128 2323</msg>
<msg timestamp="20170823 14:50:43.395" level="INFO">[ssh_common.py@314] Get Response: 
Trying 172.16.17.1</msg>
<status status="PASS" endtime="20170823 14:50:43.396" starttime="20170823 14:50:43.227"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:43.396" starttime="20170823 14:50:43.224"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20170823 14:50:43.569" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056ED9B8&gt;</msg>
<msg timestamp="20170823 14:50:43.569" level="INFO">[ssh_common.py@258] Execute command: sendFault 1104 0 0 1 0 0</msg>
<msg timestamp="20170823 14:50:43.569" level="INFO">[ssh_common.py@314] Get Response:</msg>
<status status="PASS" endtime="20170823 14:50:43.569" starttime="20170823 14:50:43.399"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:43.569" starttime="20170823 14:50:43.396"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:43.573" starttime="20170823 14:50:43.570"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:43.578" starttime="20170823 14:50:43.573"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:43.581" starttime="20170823 14:50:43.578"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:43.585" starttime="20170823 14:50:43.582"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:43.589" starttime="20170823 14:50:43.585"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:43.592" starttime="20170823 14:50:43.589"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20170823 14:50:43.610" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056ED9B8&gt;</msg>
<status status="PASS" endtime="20170823 14:50:43.611" starttime="20170823 14:50:43.592"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:43.611" starttime="20170823 14:50:32.543"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>${msg_check_list_alarm_cancel}</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${msg_check_list}</arg>
<arg>timeout=240</arg>
</arguments>
<msg timestamp="20170823 14:50:45.068" level="INFO">[infomodel_control.py@328] query infomodel: 'count /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/ALARM_L-* is [alarmInformation.faultId=1906] =0' succeed .</msg>
<status status="PASS" endtime="20170823 14:50:45.068" starttime="20170823 14:50:43.612"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:45.068" starttime="20170823 14:50:43.611"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_trigger}</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20170823 14:50:55.467" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:50:55.467" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:50:33 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:50:55.468" starttime="20170823 14:50:45.070"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:55.469" starttime="20170823 14:50:55.468"></status>
</kw>
<msg timestamp="20170823 14:50:55.469" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20170823 14:50:55.469" starttime="20170823 14:50:55.468"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20170823 14:50:55.597" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB940&gt;</msg>
<msg timestamp="20170823 14:50:55.597" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20170823 14:50:55.597" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:50:55.597" starttime="20170823 14:50:55.472"></status>
</kw>
<msg timestamp="20170823 14:50:55.598" level="INFO">${ret} = lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:50:55.598" starttime="20170823 14:50:55.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:55.602" starttime="20170823 14:50:55.602"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:55.602" starttime="20170823 14:50:55.601"></status>
</kw>
<msg timestamp="20170823 14:50:55.602" level="INFO">${ret1} = ('PASS', '0x2018')</msg>
<status status="PASS" endtime="20170823 14:50:55.602" starttime="20170823 14:50:55.598"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<msg timestamp="20170823 14:50:55.607" level="FAIL">'lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;' does not match '0x1018'</msg>
<status status="FAIL" endtime="20170823 14:50:55.607" starttime="20170823 14:50:55.606"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:55.607" starttime="20170823 14:50:55.606"></status>
</kw>
<msg timestamp="20170823 14:50:55.607" level="INFO">${ret2} = ('FAIL', u"'lxc-ls --active\n0x2015\t0x2016\t0x2018\t0x201b\nroot@fctj-4a:~ &gt;' does not match '0x1018'")</msg>
<status status="PASS" endtime="20170823 14:50:55.607" starttime="20170823 14:50:55.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<msg timestamp="20170823 14:50:55.744" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB940&gt;</msg>
<msg timestamp="20170823 14:50:55.744" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x2018</msg>
<msg timestamp="20170823 14:50:55.744" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x2018
root@0x2018:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:50:55.744" starttime="20170823 14:50:55.614"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:55.744" starttime="20170823 14:50:55.610"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:55.744" starttime="20170823 14:50:55.607"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:55.752" starttime="20170823 14:50:55.749"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:55.752" starttime="20170823 14:50:55.745"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:55.757" starttime="20170823 14:50:55.757"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:55.757" starttime="20170823 14:50:55.753"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<msg timestamp="20170823 14:50:55.933" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB940&gt;</msg>
<msg timestamp="20170823 14:50:55.933" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.17.128 2323</msg>
<msg timestamp="20170823 14:50:55.933" level="INFO">[ssh_common.py@314] Get Response: 
Trying 172.16.17.1</msg>
<status status="PASS" endtime="20170823 14:50:55.934" starttime="20170823 14:50:55.761"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:55.934" starttime="20170823 14:50:55.757"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20170823 14:50:56.109" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB940&gt;</msg>
<msg timestamp="20170823 14:50:56.109" level="INFO">[ssh_common.py@258] Execute command: sendFault 1104 0 0 0 0 0</msg>
<msg timestamp="20170823 14:50:56.109" level="INFO">[ssh_common.py@314] Get Response:</msg>
<status status="PASS" endtime="20170823 14:50:56.109" starttime="20170823 14:50:55.937"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:56.109" starttime="20170823 14:50:55.934"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:56.114" starttime="20170823 14:50:56.110"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:56.118" starttime="20170823 14:50:56.114"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:56.121" starttime="20170823 14:50:56.118"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:56.125" starttime="20170823 14:50:56.121"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:56.128" starttime="20170823 14:50:56.125"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:50:56.132" starttime="20170823 14:50:56.128"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20170823 14:50:56.141" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB940&gt;</msg>
<status status="PASS" endtime="20170823 14:50:56.142" starttime="20170823 14:50:56.132"></status>
</kw>
<status status="PASS" endtime="20170823 14:50:56.142" starttime="20170823 14:50:45.069"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>${msg_check_list_alarm_start}</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${msg_check_list}</arg>
<arg>timeout=240</arg>
</arguments>
<msg timestamp="20170823 14:52:57.633" level="INFO">[infomodel_control.py@328] query infomodel: '/MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/ALARM_L-* is [alarmInformation.faultId=1906]' succeed .</msg>
<status status="PASS" endtime="20170823 14:52:57.633" starttime="20170823 14:50:56.144"></status>
</kw>
<status status="PASS" endtime="20170823 14:52:57.633" starttime="20170823 14:50:56.142"></status>
</kw>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\alarm</arg>
</arguments>
<msg timestamp="20170823 14:52:57.641" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170823144626\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823144628\FZHQ_RF_alarm_1906\alarm' succeed .</msg>
<status status="PASS" endtime="20170823 14:52:57.641" starttime="20170823 14:52:57.634"></status>
</kw>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170823 14:52:58.297" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170823 14:52:58.297" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170823 14:52:58.297" starttime="20170823 14:52:57.642"></status>
</kw>
<kw name="_RF Reset And Alarm Disappear">
<arguments>
<arg>${msg_check_list_alarm_cancel}</arg>
</arguments>
<kw name="Get_BTS_DN" library="SISO1 Resource">
<arguments>
<arg>RMOD_L</arg>
</arguments>
<assign>
<var>${RMOD_L_DN}</var>
</assign>
<kw name="Get Objects By Class Name" library="ute_admin">
<doc>Get objects by class name.</doc>
<arguments>
<arg>${DN_Name}</arg>
</arguments>
<assign>
<var>${DN_LIST1}</var>
</assign>
<msg timestamp="20170823 14:52:58.301" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 50679, "parameters": {"name": "getItemsByClassName", "parameters": {"className": "RMOD_L"}}}}</msg>
<msg timestamp="20170823 14:52:58.364" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 50679, "requestMessage": [{"distName": "/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1", "parameters": {"macAddress": "00:00:02:01:00:35", "hwVariant": null, "identityDN": null, "l3Protocol": "CPRI_RP1", "routingDirectionCalculated": "CCW", "productCode": "473106A.X11", "filterIpAddress": "1.1.1.1", "supportsLineRateAutoNegotiation": false, "supportsMultiRouter": false, "l3MinorProtocolVersion": 0, "hwVersion": "X11  ", "bpfForRadioAvailabilityState": "Unknown", "supportsChaining": false, "routingDirectionApplied": "CCW", "sourceEthernetBBswitchDN": "", "productName": "FZHQ", "masterAgentDN": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 51", "supportsMixedLinkRates": "Unknown", "tempNetActId": 1, "frameForwardingDelay": [], "serialNumber": "RY151105157", "l3MajorProtocolVersion": 1, "stateInfo": {"usageState": "Active", "detectionState": "Done", "workingState": "dedicated", "availabilityStatus": "Online", "administrativeState": "Unlocked", "operationalState": "Enabled", "reasoningStatus": [], "proceduralState": "ethernetEnabled"}, "filterMacAddress": "aa:bb:cc:dd:ee:ff", "ipAddress": "172.16.17.128"}}]}}</msg>
<msg timestamp="20170823 14:52:58.364" level="INFO">${DN_LIST1} = [{u'distName': u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1', u'parameters': {u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': u'CPRI_RP1', u'routingDirectionC...</msg>
<status status="PASS" endtime="20170823 14:52:58.364" starttime="20170823 14:52:58.300"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${DN_LIST1}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:52:58.365" starttime="20170823 14:52:58.365"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${DN_LIST}</var>
</assign>
<msg timestamp="20170823 14:52:58.365" level="INFO">${DN_LIST} = []</msg>
<status status="PASS" endtime="20170823 14:52:58.366" starttime="20170823 14:52:58.365"></status>
</kw>
<kw type="for" name="${index} IN [ @{DN_LIST1} ]">
<kw type="foritem" name="${index} = {u'distName': u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1', u'parameters': {u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': u'CPRI_RP1', u'routingDirectionCa...">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${DN_LIST}</arg>
<arg>${index.distName}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:52:58.367" starttime="20170823 14:52:58.366"></status>
</kw>
<status status="PASS" endtime="20170823 14:52:58.367" starttime="20170823 14:52:58.366"></status>
</kw>
<status status="PASS" endtime="20170823 14:52:58.367" starttime="20170823 14:52:58.366"></status>
</kw>
<msg timestamp="20170823 14:52:58.367" level="INFO">${RMOD_L_DN} = [u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1']</msg>
<status status="PASS" endtime="20170823 14:52:58.367" starttime="20170823 14:52:58.298"></status>
</kw>
<kw name="Reset Unit" library="ute_admin">
<doc>Preform unit reset procedure.</doc>
<arguments>
<arg>${RMOD_L_DN[0]}</arg>
</arguments>
<msg timestamp="20170823 14:52:58.368" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 69901, "parameters": {"name": "unitReset", "parameters": {"distName": "/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1"}}}}</msg>
<msg timestamp="20170823 14:52:59.481" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 69901, "requestMessage": ""}}</msg>
<status status="PASS" endtime="20170823 14:52:59.481" starttime="20170823 14:52:58.367"></status>
</kw>
<status status="PASS" endtime="20170823 14:52:59.481" starttime="20170823 14:52:58.298"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 14:52:59.488" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05683DC8&gt;.</msg>
<status status="PASS" endtime="20170823 14:52:59.488" starttime="20170823 14:52:59.483"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170823 14:52:59.906" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170823 14:52:59.906" starttime="20170823 14:52:59.488"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170823 14:52:59.907" starttime="20170823 14:52:59.906"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:52:59.908" starttime="20170823 14:52:59.907"></status>
</kw>
<msg timestamp="20170823 14:52:59.908" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 14:52:59.908" starttime="20170823 14:52:59.907"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170823 14:52:59.913" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:52:59.914" starttime="20170823 14:52:59.912"></status>
</kw>
<status status="FAIL" endtime="20170823 14:52:59.914" starttime="20170823 14:52:59.909"></status>
</kw>
<status status="PASS" endtime="20170823 14:52:59.914" starttime="20170823 14:52:59.908"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170823 14:53:00.295" level="INFO">[infomodel_control.py@189] stop infomodel logger failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20170823 14:53:00.295" level="INFO">[infomodel_control.py@193] disconnect from infomodel failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20170823 14:53:00.295" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<msg timestamp="20170823 14:53:00.295" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:53:00.295" starttime="20170823 14:52:59.918"></status>
</kw>
<status status="FAIL" endtime="20170823 14:53:00.296" starttime="20170823 14:52:59.915"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:00.296" starttime="20170823 14:52:59.914"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170823 14:53:00.546" level="INFO">Exit code: 1</msg>
<msg timestamp="20170823 14:53:00.546" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:40453
</msg>
<msg timestamp="20170823 14:53:00.546" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170823 14:53:00.550" starttime="20170823 14:53:00.296"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:00.552" starttime="20170823 14:53:00.551"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:00.552" starttime="20170823 14:53:00.551"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:00.553" starttime="20170823 14:53:00.553"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:00.554" starttime="20170823 14:53:00.554"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170823 14:53:00.561" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170823 14:53:00.561" starttime="20170823 14:53:00.555"></status>
</kw>
<msg timestamp="20170823 14:53:00.561" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170823 14:53:00.561" starttime="20170823 14:53:00.554"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:00.565" starttime="20170823 14:53:00.562"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:00.568" starttime="20170823 14:53:00.565"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170823 14:53:00.569" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:53:00.569" starttime="20170823 14:53:00.569"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:00.571" starttime="20170823 14:53:00.571"></status>
</kw>
<msg timestamp="20170823 14:53:00.572" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170823 14:53:00.572" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170823 14:53:00.572" starttime="20170823 14:53:00.570"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:00.575" starttime="20170823 14:53:00.572"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170823 14:53:04.599" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170823 14:53:04.599" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170823 14:53:04.599" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170823 14:53:04.599" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170823 14:53:04.599" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170823 14:53:04.599" starttime="20170823 14:53:00.575"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:04.599" starttime="20170823 14:53:00.570"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:04.601" starttime="20170823 14:53:04.600"></status>
</kw>
<msg timestamp="20170823 14:53:04.601" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170823 14:53:04.601" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170823 14:53:04.601" starttime="20170823 14:53:04.600"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:04.604" starttime="20170823 14:53:04.601"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170823 14:53:08.629" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170823 14:53:08.629" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170823 14:53:08.629" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170823 14:53:08.629" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170823 14:53:08.629" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170823 14:53:08.629" starttime="20170823 14:53:04.604"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:08.629" starttime="20170823 14:53:04.599"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170823 14:53:08.637" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170823 14:53:08.637" starttime="20170823 14:53:08.630"></status>
</kw>
<msg timestamp="20170823 14:53:08.637" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170823 14:53:08.637" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170823 14:53:08.637" starttime="20170823 14:53:08.630"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170823 14:53:08.641" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170823 14:53:08.641" starttime="20170823 14:53:08.638"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:08.641" starttime="20170823 14:53:08.629"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:08.641" starttime="20170823 14:53:00.570"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:08.641" starttime="20170823 14:53:00.570"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:08.642" starttime="20170823 14:53:08.641"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170823 14:53:08.645" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170823 14:53:08.645" starttime="20170823 14:53:08.642"></status>
</kw>
<status status="FAIL" endtime="20170823 14:53:08.645" starttime="20170823 14:53:00.553"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:08.645" starttime="20170823 14:53:00.552"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170823 14:53:08.652" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170823 14:53:08.652" starttime="20170823 14:53:08.646"></status>
</kw>
<msg timestamp="20170823 14:53:08.652" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170823 14:53:08.652" starttime="20170823 14:53:08.646"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:08.656" starttime="20170823 14:53:08.652"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170823 14:53:18.070" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170823 14:53:18.679" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170823 14:53:18.679" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170823 14:53:18.679" starttime="20170823 14:53:08.656"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170823 14:53:18.940" level="INFO">['fatal'] ['fatal']</msg>
<status status="PASS" endtime="20170823 14:53:18.940" starttime="20170823 14:53:18.680"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170823 14:53:18.942" level="FAIL">'FZHQ_RF_alarm_1906' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170823 14:53:18.942" starttime="20170823 14:53:18.941"></status>
</kw>
<msg timestamp="20170823 14:53:18.942" level="INFO">${return1} = ('FAIL', u"'FZHQ_RF_alarm_1906' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170823 14:53:18.942" starttime="20170823 14:53:18.941"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:18.946" starttime="20170823 14:53:18.943"></status>
</kw>
<msg timestamp="20170823 14:53:18.946" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 14:53:18.946" starttime="20170823 14:53:18.942"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:18.950" starttime="20170823 14:53:18.947"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:18.950" starttime="20170823 14:53:18.946"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:18.950" starttime="20170823 14:53:18.950"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:18.951" starttime="20170823 14:53:18.951"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:18.951" starttime="20170823 14:53:18.951"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170823 14:53:18.952" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170823 14:53:18.952" starttime="20170823 14:53:18.952"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:18.953" starttime="20170823 14:53:18.953"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:18.953" starttime="20170823 14:53:18.953"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:18.954" starttime="20170823 14:53:18.954"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170823 14:53:40.066" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:50:45 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB148&gt;</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056EB148&gt;</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:53:19 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056ED170&gt;</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 14:53:40.066" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056ED170&gt;</msg>
<msg timestamp="20170823 14:53:40.067" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170823 14:53:40.067" starttime="20170823 14:53:18.954"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:40.068" starttime="20170823 14:53:40.067"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170823 14:53:40.068" starttime="20170823 14:53:40.068"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:40.068" starttime="20170823 14:53:18.951"></status>
</kw>
<status status="PASS" endtime="20170823 14:53:40.068" starttime="20170823 14:52:59.482"></status>
</kw>
<tags>
<tag>owner-sue.nie@nokia.com</tag>
<tag>QC_720771</tag>
</tags>
<status status="PASS" endtime="20170823 14:53:40.069" critical="yes" starttime="20170823 14:47:47.753"></status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="PASS" endtime="20170823 14:53:40.174" starttime="20170823 14:46:27.318"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">owner-sue.nie@nokia.com</stat>
<stat fail="0" pass="1">QC_720771</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906" pass="1">FZHQ T1 RF module alarm without recovery action 1906</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170823 14:46:27.769" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170823 14:53:18.070" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
