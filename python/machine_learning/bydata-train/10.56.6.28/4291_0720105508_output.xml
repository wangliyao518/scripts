<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170720 10:55:08.786" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\CRT\FZHQ_ASMI\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low.robot" id="s1" name="FZHQ T1 Carrier Frequency and supported EARFCN low">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170720105203//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170720 10:52:16.646" level="INFO">${timestamp} = 20170720105216</msg>
<status status="PASS" endtime="20170720 10:52:16.646" starttime="20170720 10:52:16.577"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170720 10:52:16.647" level="INFO">${FILE_NAME} = FZHQ T1 Carrier Frequency and supported EARFCN low</msg>
<status status="PASS" endtime="20170720 10:52:16.647" starttime="20170720 10:52:16.646"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170720 10:52:16.648" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ T1 Carrier Frequency and supported EARFCN low_20170720105216</msg>
<status status="PASS" endtime="20170720 10:52:16.648" starttime="20170720 10:52:16.647"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170720 10:52:16.648" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216</msg>
<status status="PASS" endtime="20170720 10:52:16.648" starttime="20170720 10:52:16.648"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170720 10:52:16.649" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216</msg>
<status status="PASS" endtime="20170720 10:52:16.649" starttime="20170720 10:52:16.649"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170720 10:52:16.650" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216"&gt;D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170720 10:52:16.650" starttime="20170720 10:52:16.649"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170720 10:52:16.651" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216</msg>
<status status="PASS" endtime="20170720 10:52:16.651" starttime="20170720 10:52:16.650"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170720 10:52:16.654" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170720 10:52:16.654" starttime="20170720 10:52:16.651"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170720 10:52:16.673" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170720 10:52:16.673" starttime="20170720 10:52:16.667"></status>
</kw>
<msg timestamp="20170720 10:52:16.674" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170720 10:52:16.674" starttime="20170720 10:52:16.667"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:52:16.675" starttime="20170720 10:52:16.674"></status>
</kw>
<msg timestamp="20170720 10:52:16.675" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170720 10:52:16.675" starttime="20170720 10:52:16.674"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:52:16.681" starttime="20170720 10:52:16.678"></status>
</kw>
<msg timestamp="20170720 10:52:16.681" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216</msg>
<status status="PASS" endtime="20170720 10:52:16.681" starttime="20170720 10:52:16.675"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170720 10:52:16.684" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216</msg>
<status status="PASS" endtime="20170720 10:52:16.684" starttime="20170720 10:52:16.681"></status>
</kw>
<status status="PASS" endtime="20170720 10:52:16.685" starttime="20170720 10:52:16.666"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170720 10:52:16.725" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170720 10:52:16.725" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170720 10:52:16.725" starttime="20170720 10:52:16.686"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:52:16.726" starttime="20170720 10:52:16.725"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170720 10:52:16.726" starttime="20170720 10:52:16.726"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:52:16.727" starttime="20170720 10:52:16.726"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170720 10:52:16.727" starttime="20170720 10:52:16.727"></status>
</kw>
<status status="PASS" endtime="20170720 10:52:16.727" starttime="20170720 10:52:16.685"></status>
</kw>
<status status="PASS" endtime="20170720 10:52:16.727" starttime="20170720 10:52:16.685"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 10:32:38 CST 2017 from 10.69.80.114 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055B55D0&gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055B55D0&gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 10:52:18 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055B39B8&gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055B39B8&gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 10:52:28 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x046522B0&gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x046522B0&gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 10:52:39 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04651C88&gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04651C88&gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 10:52:50 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045AA5A8&gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045AA5A8&gt;</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170720 10:53:33.426" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170720 10:53:33.428" starttime="20170720 10:52:16.728"></status>
</kw>
<status status="PASS" endtime="20170720 10:53:33.428" starttime="20170720 10:52:16.727"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170720 10:53:33.429" starttime="20170720 10:53:33.428"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170720 10:53:33.430" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170720 10:53:33.430" starttime="20170720 10:53:33.429"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170720 10:53:33.433" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170720 10:53:33.433" starttime="20170720 10:53:33.430"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170720 10:53:33.436" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170720 10:53:33.436" starttime="20170720 10:53:33.433"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170720 10:53:33.439" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170720 10:53:33.439" starttime="20170720 10:53:33.436"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170720 10:53:34.849" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170720 10:53:34.849" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170720 10:53:34.849" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170720 10:53:34.849" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170720 10:53:34.849" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170720 10:53:34.849" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0560CC38&gt;</msg>
<status status="PASS" endtime="20170720 10:53:34.850" starttime="20170720 10:53:33.439"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170720 10:53:34.850" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0560CC38&gt;</msg>
<status status="PASS" endtime="20170720 10:53:34.850" starttime="20170720 10:53:34.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170720 10:53:36.068" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0560CC38&gt;</msg>
<msg timestamp="20170720 10:53:36.068" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170720 10:53:36.068" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170720 10:53:36.068" starttime="20170720 10:53:34.854"></status>
</kw>
<status status="PASS" endtime="20170720 10:53:36.068" starttime="20170720 10:53:34.851"></status>
</kw>
<status status="PASS" endtime="20170720 10:53:36.069" starttime="20170720 10:53:33.429"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170720 10:53:36.074" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0560CC38&gt;.</msg>
<status status="PASS" endtime="20170720 10:53:36.074" starttime="20170720 10:53:36.069"></status>
</kw>
<status status="PASS" endtime="20170720 10:53:36.074" starttime="20170720 10:52:16.576"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:55:06.453" starttime="20170720 10:55:06.450"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170720 10:55:06.460" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170720 10:55:06.460" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0560CC38&gt;</msg>
<status status="PASS" endtime="20170720 10:55:06.460" starttime="20170720 10:55:06.453"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170720 10:55:06.462" starttime="20170720 10:55:06.461"></status>
</kw>
<status status="PASS" endtime="20170720 10:55:06.462" starttime="20170720 10:55:06.461"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:55:06.463" starttime="20170720 10:55:06.463"></status>
</kw>
<status status="PASS" endtime="20170720 10:55:06.463" starttime="20170720 10:55:06.462"></status>
</kw>
<status status="PASS" endtime="20170720 10:55:06.463" starttime="20170720 10:55:06.449"></status>
</kw>
<test id="s1-t1" name="FZHQ_EARFCN_low_20M">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170720105203//ev_logs//D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170720 10:53:36.082" level="INFO">${timestamp} = 20170720105336</msg>
<status status="PASS" endtime="20170720 10:53:36.083" starttime="20170720 10:53:36.082"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170720 10:53:36.084" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216\FZHQ_EARFCN_low_20M</msg>
<status status="PASS" endtime="20170720 10:53:36.084" starttime="20170720 10:53:36.083"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170720 10:53:36.085" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216\FZHQ_EARFCN_low_20M</msg>
<status status="PASS" endtime="20170720 10:53:36.085" starttime="20170720 10:53:36.084"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170720 10:53:36.086" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216\FZHQ_EARFCN_low_20M</msg>
<status status="PASS" endtime="20170720 10:53:36.086" starttime="20170720 10:53:36.085"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170720 10:53:36.087" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216\FZHQ_EARFCN_low_20M"&gt;D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216\FZHQ_EARFCN_low_20M&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170720 10:53:36.087" starttime="20170720 10:53:36.086"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170720 10:53:36.088" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216\FZHQ_EARFCN_low_20M</msg>
<status status="PASS" endtime="20170720 10:53:36.088" starttime="20170720 10:53:36.087"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170720 10:53:36.089" starttime="20170720 10:53:36.088"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:53:36.092" starttime="20170720 10:53:36.091"></status>
</kw>
<msg timestamp="20170720 10:53:36.092" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170720 10:53:36.092" starttime="20170720 10:53:36.090"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:53:36.093" starttime="20170720 10:53:36.093"></status>
</kw>
<msg timestamp="20170720 10:53:36.093" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170720 10:53:36.093" starttime="20170720 10:53:36.092"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170720 10:53:36.098" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216\FZHQ_EARFCN_low_20M</msg>
<status status="PASS" endtime="20170720 10:53:36.098" starttime="20170720 10:53:36.094"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170720 10:53:36.099" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216\FZHQ_EARFCN_low_20M</msg>
<status status="PASS" endtime="20170720 10:53:36.099" starttime="20170720 10:53:36.099"></status>
</kw>
<status status="PASS" endtime="20170720 10:53:36.100" starttime="20170720 10:53:36.090"></status>
</kw>
<status status="PASS" endtime="20170720 10:53:36.100" starttime="20170720 10:53:36.081"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170720 10:53:36.102" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=38663 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpgbccsn --insecure</msg>
<msg timestamp="20170720 10:53:38.104" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170720 10:53:38.104" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170720 10:53:42.105" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170720 10:53:42.105" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170720 10:53:46.104" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170720 10:53:46.104" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170720 10:53:50.105" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170720 10:53:50.105" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170720 10:53:53.120" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170720 10:53:53.120" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 32593, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170720 10:54:00.783" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 32593, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 10:54:03.446" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 32593, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170720 10:54:03.446" starttime="20170720 10:53:36.100"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:03.446" starttime="20170720 10:53:36.076"></status>
</kw>
<kw name="Reset_BTS_If_Ini_State_Unmatch" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${ini_state_check}</arg>
</arguments>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170720 10:54:13.587" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170720 10:54:13.587" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170720 10:54:13.587" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170720 10:54:13.587" starttime="20170720 10:54:03.448"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Query_Infomodel_With_Multi_Condition</arg>
<arg>${ini_state_check}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Query_Infomodel_With_Multi_Condition" library="SISO1 Resource">
<arguments>
<arg>${ini_state_check}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${condition_list}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170720 10:54:13.590" level="INFO">Length is 3</msg>
<msg timestamp="20170720 10:54:13.590" level="INFO">${ret} = 3</msg>
<status status="PASS" endtime="20170720 10:54:13.590" starttime="20170720 10:54:13.589"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${ret} ]">
<kw type="foritem" name="${num} = 0">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20170720 10:54:14.070" level="INFO">[infomodel_control.py@328] query infomodel: 'count /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1 is [fcnDLs[0]=40740] =0' succeed .</msg>
<status status="PASS" endtime="20170720 10:54:14.070" starttime="20170720 10:54:13.591"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:14.070" starttime="20170720 10:54:13.590"></status>
</kw>
<kw type="foritem" name="${num} = 1">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20170720 10:54:14.198" level="INFO">[infomodel_control.py@328] query infomodel: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]=1' succeed .</msg>
<status status="PASS" endtime="20170720 10:54:14.198" starttime="20170720 10:54:14.071"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:14.198" starttime="20170720 10:54:14.070"></status>
</kw>
<kw type="foritem" name="${num} = 2">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20170720 10:54:14.259" level="INFO">[infomodel_control.py@328] query infomodel: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is =1' succeed .</msg>
<status status="PASS" endtime="20170720 10:54:14.259" starttime="20170720 10:54:14.198"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:14.259" starttime="20170720 10:54:14.198"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:14.259" starttime="20170720 10:54:13.590"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:14.259" starttime="20170720 10:54:13.588"></status>
</kw>
<msg timestamp="20170720 10:54:14.259" level="INFO">${result} = PASS</msg>
<msg timestamp="20170720 10:54:14.259" level="INFO">${ret} = None</msg>
<status status="PASS" endtime="20170720 10:54:14.259" starttime="20170720 10:54:13.588"></status>
</kw>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170720 10:54:14.862" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170720 10:54:14.862" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170720 10:54:14.862" starttime="20170720 10:54:14.260"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:14.865" starttime="20170720 10:54:14.863"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:14.866" starttime="20170720 10:54:03.447"></status>
</kw>
<kw name="_Modify_Earfcn_and_Attach">
<doc>Operation with BTS</doc>
<arguments>
<arg>40740</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170720 10:54:14.869" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0560CC38&gt;.</msg>
<status status="PASS" endtime="20170720 10:54:14.870" starttime="20170720 10:54:14.866"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170720 10:54:15.085" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170720 10:54:15.085" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170720 10:54:15.085" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216\FZHQ_EARFCN_low_20M" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170720 10:54:15.086" starttime="20170720 10:54:14.870"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170720 10:54:24.440" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170720 10:54:24.440" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170720 10:54:24.440" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170720 10:54:24.440" starttime="20170720 10:54:15.086"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170720 10:54:24.441" level="INFO">${case_execute_log_name} = owner_debug</msg>
<status status="PASS" endtime="20170720 10:54:24.441" starttime="20170720 10:54:24.441"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:24.441" starttime="20170720 10:54:14.870"></status>
</kw>
<kw name="Get_BTS_DN" library="SISO1 Resource">
<arguments>
<arg>CELL_M</arg>
</arguments>
<assign>
<var>${CELL_M_DN}</var>
</assign>
<kw name="Get Objects By Class Name" library="ute_admin">
<doc>Get objects by class name.</doc>
<arguments>
<arg>${DN_Name}</arg>
</arguments>
<assign>
<var>${DN_LIST1}</var>
</assign>
<msg timestamp="20170720 10:54:24.443" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 27421, "parameters": {"name": "getItemsByClassName", "parameters": {"className": "CELL_M"}}}}</msg>
<msg timestamp="20170720 10:54:24.492" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 27421, "requestMessage": [{"distName": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 61", "parameters": {"routingState": "Routable", "timeDomainState": "HardwareFullyConfigured", "stateInfo": {"operationalState": "Enabled", "automaticBlockState": "Unblocked", "blockingState": "Unblocked", "availabilityStatus": "Online", "administrativeState": "Unlocked", "recoveryLockingState": "Unlocked", "reasoningStatus": [], "proceduralState": "OnAirDone"}, "testingState": "Disabled", "rat": "LTE", "setupAllowed": true, "carriersState": "Activated", "gainCalcState": "NotCalculated", "deploymentCalcState": "CalculationDone", "bbCalcState": "CalculationDone", "delayCalculationState": "CalculationDone", "feedback": ""}}]}}</msg>
<msg timestamp="20170720 10:54:24.492" level="INFO">${DN_LIST1} = [{u'distName': u'/MRBTS-1/RAT-1/MCTRL-4/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-1', u'parameters': {u'routingState': u'Routable', u'timeDomainState': u'HardwareFullyConfigured', u'stateInfo': {u'operatio...</msg>
<status status="PASS" endtime="20170720 10:54:24.492" starttime="20170720 10:54:24.442"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${DN_LIST1}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:24.493" starttime="20170720 10:54:24.493"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${DN_LIST}</var>
</assign>
<msg timestamp="20170720 10:54:24.493" level="INFO">${DN_LIST} = []</msg>
<status status="PASS" endtime="20170720 10:54:24.493" starttime="20170720 10:54:24.493"></status>
</kw>
<kw type="for" name="${index} IN [ @{DN_LIST1} ]">
<kw type="foritem" name="${index} = {u'distName': u'/MRBTS-1/RAT-1/MCTRL-4/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-1', u'parameters': {u'routingState': u'Routable', u'timeDomainState': u'HardwareFullyConfigured', u'stateInfo': {u'operation...">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${DN_LIST}</arg>
<arg>${index.distName}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:24.494" starttime="20170720 10:54:24.494"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:24.495" starttime="20170720 10:54:24.494"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:24.495" starttime="20170720 10:54:24.494"></status>
</kw>
<msg timestamp="20170720 10:54:24.495" level="INFO">${CELL_M_DN} = [u'/MRBTS-1/RAT-1/MCTRL-4/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-1']</msg>
<status status="PASS" endtime="20170720 10:54:24.495" starttime="20170720 10:54:24.442"></status>
</kw>
<kw name="Perform Parameter Recommissioning" library="ute_admin">
<doc>Perform parameter recommissioning.</doc>
<arguments>
<arg>${BTS_INFO.MRBTS}/${BTS_INFO.LNBTS}/${CELL1_INFO.LNCELL}/LNCEL_TDD-0</arg>
<arg>earfcn</arg>
<arg>update</arg>
<arg>${modify_earfcn}</arg>
<arg>skip_parameter_relation_errors=True</arg>
<arg>should_activate=True</arg>
</arguments>
<msg timestamp="20170720 10:54:24.504" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 60692, "parameters": {"name": "setParameter", "parameters": {"skipParameterRelationErrors": true, "distName": "MRBTS-1797/LNBTS-1797/LNCEL-1/LNCEL_TDD-0", "value": "40740", "parameterName": "earfcn", "operation": "update", "shouldBeActivated": true}}}}</msg>
<msg timestamp="20170720 10:54:25.307" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "failed", "requestId": 60692, "requestMessage": {"deltaCommissioningErrors": [{"distName": "MRBTS-1797/LNBTS-1797/LNCEL-1/LNCEL_TDD-0", "error": ["object not exist"]}]}}}</msg>
<msg timestamp="20170720 10:54:25.356" level="FAIL">AdminApiProcedureFailureException: Status reached: {u'deltaCommissioningErrors': [{u'distName': u'MRBTS-1797/LNBTS-1797/LNCEL-1/LNCEL_TDD-0', u'error': [u'object not exist']}]}</msg>
<status status="FAIL" endtime="20170720 10:54:25.356" starttime="20170720 10:54:24.495"></status>
</kw>
<status status="FAIL" endtime="20170720 10:54:25.357" starttime="20170720 10:54:14.866"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170720 10:54:25.361" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0560CC38&gt;.</msg>
<status status="PASS" endtime="20170720 10:54:25.361" starttime="20170720 10:54:25.358"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170720 10:54:25.848" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170720 10:54:25.848" starttime="20170720 10:54:25.362"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170720 10:54:25.855" starttime="20170720 10:54:25.849"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:25.856" starttime="20170720 10:54:25.855"></status>
</kw>
<msg timestamp="20170720 10:54:25.856" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170720 10:54:25.856" starttime="20170720 10:54:25.855"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170720 10:54:25.870" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170720105203\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_low_20170720105216\FZHQ_EARFCN_low_20M\owner_debug' succeed .</msg>
<status status="PASS" endtime="20170720 10:54:25.870" starttime="20170720 10:54:25.860"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:25.870" starttime="20170720 10:54:25.857"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:25.870" starttime="20170720 10:54:25.856"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170720 10:54:26.462" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170720 10:54:26.462" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170720 10:54:26.463" starttime="20170720 10:54:25.874"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:26.463" starttime="20170720 10:54:25.871"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:26.463" starttime="20170720 10:54:25.871"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170720 10:54:26.715" level="INFO">Exit code: 1</msg>
<msg timestamp="20170720 10:54:26.715" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:38663
</msg>
<msg timestamp="20170720 10:54:26.715" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170720 10:54:26.719" starttime="20170720 10:54:26.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:26.721" starttime="20170720 10:54:26.720"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:26.721" starttime="20170720 10:54:26.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:26.722" starttime="20170720 10:54:26.722"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:26.722" starttime="20170720 10:54:26.722"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170720 10:54:26.729" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170720 10:54:26.729" starttime="20170720 10:54:26.723"></status>
</kw>
<msg timestamp="20170720 10:54:26.729" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170720 10:54:26.729" starttime="20170720 10:54:26.723"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:26.732" starttime="20170720 10:54:26.730"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:26.736" starttime="20170720 10:54:26.733"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170720 10:54:26.769" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170720 10:54:26.769" starttime="20170720 10:54:26.736"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:26.773" starttime="20170720 10:54:26.772"></status>
</kw>
<msg timestamp="20170720 10:54:26.773" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170720 10:54:26.773" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170720 10:54:26.773" starttime="20170720 10:54:26.771"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:26.777" starttime="20170720 10:54:26.774"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170720 10:54:30.803" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170720 10:54:30.803" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170720 10:54:30.803" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170720 10:54:30.803" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170720 10:54:30.804" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170720 10:54:30.804" starttime="20170720 10:54:26.778"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:30.804" starttime="20170720 10:54:26.771"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:30.805" starttime="20170720 10:54:30.805"></status>
</kw>
<msg timestamp="20170720 10:54:30.805" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170720 10:54:30.805" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170720 10:54:30.805" starttime="20170720 10:54:30.804"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:30.809" starttime="20170720 10:54:30.806"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170720 10:54:34.831" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170720 10:54:34.832" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170720 10:54:34.832" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170720 10:54:34.832" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170720 10:54:34.832" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170720 10:54:34.832" starttime="20170720 10:54:30.809"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:34.832" starttime="20170720 10:54:30.804"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170720 10:54:34.840" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170720 10:54:34.840" starttime="20170720 10:54:34.833"></status>
</kw>
<msg timestamp="20170720 10:54:34.840" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170720 10:54:34.840" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170720 10:54:34.840" starttime="20170720 10:54:34.832"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170720 10:54:34.843" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170720 10:54:34.843" starttime="20170720 10:54:34.840"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:34.843" starttime="20170720 10:54:34.832"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:34.844" starttime="20170720 10:54:26.770"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:34.844" starttime="20170720 10:54:26.770"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:34.844" starttime="20170720 10:54:34.844"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170720 10:54:34.849" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170720 10:54:34.849" starttime="20170720 10:54:34.844"></status>
</kw>
<status status="FAIL" endtime="20170720 10:54:34.850" starttime="20170720 10:54:26.721"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:34.850" starttime="20170720 10:54:26.721"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170720 10:54:34.857" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170720 10:54:34.857" starttime="20170720 10:54:34.851"></status>
</kw>
<msg timestamp="20170720 10:54:34.857" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170720 10:54:34.857" starttime="20170720 10:54:34.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:34.861" starttime="20170720 10:54:34.857"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170720 10:54:44.724" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170720 10:54:45.280" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170720 10:54:45.280" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170720 10:54:45.281" starttime="20170720 10:54:34.861"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170720 10:54:45.289" level="INFO">['fatal'] ['fatal']</msg>
<status status="PASS" endtime="20170720 10:54:45.289" starttime="20170720 10:54:45.281"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170720 10:54:45.291" level="FAIL">'FZHQ_EARFCN_low_20M' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170720 10:54:45.291" starttime="20170720 10:54:45.290"></status>
</kw>
<msg timestamp="20170720 10:54:45.291" level="INFO">${return1} = ('FAIL', u"'FZHQ_EARFCN_low_20M' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170720 10:54:45.291" starttime="20170720 10:54:45.290"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:45.296" starttime="20170720 10:54:45.292"></status>
</kw>
<msg timestamp="20170720 10:54:45.296" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170720 10:54:45.296" starttime="20170720 10:54:45.292"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:45.299" starttime="20170720 10:54:45.297"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:45.299" starttime="20170720 10:54:45.296"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:45.300" starttime="20170720 10:54:45.300"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:45.300" starttime="20170720 10:54:45.300"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:45.301" starttime="20170720 10:54:45.300"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170720 10:54:45.302" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170720 10:54:45.302" starttime="20170720 10:54:45.301"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:45.306" starttime="20170720 10:54:45.303"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:45.306" starttime="20170720 10:54:45.302"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:45.306" starttime="20170720 10:54:45.302"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:45.310" starttime="20170720 10:54:45.307"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:45.310" starttime="20170720 10:54:45.306"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:45.310" starttime="20170720 10:54:45.306"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170720 10:54:45.314" starttime="20170720 10:54:45.311"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:45.314" starttime="20170720 10:54:45.310"></status>
</kw>
<status status="PASS" endtime="20170720 10:54:45.314" starttime="20170720 10:54:45.310"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170720 10:55:06.437" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 10:53:00 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056D3DF0&gt;</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056D3DF0&gt;</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 10:54:46 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0560C5D0&gt;</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170720 10:55:06.437" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0560C5D0&gt;</msg>
<msg timestamp="20170720 10:55:06.438" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170720 10:55:06.438" starttime="20170720 10:54:45.314"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170720 10:55:06.442" starttime="20170720 10:55:06.439"></status>
</kw>
<status status="PASS" endtime="20170720 10:55:06.442" starttime="20170720 10:55:06.439"></status>
</kw>
<status status="PASS" endtime="20170720 10:55:06.443" starttime="20170720 10:55:06.438"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170720 10:55:06.447" starttime="20170720 10:55:06.444"></status>
</kw>
<status status="PASS" endtime="20170720 10:55:06.447" starttime="20170720 10:55:06.443"></status>
</kw>
<status status="PASS" endtime="20170720 10:55:06.447" starttime="20170720 10:55:06.443"></status>
</kw>
<status status="PASS" endtime="20170720 10:55:06.447" starttime="20170720 10:54:45.301"></status>
</kw>
<status status="PASS" endtime="20170720 10:55:06.447" starttime="20170720 10:54:25.357"></status>
</kw>
<tags>
<tag>owner-sue.nie@nokia.com</tag>
<tag>QC_720758</tag>
</tags>
<status status="FAIL" endtime="20170720 10:55:06.447" critical="yes" starttime="20170720 10:53:36.074">AdminApiProcedureFailureException: Status reached: {u'deltaCommissioningErrors': [{u'distName': u'MRBTS-1797/LNBTS-1797/LNCEL-1/LNCEL_TDD-0', u'error': [u'object not exist']}]}</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170720 10:55:06.463" starttime="20170720 10:52:10.957"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-sue.nie@nokia.com</stat>
<stat fail="1" pass="0">QC_720758</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T1 Carrier Frequency and supported EARFCN low" pass="0">FZHQ T1 Carrier Frequency and supported EARFCN low</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170720 10:52:13.887" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170720 10:54:44.724" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
