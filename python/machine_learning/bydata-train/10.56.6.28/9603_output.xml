<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170712 12:59:55.408" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\CRT\FZHQ_ASMI\FZHQ_T1_Operational_RF_block_unblock\FZHQ_T1_Operational_RF_block_unblock.robot" id="s1" name="FZHQ T1 Operational RF block unblock">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170712125542//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170712 12:55:43.885" level="INFO">${timestamp} = 20170712125543</msg>
<status status="PASS" endtime="20170712 12:55:43.885" starttime="20170712 12:55:43.851"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170712 12:55:43.886" level="INFO">${FILE_NAME} = FZHQ T1 Operational RF block unblock</msg>
<status status="PASS" endtime="20170712 12:55:43.886" starttime="20170712 12:55:43.885"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170712 12:55:43.887" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ T1 Operational RF block unblock_20170712125543</msg>
<status status="PASS" endtime="20170712 12:55:43.887" starttime="20170712 12:55:43.886"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170712 12:55:43.887" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543</msg>
<status status="PASS" endtime="20170712 12:55:43.888" starttime="20170712 12:55:43.887"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170712 12:55:43.888" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543</msg>
<status status="PASS" endtime="20170712 12:55:43.888" starttime="20170712 12:55:43.888"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170712 12:55:43.889" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543"&gt;D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170712 12:55:43.889" starttime="20170712 12:55:43.888"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170712 12:55:43.890" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543</msg>
<status status="PASS" endtime="20170712 12:55:43.890" starttime="20170712 12:55:43.890"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170712 12:55:43.893" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170712 12:55:43.893" starttime="20170712 12:55:43.890"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170712 12:55:43.912" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170712 12:55:43.912" starttime="20170712 12:55:43.906"></status>
</kw>
<msg timestamp="20170712 12:55:43.912" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170712 12:55:43.912" starttime="20170712 12:55:43.906"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:55:43.913" starttime="20170712 12:55:43.913"></status>
</kw>
<msg timestamp="20170712 12:55:43.913" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170712 12:55:43.913" starttime="20170712 12:55:43.913"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:55:43.919" starttime="20170712 12:55:43.917"></status>
</kw>
<msg timestamp="20170712 12:55:43.920" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543</msg>
<status status="PASS" endtime="20170712 12:55:43.920" starttime="20170712 12:55:43.914"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170712 12:55:43.923" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543</msg>
<status status="PASS" endtime="20170712 12:55:43.923" starttime="20170712 12:55:43.920"></status>
</kw>
<status status="PASS" endtime="20170712 12:55:43.924" starttime="20170712 12:55:43.905"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170712 12:55:43.948" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170712 12:55:43.949" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170712 12:55:43.949" starttime="20170712 12:55:43.925"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:55:43.949" starttime="20170712 12:55:43.949"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170712 12:55:43.950" starttime="20170712 12:55:43.950"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:55:43.951" starttime="20170712 12:55:43.950"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170712 12:55:43.951" starttime="20170712 12:55:43.951"></status>
</kw>
<status status="PASS" endtime="20170712 12:55:43.951" starttime="20170712 12:55:43.924"></status>
</kw>
<status status="PASS" endtime="20170712 12:55:43.951" starttime="20170712 12:55:43.924"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:54:44 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054CB738&gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054CB738&gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:55:44 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054D4F08&gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054D4F08&gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:55:54 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054B5738&gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054B5738&gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:56:05 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04152238&gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04152238&gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:56:15 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054CB760&gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054CB760&gt;</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170712 12:57:00.442" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170712 12:57:00.444" starttime="20170712 12:55:43.952"></status>
</kw>
<status status="PASS" endtime="20170712 12:57:00.444" starttime="20170712 12:55:43.952"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170712 12:57:00.445" starttime="20170712 12:57:00.444"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170712 12:57:00.446" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170712 12:57:00.446" starttime="20170712 12:57:00.445"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170712 12:57:00.449" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170712 12:57:00.449" starttime="20170712 12:57:00.446"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170712 12:57:00.452" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170712 12:57:00.453" starttime="20170712 12:57:00.449"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170712 12:57:00.456" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170712 12:57:00.456" starttime="20170712 12:57:00.453"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170712 12:57:01.849" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170712 12:57:01.849" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170712 12:57:01.849" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170712 12:57:01.849" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170712 12:57:01.849" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170712 12:57:01.850" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055673F0&gt;</msg>
<status status="PASS" endtime="20170712 12:57:01.850" starttime="20170712 12:57:00.456"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170712 12:57:01.851" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055673F0&gt;</msg>
<status status="PASS" endtime="20170712 12:57:01.851" starttime="20170712 12:57:01.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170712 12:57:03.051" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055673F0&gt;</msg>
<msg timestamp="20170712 12:57:03.051" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170712 12:57:03.051" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170712 12:57:03.051" starttime="20170712 12:57:01.854"></status>
</kw>
<status status="PASS" endtime="20170712 12:57:03.051" starttime="20170712 12:57:01.851"></status>
</kw>
<status status="PASS" endtime="20170712 12:57:03.051" starttime="20170712 12:57:00.445"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170712 12:57:03.054" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055673F0&gt;.</msg>
<status status="PASS" endtime="20170712 12:57:03.055" starttime="20170712 12:57:03.052"></status>
</kw>
<status status="PASS" endtime="20170712 12:57:03.055" starttime="20170712 12:55:43.850"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:48.073" starttime="20170712 12:59:48.071"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170712 12:59:48.079" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170712 12:59:48.079" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055673F0&gt;</msg>
<status status="PASS" endtime="20170712 12:59:48.079" starttime="20170712 12:59:48.074"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:48.081" starttime="20170712 12:59:48.080"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:48.081" starttime="20170712 12:59:48.080"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:48.082" starttime="20170712 12:59:48.081"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:48.082" starttime="20170712 12:59:48.081"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:48.082" starttime="20170712 12:59:48.070"></status>
</kw>
<test id="s1-t1" name="FZHQ_T1_Operational_RF_block_unblock">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170712125542//ev_logs//D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170712 12:57:03.061" level="INFO">${timestamp} = 20170712125703</msg>
<status status="PASS" endtime="20170712 12:57:03.061" starttime="20170712 12:57:03.061"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170712 12:57:03.062" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170712 12:57:03.062" starttime="20170712 12:57:03.061"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170712 12:57:03.063" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170712 12:57:03.063" starttime="20170712 12:57:03.062"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170712 12:57:03.063" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170712 12:57:03.064" starttime="20170712 12:57:03.063"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170712 12:57:03.064" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543\FZHQ_T1_Operational_RF_block_unblock"&gt;D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543\FZHQ_T1_Operational_RF_block_unblock&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170712 12:57:03.064" starttime="20170712 12:57:03.064"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170712 12:57:03.065" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170712 12:57:03.065" starttime="20170712 12:57:03.065"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170712 12:57:03.066" starttime="20170712 12:57:03.065"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:57:03.067" starttime="20170712 12:57:03.067"></status>
</kw>
<msg timestamp="20170712 12:57:03.068" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170712 12:57:03.068" starttime="20170712 12:57:03.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:57:03.069" starttime="20170712 12:57:03.068"></status>
</kw>
<msg timestamp="20170712 12:57:03.069" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170712 12:57:03.069" starttime="20170712 12:57:03.068"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170712 12:57:03.072" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170712 12:57:03.072" starttime="20170712 12:57:03.069"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170712 12:57:03.073" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170712125542\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170712125543\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170712 12:57:03.073" starttime="20170712 12:57:03.073"></status>
</kw>
<status status="PASS" endtime="20170712 12:57:03.073" starttime="20170712 12:57:03.066"></status>
</kw>
<status status="PASS" endtime="20170712 12:57:03.073" starttime="20170712 12:57:03.060"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170712 12:57:03.075" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=35618 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmprrn9id --insecure</msg>
<msg timestamp="20170712 12:57:05.079" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170712 12:57:05.079" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170712 12:57:09.087" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170712 12:57:09.087" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170712 12:57:13.086" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170712 12:57:13.086" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170712 12:57:16.089" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170712 12:57:16.089" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 74419, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170712 12:57:23.252" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 74419, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170712 12:57:25.765" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 74419, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170712 12:57:25.765" starttime="20170712 12:57:03.074"></status>
</kw>
<status status="PASS" endtime="20170712 12:57:25.765" starttime="20170712 12:57:03.056"></status>
</kw>
<kw name="Reset_BTS_If_Ini_State_Unmatch" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${ini_state_check}</arg>
</arguments>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170712 12:57:34.367" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170712 12:57:34.367" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170712 12:57:34.367" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170712 12:57:34.367" starttime="20170712 12:57:25.767"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Query_Infomodel_With_Multi_Condition</arg>
<arg>${ini_state_check}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Query_Infomodel_With_Multi_Condition" library="SISO1 Resource">
<arguments>
<arg>${ini_state_check}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${condition_list}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170712 12:57:34.369" level="INFO">Length is 1</msg>
<msg timestamp="20170712 12:57:34.369" level="INFO">${ret} = 1</msg>
<status status="PASS" endtime="20170712 12:57:34.369" starttime="20170712 12:57:34.369"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${ret} ]">
<kw type="foritem" name="${num} = 0">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20170712 12:57:44.417" level="FAIL">InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=onAirDone] = 1' doesn't pass in timeout=10.0. Actual count = 0</msg>
<status status="FAIL" endtime="20170712 12:57:44.417" starttime="20170712 12:57:34.370"></status>
</kw>
<status status="FAIL" endtime="20170712 12:57:44.417" starttime="20170712 12:57:34.369"></status>
</kw>
<status status="FAIL" endtime="20170712 12:57:44.417" starttime="20170712 12:57:34.369"></status>
</kw>
<status status="FAIL" endtime="20170712 12:57:44.418" starttime="20170712 12:57:34.368"></status>
</kw>
<msg timestamp="20170712 12:57:44.418" level="INFO">${result} = FAIL</msg>
<msg timestamp="20170712 12:57:44.418" level="INFO">${ret} = InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=onAirDone] = 1' doesn't pass in timeout=10.0. Actual count = 0</msg>
<status status="PASS" endtime="20170712 12:57:44.418" starttime="20170712 12:57:34.368"></status>
</kw>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170712 12:57:45.036" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170712 12:57:45.036" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170712 12:57:45.037" starttime="20170712 12:57:44.418"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170712 12:57:45.045" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055673F0&gt;.</msg>
<status status="PASS" endtime="20170712 12:57:45.046" starttime="20170712 12:57:45.041"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170712 12:57:49.236" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055673F0&gt;</msg>
<msg timestamp="20170712 12:57:49.236" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170712 12:57:49.236" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170712 12:57:49.237" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170712 12:57:49.237" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170712 12:57:49.237" starttime="20170712 12:57:45.046"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:57:49.240" starttime="20170712 12:57:49.237"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170712 12:57:49.243" starttime="20170712 12:57:49.240"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>bts_host=${ADMIN.IP}</arg>
<arg>bts_port=${ADMIN.PORT}</arg>
<arg>use_ssl=${ADMIN.USE_SSL}</arg>
<arg>skip_parameter_relation_errors=${ADMIN.SKIP_PARAMETER_RELATION_ERRORS}</arg>
</arguments>
<msg timestamp="20170712 12:58:31.657" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.1 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_uploadscf.log --interval=5000 --cli-port=35759 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmph5zncm --insecure</msg>
<msg timestamp="20170712 12:58:33.688" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170712 12:58:33.688" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170712 12:58:37.687" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170712 12:58:37.687" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170712 12:58:41.686" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170712 12:58:41.686" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170712 12:58:45.686" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170712 12:58:45.686" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 99902, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170712 12:58:52.693" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 99902, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170712 12:58:55.406" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 99902, "requestMessage": "onAir"}}</msg>
<msg timestamp="20170712 12:58:55.496" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 90320, "parameters": {"name": "downloadPlan", "parameters": {"skipParameterRelationErrors": true, "inputFileContent": "", "btsId": "1797", "shouldBeActivated": true}}}}</msg>
<msg timestamp="20170712 12:58:55.527" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"type": "SIZE", "id": 90320}}</msg>
<msg timestamp="20170712 12:58:55.527" level="INFO">Send message: {"type": "FILE_TRANSFER", "payload": {"data": 104477, "type": "SIZE", "id": 90320}}</msg>
<msg timestamp="20170712 12:58:55.558" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"length": 104477, "type": "READ", "id": 90320, "offset": 0}}</msg>
<msg timestamp="20170712 12:58:55.686" level="INFO">Send message: {"type": "FILE_TRANSFER", "payload": {"data": "PD94bWwgdm ... &lt;type 'str'&gt; of lenght: 139304", "type": "READ", "id": 90320}}</msg>
<msg timestamp="20170712 12:59:01.349" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"type": "CLOSE_READER", "id": 90320}}</msg>
<msg timestamp="20170712 12:59:01.349" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "failed", "requestId": 90320, "requestMessage": {"result": "Validation failed!", "validationResult": {"niddValidationResult": {"status": "FAIL", "logs": {"objectsOccurencesErrors": null, "invalidObjectsDistnames": ["MRBTS-1797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1"], "definitionErrors": [{"distName": "MRBTS-1797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1", "parameter": "sModDN", "error": [{"key": "GIVEN_VALUE"}, " (MRBTS-1/ ... &lt;type 'unicode'&gt; of lenght: 89", {"key": "VALUE_IS_TO_TOO_LONG"}, " 84."]}], "skippedElementsErrors": "[{u'distName': u'MRBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'altitude'}, {u'distName': u'MRBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'latitude'}, {u'distName': u'MRBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'longitude'}, {u'distName': u'MRBTS-1797/LNBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'operationalState'}, {u'distName': u'MRBTS-1797/LNBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'supportedNumOfAnrMoi'}, {u'distName': u'MRBTS-1797/LNBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'supportedNumOfLnadj'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'energySavingState'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'eutraCelId'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'operationalState'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNMME-0', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'mmeName'}] ... &lt;type 'list'&gt; of lenght: 81"}}, "pdlValidationResult": {"status": "FAIL", "logs": "[u\"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-6 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-3 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-8 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-7 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-1 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-2 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-5 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-4 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-6 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-3 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\"] ... &lt;type 'list'&gt; of lenght: 85"}}}}}</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:56:26 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054AD580&gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054AD580&gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:57:49 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055672B0&gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055672B0&gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:57:59 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054D4F08&gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054D4F08&gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:58:10 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054CB760&gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054CB760&gt;</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[enb_resource.py@371] Start to setup admin</msg>
<msg timestamp="20170712 12:59:01.350" level="INFO">[enb_resource.py@374] Start to perform commissioning</msg>
<msg timestamp="20170712 12:59:01.443" level="FAIL">AdminApiProcedureFailureException: Status reached: {u'result': u'Validation failed!', u'validationResult': {u'niddValidationResult': {u'status': u'FAIL', u'logs': {u'objectsOccurencesErrors': None, u'invalidObjectsDistnames': [u'MRBTS-1797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1'], u'definitionErrors': [{u'distName': u'MRBTS-1797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1', u'parameter': u'sModDN', u'error': [{u'key': u'GIVEN_VALUE'}, u' (MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/CABINET-1/SMOD-1) ', {u'key': u'VALUE_IS_TO_TOO_LONG'}, u' 84.']}], u'skippedElementsErrors': [{u'distName': u'MRBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'altitude'}, {u'distName': u'MRBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'latitude'}, {u'distName': u'MRBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'longitude'}, {u'distName': u'MRBTS-1797/LNBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'operationalState'}, {u'distName': u'MRBTS-1797/LNBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'supportedNumOfAnrMoi'}, {u'distName': u'MRBTS-1797/LNBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'supportedNumOfLnadj'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'energySavingState'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'eutraCelId'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'operationalState'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNMME-0', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'mmeName'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNMME-0', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'relMmeCap'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNMME-0', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u's1LinkStatus'}, {u'distName': u'MRBTS-1797/EQM_R-4', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'EQM_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'APEQM_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'HWTOP_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1/LOGLINK_R-7', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'LOGLINK_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1/LOGLINK_R-4', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'LOGLINK_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1/LOGLINK_R-6', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'LOGLINK_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1/LOGLINK_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'LOGLINK_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1/LOGLINK_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'LOGLINK_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1/LOGLINK_R-5', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'LOGLINK_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1/LOGLINK_R-3', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'LOGLINK_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1/LOGLINK_R-8', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'LOGLINK_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'CABINET_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'BBMOD_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'connectorType'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'physicalPort'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'rxPowerHighAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'rxPowerHighWarnThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'rxPowerLowAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'rxPowerLowWarnThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'serialNumber'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'temperatureHighAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'temperatureLowAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'transmissionRate'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'txPowerHighAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'txPowerHighWarnThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'txPowerLowAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'txPowerLowWarnThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'vendorPartNumber'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'waveLength'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'connectorType'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'physicalPort'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'rxPowerHighAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'rxPowerHighWarnThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'rxPowerLowAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'rxPowerLowWarnThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'serialNumber'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'temperatureHighAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'temperatureLowAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'transmissionDistance'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'transmissionRate'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'txPowerHighAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'txPowerHighWarnThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'txPowerLowAlarmThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'txPowerLowWarnThreshold'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'vendorPartNumber'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'waveLength'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'RMOD_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/RSL_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'RSL_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/EAC_R-4', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'EAC_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/EAC_R-3', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'EAC_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/EAC_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'EAC_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/EAC_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'EAC_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/ANTL_R-4', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'ANTL_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/ANTL_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'ANTL_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/ANTL_R-5', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'ANTL_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/ANTL_R-8', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'ANTL_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/ANTL_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'ANTL_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/ANTL_R-7', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'ANTL_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/ANTL_R-6', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'ANTL_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/RMOD_R-1/ANTL_R-3', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'ANTL_R'}, {u'distName': u'MRBTS-1797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1/CLOCK_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'CLOCK_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1/CABLINK_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'CABLINK_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/HWTOP_R-1/CABLINK_R-2', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'CABLINK_R'}, {u'distName': u'MRBTS-1797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1/NTP-1/NTP_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'NTP_R'}, {u'distName': u'MRBTS-1797/MNL-1/MNLENT-1/TRBLCADM-1/TRBLCADM_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'TRBLCADM_R'}, {u'distName': u'MRBTS-1797/MNL-1/MNL_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'MNL_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/SMOD_R-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'SMOD_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1', u'error': [{u'key': u'MANAGED_OBJECT_WITH_DIST_NAME'}, u' MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1 ', {u'key': u'SHOULD_BE_PARENT'}, u' MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1 ', {u'key': u'NOT_EXIST'}], u'removedMocs': {u'notification': [{u'key': u'MANAGED_OBJECTS_REMOVED'}, u' SFP_R '], u'removedMocsDNList': [u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-1']}, u'field': u'SFP_R'}, {u'distName': u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2', u'error': [{u'key': u'MANAGED_OBJECT_WITH_DIST_NAME'}, u' MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1 ', {u'key': u'SHOULD_BE_PARENT'}, u' MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2 ', {u'key': u'NOT_EXIST'}], u'removedMocs': {u'notification': [{u'key': u'MANAGED_OBJECTS_REMOVED'}, u' SFP_R '], u'removedMocsDNList': [u'MRBTS-1797/EQM_R-4/APEQM_R-1/CABINET_R-1/BBMOD_R-1/SFP_R-2']}, u'field': u'SFP_R'}]}}, u'pdlValidationResult': {u'status': u'FAIL', u'logs': [u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-6 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-3 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-8 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-7 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-1 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-2 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-5 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-4 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-6 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-3 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-8 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-7 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-1 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-2 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-5 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-4 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u'rule failed: MRBTS-1797/TNLSVC-1/TNL-1/IPAPP-1/BFD-1 BFD have (every IPADDRESSV4(IPADDRESSV4.distname = external BFD.bfdSrcIpAddrDN) exist) or (every IPADDRESSV6(IPADDRESSV6.distname = external BFD.bfdSrcIpAddrDN) exist)', u'rule failed: MRBTS-1797/TNLSVC-1/TNL-1/ETHSVC-1/L2SWI-1/BRGPRT-1 BRGPRT have (every ETHLK(ETHLK.distname = external BRGPRT.ethlkDN) exist)', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CERTH-1 CERTH(cmpCrlSrcIpAddressDN defined) have \t    (every IPADDRESSV4(IPADDRESSV4.distname = external CERTH.cmpCrlSrcIpAddressDN) exist) \t    or\t    (every IPADDRESSV6(IPADDRESSV6.distname = external CERTH.cmpCrlSrcIpAddressDN) exist)', u'rule failed: MRBTS-1797/TNLSVC-1/TNL-1/ETHSVC-1/ETHIF-1 ETHIF have (every IBRGPRT(IBRGPRT.distname = external ETHIF.linkSelectorDN) exist) or (every BRGPRT(BRGPRT.distname = external ETHIF.linkSelectorDN) exist)', u"rule failed: MRBTS-1797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1.syncInputList-0 MNL/MNLENT/SYNC(btsSyncMode = 'PhaseSync')/CLOCK.syncInputList(syncInputType = '1pps/ToD from external GNSS receiver') have CLOCK/GNSSE.gnssCableLength defined or CLOCK/GNSSE.gnssLineDelay defined", u"rule failed: MRBTS-1797/TNLSVC-1/TNL-1/IPNO-1/IPIF-1/IPADDRESSV4-1 IPIF(interfaceDN defined)/IPADDRESSV4(ipAddressAllocationMethod = 'MANUAL') have (every ETHIF(ETHIF.distname = external IPIF.interfaceDN) exist) or (every VLANIF(VLANIF.distname = external IPIF.interfaceDN) exist)", u"rule failed: MRBTS-1797/TNLSVC-1/TNL-1/IPNO-1/IPIF-1/IPADDRESSV4-1 IPADDRESSV4(ipAddressAllocationMethod = 'MANUAL') have localIpAddr undefined", u'rule failed: MRBTS-1797/TNLSVC-1/TNL-1/IPNO-1/IPIF-1 IPIF(interfaceDN defined) have \t    (every ETHIF(ETHIF.distname = external IPIF.interfaceDN) exist) or \t    (every VLANIF(VLANIF.distname = external IPIF.interfaceDN) exist) or \t    (every P3ML(P3ML.distname = external IPIF.interfaceDN) exist) or \t    (every P3SL(P3SL.distname = external IPIF.interfaceDN) exist)', u"rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1 LNBTS(actIfHo='disabled')/LNCEL have a2TimeToTriggerActInterFreqMeas undefined", u"rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1 LNCEL(cellTechnology = 'TDD' and actUlpcMethod = 'PuschCLSrsPucchCL') have ulpcPucchConfig defined and ulpcPuschConfig defined and ulpcReadPeriod defined and LNCEL/LNCEL_FDD.srsActivation = 'true'", u"rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1 LNCEL(cellTechnology = 'TDD') have ulsSchedMethod in range 'interference aware'|'channel unaware'", u"rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD(actAutoPucchAlloc = 'false') have ulSpsConfig.ulSpsMaxNumPrb &lt;= toPRBS(chBw) - 6 - temporary maxPucchResourceSize", u'rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1 LNCEL have LNCEL/LNCEL_TDD.prachFreqOff &gt;= ceil(temporary maxPucchResourceSize / 2) and LNCEL/LNCEL_TDD.prachFreqOff &lt;= toPRBS(LNCEL/LNCEL_TDD.chBw) - 6 - ceil(temporary maxPucchResourceSize / 2) if LNCEL/LNCEL_TDD.prachConfIndex &lt; 51 or LNCEL/LNCEL_TDD.prachConfIndex &gt; 53', u"rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD(actReduceWimaxInterference &lt;&gt; 'false' and (tddFrameConf &lt;&gt; 1 or actReduceWimaxInterference &lt;&gt; 'true' or (tddSpecSubfConf &lt;&gt; 3 and tddSpecSubfConf &lt;&gt; 4 and tddSpecSubfConf &lt;&gt; 7))) have rxCalibrationConfiguration = 'noRxCalibration'", u'rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD have fourLayerMimoAvSpectralEff &gt;= twoLayerMimoAvSpectralEff', u"rule failed: MRBTS-1797/LNBTS-1797/LNMME-0 LNMME(mmeRatSupport = 'Wideband-LTE') have (every LNCEL(cellTechnology = 'FDD') exist)", u"rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1/LNCEL_TDD-0/MPUCCH_TDD-0 LNCEL_TDD(chBw in range '10 MHz'|'15 MHz'|'20 MHz' and tddFrameConf = 2 and temporary ackNackResNumber defined)/MPUCCH_TDD have toPRBS(nCqiRb + ceil((((temporary ackNackResNumber + n1PucchAn) - (LNCEL_TDD.pucchNAnCs*3)/deltaPucchShift)*deltaPucchShift)/36 + ceil(LNCEL_TDD.pucchNAnCs/8))) &lt;= 28", u"rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1 MRBTS/LNBTS/LNCEL(temporary isantlIddefined = 'true') have (MRBTS/MNL/MNLENT/CELLMAPPING/LCELL(lCellId = external LNCEL.lcrId)/CHANNELGROUP/CHANNEL have (every ANTL(ANTL.distname = external CHANNEL.antlDN) exist))", u'rule failed: MRBTS-1797/TNLSVC-1/TNL-1/IPNO-1/RTPOL-1.routingPolicies-0 RTPOL.routingPolicies(srcIpAddress in ip range 0.0.0.0/0) have (every IPRT(external RTPOL.routingPolicies.routingTableDN = IPRT.distname) exist)', u'rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1/SIB-0 SIB have acbNumRrcConnCellStop &lt;= acbNumRrcConnCellStart', u'rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1/SIB-0 SIB have acbNumRrcReqStart &gt; acbNumRrcReqStop', u'rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1/SIB-0 SIB have acbNumRrcConnCellStart &gt;= acbNumRrcConnCellStop', u'rule failed: MRBTS-1797/LNBTS-1797/LNCEL-1/SIB-0 SIB have acbNumRrcReqStop &lt; acbNumRrcReqStart', u"rule failed: MRBTS-1797/LNBTS-1797/TRSNW-1 TRSNW(transportNwInUse = 'true') have (every LTAC(transportNwId = external TRSNW.trsNwId) exist)", u"rule failed: MRBTS-1797/LNBTS-1797/TRSNW-1 TRSNW(transportNwInUse = 'true') have (every LNMME(transportNwId = external TRSNW.trsNwId) exist)", u'rule failed: MRBTS-1797/LNBTS-1797/TRSNW-1 TRSNW have (every LTAC(transportNwId = external TRSNW.trsNwId) exist)', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-2/firstEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/CABINET-1/SMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-2/secondEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/CABINET-1/BBMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13000/firstEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13000/secondEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/PHYANT-13000 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13001/firstEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13001/secondEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/PHYANT-13001 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13004/firstEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13004/secondEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/PHYANT-13004 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13003/firstEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13003/secondEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/PHYANT-13003 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13006/firstEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13006/secondEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/PHYANT-13006 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13002/firstEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13002/secondEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/PHYANT-13002 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-1/firstEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/CABINET-1/BBMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-1/secondEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13007/firstEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13007/secondEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/PHYANT-13007 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13005/firstEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1 does not exists', u'rule failed: MRBTS-1797/EQM-1/HWTOP-1/CABLINK-13005/secondEndpointDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/PHYANT-13005 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CERTH-1/cmpCrlSrcIpAddressDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/0 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/MPLANENW-1/mPlaneIpAddressDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/TNLSVC-1/TNL-1/IPNO-1/IPIF-1/IPADDRESSV4-1 does not exists', u'rule failed: MRBTS-1797/TNLSVC-1/TNL-1/IPAPP-1/BFD-1/bfdSrcIpAddrDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/TNLSVC-1/TNL-1/IPNO-1/IPIF-1/IPADDRESSV4-1 does not exists', u'rule failed: MRBTS-1797/TNLSVC-1/TNL-1/ETHSVC-1/ETHIF-1/linkSelectorDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/TNLSVC-1/TNL-1/ETHSVC-1/L2SWI-1/IBRGPRT-1 does not exists', u'rule failed: MRBTS-1797/TNLSVC-1/TNL-1/ETHSVC-1/ETHLK-1/modDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/CABINET-1/SMOD-1 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1/sModDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/CABINET-1/SMOD-1 does not exists', u'rule failed: MRBTS-1797/TNLSVC-1/TNL-1/ETHSVC-1/L2SWI-1/BRGPRT-1/ethlkDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/TNLSVC-1/TNL-1/ETHSVC-1/ETHLK-1 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-10/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-1 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-6/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-4 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-7/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-5 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-8/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-5 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-12/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-6 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-13/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-7 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-4/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-3 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-11/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-6 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-1/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-2 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-9/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-1 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-3/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-3 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-15/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-8 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-16/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-8 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-5/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-4 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-2/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-2 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-14/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-7 does not exists']}}}</msg>
<status status="FAIL" endtime="20170712 12:59:01.443" starttime="20170712 12:57:49.243"></status>
</kw>
<status status="FAIL" endtime="20170712 12:59:01.444" starttime="20170712 12:57:45.040"></status>
</kw>
<status status="FAIL" endtime="20170712 12:59:01.444" starttime="20170712 12:57:45.037"></status>
</kw>
<status status="FAIL" endtime="20170712 12:59:01.444" starttime="20170712 12:57:25.766"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170712 12:59:01.449" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055673F0&gt;.</msg>
<status status="PASS" endtime="20170712 12:59:01.449" starttime="20170712 12:59:01.445"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170712 12:59:02.692" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170712 12:59:02.692" starttime="20170712 12:59:01.450"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20170712 12:59:02.711" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<status status="PASS" endtime="20170712 12:59:02.711" starttime="20170712 12:59:02.692"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170712 12:59:02.718" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20170712 12:59:02.718" starttime="20170712 12:59:02.712"></status>
</kw>
<msg timestamp="20170712 12:59:02.718" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20170712 12:59:02.718" starttime="20170712 12:59:02.711"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:02.721" starttime="20170712 12:59:02.718"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:02.721" starttime="20170712 12:59:02.718"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:02.725" starttime="20170712 12:59:02.722"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:02.725" starttime="20170712 12:59:02.722"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170712 12:59:02.976" level="INFO">Exit code: 1</msg>
<msg timestamp="20170712 12:59:02.976" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:35618
</msg>
<msg timestamp="20170712 12:59:02.976" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170712 12:59:02.977" starttime="20170712 12:59:02.725"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:02.978" starttime="20170712 12:59:02.977"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:02.978" starttime="20170712 12:59:02.977"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:02.979" starttime="20170712 12:59:02.979"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:02.979" starttime="20170712 12:59:02.979"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170712 12:59:02.986" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170712 12:59:02.986" starttime="20170712 12:59:02.980"></status>
</kw>
<msg timestamp="20170712 12:59:02.986" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170712 12:59:02.986" starttime="20170712 12:59:02.980"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:02.989" starttime="20170712 12:59:02.987"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:02.992" starttime="20170712 12:59:02.990"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170712 12:59:03.055" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170712 12:59:03.055" starttime="20170712 12:59:02.993"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:03.057" starttime="20170712 12:59:03.056"></status>
</kw>
<msg timestamp="20170712 12:59:03.057" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170712 12:59:03.057" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170712 12:59:03.057" starttime="20170712 12:59:03.056"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:03.060" starttime="20170712 12:59:03.057"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170712 12:59:07.117" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170712 12:59:07.117" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170712 12:59:07.117" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170712 12:59:07.117" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170712 12:59:07.117" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170712 12:59:07.118" starttime="20170712 12:59:03.061"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:07.118" starttime="20170712 12:59:03.056"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:07.119" starttime="20170712 12:59:07.119"></status>
</kw>
<msg timestamp="20170712 12:59:07.119" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170712 12:59:07.119" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170712 12:59:07.119" starttime="20170712 12:59:07.118"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:07.122" starttime="20170712 12:59:07.119"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170712 12:59:11.149" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170712 12:59:11.149" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170712 12:59:11.149" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170712 12:59:11.149" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170712 12:59:11.149" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170712 12:59:11.149" starttime="20170712 12:59:07.123"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:11.150" starttime="20170712 12:59:07.118"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170712 12:59:11.157" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170712 12:59:11.157" starttime="20170712 12:59:11.150"></status>
</kw>
<msg timestamp="20170712 12:59:11.157" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170712 12:59:11.157" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170712 12:59:11.157" starttime="20170712 12:59:11.150"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170712 12:59:11.160" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170712 12:59:11.160" starttime="20170712 12:59:11.157"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:11.160" starttime="20170712 12:59:11.150"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:11.161" starttime="20170712 12:59:03.056"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:11.161" starttime="20170712 12:59:03.055"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:11.161" starttime="20170712 12:59:11.161"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170712 12:59:11.164" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170712 12:59:11.164" starttime="20170712 12:59:11.161"></status>
</kw>
<status status="FAIL" endtime="20170712 12:59:11.165" starttime="20170712 12:59:02.978"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:11.165" starttime="20170712 12:59:02.978"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170712 12:59:11.171" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170712 12:59:11.171" starttime="20170712 12:59:11.165"></status>
</kw>
<msg timestamp="20170712 12:59:11.171" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170712 12:59:11.172" starttime="20170712 12:59:11.165"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:11.175" starttime="20170712 12:59:11.172"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170712 12:59:26.339" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170712 12:59:26.913" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170712 12:59:26.913" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170712 12:59:26.913" starttime="20170712 12:59:11.175"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:26.914" starttime="20170712 12:59:26.913"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170712 12:59:26.915" level="FAIL">'FZHQ_T1_Operational_RF_block_unblock' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170712 12:59:26.915" starttime="20170712 12:59:26.915"></status>
</kw>
<msg timestamp="20170712 12:59:26.916" level="INFO">${return1} = ('FAIL', u"'FZHQ_T1_Operational_RF_block_unblock' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170712 12:59:26.916" starttime="20170712 12:59:26.914"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:26.919" starttime="20170712 12:59:26.916"></status>
</kw>
<msg timestamp="20170712 12:59:26.919" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170712 12:59:26.920" starttime="20170712 12:59:26.916"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:26.923" starttime="20170712 12:59:26.920"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:26.923" starttime="20170712 12:59:26.920"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:26.924" starttime="20170712 12:59:26.923"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:26.924" starttime="20170712 12:59:26.924"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:26.924" starttime="20170712 12:59:26.924"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170712 12:59:26.925" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170712 12:59:26.926" starttime="20170712 12:59:26.925"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:26.931" starttime="20170712 12:59:26.928"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:26.931" starttime="20170712 12:59:26.927"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:26.931" starttime="20170712 12:59:26.926"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:26.935" starttime="20170712 12:59:26.932"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:26.935" starttime="20170712 12:59:26.932"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:26.935" starttime="20170712 12:59:26.931"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:26.939" starttime="20170712 12:59:26.936"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:26.939" starttime="20170712 12:59:26.936"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:26.939" starttime="20170712 12:59:26.935"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170712 12:59:48.055" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:58:20 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0556F170&gt;</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0556F170&gt;</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[ssh_common.py@203] Last login: Wed Jul 12 12:59:26 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0556FB70&gt;</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0556FB70&gt;</msg>
<msg timestamp="20170712 12:59:48.056" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170712 12:59:48.056" starttime="20170712 12:59:26.939"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:48.061" starttime="20170712 12:59:48.058"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:48.061" starttime="20170712 12:59:48.057"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:48.061" starttime="20170712 12:59:48.057"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170712 12:59:48.066" starttime="20170712 12:59:48.063"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:48.066" starttime="20170712 12:59:48.062"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:48.066" starttime="20170712 12:59:48.062"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:48.066" starttime="20170712 12:59:26.925"></status>
</kw>
<status status="PASS" endtime="20170712 12:59:48.066" starttime="20170712 12:59:01.445"></status>
</kw>
<tags>
<tag>owner-xingqiang.wu@nokia.com</tag>
<tag>QC_443311</tag>
</tags>
<status status="FAIL" endtime="20170712 12:59:48.067" critical="yes" starttime="20170712 12:57:03.055">AdminApiProcedureFailureException: Status reached: {u'result': u'Validation failed!', u'validationResult': {u'niddValidationResult': {u'status': u'FAIL', u'logs': {u'objectsOccurencesErrors': None, u'invalidObjectsDistnames': [u'MRBTS-1797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1'], u'definitionErrors': [{u'distName': u'MRBTS-1797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1', u'parameter': u'sModDN', u'error': [{u'key': u'GIVEN_VALUE'}, u' (MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/CABINET-1/SMOD-1) ', {u'key': u'VALUE_IS_TO_TOO_LONG'}, u' 84.']}], u'skippedElementsErrors': [{u'distName': u'MRBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'altitude'}, {u'distName': u'MRBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'latitude'}, {u'distName': u'MRBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'longitude'}, {u'distName': u'MRBTS-1797/LNBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'operationalState'}, {u'distName': u'MRBTS-1797/LNBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'supportedNumOfAnrMoi'}, {u'distName': u'MRBTS-1797/LNBTS-1797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'supportedNumOfLnadj'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'energySavingState'}, {u'distName': u'MRBTS-1797/LNBTS-1797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'eutraCelId'}, {u'distName': u'MRB...
    [ Message content over the limit has been removed. ]
.../RMOD-1/ANTL-2 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-9/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-1 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-3/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-3 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-15/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-8 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-16/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-8 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-5/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-4 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-2/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-2 does not exists', u'rule failed: MRBTS-1797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-1/CHANNELGROUP-1/CHANNEL-14/antlDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-3/SCF-4/MRBTS-1797/EQM-1/APEQM-1/RMOD-1/ANTL-7 does not exists']}}}</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170712 12:59:48.082" starttime="20170712 12:55:42.742"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-xingqiang.wu@nokia.com</stat>
<stat fail="1" pass="0">QC_443311</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T1 Operational RF block unblock" pass="0">FZHQ T1 Operational RF block unblock</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170712 12:55:43.177" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170712 12:59:26.339" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
