<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170823 14:11:32.282" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\VeCN\SISO1\CRT\FZHQ_ASMI\FZHQ_T1_RF_module_alarm_without_recovery_action_1906\FZHQ_T1_RF_module_alarm_without_recovery_action_1906.robot" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170823135605//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170823 13:56:07.680" level="INFO">${timestamp} = 20170823135607</msg>
<status status="PASS" endtime="20170823 13:56:07.680" starttime="20170823 13:56:07.646"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170823 13:56:07.681" level="INFO">${FILE_NAME} = FZHQ T1 RF module alarm without recovery action 19</msg>
<status status="PASS" endtime="20170823 13:56:07.681" starttime="20170823 13:56:07.681"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170823 13:56:07.682" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ T1 RF module alarm without recovery action 19_20170823135607</msg>
<status status="PASS" endtime="20170823 13:56:07.682" starttime="20170823 13:56:07.681"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170823 13:56:07.683" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607</msg>
<status status="PASS" endtime="20170823 13:56:07.683" starttime="20170823 13:56:07.682"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 13:56:07.683" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607</msg>
<status status="PASS" endtime="20170823 13:56:07.683" starttime="20170823 13:56:07.683"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 13:56:07.684" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607"&gt;D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 13:56:07.684" starttime="20170823 13:56:07.684"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 13:56:07.685" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607</msg>
<status status="PASS" endtime="20170823 13:56:07.685" starttime="20170823 13:56:07.685"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170823 13:56:07.689" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170823 13:56:07.689" starttime="20170823 13:56:07.686"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170823 13:56:07.708" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170823 13:56:07.708" starttime="20170823 13:56:07.702"></status>
</kw>
<msg timestamp="20170823 13:56:07.708" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170823 13:56:07.708" starttime="20170823 13:56:07.702"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:56:07.710" starttime="20170823 13:56:07.709"></status>
</kw>
<msg timestamp="20170823 13:56:07.710" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:56:07.710" starttime="20170823 13:56:07.709"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:56:07.716" starttime="20170823 13:56:07.713"></status>
</kw>
<msg timestamp="20170823 13:56:07.716" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607</msg>
<status status="PASS" endtime="20170823 13:56:07.716" starttime="20170823 13:56:07.710"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170823 13:56:07.720" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607</msg>
<status status="PASS" endtime="20170823 13:56:07.720" starttime="20170823 13:56:07.717"></status>
</kw>
<status status="PASS" endtime="20170823 13:56:07.720" starttime="20170823 13:56:07.701"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170823 13:56:07.741" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 13:56:07.741" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 13:56:07.741" starttime="20170823 13:56:07.721"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:56:07.742" starttime="20170823 13:56:07.742"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170823 13:56:07.743" starttime="20170823 13:56:07.742"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:56:07.743" starttime="20170823 13:56:07.743"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170823 13:56:07.744" starttime="20170823 13:56:07.743"></status>
</kw>
<status status="PASS" endtime="20170823 13:56:07.744" starttime="20170823 13:56:07.721"></status>
</kw>
<status status="PASS" endtime="20170823 13:56:07.744" starttime="20170823 13:56:07.721"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@203] root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054797B0&gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054797B0&gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:56:08 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054678C8&gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054678C8&gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:56:19 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045A8990&gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045A8990&gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:56:29 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x034A2F80&gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x034A2F80&gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:56:40 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054E4FD0&gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054E4FD0&gt;</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170823 13:57:24.618" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170823 13:57:24.620" starttime="20170823 13:56:07.744"></status>
</kw>
<status status="PASS" endtime="20170823 13:57:24.620" starttime="20170823 13:56:07.744"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170823 13:57:24.621" starttime="20170823 13:57:24.620"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170823 13:57:24.622" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170823 13:57:24.622" starttime="20170823 13:57:24.621"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170823 13:57:24.626" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170823 13:57:24.626" starttime="20170823 13:57:24.622"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170823 13:57:24.629" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170823 13:57:24.629" starttime="20170823 13:57:24.626"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170823 13:57:24.633" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170823 13:57:24.633" starttime="20170823 13:57:24.630"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170823 13:57:26.031" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170823 13:57:26.031" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170823 13:57:26.031" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170823 13:57:26.031" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170823 13:57:26.032" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170823 13:57:26.032" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05527F30&gt;</msg>
<status status="PASS" endtime="20170823 13:57:26.032" starttime="20170823 13:57:24.633"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 13:57:26.033" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05527F30&gt;</msg>
<status status="PASS" endtime="20170823 13:57:26.033" starttime="20170823 13:57:26.033"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170823 13:57:27.220" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05527F30&gt;</msg>
<msg timestamp="20170823 13:57:27.220" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170823 13:57:27.220" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170823 13:57:27.221" starttime="20170823 13:57:26.037"></status>
</kw>
<status status="PASS" endtime="20170823 13:57:27.221" starttime="20170823 13:57:26.033"></status>
</kw>
<status status="PASS" endtime="20170823 13:57:27.221" starttime="20170823 13:57:24.621"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 13:57:27.225" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05527F30&gt;.</msg>
<status status="PASS" endtime="20170823 13:57:27.225" starttime="20170823 13:57:27.221"></status>
</kw>
<status status="PASS" endtime="20170823 13:57:27.225" starttime="20170823 13:56:07.646"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:29.593" starttime="20170823 14:11:29.590"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170823 14:11:29.601" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170823 14:11:29.601" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05527F30&gt;</msg>
<status status="PASS" endtime="20170823 14:11:29.601" starttime="20170823 14:11:29.594"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:29.602" starttime="20170823 14:11:29.602"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:29.602" starttime="20170823 14:11:29.601"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:29.603" starttime="20170823 14:11:29.603"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:29.603" starttime="20170823 14:11:29.602"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:29.603" starttime="20170823 14:11:29.590"></status>
</kw>
<test id="s1-t1" name="FZHQ_RF_alarm_1906">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170823135605//ev_logs//D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170823 13:57:27.230" level="INFO">${timestamp} = 20170823135727</msg>
<status status="PASS" endtime="20170823 13:57:27.230" starttime="20170823 13:57:27.230"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170823 13:57:27.231" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:57:27.231" starttime="20170823 13:57:27.231"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170823 13:57:27.232" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:57:27.232" starttime="20170823 13:57:27.232"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 13:57:27.233" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:57:27.233" starttime="20170823 13:57:27.232"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 13:57:27.234" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607\FZHQ_RF_alarm_1906"&gt;D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607\FZHQ_RF_alarm_1906&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 13:57:27.234" starttime="20170823 13:57:27.233"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 13:57:27.234" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:57:27.234" starttime="20170823 13:57:27.234"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170823 13:57:27.235" starttime="20170823 13:57:27.235"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:57:27.237" starttime="20170823 13:57:27.237"></status>
</kw>
<msg timestamp="20170823 13:57:27.237" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:57:27.237" starttime="20170823 13:57:27.236"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:57:27.238" starttime="20170823 13:57:27.238"></status>
</kw>
<msg timestamp="20170823 13:57:27.238" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:57:27.238" starttime="20170823 13:57:27.237"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170823 13:57:27.242" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:57:27.242" starttime="20170823 13:57:27.239"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170823 13:57:27.243" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:57:27.243" starttime="20170823 13:57:27.242"></status>
</kw>
<status status="PASS" endtime="20170823 13:57:27.243" starttime="20170823 13:57:27.236"></status>
</kw>
<status status="PASS" endtime="20170823 13:57:27.243" starttime="20170823 13:57:27.230"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170823 13:57:27.245" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=39995 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpcr1aws --insecure</msg>
<msg timestamp="20170823 13:57:29.362" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 13:57:29.362" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 13:57:33.377" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 13:57:33.377" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 13:57:37.384" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 13:57:37.384" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 13:57:40.384" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170823 13:57:40.385" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 90907, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170823 13:57:47.503" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 90907, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170823 13:57:49.866" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 90907, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170823 13:57:49.866" starttime="20170823 13:57:27.243"></status>
</kw>
<status status="PASS" endtime="20170823 13:57:49.866" starttime="20170823 13:57:27.226"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<arguments>
<arg>alarm_start</arg>
</arguments>
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170823 13:57:50.211" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170823 13:57:50.211" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170823 13:57:50.211" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607\FZHQ_RF_alarm_1906" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170823 13:57:50.212" starttime="20170823 13:57:49.867"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170823 13:57:59.569" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170823 13:57:59.569" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170823 13:57:59.569" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170823 13:57:59.570" starttime="20170823 13:57:50.212"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170823 13:57:59.570" level="INFO">${case_execute_log_name} = alarm_start</msg>
<status status="PASS" endtime="20170823 13:57:59.570" starttime="20170823 13:57:59.570"></status>
</kw>
<status status="PASS" endtime="20170823 13:57:59.571" starttime="20170823 13:57:49.867"></status>
</kw>
<kw name="Get_RRU_IP" library="SISO1 Resource">
<assign>
<var>${RRU_IP}</var>
</assign>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>query=get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=${RRU_SERINUM}]</arg>
</arguments>
<assign>
<var>${rmode_info}</var>
</assign>
<msg timestamp="20170823 13:58:00.174" level="INFO">[infomodel_control.py@328] query infomodel: 'get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=RY151105157]' succeed .</msg>
<msg timestamp="20170823 13:58:00.175" level="INFO">${rmode_info} = [{u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': 'CPRI_RP1', u'routingDirectionCalculated': 'CCW', u'productCode': u'473106A.X11', u'filterIpAddress': u'1...</msg>
<status status="PASS" endtime="20170823 13:58:00.175" starttime="20170823 13:57:59.574"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${rmode_info}</arg>
</arguments>
<msg timestamp="20170823 13:58:00.175" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20170823 13:58:00.175" starttime="20170823 13:58:00.175"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rmode_info[0].ipAddress}</arg>
</arguments>
<msg timestamp="20170823 13:58:00.176" level="INFO">172.16.17.128</msg>
<status status="PASS" endtime="20170823 13:58:00.176" starttime="20170823 13:58:00.176"></status>
</kw>
<msg timestamp="20170823 13:58:00.176" level="INFO">${RRU_IP} = 172.16.17.128</msg>
<status status="PASS" endtime="20170823 13:58:00.176" starttime="20170823 13:57:59.573"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_trigger}</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20170823 13:58:10.557" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:58:10.557" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:56:50 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:58:10.557" starttime="20170823 13:58:00.178"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20170823 13:58:10.558" starttime="20170823 13:58:10.558"></status>
</kw>
<msg timestamp="20170823 13:58:10.558" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20170823 13:58:10.558" starttime="20170823 13:58:10.557"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20170823 13:58:10.694" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05597800&gt;</msg>
<msg timestamp="20170823 13:58:10.694" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20170823 13:58:10.694" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:58:10.695" starttime="20170823 13:58:10.562"></status>
</kw>
<msg timestamp="20170823 13:58:10.695" level="INFO">${ret} = lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:58:10.695" starttime="20170823 13:58:10.559"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<status status="PASS" endtime="20170823 13:58:10.700" starttime="20170823 13:58:10.699"></status>
</kw>
<status status="PASS" endtime="20170823 13:58:10.700" starttime="20170823 13:58:10.699"></status>
</kw>
<msg timestamp="20170823 13:58:10.700" level="INFO">${ret1} = ('PASS', '0x2018')</msg>
<status status="PASS" endtime="20170823 13:58:10.700" starttime="20170823 13:58:10.695"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<msg timestamp="20170823 13:58:10.704" level="FAIL">'lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;' does not match '0x1018'</msg>
<status status="FAIL" endtime="20170823 13:58:10.705" starttime="20170823 13:58:10.704"></status>
</kw>
<status status="PASS" endtime="20170823 13:58:10.705" starttime="20170823 13:58:10.704"></status>
</kw>
<msg timestamp="20170823 13:58:10.705" level="INFO">${ret2} = ('FAIL', u"'lxc-ls --active\n0x2015\t0x2016\t0x2018\t0x201b\nroot@fctj-4a:~ &gt;' does not match '0x1018'")</msg>
<status status="PASS" endtime="20170823 13:58:10.705" starttime="20170823 13:58:10.700"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<msg timestamp="20170823 13:58:10.842" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05597800&gt;</msg>
<msg timestamp="20170823 13:58:10.842" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x2018</msg>
<msg timestamp="20170823 13:58:10.842" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x2018
root@0x2018:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:58:10.842" starttime="20170823 13:58:10.712"></status>
</kw>
<status status="PASS" endtime="20170823 13:58:10.843" starttime="20170823 13:58:10.709"></status>
</kw>
<status status="PASS" endtime="20170823 13:58:10.843" starttime="20170823 13:58:10.705"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<status status="PASS" endtime="20170823 13:58:10.850" starttime="20170823 13:58:10.846"></status>
</kw>
<status status="PASS" endtime="20170823 13:58:10.850" starttime="20170823 13:58:10.843"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20170823 13:58:10.855" starttime="20170823 13:58:10.854"></status>
</kw>
<status status="PASS" endtime="20170823 13:58:10.855" starttime="20170823 13:58:10.850"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<msg timestamp="20170823 13:58:11.030" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05597800&gt;</msg>
<msg timestamp="20170823 13:58:11.030" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.17.128 2323</msg>
<msg timestamp="20170823 13:58:11.030" level="INFO">[ssh_common.py@314] Get Response: 
Trying 172.16.17.1</msg>
<status status="PASS" endtime="20170823 13:58:11.030" starttime="20170823 13:58:10.858"></status>
</kw>
<status status="PASS" endtime="20170823 13:58:11.030" starttime="20170823 13:58:10.855"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20170823 13:58:11.203" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05597800&gt;</msg>
<msg timestamp="20170823 13:58:11.203" level="INFO">[ssh_common.py@258] Execute command: sendFault 1104 0 0 0 0 0</msg>
<msg timestamp="20170823 13:58:11.203" level="INFO">[ssh_common.py@314] Get Response:</msg>
<status status="PASS" endtime="20170823 13:58:11.203" starttime="20170823 13:58:11.034"></status>
</kw>
<status status="PASS" endtime="20170823 13:58:11.203" starttime="20170823 13:58:11.030"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20170823 13:58:11.206" starttime="20170823 13:58:11.203"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<status status="PASS" endtime="20170823 13:58:11.210" starttime="20170823 13:58:11.207"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 13:58:11.214" starttime="20170823 13:58:11.211"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20170823 13:58:11.218" starttime="20170823 13:58:11.214"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 13:58:11.221" starttime="20170823 13:58:11.218"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:58:11.225" starttime="20170823 13:58:11.222"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20170823 13:58:11.259" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05597800&gt;</msg>
<status status="PASS" endtime="20170823 13:58:11.259" starttime="20170823 13:58:11.225"></status>
</kw>
<status status="PASS" endtime="20170823 13:58:11.259" starttime="20170823 13:58:00.177"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>${msg_check_list_alarm_start}</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${msg_check_list}</arg>
<arg>timeout=240</arg>
</arguments>
<msg timestamp="20170823 14:00:12.439" level="INFO">[infomodel_control.py@328] query infomodel: '/MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/ALARM_L-* is [alarmInformation.faultId=1906]' succeed .</msg>
<status status="PASS" endtime="20170823 14:00:12.439" starttime="20170823 13:58:11.261"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:12.439" starttime="20170823 13:58:11.260"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_cancel}</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20170823 14:00:22.817" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:00:22.817" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:58:01 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:00:22.817" starttime="20170823 14:00:12.441"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:22.819" starttime="20170823 14:00:22.818"></status>
</kw>
<msg timestamp="20170823 14:00:22.819" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20170823 14:00:22.819" starttime="20170823 14:00:22.818"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20170823 14:00:22.945" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05599AD0&gt;</msg>
<msg timestamp="20170823 14:00:22.945" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20170823 14:00:22.945" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:00:22.945" starttime="20170823 14:00:22.822"></status>
</kw>
<msg timestamp="20170823 14:00:22.945" level="INFO">${ret} = lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:00:22.945" starttime="20170823 14:00:22.819"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:22.950" starttime="20170823 14:00:22.950"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:22.950" starttime="20170823 14:00:22.949"></status>
</kw>
<msg timestamp="20170823 14:00:22.950" level="INFO">${ret1} = ('PASS', '0x2018')</msg>
<status status="PASS" endtime="20170823 14:00:22.951" starttime="20170823 14:00:22.946"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<msg timestamp="20170823 14:00:22.955" level="FAIL">'lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;' does not match '0x1018'</msg>
<status status="FAIL" endtime="20170823 14:00:22.955" starttime="20170823 14:00:22.954"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:22.955" starttime="20170823 14:00:22.954"></status>
</kw>
<msg timestamp="20170823 14:00:22.955" level="INFO">${ret2} = ('FAIL', u"'lxc-ls --active\n0x2015\t0x2016\t0x2018\t0x201b\nroot@fctj-4a:~ &gt;' does not match '0x1018'")</msg>
<status status="PASS" endtime="20170823 14:00:22.955" starttime="20170823 14:00:22.951"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<msg timestamp="20170823 14:00:23.082" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05599AD0&gt;</msg>
<msg timestamp="20170823 14:00:23.082" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x2018</msg>
<msg timestamp="20170823 14:00:23.082" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x2018
root@0x2018:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:00:23.082" starttime="20170823 14:00:22.963"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:23.083" starttime="20170823 14:00:22.960"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:23.083" starttime="20170823 14:00:22.955"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:23.090" starttime="20170823 14:00:23.086"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:23.090" starttime="20170823 14:00:23.083"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:23.094" starttime="20170823 14:00:23.093"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:23.094" starttime="20170823 14:00:23.090"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<msg timestamp="20170823 14:00:23.265" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05599AD0&gt;</msg>
<msg timestamp="20170823 14:00:23.265" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.17.128 2323</msg>
<msg timestamp="20170823 14:00:23.265" level="INFO">[ssh_common.py@314] Get Response: 
Trying 172.16.17.1</msg>
<status status="PASS" endtime="20170823 14:00:23.266" starttime="20170823 14:00:23.097"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:23.266" starttime="20170823 14:00:23.094"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20170823 14:00:23.437" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05599AD0&gt;</msg>
<msg timestamp="20170823 14:00:23.437" level="INFO">[ssh_common.py@258] Execute command: sendFault 1104 0 0 1 0 0</msg>
<msg timestamp="20170823 14:00:23.437" level="INFO">[ssh_common.py@314] Get Response:</msg>
<status status="PASS" endtime="20170823 14:00:23.437" starttime="20170823 14:00:23.269"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:23.438" starttime="20170823 14:00:23.266"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:23.441" starttime="20170823 14:00:23.438"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:23.445" starttime="20170823 14:00:23.441"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:23.449" starttime="20170823 14:00:23.446"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:23.452" starttime="20170823 14:00:23.449"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:23.456" starttime="20170823 14:00:23.452"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:23.460" starttime="20170823 14:00:23.457"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20170823 14:00:23.494" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05599AD0&gt;</msg>
<status status="PASS" endtime="20170823 14:00:23.494" starttime="20170823 14:00:23.460"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:23.494" starttime="20170823 14:00:12.440"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>${msg_check_list_alarm_cancel}</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${msg_check_list}</arg>
<arg>timeout=240</arg>
</arguments>
<msg timestamp="20170823 14:00:23.944" level="INFO">[infomodel_control.py@328] query infomodel: 'count /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/ALARM_L-* is [alarmInformation.faultId=1906] =0' succeed .</msg>
<status status="PASS" endtime="20170823 14:00:23.944" starttime="20170823 14:00:23.496"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:23.945" starttime="20170823 14:00:23.494"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_trigger}</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20170823 14:00:34.337" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:00:34.337" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:00:13 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:00:34.337" starttime="20170823 14:00:23.946"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:34.339" starttime="20170823 14:00:34.338"></status>
</kw>
<msg timestamp="20170823 14:00:34.339" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20170823 14:00:34.339" starttime="20170823 14:00:34.338"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20170823 14:00:34.466" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055973A0&gt;</msg>
<msg timestamp="20170823 14:00:34.466" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20170823 14:00:34.466" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:00:34.466" starttime="20170823 14:00:34.343"></status>
</kw>
<msg timestamp="20170823 14:00:34.466" level="INFO">${ret} = lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:00:34.466" starttime="20170823 14:00:34.340"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:34.471" starttime="20170823 14:00:34.471"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:34.471" starttime="20170823 14:00:34.470"></status>
</kw>
<msg timestamp="20170823 14:00:34.471" level="INFO">${ret1} = ('PASS', '0x2018')</msg>
<status status="PASS" endtime="20170823 14:00:34.471" starttime="20170823 14:00:34.467"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<msg timestamp="20170823 14:00:34.476" level="FAIL">'lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;' does not match '0x1018'</msg>
<status status="FAIL" endtime="20170823 14:00:34.476" starttime="20170823 14:00:34.475"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:34.476" starttime="20170823 14:00:34.475"></status>
</kw>
<msg timestamp="20170823 14:00:34.476" level="INFO">${ret2} = ('FAIL', u"'lxc-ls --active\n0x2015\t0x2016\t0x2018\t0x201b\nroot@fctj-4a:~ &gt;' does not match '0x1018'")</msg>
<status status="PASS" endtime="20170823 14:00:34.476" starttime="20170823 14:00:34.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<msg timestamp="20170823 14:00:34.602" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055973A0&gt;</msg>
<msg timestamp="20170823 14:00:34.602" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x2018</msg>
<msg timestamp="20170823 14:00:34.602" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x2018
root@0x2018:~ &gt;</msg>
<status status="PASS" endtime="20170823 14:00:34.602" starttime="20170823 14:00:34.483"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:34.602" starttime="20170823 14:00:34.480"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:34.602" starttime="20170823 14:00:34.476"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:34.610" starttime="20170823 14:00:34.606"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:34.610" starttime="20170823 14:00:34.603"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:34.614" starttime="20170823 14:00:34.613"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:34.614" starttime="20170823 14:00:34.610"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<msg timestamp="20170823 14:00:34.787" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055973A0&gt;</msg>
<msg timestamp="20170823 14:00:34.787" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.17.128 2323</msg>
<msg timestamp="20170823 14:00:34.787" level="INFO">[ssh_common.py@314] Get Response: 
Trying 172.16.17.1</msg>
<status status="PASS" endtime="20170823 14:00:34.788" starttime="20170823 14:00:34.617"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:34.788" starttime="20170823 14:00:34.614"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20170823 14:00:35.031" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055973A0&gt;</msg>
<msg timestamp="20170823 14:00:35.031" level="INFO">[ssh_common.py@258] Execute command: sendFault 1104 0 0 0 0 0</msg>
<msg timestamp="20170823 14:00:35.031" level="INFO">[ssh_common.py@314] Get Response:</msg>
<status status="PASS" endtime="20170823 14:00:35.032" starttime="20170823 14:00:34.792"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:35.032" starttime="20170823 14:00:34.788"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:35.035" starttime="20170823 14:00:35.032"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:35.039" starttime="20170823 14:00:35.036"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:35.042" starttime="20170823 14:00:35.039"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:35.046" starttime="20170823 14:00:35.042"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:35.050" starttime="20170823 14:00:35.047"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:00:35.053" starttime="20170823 14:00:35.050"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20170823 14:00:35.088" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055973A0&gt;</msg>
<status status="PASS" endtime="20170823 14:00:35.088" starttime="20170823 14:00:35.053"></status>
</kw>
<status status="PASS" endtime="20170823 14:00:35.089" starttime="20170823 14:00:23.945"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>${msg_check_list_alarm_start}</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${msg_check_list}</arg>
<arg>timeout=240</arg>
</arguments>
<msg timestamp="20170823 14:02:36.036" level="INFO">[infomodel_control.py@328] query infomodel: '/MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/ALARM_L-* is [alarmInformation.faultId=1906]' succeed .</msg>
<status status="PASS" endtime="20170823 14:02:36.037" starttime="20170823 14:00:35.090"></status>
</kw>
<status status="PASS" endtime="20170823 14:02:36.037" starttime="20170823 14:00:35.089"></status>
</kw>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\alarm</arg>
</arguments>
<msg timestamp="20170823 14:02:36.048" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170823135605\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823135607\FZHQ_RF_alarm_1906\alarm' succeed .</msg>
<status status="PASS" endtime="20170823 14:02:36.048" starttime="20170823 14:02:36.038"></status>
</kw>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170823 14:02:36.686" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170823 14:02:36.686" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170823 14:02:36.686" starttime="20170823 14:02:36.049"></status>
</kw>
<kw name="_RF Reset And Alarm Disappear">
<arguments>
<arg>${msg_check_list_alarm_cancel}</arg>
</arguments>
<kw name="Get_BTS_DN" library="SISO1 Resource">
<arguments>
<arg>RMOD_L</arg>
</arguments>
<assign>
<var>${RMOD_L_DN}</var>
</assign>
<kw name="Get Objects By Class Name" library="ute_admin">
<doc>Get objects by class name.</doc>
<arguments>
<arg>${DN_Name}</arg>
</arguments>
<assign>
<var>${DN_LIST1}</var>
</assign>
<msg timestamp="20170823 14:02:36.688" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 84272, "parameters": {"name": "getItemsByClassName", "parameters": {"className": "RMOD_L"}}}}</msg>
<msg timestamp="20170823 14:02:36.751" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 84272, "requestMessage": [{"distName": "/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1", "parameters": {"macAddress": "00:00:02:01:00:35", "hwVariant": null, "identityDN": null, "l3Protocol": "CPRI_RP1", "routingDirectionCalculated": "CCW", "productCode": "473106A.X11", "filterIpAddress": "1.1.1.1", "supportsLineRateAutoNegotiation": false, "supportsMultiRouter": false, "l3MinorProtocolVersion": 0, "hwVersion": "X11  ", "bpfForRadioAvailabilityState": "Unknown", "supportsChaining": false, "routingDirectionApplied": "CCW", "sourceEthernetBBswitchDN": "", "productName": "FZHQ", "masterAgentDN": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 51", "supportsMixedLinkRates": "Unknown", "tempNetActId": 1, "frameForwardingDelay": [], "serialNumber": "RY151105157", "l3MajorProtocolVersion": 1, "stateInfo": {"usageState": "Active", "detectionState": "Done", "workingState": "dedicated", "availabilityStatus": "Online", "administrativeState": "Unlocked", "operationalState": "Enabled", "reasoningStatus": [], "proceduralState": "ethernetEnabled"}, "filterMacAddress": "aa:bb:cc:dd:ee:ff", "ipAddress": "172.16.17.128"}}]}}</msg>
<msg timestamp="20170823 14:02:36.751" level="INFO">${DN_LIST1} = [{u'distName': u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1', u'parameters': {u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': u'CPRI_RP1', u'routingDirectionC...</msg>
<status status="PASS" endtime="20170823 14:02:36.751" starttime="20170823 14:02:36.688"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${DN_LIST1}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:02:36.752" starttime="20170823 14:02:36.752"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${DN_LIST}</var>
</assign>
<msg timestamp="20170823 14:02:36.752" level="INFO">${DN_LIST} = []</msg>
<status status="PASS" endtime="20170823 14:02:36.752" starttime="20170823 14:02:36.752"></status>
</kw>
<kw type="for" name="${index} IN [ @{DN_LIST1} ]">
<kw type="foritem" name="${index} = {u'distName': u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1', u'parameters': {u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': u'CPRI_RP1', u'routingDirectionCa...">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${DN_LIST}</arg>
<arg>${index.distName}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:02:36.754" starttime="20170823 14:02:36.754"></status>
</kw>
<status status="PASS" endtime="20170823 14:02:36.754" starttime="20170823 14:02:36.753"></status>
</kw>
<status status="PASS" endtime="20170823 14:02:36.754" starttime="20170823 14:02:36.753"></status>
</kw>
<msg timestamp="20170823 14:02:36.754" level="INFO">${RMOD_L_DN} = [u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1']</msg>
<status status="PASS" endtime="20170823 14:02:36.755" starttime="20170823 14:02:36.687"></status>
</kw>
<kw name="Reset Unit" library="ute_admin">
<doc>Preform unit reset procedure.</doc>
<arguments>
<arg>${RMOD_L_DN[0]}</arg>
</arguments>
<msg timestamp="20170823 14:02:36.755" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 33118, "parameters": {"name": "unitReset", "parameters": {"distName": "/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1"}}}}</msg>
<msg timestamp="20170823 14:02:37.755" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 33118, "requestMessage": ""}}</msg>
<status status="PASS" endtime="20170823 14:02:37.755" starttime="20170823 14:02:36.755"></status>
</kw>
<kw name="Wait_BTS_Until_Onair" library="SISO1 Resource">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10 sec</arg>
</arguments>
<msg timestamp="20170823 14:02:47.756" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170823 14:02:47.756" starttime="20170823 14:02:37.756"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>8 min</arg>
<arg>20 sec</arg>
<arg>Query Infomodel</arg>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:02:47.759" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:02:47.759" starttime="20170823 14:02:47.757"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:03:07.760" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:03:07.761" starttime="20170823 14:03:07.759"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:03:27.762" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:03:27.762" starttime="20170823 14:03:27.761"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:03:47.764" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:03:47.764" starttime="20170823 14:03:47.762"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:04:07.766" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:04:07.766" starttime="20170823 14:04:07.764"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:04:27.767" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:04:27.767" starttime="20170823 14:04:27.766"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:04:47.768" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:04:47.768" starttime="20170823 14:04:47.767"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:05:07.769" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:05:07.769" starttime="20170823 14:05:07.768"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:05:27.770" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:05:27.770" starttime="20170823 14:05:27.769"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:05:47.771" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:05:47.771" starttime="20170823 14:05:47.770"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:06:07.773" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:06:07.773" starttime="20170823 14:06:07.772"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:06:27.774" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:06:27.774" starttime="20170823 14:06:27.773"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:06:47.775" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:06:47.775" starttime="20170823 14:06:47.774"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:07:07.776" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:07:07.776" starttime="20170823 14:07:07.775"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:07:27.777" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:07:27.777" starttime="20170823 14:07:27.776"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:07:47.778" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:07:47.778" starttime="20170823 14:07:47.777"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:08:07.779" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:08:07.779" starttime="20170823 14:08:07.778"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:08:27.780" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:08:27.780" starttime="20170823 14:08:27.779"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:08:47.781" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:08:47.781" starttime="20170823 14:08:47.780"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:09:07.782" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:09:07.782" starttime="20170823 14:09:07.781"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:09:27.783" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:09:27.783" starttime="20170823 14:09:27.782"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:09:47.784" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:09:47.784" starttime="20170823 14:09:47.783"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:10:07.785" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:10:07.785" starttime="20170823 14:10:07.784"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:10:27.786" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:10:27.786" starttime="20170823 14:10:27.785"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170823 14:10:47.787" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:10:47.787" starttime="20170823 14:10:47.786"></status>
</kw>
<msg timestamp="20170823 14:10:47.787" level="FAIL">Keyword 'Query Infomodel' failed after retrying for 8 minutes. The last error was: AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:10:47.787" starttime="20170823 14:02:47.756"></status>
</kw>
<status status="FAIL" endtime="20170823 14:10:47.787" starttime="20170823 14:02:37.755"></status>
</kw>
<status status="FAIL" endtime="20170823 14:10:47.788" starttime="20170823 14:02:36.687"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 14:10:47.794" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05527F30&gt;.</msg>
<status status="PASS" endtime="20170823 14:10:47.794" starttime="20170823 14:10:47.789"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170823 14:10:48.238" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170823 14:10:48.238" starttime="20170823 14:10:47.794"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170823 14:10:48.240" starttime="20170823 14:10:48.238"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:48.241" starttime="20170823 14:10:48.241"></status>
</kw>
<msg timestamp="20170823 14:10:48.241" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 14:10:48.241" starttime="20170823 14:10:48.240"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170823 14:10:48.246" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:10:48.246" starttime="20170823 14:10:48.245"></status>
</kw>
<status status="FAIL" endtime="20170823 14:10:48.246" starttime="20170823 14:10:48.242"></status>
</kw>
<status status="PASS" endtime="20170823 14:10:48.246" starttime="20170823 14:10:48.241"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170823 14:10:48.644" level="INFO">[infomodel_control.py@189] stop infomodel logger failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20170823 14:10:48.644" level="INFO">[infomodel_control.py@193] disconnect from infomodel failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20170823 14:10:48.644" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<msg timestamp="20170823 14:10:48.645" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:10:48.645" starttime="20170823 14:10:48.250"></status>
</kw>
<status status="FAIL" endtime="20170823 14:10:48.645" starttime="20170823 14:10:48.247"></status>
</kw>
<status status="PASS" endtime="20170823 14:10:48.645" starttime="20170823 14:10:48.246"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170823 14:10:48.896" level="INFO">Exit code: 1</msg>
<msg timestamp="20170823 14:10:48.896" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:39995
</msg>
<msg timestamp="20170823 14:10:48.896" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170823 14:10:48.902" starttime="20170823 14:10:48.645"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:48.903" starttime="20170823 14:10:48.903"></status>
</kw>
<status status="PASS" endtime="20170823 14:10:48.903" starttime="20170823 14:10:48.902"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:48.906" starttime="20170823 14:10:48.906"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:48.907" starttime="20170823 14:10:48.907"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170823 14:10:48.914" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170823 14:10:48.914" starttime="20170823 14:10:48.908"></status>
</kw>
<msg timestamp="20170823 14:10:48.914" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170823 14:10:48.914" starttime="20170823 14:10:48.907"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:48.917" starttime="20170823 14:10:48.914"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:48.921" starttime="20170823 14:10:48.918"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170823 14:10:48.922" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 14:10:48.922" starttime="20170823 14:10:48.921"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:48.923" starttime="20170823 14:10:48.923"></status>
</kw>
<msg timestamp="20170823 14:10:48.924" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170823 14:10:48.924" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170823 14:10:48.924" starttime="20170823 14:10:48.923"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:48.927" starttime="20170823 14:10:48.924"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170823 14:10:52.952" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170823 14:10:52.952" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170823 14:10:52.952" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170823 14:10:52.952" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170823 14:10:52.952" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170823 14:10:52.953" starttime="20170823 14:10:48.927"></status>
</kw>
<status status="PASS" endtime="20170823 14:10:52.953" starttime="20170823 14:10:48.922"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:52.954" starttime="20170823 14:10:52.954"></status>
</kw>
<msg timestamp="20170823 14:10:52.954" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170823 14:10:52.955" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170823 14:10:52.955" starttime="20170823 14:10:52.953"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:52.958" starttime="20170823 14:10:52.955"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170823 14:10:56.992" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170823 14:10:56.992" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170823 14:10:56.992" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170823 14:10:56.992" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170823 14:10:56.992" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170823 14:10:56.992" starttime="20170823 14:10:52.958"></status>
</kw>
<status status="PASS" endtime="20170823 14:10:56.992" starttime="20170823 14:10:52.953"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170823 14:10:57.000" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170823 14:10:57.001" starttime="20170823 14:10:56.993"></status>
</kw>
<msg timestamp="20170823 14:10:57.001" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170823 14:10:57.001" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170823 14:10:57.001" starttime="20170823 14:10:56.993"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170823 14:10:57.004" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170823 14:10:57.004" starttime="20170823 14:10:57.001"></status>
</kw>
<status status="PASS" endtime="20170823 14:10:57.004" starttime="20170823 14:10:56.993"></status>
</kw>
<status status="PASS" endtime="20170823 14:10:57.005" starttime="20170823 14:10:48.922"></status>
</kw>
<status status="PASS" endtime="20170823 14:10:57.005" starttime="20170823 14:10:48.922"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:57.005" starttime="20170823 14:10:57.005"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170823 14:10:57.009" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170823 14:10:57.009" starttime="20170823 14:10:57.005"></status>
</kw>
<status status="FAIL" endtime="20170823 14:10:57.009" starttime="20170823 14:10:48.905"></status>
</kw>
<status status="PASS" endtime="20170823 14:10:57.009" starttime="20170823 14:10:48.904"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170823 14:10:57.016" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170823 14:10:57.016" starttime="20170823 14:10:57.010"></status>
</kw>
<msg timestamp="20170823 14:10:57.016" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170823 14:10:57.016" starttime="20170823 14:10:57.009"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:10:57.020" starttime="20170823 14:10:57.017"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170823 14:11:07.036" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170823 14:11:07.647" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170823 14:11:07.647" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170823 14:11:07.647" starttime="20170823 14:10:57.020"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170823 14:11:08.433" level="INFO">['fatal'] ['fatal']</msg>
<status status="PASS" endtime="20170823 14:11:08.434" starttime="20170823 14:11:07.648"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170823 14:11:08.435" level="FAIL">'FZHQ_RF_alarm_1906' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170823 14:11:08.435" starttime="20170823 14:11:08.435"></status>
</kw>
<msg timestamp="20170823 14:11:08.435" level="INFO">${return1} = ('FAIL', u"'FZHQ_RF_alarm_1906' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170823 14:11:08.435" starttime="20170823 14:11:08.434"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:08.439" starttime="20170823 14:11:08.436"></status>
</kw>
<msg timestamp="20170823 14:11:08.440" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 14:11:08.440" starttime="20170823 14:11:08.436"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:08.444" starttime="20170823 14:11:08.440"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:08.444" starttime="20170823 14:11:08.440"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:08.445" starttime="20170823 14:11:08.445"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:08.446" starttime="20170823 14:11:08.446"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:08.447" starttime="20170823 14:11:08.446"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170823 14:11:08.448" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170823 14:11:08.448" starttime="20170823 14:11:08.448"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:08.455" starttime="20170823 14:11:08.450"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:08.455" starttime="20170823 14:11:08.449"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:08.455" starttime="20170823 14:11:08.449"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:08.460" starttime="20170823 14:11:08.457"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:08.460" starttime="20170823 14:11:08.456"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:08.460" starttime="20170823 14:11:08.456"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:08.464" starttime="20170823 14:11:08.461"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:08.464" starttime="20170823 14:11:08.461"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:08.464" starttime="20170823 14:11:08.460"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170823 14:11:29.576" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:11:29.576" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:01:14 CST 2017 from 10.69.80.114 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:11:29.576" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05532AF8&gt;</msg>
<msg timestamp="20170823 14:11:29.576" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 14:11:29.576" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:11:29.576" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05532AF8&gt;</msg>
<msg timestamp="20170823 14:11:29.576" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 14:11:29.576" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 14:11:09 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 14:11:29.576" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05532AF8&gt;</msg>
<msg timestamp="20170823 14:11:29.577" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 14:11:29.577" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 14:11:29.577" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05532AF8&gt;</msg>
<msg timestamp="20170823 14:11:29.577" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170823 14:11:29.577" starttime="20170823 14:11:08.464"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:29.582" starttime="20170823 14:11:29.579"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:29.582" starttime="20170823 14:11:29.578"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:29.582" starttime="20170823 14:11:29.577"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170823 14:11:29.586" starttime="20170823 14:11:29.583"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:29.586" starttime="20170823 14:11:29.583"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:29.586" starttime="20170823 14:11:29.582"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:29.587" starttime="20170823 14:11:08.447"></status>
</kw>
<status status="PASS" endtime="20170823 14:11:29.587" starttime="20170823 14:10:47.788"></status>
</kw>
<tags>
<tag>owner-sue.nie@nokia.com</tag>
<tag>QC_720771</tag>
</tags>
<status status="FAIL" endtime="20170823 14:11:29.587" critical="yes" starttime="20170823 13:57:27.225">Keyword 'Query Infomodel' failed after retrying for 8 minutes. The last error was: AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170823 14:11:29.603" starttime="20170823 13:56:06.583"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-sue.nie@nokia.com</stat>
<stat fail="1" pass="0">QC_720771</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906" pass="0">FZHQ T1 RF module alarm without recovery action 1906</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170823 13:56:07.044" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170823 14:11:07.036" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
