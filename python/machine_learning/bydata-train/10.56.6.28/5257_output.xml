<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170822 17:27:50.282" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\VeCN\SISO1\CRT\FZHQ_ASMI\FZHQ_T1_RF_module_alarm_without_recovery_action_1906\FZHQ_T1_RF_module_alarm_without_recovery_action_1906.robot" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170822172502//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170822 17:25:04.702" level="INFO">${timestamp} = 20170822172504</msg>
<status status="PASS" endtime="20170822 17:25:04.702" starttime="20170822 17:25:04.669"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170822 17:25:04.703" level="INFO">${FILE_NAME} = FZHQ T1 RF module alarm without recovery action 19</msg>
<status status="PASS" endtime="20170822 17:25:04.703" starttime="20170822 17:25:04.702"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170822 17:25:04.704" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ T1 RF module alarm without recovery action 19_20170822172504</msg>
<status status="PASS" endtime="20170822 17:25:04.704" starttime="20170822 17:25:04.703"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170822 17:25:04.704" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504</msg>
<status status="PASS" endtime="20170822 17:25:04.705" starttime="20170822 17:25:04.704"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170822 17:25:04.705" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504</msg>
<status status="PASS" endtime="20170822 17:25:04.705" starttime="20170822 17:25:04.705"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170822 17:25:04.706" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504"&gt;D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:25:04.706" starttime="20170822 17:25:04.705"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170822 17:25:04.707" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504</msg>
<status status="PASS" endtime="20170822 17:25:04.707" starttime="20170822 17:25:04.706"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170822 17:25:04.710" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170822 17:25:04.710" starttime="20170822 17:25:04.707"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170822 17:25:04.729" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170822 17:25:04.729" starttime="20170822 17:25:04.723"></status>
</kw>
<msg timestamp="20170822 17:25:04.729" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170822 17:25:04.729" starttime="20170822 17:25:04.722"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:25:04.730" starttime="20170822 17:25:04.730"></status>
</kw>
<msg timestamp="20170822 17:25:04.730" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170822 17:25:04.730" starttime="20170822 17:25:04.729"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:25:04.736" starttime="20170822 17:25:04.733"></status>
</kw>
<msg timestamp="20170822 17:25:04.736" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504</msg>
<status status="PASS" endtime="20170822 17:25:04.736" starttime="20170822 17:25:04.730"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170822 17:25:04.740" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504</msg>
<status status="PASS" endtime="20170822 17:25:04.740" starttime="20170822 17:25:04.737"></status>
</kw>
<status status="PASS" endtime="20170822 17:25:04.740" starttime="20170822 17:25:04.722"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170822 17:25:04.761" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170822 17:25:04.761" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170822 17:25:04.762" starttime="20170822 17:25:04.741"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:25:04.762" starttime="20170822 17:25:04.762"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170822 17:25:04.763" starttime="20170822 17:25:04.762"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:25:04.763" starttime="20170822 17:25:04.763"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170822 17:25:04.764" starttime="20170822 17:25:04.763"></status>
</kw>
<status status="PASS" endtime="20170822 17:25:04.764" starttime="20170822 17:25:04.741"></status>
</kw>
<status status="PASS" endtime="20170822 17:25:04.764" starttime="20170822 17:25:04.740"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@203] Last login: Tue Aug 22 17:22:46 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054F8AA8&gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054F8AA8&gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@203] Last login: Tue Aug 22 17:25:05 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0556E9B8&gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0556E9B8&gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@203] Last login: Tue Aug 22 17:25:15 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054F4300&gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054F4300&gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@203] Last login: Tue Aug 22 17:25:26 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054F8418&gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054F8418&gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@203] Last login: Tue Aug 22 17:25:36 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04E73DF0&gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04E73DF0&gt;</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170822 17:26:21.414" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170822 17:26:21.416" starttime="20170822 17:25:04.764"></status>
</kw>
<status status="PASS" endtime="20170822 17:26:21.416" starttime="20170822 17:25:04.764"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170822 17:26:21.416" starttime="20170822 17:26:21.416"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170822 17:26:21.418" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170822 17:26:21.418" starttime="20170822 17:26:21.417"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170822 17:26:21.421" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170822 17:26:21.421" starttime="20170822 17:26:21.418"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170822 17:26:21.424" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170822 17:26:21.424" starttime="20170822 17:26:21.421"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170822 17:26:21.427" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170822 17:26:21.427" starttime="20170822 17:26:21.424"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170822 17:26:22.814" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170822 17:26:22.814" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170822 17:26:22.814" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170822 17:26:22.814" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170822 17:26:22.815" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170822 17:26:22.815" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055CBEB8&gt;</msg>
<status status="PASS" endtime="20170822 17:26:22.815" starttime="20170822 17:26:21.427"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170822 17:26:22.816" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055CBEB8&gt;</msg>
<status status="PASS" endtime="20170822 17:26:22.816" starttime="20170822 17:26:22.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170822 17:26:24.005" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055CBEB8&gt;</msg>
<msg timestamp="20170822 17:26:24.005" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170822 17:26:24.005" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170822 17:26:24.005" starttime="20170822 17:26:22.820"></status>
</kw>
<status status="PASS" endtime="20170822 17:26:24.005" starttime="20170822 17:26:22.816"></status>
</kw>
<status status="PASS" endtime="20170822 17:26:24.006" starttime="20170822 17:26:21.417"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170822 17:26:24.009" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055CBEB8&gt;.</msg>
<status status="PASS" endtime="20170822 17:26:24.009" starttime="20170822 17:26:24.006"></status>
</kw>
<status status="PASS" endtime="20170822 17:26:24.009" starttime="20170822 17:25:04.668"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:45.606" starttime="20170822 17:27:45.603"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170822 17:27:45.613" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170822 17:27:45.613" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055CBEB8&gt;</msg>
<status status="PASS" endtime="20170822 17:27:45.613" starttime="20170822 17:27:45.606"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:45.614" starttime="20170822 17:27:45.614"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:45.615" starttime="20170822 17:27:45.614"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:45.616" starttime="20170822 17:27:45.615"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:45.616" starttime="20170822 17:27:45.615"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:45.616" starttime="20170822 17:27:45.603"></status>
</kw>
<test id="s1-t1" name="FZHQ_RF_alarm_1906">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170822172502//ev_logs//D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170822 17:26:24.015" level="INFO">${timestamp} = 20170822172624</msg>
<status status="PASS" endtime="20170822 17:26:24.015" starttime="20170822 17:26:24.015"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170822 17:26:24.016" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170822 17:26:24.016" starttime="20170822 17:26:24.015"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170822 17:26:24.016" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170822 17:26:24.017" starttime="20170822 17:26:24.016"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170822 17:26:24.017" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170822 17:26:24.017" starttime="20170822 17:26:24.017"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170822 17:26:24.018" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504\FZHQ_RF_alarm_1906"&gt;D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504\FZHQ_RF_alarm_1906&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170822 17:26:24.018" starttime="20170822 17:26:24.017"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170822 17:26:24.019" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170822 17:26:24.019" starttime="20170822 17:26:24.018"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170822 17:26:24.019" starttime="20170822 17:26:24.019"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:26:24.021" starttime="20170822 17:26:24.021"></status>
</kw>
<msg timestamp="20170822 17:26:24.021" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170822 17:26:24.021" starttime="20170822 17:26:24.021"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:26:24.023" starttime="20170822 17:26:24.022"></status>
</kw>
<msg timestamp="20170822 17:26:24.023" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170822 17:26:24.023" starttime="20170822 17:26:24.022"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170822 17:26:24.026" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170822 17:26:24.026" starttime="20170822 17:26:24.023"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170822 17:26:24.027" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170822 17:26:24.027" starttime="20170822 17:26:24.026"></status>
</kw>
<status status="PASS" endtime="20170822 17:26:24.027" starttime="20170822 17:26:24.020"></status>
</kw>
<status status="PASS" endtime="20170822 17:26:24.027" starttime="20170822 17:26:24.014"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170822 17:26:24.029" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=40511 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmptypkbg --insecure</msg>
<msg timestamp="20170822 17:26:26.046" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170822 17:26:26.046" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170822 17:26:30.045" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170822 17:26:30.045" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170822 17:26:34.046" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170822 17:26:34.046" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170822 17:26:37.045" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170822 17:26:37.045" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 94512, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170822 17:26:44.208" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 94512, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170822 17:26:46.572" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 94512, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170822 17:26:46.572" starttime="20170822 17:26:24.027"></status>
</kw>
<status status="PASS" endtime="20170822 17:26:46.572" starttime="20170822 17:26:24.011"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<arguments>
<arg>alarm_start</arg>
</arguments>
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170822 17:26:46.844" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170822 17:26:46.844" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170822 17:26:46.844" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504\FZHQ_RF_alarm_1906" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170822 17:26:46.845" starttime="20170822 17:26:46.573"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170822 17:26:55.147" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170822 17:26:55.147" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170822 17:26:55.147" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170822 17:26:55.147" starttime="20170822 17:26:46.845"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170822 17:26:55.148" level="INFO">${case_execute_log_name} = alarm_start</msg>
<status status="PASS" endtime="20170822 17:26:55.148" starttime="20170822 17:26:55.147"></status>
</kw>
<status status="PASS" endtime="20170822 17:26:55.148" starttime="20170822 17:26:46.573"></status>
</kw>
<kw name="Get_RRU_IP" library="SISO1 Resource">
<assign>
<var>${RRU_IP}</var>
</assign>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>query=get list /MRBTS-1/RAT-1/BTS_L-1/EQM_L-1/RMOD_L-* is [serialNumber=${RRU_SERINUM}]</arg>
</arguments>
<assign>
<var>${rmode_info}</var>
</assign>
<msg timestamp="20170822 17:27:05.219" level="FAIL">InfoModelQueryTimeoutException: Query: 'get list /MRBTS-1/RAT-1/BTS_L-1/EQM_L-1/RMOD_L-* is [serialNumber=RY151105157]' doesn't pass in timeout=10.0. Matching objects not found.</msg>
<status status="FAIL" endtime="20170822 17:27:05.219" starttime="20170822 17:26:55.149"></status>
</kw>
<status status="FAIL" endtime="20170822 17:27:05.219" starttime="20170822 17:26:55.148"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170822 17:27:05.224" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055CBEB8&gt;.</msg>
<status status="PASS" endtime="20170822 17:27:05.224" starttime="20170822 17:27:05.220"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170822 17:27:05.628" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170822 17:27:05.628" starttime="20170822 17:27:05.224"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170822 17:27:05.839" starttime="20170822 17:27:05.629"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:05.840" starttime="20170822 17:27:05.840"></status>
</kw>
<msg timestamp="20170822 17:27:05.840" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170822 17:27:05.840" starttime="20170822 17:27:05.839"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170822 17:27:05.854" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170822172502\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170822172504\FZHQ_RF_alarm_1906\alarm_start' succeed .</msg>
<status status="PASS" endtime="20170822 17:27:05.854" starttime="20170822 17:27:05.844"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:05.854" starttime="20170822 17:27:05.841"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:05.854" starttime="20170822 17:27:05.840"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170822 17:27:06.454" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170822 17:27:06.454" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170822 17:27:06.454" starttime="20170822 17:27:05.858"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:06.454" starttime="20170822 17:27:05.855"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:06.454" starttime="20170822 17:27:05.854"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170822 17:27:06.705" level="INFO">Exit code: 1</msg>
<msg timestamp="20170822 17:27:06.705" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:40511
</msg>
<msg timestamp="20170822 17:27:06.705" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170822 17:27:06.709" starttime="20170822 17:27:06.455"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:06.711" starttime="20170822 17:27:06.710"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:06.711" starttime="20170822 17:27:06.710"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:06.712" starttime="20170822 17:27:06.712"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:06.713" starttime="20170822 17:27:06.712"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170822 17:27:06.719" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170822 17:27:06.719" starttime="20170822 17:27:06.713"></status>
</kw>
<msg timestamp="20170822 17:27:06.719" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170822 17:27:06.719" starttime="20170822 17:27:06.713"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:06.722" starttime="20170822 17:27:06.719"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:06.725" starttime="20170822 17:27:06.722"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170822 17:27:06.726" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170822 17:27:06.726" starttime="20170822 17:27:06.726"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:06.728" starttime="20170822 17:27:06.728"></status>
</kw>
<msg timestamp="20170822 17:27:06.728" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170822 17:27:06.728" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170822 17:27:06.728" starttime="20170822 17:27:06.727"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:06.731" starttime="20170822 17:27:06.729"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170822 17:27:10.753" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170822 17:27:10.753" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170822 17:27:10.754" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170822 17:27:10.754" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170822 17:27:10.754" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170822 17:27:10.754" starttime="20170822 17:27:06.732"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:10.754" starttime="20170822 17:27:06.727"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:10.755" starttime="20170822 17:27:10.755"></status>
</kw>
<msg timestamp="20170822 17:27:10.755" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170822 17:27:10.755" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170822 17:27:10.755" starttime="20170822 17:27:10.754"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:10.759" starttime="20170822 17:27:10.756"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170822 17:27:14.780" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170822 17:27:14.780" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170822 17:27:14.780" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170822 17:27:14.780" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170822 17:27:14.780" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170822 17:27:14.780" starttime="20170822 17:27:10.759"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:14.780" starttime="20170822 17:27:10.754"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170822 17:27:14.788" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170822 17:27:14.788" starttime="20170822 17:27:14.781"></status>
</kw>
<msg timestamp="20170822 17:27:14.788" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170822 17:27:14.788" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170822 17:27:14.788" starttime="20170822 17:27:14.781"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170822 17:27:14.791" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170822 17:27:14.791" starttime="20170822 17:27:14.788"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:14.791" starttime="20170822 17:27:14.781"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:14.791" starttime="20170822 17:27:06.727"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:14.791" starttime="20170822 17:27:06.727"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:14.792" starttime="20170822 17:27:14.792"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170822 17:27:14.795" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170822 17:27:14.795" starttime="20170822 17:27:14.792"></status>
</kw>
<status status="FAIL" endtime="20170822 17:27:14.796" starttime="20170822 17:27:06.711"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:14.796" starttime="20170822 17:27:06.711"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170822 17:27:14.803" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170822 17:27:14.803" starttime="20170822 17:27:14.797"></status>
</kw>
<msg timestamp="20170822 17:27:14.803" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170822 17:27:14.803" starttime="20170822 17:27:14.796"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:14.807" starttime="20170822 17:27:14.804"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170822 17:27:23.859" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170822 17:27:24.434" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170822 17:27:24.434" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170822 17:27:24.434" starttime="20170822 17:27:14.807"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170822 17:27:24.452" level="INFO">['fatal'] ['fatal']</msg>
<status status="PASS" endtime="20170822 17:27:24.452" starttime="20170822 17:27:24.435"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170822 17:27:24.454" level="FAIL">'FZHQ_RF_alarm_1906' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170822 17:27:24.454" starttime="20170822 17:27:24.453"></status>
</kw>
<msg timestamp="20170822 17:27:24.454" level="INFO">${return1} = ('FAIL', u"'FZHQ_RF_alarm_1906' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170822 17:27:24.454" starttime="20170822 17:27:24.453"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:24.458" starttime="20170822 17:27:24.455"></status>
</kw>
<msg timestamp="20170822 17:27:24.458" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170822 17:27:24.459" starttime="20170822 17:27:24.454"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:24.462" starttime="20170822 17:27:24.459"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:24.462" starttime="20170822 17:27:24.459"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:24.463" starttime="20170822 17:27:24.463"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:24.463" starttime="20170822 17:27:24.463"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:24.464" starttime="20170822 17:27:24.463"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170822 17:27:24.465" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170822 17:27:24.465" starttime="20170822 17:27:24.464"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:24.469" starttime="20170822 17:27:24.466"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:24.469" starttime="20170822 17:27:24.466"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:24.469" starttime="20170822 17:27:24.465"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:24.473" starttime="20170822 17:27:24.470"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:24.473" starttime="20170822 17:27:24.470"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:24.473" starttime="20170822 17:27:24.469"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:24.477" starttime="20170822 17:27:24.475"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:24.478" starttime="20170822 17:27:24.474"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:24.478" starttime="20170822 17:27:24.474"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170822 17:27:45.590" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[ssh_common.py@203] Last login: Tue Aug 22 17:25:47 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055D7968&gt;</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055D7968&gt;</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[ssh_common.py@203] Last login: Tue Aug 22 17:27:24 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055D7968&gt;</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170822 17:27:45.590" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055D7968&gt;</msg>
<msg timestamp="20170822 17:27:45.591" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170822 17:27:45.591" starttime="20170822 17:27:24.478"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:45.595" starttime="20170822 17:27:45.592"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:45.595" starttime="20170822 17:27:45.592"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:45.595" starttime="20170822 17:27:45.591"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170822 17:27:45.599" starttime="20170822 17:27:45.596"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:45.599" starttime="20170822 17:27:45.596"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:45.599" starttime="20170822 17:27:45.596"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:45.600" starttime="20170822 17:27:24.464"></status>
</kw>
<status status="PASS" endtime="20170822 17:27:45.600" starttime="20170822 17:27:05.220"></status>
</kw>
<tags>
<tag>owner-sue.nie@nokia.com</tag>
<tag>QC_720771</tag>
</tags>
<status status="FAIL" endtime="20170822 17:27:45.600" critical="yes" starttime="20170822 17:26:24.010">InfoModelQueryTimeoutException: Query: 'get list /MRBTS-1/RAT-1/BTS_L-1/EQM_L-1/RMOD_L-* is [serialNumber=RY151105157]' doesn't pass in timeout=10.0. Matching objects not found.</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170822 17:27:45.616" starttime="20170822 17:25:03.627"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-sue.nie@nokia.com</stat>
<stat fail="1" pass="0">QC_720771</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906" pass="0">FZHQ T1 RF module alarm without recovery action 1906</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170822 17:25:04.068" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170822 17:27:23.859" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
