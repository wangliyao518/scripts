<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170724 10:04:25.356" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\CRT\FZHQ_ASMI\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7.robot" id="s1" name="FZHQ T2 Throughput UDP 20M TM4 4X2 2 7">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170724095914//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170724 09:59:16.721" level="INFO">${timestamp} = 20170724095916</msg>
<status status="PASS" endtime="20170724 09:59:16.721" starttime="20170724 09:59:16.685"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170724 09:59:16.722" level="INFO">${FILE_NAME} = FZHQ T2 Throughput UDP 20M TM4 4X2 2 7</msg>
<status status="PASS" endtime="20170724 09:59:16.722" starttime="20170724 09:59:16.721"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170724 09:59:16.723" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ T2 Throughput UDP 20M TM4 4X2 2 7_20170724095916</msg>
<status status="PASS" endtime="20170724 09:59:16.723" starttime="20170724 09:59:16.722"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170724 09:59:16.723" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916</msg>
<status status="PASS" endtime="20170724 09:59:16.724" starttime="20170724 09:59:16.723"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170724 09:59:16.724" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916</msg>
<status status="PASS" endtime="20170724 09:59:16.724" starttime="20170724 09:59:16.724"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170724 09:59:16.725" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916"&gt;D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170724 09:59:16.726" starttime="20170724 09:59:16.725"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170724 09:59:16.726" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916</msg>
<status status="PASS" endtime="20170724 09:59:16.726" starttime="20170724 09:59:16.726"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170724 09:59:16.730" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170724 09:59:16.730" starttime="20170724 09:59:16.727"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170724 09:59:16.750" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170724 09:59:16.750" starttime="20170724 09:59:16.744"></status>
</kw>
<msg timestamp="20170724 09:59:16.750" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170724 09:59:16.750" starttime="20170724 09:59:16.744"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:59:16.751" starttime="20170724 09:59:16.751"></status>
</kw>
<msg timestamp="20170724 09:59:16.752" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170724 09:59:16.752" starttime="20170724 09:59:16.750"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:59:16.758" starttime="20170724 09:59:16.755"></status>
</kw>
<msg timestamp="20170724 09:59:16.758" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916</msg>
<status status="PASS" endtime="20170724 09:59:16.758" starttime="20170724 09:59:16.752"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170724 09:59:16.761" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916</msg>
<status status="PASS" endtime="20170724 09:59:16.761" starttime="20170724 09:59:16.758"></status>
</kw>
<status status="PASS" endtime="20170724 09:59:16.761" starttime="20170724 09:59:16.743"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170724 09:59:16.784" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170724 09:59:16.784" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170724 09:59:16.784" starttime="20170724 09:59:16.763"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:59:16.785" starttime="20170724 09:59:16.784"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170724 09:59:16.785" starttime="20170724 09:59:16.785"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:59:16.786" starttime="20170724 09:59:16.785"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170724 09:59:16.786" starttime="20170724 09:59:16.786"></status>
</kw>
<status status="PASS" endtime="20170724 09:59:16.786" starttime="20170724 09:59:16.762"></status>
</kw>
<status status="PASS" endtime="20170724 09:59:16.786" starttime="20170724 09:59:16.762"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:56:21 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05341E90&gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05341E90&gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:59:18 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9328&gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9328&gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:59:28 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05356F80&gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05356F80&gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:59:39 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9288&gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9288&gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:59:50 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9288&gt;</msg>
<msg timestamp="20170724 10:00:33.413" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170724 10:00:33.414" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:00:33.414" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053B9288&gt;</msg>
<msg timestamp="20170724 10:00:33.414" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170724 10:00:33.414" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170724 10:00:33.415" starttime="20170724 09:59:16.787"></status>
</kw>
<status status="PASS" endtime="20170724 10:00:33.415" starttime="20170724 09:59:16.787"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170724 10:00:33.416" starttime="20170724 10:00:33.415"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170724 10:00:33.417" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170724 10:00:33.417" starttime="20170724 10:00:33.416"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170724 10:00:33.421" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170724 10:00:33.421" starttime="20170724 10:00:33.417"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170724 10:00:33.424" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170724 10:00:33.424" starttime="20170724 10:00:33.421"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170724 10:00:33.428" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170724 10:00:33.428" starttime="20170724 10:00:33.424"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170724 10:00:34.889" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170724 10:00:34.889" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170724 10:00:34.889" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170724 10:00:34.889" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170724 10:00:34.889" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:00:34.889" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00&gt;</msg>
<status status="PASS" endtime="20170724 10:00:34.889" starttime="20170724 10:00:33.428"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170724 10:00:34.891" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00&gt;</msg>
<status status="PASS" endtime="20170724 10:00:34.891" starttime="20170724 10:00:34.890"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170724 10:00:36.116" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00&gt;</msg>
<msg timestamp="20170724 10:00:36.116" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170724 10:00:36.116" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170724 10:00:36.116" starttime="20170724 10:00:34.895"></status>
</kw>
<status status="PASS" endtime="20170724 10:00:36.116" starttime="20170724 10:00:34.891"></status>
</kw>
<status status="PASS" endtime="20170724 10:00:36.117" starttime="20170724 10:00:33.416"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170724 10:00:36.120" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00&gt;.</msg>
<status status="PASS" endtime="20170724 10:00:36.120" starttime="20170724 10:00:36.117"></status>
</kw>
<status status="PASS" endtime="20170724 10:00:36.120" starttime="20170724 09:59:16.685"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:04:18.640" starttime="20170724 10:04:18.637"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170724 10:04:18.652" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170724 10:04:18.652" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00&gt;</msg>
<msg timestamp="20170724 10:04:18.653" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170724 10:04:18.653" level="INFO">[telnet_common.py@189] Disconnect from 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<status status="PASS" endtime="20170724 10:04:18.653" starttime="20170724 10:04:18.640"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170724 10:04:18.654" starttime="20170724 10:04:18.654"></status>
</kw>
<status status="PASS" endtime="20170724 10:04:18.654" starttime="20170724 10:04:18.653"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:04:18.655" starttime="20170724 10:04:18.655"></status>
</kw>
<status status="PASS" endtime="20170724 10:04:18.655" starttime="20170724 10:04:18.654"></status>
</kw>
<status status="PASS" endtime="20170724 10:04:18.655" starttime="20170724 10:04:18.636"></status>
</kw>
<test id="s1-t1" name="FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170724095914//ev_logs//D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170724 10:00:36.127" level="INFO">${timestamp} = 20170724100036</msg>
<status status="PASS" endtime="20170724 10:00:36.127" starttime="20170724 10:00:36.127"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170724 10:00:36.128" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 10:00:36.128" starttime="20170724 10:00:36.128"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170724 10:00:36.129" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 10:00:36.129" starttime="20170724 10:00:36.129"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170724 10:00:36.130" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 10:00:36.130" starttime="20170724 10:00:36.129"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170724 10:00:36.131" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7"&gt;D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170724 10:00:36.131" starttime="20170724 10:00:36.130"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170724 10:00:36.131" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 10:00:36.131" starttime="20170724 10:00:36.131"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170724 10:00:36.132" starttime="20170724 10:00:36.132"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:00:36.134" starttime="20170724 10:00:36.133"></status>
</kw>
<msg timestamp="20170724 10:00:36.134" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170724 10:00:36.134" starttime="20170724 10:00:36.133"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:00:36.135" starttime="20170724 10:00:36.135"></status>
</kw>
<msg timestamp="20170724 10:00:36.135" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170724 10:00:36.135" starttime="20170724 10:00:36.134"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170724 10:00:36.139" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 10:00:36.139" starttime="20170724 10:00:36.135"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170724 10:00:36.139" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 10:00:36.139" starttime="20170724 10:00:36.139"></status>
</kw>
<status status="PASS" endtime="20170724 10:00:36.140" starttime="20170724 10:00:36.132"></status>
</kw>
<status status="PASS" endtime="20170724 10:00:36.140" starttime="20170724 10:00:36.127"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170724 10:00:36.141" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=39894 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpo8im1q --insecure</msg>
<msg timestamp="20170724 10:00:38.166" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 10:00:38.166" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 10:00:42.229" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 10:00:42.229" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 10:00:46.229" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 10:00:46.229" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 10:00:50.230" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 10:00:50.247" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 10:00:54.247" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 10:00:54.247" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 10:00:57.246" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170724 10:00:57.252" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 16429, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170724 10:01:04.865" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 16429, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170724 10:01:07.461" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 16429, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170724 10:01:07.461" starttime="20170724 10:00:36.140"></status>
</kw>
<status status="PASS" endtime="20170724 10:01:07.461" starttime="20170724 10:00:36.121"></status>
</kw>
<kw name="_Ue Attach And Tput Check">
<arguments>
<arg>2</arg>
<arg>${earfcn_b}</arg>
</arguments>
<kw name="UE_Attach_SISO1" library="SISO1 Resource">
<doc>Example</doc>
<arguments>
<arg>${cellid}</arg>
<arg>attach_earfcn=${earfcn}</arg>
<arg>detach_ue=NO</arg>
</arguments>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${cell_id}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{cell_list}</var>
</assign>
<msg timestamp="20170724 10:01:07.469" level="INFO">@{cell_list} = [ 2 ]</msg>
<status status="PASS" endtime="20170724 10:01:07.469" starttime="20170724 10:01:07.468"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${cell_list}</arg>
</arguments>
<assign>
<var>${cell_list_length}</var>
</assign>
<msg timestamp="20170724 10:01:07.470" level="INFO">Length is 1</msg>
<msg timestamp="20170724 10:01:07.470" level="INFO">${cell_list_length} = 1</msg>
<status status="PASS" endtime="20170724 10:01:07.470" starttime="20170724 10:01:07.469"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Split String</arg>
<arg>${attach_earfcn}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${earfcn_list1}</var>
</assign>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${attach_earfcn}</arg>
<arg>:</arg>
</arguments>
<status status="PASS" endtime="20170724 10:01:07.476" starttime="20170724 10:01:07.476"></status>
</kw>
<msg timestamp="20170724 10:01:07.476" level="INFO">${earfcn_list1} = [u'40940']</msg>
<status status="PASS" endtime="20170724 10:01:07.476" starttime="20170724 10:01:07.471"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Change_Earfcn_To_Freqency</arg>
<arg>${earfcn_list1}</arg>
</arguments>
<assign>
<var>${freqency_list1}</var>
<var>${band_list1}</var>
</assign>
<kw name="Change_Earfcn_To_Freqency" library="SISO1 Resource">
<arguments>
<arg>${earfcn_list1}</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${freqency_list}</var>
</assign>
<msg timestamp="20170724 10:01:07.481" level="INFO">${freqency_list} = []</msg>
<status status="PASS" endtime="20170724 10:01:07.481" starttime="20170724 10:01:07.481"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${band_list}</var>
</assign>
<msg timestamp="20170724 10:01:07.481" level="INFO">${band_list} = []</msg>
<status status="PASS" endtime="20170724 10:01:07.481" starttime="20170724 10:01:07.481"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_OFFSET}</arg>
</arguments>
<assign>
<var>${offset_dict}</var>
</assign>
<msg timestamp="20170724 10:01:07.482" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170724 10:01:07.484" level="INFO">${offset_dict} = {u'38': u'1205', u'40': u'1565', u'39': u'1945', u'41': u'1469', u'42': u'759', u'43': u'759', u'37': u'1845', u'36': u'1765', u'35': u'1785', u'34': u'1610', u'33': u'1700'}</msg>
<status status="PASS" endtime="20170724 10:01:07.484" starttime="20170724 10:01:07.482"></status>
</kw>
<kw type="for" name="${index} IN [ @{earfcn_list} ]">
<kw type="foritem" name="${index} = 40940">
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170724 10:01:07.485" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170724 10:01:07.486" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170724 10:01:07.486" starttime="20170724 10:01:07.485"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170724 10:01:07.487" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170724 10:01:07.487" starttime="20170724 10:01:07.487"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170724 10:01:07.488" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170724 10:01:07.488" starttime="20170724 10:01:07.488"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170724 10:01:07.492" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170724 10:01:07.492" starttime="20170724 10:01:07.488"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:01:07.492" starttime="20170724 10:01:07.492"></status>
</kw>
<status status="PASS" endtime="20170724 10:01:07.492" starttime="20170724 10:01:07.487"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170724 10:01:07.493" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170724 10:01:07.493" starttime="20170724 10:01:07.492"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170724 10:01:07.496" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170724 10:01:07.497" starttime="20170724 10:01:07.493"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:01:07.497" starttime="20170724 10:01:07.497"></status>
</kw>
<status status="PASS" endtime="20170724 10:01:07.497" starttime="20170724 10:01:07.492"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170724 10:01:07.498" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170724 10:01:07.498" starttime="20170724 10:01:07.497"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170724 10:01:07.502" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170724 10:01:07.502" starttime="20170724 10:01:07.498"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:01:07.502" starttime="20170724 10:01:07.502"></status>
</kw>
<status status="PASS" endtime="20170724 10:01:07.502" starttime="20170724 10:01:07.497"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170724 10:01:07.503" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170724 10:01:07.503" starttime="20170724 10:01:07.502"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170724 10:01:07.506" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170724 10:01:07.507" starttime="20170724 10:01:07.503"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170724 10:01:07.507" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170724 10:01:07.507" starttime="20170724 10:01:07.507"></status>
</kw>
<status status="PASS" endtime="20170724 10:01:07.507" starttime="20170724 10:01:07.502"></status>
</kw>
<status status="PASS" endtime="20170724 10:01:07.507" starttime="20170724 10:01:07.487"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170724 10:01:07.510" starttime="20170724 10:01:07.508"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170724 10:01:07.513" level="INFO">${bts_band} = 41</msg>
<status status="PASS" endtime="20170724 10:01:07.513" starttime="20170724 10:01:07.511"></status>
</kw>
<msg timestamp="20170724 10:01:07.514" level="INFO">${attach_band} = 41</msg>
<status status="PASS" endtime="20170724 10:01:07.514" starttime="20170724 10:01:07.484"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170724 10:01:07.514" level="INFO">${attach_band} = 41</msg>
<status status="PASS" endtime="20170724 10:01:07.514" starttime="20170724 10:01:07.514"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:01:07.515" starttime="20170724 10:01:07.515"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170724 10:01:07.516" level="INFO">${offset} = 1469</msg>
<status status="PASS" endtime="20170724 10:01:07.516" starttime="20170724 10:01:07.515"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170724 10:01:07.519" level="INFO">${freq} = 26250.0</msg>
<status status="PASS" endtime="20170724 10:01:07.519" starttime="20170724 10:01:07.516"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170724 10:01:07.520" level="INFO">${fq} = 26250</msg>
<status status="PASS" endtime="20170724 10:01:07.520" starttime="20170724 10:01:07.519"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170724 10:01:07.520" level="INFO">${freqency} = 26250</msg>
<status status="PASS" endtime="20170724 10:01:07.520" starttime="20170724 10:01:07.520"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:01:07.521" starttime="20170724 10:01:07.521"></status>
</kw>
<status status="PASS" endtime="20170724 10:01:07.521" starttime="20170724 10:01:07.484"></status>
</kw>
<status status="PASS" endtime="20170724 10:01:07.521" starttime="20170724 10:01:07.484"></status>
</kw>
<status status="PASS" endtime="20170724 10:01:07.521" starttime="20170724 10:01:07.480"></status>
</kw>
<msg timestamp="20170724 10:01:07.521" level="INFO">${freqency_list1} = [u'26250']</msg>
<msg timestamp="20170724 10:01:07.521" level="INFO">${band_list1} = [u'41']</msg>
<status status="PASS" endtime="20170724 10:01:07.521" starttime="20170724 10:01:07.477"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Get_Earfcn_From_Infomodel</arg>
</arguments>
<assign>
<var>${earfcn_list2}</var>
<var>${freqency_list2}</var>
<var>${band_list2}</var>
</assign>
<msg timestamp="20170724 10:01:07.525" level="INFO">${earfcn_list2} = None</msg>
<msg timestamp="20170724 10:01:07.525" level="INFO">${freqency_list2} = None</msg>
<msg timestamp="20170724 10:01:07.525" level="INFO">${band_list2} = None</msg>
<status status="PASS" endtime="20170724 10:01:07.525" starttime="20170724 10:01:07.522"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${earfcn_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<assign>
<var>${earfcn_list}</var>
</assign>
<msg timestamp="20170724 10:01:07.528" level="INFO">${earfcn_list} = [u'40940']</msg>
<status status="PASS" endtime="20170724 10:01:07.528" starttime="20170724 10:01:07.525"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${freqency_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<assign>
<var>${freqency_list}</var>
</assign>
<msg timestamp="20170724 10:01:07.532" level="INFO">${freqency_list} = [u'26250']</msg>
<status status="PASS" endtime="20170724 10:01:07.532" starttime="20170724 10:01:07.529"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${band_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<assign>
<var>${band_list}</var>
</assign>
<msg timestamp="20170724 10:01:07.535" level="INFO">${band_list} = [u'41']</msg>
<status status="PASS" endtime="20170724 10:01:07.535" starttime="20170724 10:01:07.532"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${cell_index1}</var>
</assign>
<msg timestamp="20170724 10:01:07.536" level="INFO">${cell_index1} = 0</msg>
<status status="PASS" endtime="20170724 10:01:07.536" starttime="20170724 10:01:07.535"></status>
</kw>
<kw type="for" name="${cell_index2} IN [ @{cell_list} ]">
<kw type="foritem" name="${cell_index2} = 2">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Evaluate</arg>
<arg>${cell_index1}</arg>
<arg>ELSE</arg>
<arg>Evaluate</arg>
<arg>${cell_index2}-1</arg>
</arguments>
<assign>
<var>${cell_index}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${cell_index1}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:01:07.542" starttime="20170724 10:01:07.539"></status>
</kw>
<msg timestamp="20170724 10:01:07.543" level="INFO">${cell_index} = 0</msg>
<status status="PASS" endtime="20170724 10:01:07.543" starttime="20170724 10:01:07.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='CPE'</arg>
<arg>Run Keyword If</arg>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<status status="PASS" endtime="20170724 10:01:07.549" starttime="20170724 10:01:07.546"></status>
</kw>
<status status="PASS" endtime="20170724 10:01:07.549" starttime="20170724 10:01:07.543"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='CPE'</arg>
<arg>CPE_Attach_SISO1_src</arg>
<arg>${earfcn_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${band_list[${cell_index}]}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:01:07.552" starttime="20170724 10:01:07.549"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='TM500'</arg>
<arg>TM500_Attach_SISO1_src</arg>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="TM500_Attach_SISO1_src" library="SISO1 Resource">
<arguments>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="Tm500 Setup" library="tdd_ev_robotws">
<doc>tm500 setup.</doc>
<msg timestamp="20170724 10:01:09.664" level="INFO">${TM500_PC_CONNECTION} = 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[robot_func.py@29] Can't get variable '${TM500_PC_CONNECTION}' ! details: 'Variable '${TM500_PC_CONNECTION}' not found.'</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;.</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',tdd_ev_robotws.__version__"</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',tdd_ev_robotws.__version__"
*SEP* 1.0.1

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@276] Execute command: "D:\TA\trunk_soam\tdd_ev_robotws\tools\psexec.exe" -i -d python "D:\TA\trunk_soam\tdd_ev_robotws\tools\robotremoteserver.py"  -l tdd_ev_robotws -i 0.0.0.0 -p 8277 -s True</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[telnet_common.py@306] Get Response: "D:\TA\trunk_soam\tdd_ev_robotws\tools\psexec.exe" -i -d python "D:\TA\trunk_soam\tdd_ev_robotws\tools\robotremoteserver.py"  -l tdd_ev_robotws -i 0.0.0.0 -p 8277 -s True

PsExec v1.98 - Execute processes remotely
Copyright (C) 2001-2010 Mark Russinovich
Sysinternals - www.sysinternals.com

python started with process ID 5860.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[process_control.py@74] Process start successed ! process id: 5860</msg>
<msg timestamp="20170724 10:02:36.853" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[remote_lib_control.py@62] start remote server succeed !</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@108] have setup Remotelib instance: RemoteLibInstance: 10.69.71.199:8277</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@408] Request TM500 Resource:
sent -&gt; "request:15:1"
received &lt;- "Welcome! Please use it, You are No.1 in 1 user queue.

"</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@412] Get TM500 resource success!</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;.</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@276] Execute command: ls "C:\Program Files\FileZilla Server"</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@306] Get Response: ls "C:\Program Files\FileZilla Server"
ls: cannot access 'C:\Program Files\FileZilla Server': No such file or directory

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00&gt;.</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[file_control.py@332] copyfile2local command: 'D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FileZilla server.xml"'</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:10 minutes &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@276] Execute command: D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FileZilla server.xml"</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@306] Get Response: D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FileZilla server.xml"

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@276] Execute command: echo ERRORCODE is: %ERRORLEVEL%</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@306] Get Response: echo ERRORCODE is: %ERRORLEVEL%
ERRORCODE is: 0

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[file_common.py@168] Copy file "D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FileZilla server.xml" to "D:\TA\TA_logs\TestLog_20170724095914\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095916\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FileZilla server.xml.change_bak" succeeded.</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[filezilla_control.py@182] Filezilla configed right, no need to change TM500 version.</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;.</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$CLOSE</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1736] TM500 command reply: C: CLOSE 0x00 ok.</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@276] Execute command: TASKKILL /F /T /IM TmaApplication.exe</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@306] Get Response: TASKKILL /F /T /IM TmaApplication.exe
ERROR: The process "TmaApplication.exe" not found.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@278] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@276] Execute command: "D:\TA\trunk_soam\tdd_ev_robotws\tools\Server_Client\client.exe" localhost "C:\Program Files (x86)\Aeroflex\TM500\LTE - LSC 1.2.0\Test Mobile Application\TmaApplication.exe" /u \"Default User\" /c y /p 5003 /a n</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@276] Execute command: Ctrl-C</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[telnet_common.py@306] Get Response: Server Keep Alive Message Interval is [12 bytes]: '3'
Keep Alive Message from Server Received [3 bytes]: '(be 0 3)' 
^C
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0546AFA8&gt;</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@591] Prev msg:</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DISCONNECT</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1736] TM500 command reply: C: DISCONNECT 0x00 OK</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$CONNECT</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1736] TM500 command reply: C: CONNECT 0x00 ok. Waiting for User to Configure Test Mobile</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: GSTS</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1736] TM500 command reply: C: GSTS 0x00 Ok Reset</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: ABOT 0 0 1</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1736] TM500 command reply: C: ABOT 0x00 Ok 0x0000001e</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: SELR 0 0 RC1 COMBINED</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1736] TM500 command reply: C: SELR 0x00 Ok</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: EREF 0 0 0</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1736] TM500 command reply: C: EREF 0x00 Ok</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: GETR</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1736] TM500 command reply: C: GETR 0x00 Ok 
Radio cards
==============
*  Card   : UMBRA2 LTE (20MHz)
   Slot   : RC1
   Chassis: 0
   Context: 0
   RF     : type 200
   A:  DL : 400.0 - 4000.0 MHz
       UL : 400.0 - 4000.0 MHz
   B:  DL : 0.0 - 0.0 MHz
       UL : 0.0 - 0.0 MHz
==============
   Card   : UMBRA2 LTE (20MHz)
   Slot   : RC2
   Chassis: 0
   Context: -
   RF     : type 17
   A:  DL : 2110.0 - 2170.0 MHz
       UL : 1920.0 - 1980.0 MHz
   B:  DL : 1880.0 - 1920.0 MHz
       UL : 1880.0 - 1920.0 MHz</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: SCFG NAS_MODE</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1736] TM500 command reply: C: SCFG 0x00 Ok NAS_MODE</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: STRT</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1736] TM500 command reply: C: STRT 0x00 Ok</msg>
<msg timestamp="20170724 10:02:36.854" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DATA_LOG_FOLDER 1 "C:\TM500_log\"</msg>
<msg timestamp="20170724 10:02:36.855" level="INFO">[tm500.py@1736] TM500 command reply: C: DATA_LOG_FOLDER 0x00 ok.</msg>
<msg timestamp="20170724 10:02:36.855" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DATA_LOG_OPTIONS 0 1 0</msg>
<msg timestamp="20170724 10:02:36.855" level="INFO">[tm500.py@1736] TM500 command reply: C: DATA_LOG_OPTIONS 0x00 ok.</msg>
<status status="PASS" endtime="20170724 10:02:36.857" starttime="20170724 10:01:07.557"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Use_Tag}</arg>
<arg>used</arg>
</arguments>
<msg timestamp="20170724 10:02:36.861" level="INFO">${TM500_Use_Tag} = used</msg>
<status status="PASS" endtime="20170724 10:02:36.861" starttime="20170724 10:02:36.858"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${cell_id}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170724 10:02:40.962" level="INFO">$TA,C,080A*</msg>
<msg timestamp="20170724 10:02:40.962" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,080A*', Receive&lt;-'$TA,C,080A*'</msg>
<msg timestamp="20170724 10:02:40.962" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,080A*'
$TA,C,160A*</msg>
<msg timestamp="20170724 10:02:40.962" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,160A*', Receive&lt;-'$TA,C,160A*'</msg>
<msg timestamp="20170724 10:02:40.962" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,160A*'</msg>
<status status="PASS" endtime="20170724 10:02:40.962" starttime="20170724 10:02:36.862"></status>
</kw>
<kw name="Tm500 Configure Logging" library="tdd_ev_robotws">
<doc>This keyword selects TM500's logging items.</doc>
<arguments>
<arg>${ue_log_types}</arg>
</arguments>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: GVER</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: GVER 0x00 Ok 
 PPC-0:
    BSP: 2.0/q/R13
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-0: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-1: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-2: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-3: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-4: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-5: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-6: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-7: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-8: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x101C
 DSP-9: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-10: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-11: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-12: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x208A
 DSP-13: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-14: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-15: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 Version Label: LSC_1_2_0_REV01
 UMBRA-0
    API: 19.2.1  Product: 3
    APP: 1.0.170  Built: Jun 20 2016 14:03:54
    CON: 3.5.3  Build: 0
    SIG: 2.1.1  Build: 46
    MMC: 1.7
    Carrier:  Loc: 13  PCB: 3.0 (OWI: 3.0)  SN: 0x9A000001D5F93823  BarCode: 20-1435-1360070-2517
    MOD TX: 0.0.17  Build: 16  Type: 200  PCB: 3.0 (OWI: 3.0)  SN: 0x6700000167952823  BarCode: 00000044830737250112
    MOD RX: 0.0.31  Build: 34  PCB: 3.0</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@507] TM500 command line response of "GVER":
C: GVER 0x00 Ok 
 PPC-0:
    BSP: 2.0/q/R13
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-0: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-1: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-2: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-3: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-4: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-5: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-6: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-7: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-8: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x101C
 DSP-9: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-10: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-11: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-12: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x208A
 DSP-13: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-14: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-15: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 Version Label: LSC_1_2_0_REV01
 UMBRA-0
    API: 19.2.1  Product: 3
    APP: 1.0.170  Built: Jun 20 2016 14:03:54
    CON: 3.5.3  Build: 0
    SIG: 2.1.1  Build: 46
    MMC: 1.7
    Carrier:  Loc: 13  PCB: 3.0 (OWI: 3.0)  SN: 0x9A000001D5F93823  BarCode: 20-1435-1360070-2517
    MOD TX: 0.0.17  Build: 16  Type: 200  PCB: 3.0 (OWI: 3.0)  SN: 0x6700000167952823  BarCode: 00000044830737250112
    MOD RX: 0.0.31  Build: 34  PCB: 3.0</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CLEAR_ALL</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CLEAR_ALL 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_ITM 1 1 1 Manual</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_ITM 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 100 0 0 0 UEOVERVIEW</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 1 0 0 0 ProtocolLog</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 CQIREPORTING #Subband 0-24 2</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 262 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 263 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 264 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 100 0 0 0 L1RBPOWERS #Component_Carrier 0,1 0</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 200 0 0 0 L1CELLWATCH</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLSCHRX</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLHARQRX</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 ULHARQTX</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 ULSRS</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLL1L2CONTROL</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 100 0 0 0 L1DLRSPOWER #Radio_Context_ID 0,1 0</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_ITM 0 0 0 Automatic</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_ITM 0x00 ok.</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_END</msg>
<msg timestamp="20170724 10:02:43.424" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_END 0x00 ok.</msg>
<status status="PASS" endtime="20170724 10:02:43.425" starttime="20170724 10:02:40.963"></status>
</kw>
<kw name="Tm500 Start Logging" library="tdd_ev_robotws">
<doc>This keyword starts TM500's logging.</doc>
<msg timestamp="20170724 10:02:44.199" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$START_LOGGING</msg>
<msg timestamp="20170724 10:02:44.199" level="INFO">[tm500.py@1736] TM500 command reply: I: TMAE 0x0 Information - Connecting to Protocol logging port 25699</msg>
<msg timestamp="20170724 10:02:44.199" level="INFO">[tm500.py@1352] TM500 command line response of "START LOGGING":
I: TMAE 0x0 Information - Connecting to Protocol logging port 25699
C: START_LOGGING 0x00 OK. Current logging folder is 'C:\TM500_LOG\/170724_100335_session/170724_100343'</msg>
<msg timestamp="20170724 10:02:44.199" level="INFO">[tm500.py@1363] C:\TM500_LOG\170724_100335_session\170724_100343</msg>
<status status="PASS" endtime="20170724 10:02:44.199" starttime="20170724 10:02:43.426"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${modify_tm500_script}</arg>
</arguments>
<assign>
<var>${modify_tm500_script}</var>
</assign>
<msg timestamp="20170724 10:02:44.200" level="INFO">${modify_tm500_script} = []</msg>
<status status="PASS" endtime="20170724 10:02:44.200" starttime="20170724 10:02:44.199"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${modify_tm500_script}</arg>
<arg>forw mte RrcAptConfigCellSelection: ${attach_freqency}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:02:44.200" starttime="20170724 10:02:44.200"></status>
</kw>
<kw name="Tm500 Attach" library="tdd_ev_robotws">
<doc>This keyword does UE attach operation of TM500.</doc>
<arguments>
<arg>${attach_scripts}</arg>
<arg>${modify_tm500_script}</arg>
</arguments>
<assign>
<var>${tm500_attach_result}</var>
</assign>
<msg timestamp="20170724 10:03:04.648" level="INFO">[file_common.py@125] Write file "D:\TA\BTS797\modified_attach_MIMO.txt" succeeded</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE RRCAPTOVERRIDEBANDSUPPORT 5{42 [1 34000 41590 2000 34000 41590 2000] [],41 [1 24960 39650 1940 24960 39650 1940] [],43 [1 36000 43590 2000 36000 43590 2000] [],40 [1 23000 38650 1000 23000 38650 1000] [],39 [1 18800 38250 400 18800 38250 400] []}</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE RRCAPTOVERRIDEBANDSUPPORT: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE ACTIVATE -1</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE ACTIVATE CNF: RETURN CODE:0</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE PHYSETRATTYPE 1</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: I: CMPI MTE 0 ACTIVATE IND: RETURN CODE:0

C: FORW 0x00 Ok MTE PHYSETRATTYPE: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE PHYSETTDDCFG 2 7</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE PHYSETTDDCFG: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: SETP RRC_NUM_DL_ANTENNAS 4</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: SETP 0x00 Ok RRC_NUM_DL_ANTENNAS 0x00000004</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE PHYCONFIGSYSCAP 2 4 4</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE PHYCONFIGSYSCAP: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE USIMCONFIG 1([262030020000525 2] [] [] [] []) [] [] [A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5] [CDC202D5123E20F62B6D676AC72CB318 00000000000000000000000000000000 00000000000000000000000000000001 00000000000000000000000000000002 00000000000000000000000000000004 00000000000000000000000000000008 64 0 32 64 96 []] [] []</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE USIMCONFIG: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE RRCAPTCONFIGCELLSELECTION 26250</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE RRCAPTCONFIGCELLSELECTION: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE NASAPTCONFIGCAPABILITY [] [224] [224]</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE NASAPTCONFIGCAPABILITY: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE NASCONFIGEMMREGISTER 0(0 [0] [] [1] [] [] [] [] [])</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE NASCONFIGEMMREGISTER: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE NASAPTCONFIGPLMNSELECTION 26203</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE NASAPTCONFIGPLMNSELECTION: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE ACTIVATE -1</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE ACTIVATE CNF: RETURN CODE:0</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1632] C: FORW 0x00 Ok MTE ACTIVATE CNF: RETURN CODE:0</msg>
<msg timestamp="20170724 10:03:04.648" level="INFO">[tm500.py@1673] TM500 command line received data:</msg>
<msg timestamp="20170724 10:03:04.649" level="FAIL">TM500 command line does not meet "['L2 RANDOM ACCESS COMPLETE', 'ACCESS POINT NAME']"during 10.0</msg>
<status status="FAIL" endtime="20170724 10:03:04.650" starttime="20170724 10:02:44.201"></status>
</kw>
<status status="FAIL" endtime="20170724 10:03:04.650" starttime="20170724 10:01:07.556"></status>
</kw>
<status status="FAIL" endtime="20170724 10:03:04.650" starttime="20170724 10:01:07.553"></status>
</kw>
<status status="FAIL" endtime="20170724 10:03:04.650" starttime="20170724 10:01:07.536"></status>
</kw>
<status status="FAIL" endtime="20170724 10:03:04.650" starttime="20170724 10:01:07.536"></status>
</kw>
<status status="FAIL" endtime="20170724 10:03:04.650" starttime="20170724 10:01:07.467"></status>
</kw>
<status status="FAIL" endtime="20170724 10:03:04.650" starttime="20170724 10:01:07.462"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170724 10:03:04.655" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05412D00&gt;.</msg>
<status status="PASS" endtime="20170724 10:03:04.655" starttime="20170724 10:03:04.652"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170724 10:03:06.418" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170724 10:03:06.419" starttime="20170724 10:03:04.655"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20170724 10:03:06.468" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<status status="PASS" endtime="20170724 10:03:06.468" starttime="20170724 10:03:06.419"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170724 10:03:06.475" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20170724 10:03:06.475" starttime="20170724 10:03:06.469"></status>
</kw>
<msg timestamp="20170724 10:03:06.475" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20170724 10:03:06.475" starttime="20170724 10:03:06.469"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:06.479" starttime="20170724 10:03:06.476"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:06.479" starttime="20170724 10:03:06.476"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:06.483" starttime="20170724 10:03:06.480"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:06.483" starttime="20170724 10:03:06.480"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170724 10:03:06.744" level="INFO">Exit code: 1</msg>
<msg timestamp="20170724 10:03:06.744" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:39894
</msg>
<msg timestamp="20170724 10:03:06.744" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170724 10:03:06.745" starttime="20170724 10:03:06.483"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:06.746" starttime="20170724 10:03:06.745"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:06.746" starttime="20170724 10:03:06.745"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:06.748" starttime="20170724 10:03:06.747"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:06.748" starttime="20170724 10:03:06.748"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170724 10:03:06.755" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170724 10:03:06.755" starttime="20170724 10:03:06.749"></status>
</kw>
<msg timestamp="20170724 10:03:06.755" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170724 10:03:06.755" starttime="20170724 10:03:06.748"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:06.759" starttime="20170724 10:03:06.755"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:06.762" starttime="20170724 10:03:06.759"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170724 10:03:30.850" level="INFO">[tm500.py@591] Prev msg: I: CMPI RRC UE Id:0: Cell Search Error: No cell found
I: CMPI RRC UE Id:0: Cell Search Config Error: No more frequencies left to try
I: CMPI MTE 0 EMM REGISTER IND:UE Id:0:RETURN CODE:6 FAILED
   Cause: NAS: Registration failure - NO SERVICE due to no cell

I: CMPI MTE 0 ACTIVATE IND: RETURN CODE:0

I: CMPI RRC UE Id:0: Cell Search Error: No cell found
I: CMPI RRC UE Id:0: Cell Search Config Error: No more frequencies left to try</msg>
<msg timestamp="20170724 10:03:30.850" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DISCONNECT</msg>
<msg timestamp="20170724 10:03:30.850" level="INFO">[tm500.py@1736] TM500 command reply: I: TMAE 0x1 Warning - Logging is being stopped automatically. Please wait for logging stopped message.
I: CMPI RRC UE Id:0: Cell Search Error: No cell found
I: CMPI RRC UE Id:0: Cell Search Config Error: No more frequencies left to try</msg>
<msg timestamp="20170724 10:03:30.850" level="INFO">[tm500.py@437] Release TM500 Resource:
sent -&gt; "release"
received &lt;- "Bye!"
Robot Framework remote server at 0.0.0.0:8277 stopping</msg>
<status status="PASS" endtime="20170724 10:03:30.850" starttime="20170724 10:03:06.762"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:30.853" starttime="20170724 10:03:30.852"></status>
</kw>
<msg timestamp="20170724 10:03:30.853" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170724 10:03:30.853" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170724 10:03:30.853" starttime="20170724 10:03:30.852"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:30.856" starttime="20170724 10:03:30.853"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170724 10:03:34.881" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170724 10:03:34.881" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170724 10:03:34.881" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170724 10:03:34.881" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170724 10:03:34.881" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170724 10:03:34.882" starttime="20170724 10:03:30.856"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:34.882" starttime="20170724 10:03:30.851"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:34.883" starttime="20170724 10:03:34.883"></status>
</kw>
<msg timestamp="20170724 10:03:34.883" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170724 10:03:34.883" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170724 10:03:34.883" starttime="20170724 10:03:34.882"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:34.887" starttime="20170724 10:03:34.884"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170724 10:03:38.911" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170724 10:03:38.911" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170724 10:03:38.911" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170724 10:03:38.911" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170724 10:03:38.911" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170724 10:03:38.912" starttime="20170724 10:03:34.887"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:38.912" starttime="20170724 10:03:34.882"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170724 10:03:38.920" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170724 10:03:38.920" starttime="20170724 10:03:38.913"></status>
</kw>
<msg timestamp="20170724 10:03:38.921" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170724 10:03:38.921" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170724 10:03:38.921" starttime="20170724 10:03:38.912"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170724 10:03:38.924" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170724 10:03:38.924" starttime="20170724 10:03:38.921"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:38.924" starttime="20170724 10:03:38.912"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:38.924" starttime="20170724 10:03:30.851"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:38.924" starttime="20170724 10:03:30.851"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:38.925" starttime="20170724 10:03:38.924"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170724 10:03:38.928" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170724 10:03:38.928" starttime="20170724 10:03:38.925"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:38.928" starttime="20170724 10:03:06.746"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:38.928" starttime="20170724 10:03:06.746"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170724 10:03:38.935" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170724 10:03:38.935" starttime="20170724 10:03:38.929"></status>
</kw>
<msg timestamp="20170724 10:03:38.935" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170724 10:03:38.935" starttime="20170724 10:03:38.928"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:38.938" starttime="20170724 10:03:38.935"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170724 10:03:56.887" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170724 10:03:57.475" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170724 10:03:57.476" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170724 10:03:57.476" starttime="20170724 10:03:38.939"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:57.477" starttime="20170724 10:03:57.476"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170724 10:03:57.478" level="FAIL">'FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170724 10:03:57.478" starttime="20170724 10:03:57.478"></status>
</kw>
<msg timestamp="20170724 10:03:57.478" level="INFO">${return1} = ('FAIL', u"'FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170724 10:03:57.478" starttime="20170724 10:03:57.477"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:57.482" starttime="20170724 10:03:57.479"></status>
</kw>
<msg timestamp="20170724 10:03:57.482" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170724 10:03:57.482" starttime="20170724 10:03:57.479"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:57.486" starttime="20170724 10:03:57.483"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:57.486" starttime="20170724 10:03:57.482"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:57.486" starttime="20170724 10:03:57.486"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:57.487" starttime="20170724 10:03:57.487"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:57.487" starttime="20170724 10:03:57.487"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170724 10:03:57.489" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170724 10:03:57.489" starttime="20170724 10:03:57.488"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:57.493" starttime="20170724 10:03:57.490"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:57.493" starttime="20170724 10:03:57.489"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:57.493" starttime="20170724 10:03:57.489"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:57.497" starttime="20170724 10:03:57.494"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:57.497" starttime="20170724 10:03:57.494"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:57.497" starttime="20170724 10:03:57.493"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170724 10:03:57.501" starttime="20170724 10:03:57.498"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:57.501" starttime="20170724 10:03:57.498"></status>
</kw>
<status status="PASS" endtime="20170724 10:03:57.501" starttime="20170724 10:03:57.497"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170724 10:04:18.622" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 10:04:18.622" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 10:02:37 CST 2017 from 10.69.80.114 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:04:18.622" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054266E8&gt;</msg>
<msg timestamp="20170724 10:04:18.623" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170724 10:04:18.623" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:04:18.623" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054266E8&gt;</msg>
<msg timestamp="20170724 10:04:18.623" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 10:04:18.623" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 10:03:58 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 10:04:18.623" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0472DE90&gt;</msg>
<msg timestamp="20170724 10:04:18.623" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170724 10:04:18.623" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170724 10:04:18.623" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0472DE90&gt;</msg>
<msg timestamp="20170724 10:04:18.623" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170724 10:04:18.623" starttime="20170724 10:03:57.501"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170724 10:04:18.628" starttime="20170724 10:04:18.625"></status>
</kw>
<status status="PASS" endtime="20170724 10:04:18.628" starttime="20170724 10:04:18.624"></status>
</kw>
<status status="PASS" endtime="20170724 10:04:18.628" starttime="20170724 10:04:18.624"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170724 10:04:18.633" starttime="20170724 10:04:18.630"></status>
</kw>
<status status="PASS" endtime="20170724 10:04:18.633" starttime="20170724 10:04:18.629"></status>
</kw>
<status status="PASS" endtime="20170724 10:04:18.633" starttime="20170724 10:04:18.629"></status>
</kw>
<status status="PASS" endtime="20170724 10:04:18.633" starttime="20170724 10:03:57.488"></status>
</kw>
<status status="PASS" endtime="20170724 10:04:18.634" starttime="20170724 10:03:04.651"></status>
</kw>
<tags>
<tag>owner-sue.nie@nokia.com</tag>
<tag>QC_720763</tag>
</tags>
<status status="FAIL" endtime="20170724 10:04:18.634" critical="yes" starttime="20170724 10:00:36.120">TM500 command line does not meet "['L2 RANDOM ACCESS COMPLETE', 'ACCESS POINT NAME']"during 10.0</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170724 10:04:18.656" starttime="20170724 09:59:15.659"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-sue.nie@nokia.com</stat>
<stat fail="1" pass="0">QC_720763</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T2 Throughput UDP 20M TM4 4X2 2 7" pass="0">FZHQ T2 Throughput UDP 20M TM4 4X2 2 7</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170724 09:59:16.072" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170724 10:01:07.482" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170724 10:01:07.485" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170724 10:03:56.887" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
