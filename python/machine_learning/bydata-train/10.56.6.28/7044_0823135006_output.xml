<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170823 13:50:06.933" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\VeCN\SISO1\CRT\FZHQ_ASMI\FZHQ_T1_RF_module_alarm_without_recovery_action_1906\FZHQ_T1_RF_module_alarm_without_recovery_action_1906.robot" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170823134207//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170823 13:42:09.423" level="INFO">${timestamp} = 20170823134209</msg>
<status status="PASS" endtime="20170823 13:42:09.423" starttime="20170823 13:42:09.388"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170823 13:42:09.424" level="INFO">${FILE_NAME} = FZHQ T1 RF module alarm without recovery action 19</msg>
<status status="PASS" endtime="20170823 13:42:09.424" starttime="20170823 13:42:09.423"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170823 13:42:09.425" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ T1 RF module alarm without recovery action 19_20170823134209</msg>
<status status="PASS" endtime="20170823 13:42:09.425" starttime="20170823 13:42:09.425"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170823 13:42:09.426" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209</msg>
<status status="PASS" endtime="20170823 13:42:09.426" starttime="20170823 13:42:09.425"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 13:42:09.426" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209</msg>
<status status="PASS" endtime="20170823 13:42:09.426" starttime="20170823 13:42:09.426"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 13:42:09.428" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209"&gt;D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 13:42:09.428" starttime="20170823 13:42:09.427"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170823 13:42:09.428" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209</msg>
<status status="PASS" endtime="20170823 13:42:09.428" starttime="20170823 13:42:09.428"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170823 13:42:09.433" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170823 13:42:09.433" starttime="20170823 13:42:09.429"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170823 13:42:09.454" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170823 13:42:09.455" starttime="20170823 13:42:09.447"></status>
</kw>
<msg timestamp="20170823 13:42:09.455" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170823 13:42:09.455" starttime="20170823 13:42:09.447"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:42:09.456" starttime="20170823 13:42:09.455"></status>
</kw>
<msg timestamp="20170823 13:42:09.456" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:42:09.456" starttime="20170823 13:42:09.455"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:42:09.464" starttime="20170823 13:42:09.459"></status>
</kw>
<msg timestamp="20170823 13:42:09.464" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209</msg>
<status status="PASS" endtime="20170823 13:42:09.464" starttime="20170823 13:42:09.456"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170823 13:42:09.467" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209</msg>
<status status="PASS" endtime="20170823 13:42:09.467" starttime="20170823 13:42:09.464"></status>
</kw>
<status status="PASS" endtime="20170823 13:42:09.467" starttime="20170823 13:42:09.446"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170823 13:42:09.490" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 13:42:09.490" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170823 13:42:09.490" starttime="20170823 13:42:09.468"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:42:09.490" starttime="20170823 13:42:09.490"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170823 13:42:09.491" starttime="20170823 13:42:09.491"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:42:09.492" starttime="20170823 13:42:09.491"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170823 13:42:09.492" starttime="20170823 13:42:09.492"></status>
</kw>
<status status="PASS" endtime="20170823 13:42:09.492" starttime="20170823 13:42:09.468"></status>
</kw>
<status status="PASS" endtime="20170823 13:42:09.492" starttime="20170823 13:42:09.468"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@203] root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0521FD00&gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0521FD00&gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:42:10 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052346C0&gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052346C0&gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:42:20 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052361E8&gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052361E8&gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:42:31 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05236198&gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05236198&gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:42:42 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05234710&gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05234710&gt;</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170823 13:43:26.121" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170823 13:43:26.123" starttime="20170823 13:42:09.493"></status>
</kw>
<status status="PASS" endtime="20170823 13:43:26.123" starttime="20170823 13:42:09.493"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170823 13:43:26.124" starttime="20170823 13:43:26.123"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170823 13:43:26.125" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170823 13:43:26.125" starttime="20170823 13:43:26.124"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170823 13:43:26.129" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170823 13:43:26.129" starttime="20170823 13:43:26.125"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170823 13:43:26.132" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170823 13:43:26.132" starttime="20170823 13:43:26.129"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170823 13:43:26.136" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170823 13:43:26.136" starttime="20170823 13:43:26.132"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170823 13:43:27.529" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170823 13:43:27.529" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170823 13:43:27.529" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170823 13:43:27.529" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170823 13:43:27.529" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170823 13:43:27.529" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05297F80&gt;</msg>
<status status="PASS" endtime="20170823 13:43:27.529" starttime="20170823 13:43:26.136"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 13:43:27.530" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05297F80&gt;</msg>
<status status="PASS" endtime="20170823 13:43:27.530" starttime="20170823 13:43:27.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170823 13:43:28.719" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05297F80&gt;</msg>
<msg timestamp="20170823 13:43:28.719" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170823 13:43:28.719" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170823 13:43:28.719" starttime="20170823 13:43:27.534"></status>
</kw>
<status status="PASS" endtime="20170823 13:43:28.719" starttime="20170823 13:43:27.530"></status>
</kw>
<status status="PASS" endtime="20170823 13:43:28.719" starttime="20170823 13:43:26.124"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 13:43:28.723" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05297F80&gt;.</msg>
<status status="PASS" endtime="20170823 13:43:28.723" starttime="20170823 13:43:28.720"></status>
</kw>
<status status="PASS" endtime="20170823 13:43:28.723" starttime="20170823 13:42:09.388"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:50:04.456" starttime="20170823 13:50:04.453"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170823 13:50:04.463" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170823 13:50:04.463" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05297F80&gt;</msg>
<status status="PASS" endtime="20170823 13:50:04.463" starttime="20170823 13:50:04.456"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170823 13:50:04.464" starttime="20170823 13:50:04.464"></status>
</kw>
<status status="PASS" endtime="20170823 13:50:04.464" starttime="20170823 13:50:04.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:50:04.465" starttime="20170823 13:50:04.465"></status>
</kw>
<status status="PASS" endtime="20170823 13:50:04.465" starttime="20170823 13:50:04.464"></status>
</kw>
<status status="PASS" endtime="20170823 13:50:04.465" starttime="20170823 13:50:04.452"></status>
</kw>
<test id="s1-t1" name="FZHQ_RF_alarm_1906">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170823134207//ev_logs//D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170823 13:43:28.729" level="INFO">${timestamp} = 20170823134328</msg>
<status status="PASS" endtime="20170823 13:43:28.729" starttime="20170823 13:43:28.728"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170823 13:43:28.730" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:43:28.730" starttime="20170823 13:43:28.729"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170823 13:43:28.730" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:43:28.730" starttime="20170823 13:43:28.730"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 13:43:28.731" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:43:28.731" starttime="20170823 13:43:28.731"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 13:43:28.732" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906"&gt;D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170823 13:43:28.732" starttime="20170823 13:43:28.731"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170823 13:43:28.732" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:43:28.733" starttime="20170823 13:43:28.732"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170823 13:43:28.733" starttime="20170823 13:43:28.733"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:43:28.735" starttime="20170823 13:43:28.735"></status>
</kw>
<msg timestamp="20170823 13:43:28.735" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:43:28.735" starttime="20170823 13:43:28.734"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:43:28.736" starttime="20170823 13:43:28.736"></status>
</kw>
<msg timestamp="20170823 13:43:28.736" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:43:28.736" starttime="20170823 13:43:28.735"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170823 13:43:28.740" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:43:28.740" starttime="20170823 13:43:28.737"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170823 13:43:28.741" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906</msg>
<status status="PASS" endtime="20170823 13:43:28.741" starttime="20170823 13:43:28.740"></status>
</kw>
<status status="PASS" endtime="20170823 13:43:28.741" starttime="20170823 13:43:28.734"></status>
</kw>
<status status="PASS" endtime="20170823 13:43:28.741" starttime="20170823 13:43:28.728"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170823 13:43:28.743" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=36396 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpexp5mm --insecure</msg>
<msg timestamp="20170823 13:43:30.809" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 13:43:30.809" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 13:43:34.808" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 13:43:34.808" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 13:43:38.808" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170823 13:43:38.808" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170823 13:43:41.808" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170823 13:43:41.808" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 22413, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170823 13:43:48.971" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 22413, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170823 13:43:51.784" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 22413, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170823 13:43:51.784" starttime="20170823 13:43:28.741"></status>
</kw>
<status status="PASS" endtime="20170823 13:43:51.784" starttime="20170823 13:43:28.724"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<arguments>
<arg>alarm_start</arg>
</arguments>
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170823 13:43:52.060" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170823 13:43:52.060" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170823 13:43:52.060" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170823 13:43:52.061" starttime="20170823 13:43:51.785"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170823 13:44:01.097" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170823 13:44:01.097" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170823 13:44:01.097" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170823 13:44:01.098" starttime="20170823 13:43:52.061"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170823 13:44:01.099" level="INFO">${case_execute_log_name} = alarm_start</msg>
<status status="PASS" endtime="20170823 13:44:01.099" starttime="20170823 13:44:01.098"></status>
</kw>
<status status="PASS" endtime="20170823 13:44:01.099" starttime="20170823 13:43:51.785"></status>
</kw>
<kw name="Get_RRU_IP" library="SISO1 Resource">
<assign>
<var>${RRU_IP}</var>
</assign>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>query=get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=${RRU_SERINUM}]</arg>
</arguments>
<assign>
<var>${rmode_info}</var>
</assign>
<msg timestamp="20170823 13:44:01.697" level="INFO">[infomodel_control.py@328] query infomodel: 'get list /MRBTS-1/RAT-1/BTS_L-*/EQM_L-1/RMOD_L-* is [serialNumber=RY151105157]' succeed .</msg>
<msg timestamp="20170823 13:44:01.697" level="INFO">${rmode_info} = [{u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': 'CPRI_RP1', u'routingDirectionCalculated': 'CCW', u'productCode': u'473106A.X11', u'filterIpAddress': u'1...</msg>
<status status="PASS" endtime="20170823 13:44:01.697" starttime="20170823 13:44:01.100"></status>
</kw>
<kw name="Should Not Be Empty" library="BuiltIn">
<doc>Verifies that the given item is not empty.</doc>
<arguments>
<arg>${rmode_info}</arg>
</arguments>
<msg timestamp="20170823 13:44:01.698" level="INFO">Length is 1</msg>
<status status="PASS" endtime="20170823 13:44:01.698" starttime="20170823 13:44:01.697"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>${rmode_info[0].ipAddress}</arg>
</arguments>
<msg timestamp="20170823 13:44:01.698" level="INFO">172.16.17.128</msg>
<status status="PASS" endtime="20170823 13:44:01.698" starttime="20170823 13:44:01.698"></status>
</kw>
<msg timestamp="20170823 13:44:01.699" level="INFO">${RRU_IP} = 172.16.17.128</msg>
<status status="PASS" endtime="20170823 13:44:01.699" starttime="20170823 13:44:01.099"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_trigger}</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20170823 13:44:12.138" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:44:12.138" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:42:52 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:44:12.138" starttime="20170823 13:44:01.700"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20170823 13:44:12.140" starttime="20170823 13:44:12.139"></status>
</kw>
<msg timestamp="20170823 13:44:12.140" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20170823 13:44:12.140" starttime="20170823 13:44:12.139"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20170823 13:44:12.273" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04FED5F8&gt;</msg>
<msg timestamp="20170823 13:44:12.273" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20170823 13:44:12.273" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:44:12.273" starttime="20170823 13:44:12.144"></status>
</kw>
<msg timestamp="20170823 13:44:12.274" level="INFO">${ret} = lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:44:12.274" starttime="20170823 13:44:12.140"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<status status="PASS" endtime="20170823 13:44:12.279" starttime="20170823 13:44:12.278"></status>
</kw>
<status status="PASS" endtime="20170823 13:44:12.279" starttime="20170823 13:44:12.278"></status>
</kw>
<msg timestamp="20170823 13:44:12.279" level="INFO">${ret1} = ('PASS', '0x2018')</msg>
<status status="PASS" endtime="20170823 13:44:12.279" starttime="20170823 13:44:12.274"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<msg timestamp="20170823 13:44:12.284" level="FAIL">'lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;' does not match '0x1018'</msg>
<status status="FAIL" endtime="20170823 13:44:12.284" starttime="20170823 13:44:12.283"></status>
</kw>
<status status="PASS" endtime="20170823 13:44:12.284" starttime="20170823 13:44:12.283"></status>
</kw>
<msg timestamp="20170823 13:44:12.284" level="INFO">${ret2} = ('FAIL', u"'lxc-ls --active\n0x2015\t0x2016\t0x2018\t0x201b\nroot@fctj-4a:~ &gt;' does not match '0x1018'")</msg>
<status status="PASS" endtime="20170823 13:44:12.284" starttime="20170823 13:44:12.279"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<msg timestamp="20170823 13:44:12.418" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04FED5F8&gt;</msg>
<msg timestamp="20170823 13:44:12.418" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x2018</msg>
<msg timestamp="20170823 13:44:12.418" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x2018
root@0x2018:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:44:12.419" starttime="20170823 13:44:12.291"></status>
</kw>
<status status="PASS" endtime="20170823 13:44:12.419" starttime="20170823 13:44:12.288"></status>
</kw>
<status status="PASS" endtime="20170823 13:44:12.419" starttime="20170823 13:44:12.285"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<status status="PASS" endtime="20170823 13:44:12.426" starttime="20170823 13:44:12.423"></status>
</kw>
<status status="PASS" endtime="20170823 13:44:12.426" starttime="20170823 13:44:12.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20170823 13:44:12.429" starttime="20170823 13:44:12.429"></status>
</kw>
<status status="PASS" endtime="20170823 13:44:12.429" starttime="20170823 13:44:12.426"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<msg timestamp="20170823 13:44:12.602" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04FED5F8&gt;</msg>
<msg timestamp="20170823 13:44:12.602" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.17.128 2323</msg>
<msg timestamp="20170823 13:44:12.602" level="INFO">[ssh_common.py@314] Get Response: 
Trying 172.16.17.1</msg>
<status status="PASS" endtime="20170823 13:44:12.602" starttime="20170823 13:44:12.433"></status>
</kw>
<status status="PASS" endtime="20170823 13:44:12.602" starttime="20170823 13:44:12.430"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20170823 13:44:12.817" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04FED5F8&gt;</msg>
<msg timestamp="20170823 13:44:12.817" level="INFO">[ssh_common.py@258] Execute command: sendFault 1104 0 0 0 0 0</msg>
<msg timestamp="20170823 13:44:12.817" level="INFO">[ssh_common.py@314] Get Response:</msg>
<status status="PASS" endtime="20170823 13:44:12.817" starttime="20170823 13:44:12.606"></status>
</kw>
<status status="PASS" endtime="20170823 13:44:12.817" starttime="20170823 13:44:12.602"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20170823 13:44:12.821" starttime="20170823 13:44:12.817"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<status status="PASS" endtime="20170823 13:44:12.824" starttime="20170823 13:44:12.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 13:44:12.829" starttime="20170823 13:44:12.825"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20170823 13:44:12.832" starttime="20170823 13:44:12.829"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 13:44:12.835" starttime="20170823 13:44:12.832"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:44:12.839" starttime="20170823 13:44:12.835"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20170823 13:44:12.859" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04FED5F8&gt;</msg>
<status status="PASS" endtime="20170823 13:44:12.859" starttime="20170823 13:44:12.839"></status>
</kw>
<status status="PASS" endtime="20170823 13:44:12.859" starttime="20170823 13:44:01.699"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>${msg_check_list_alarm_start}</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${msg_check_list}</arg>
<arg>timeout=240</arg>
</arguments>
<msg timestamp="20170823 13:46:13.667" level="INFO">[infomodel_control.py@328] query infomodel: '/MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/ALARM_L-* is [alarmInformation.faultId=1906]' succeed .</msg>
<status status="PASS" endtime="20170823 13:46:13.667" starttime="20170823 13:44:12.861"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:13.667" starttime="20170823 13:44:12.861"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_cancel}</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20170823 13:46:24.047" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:46:24.047" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:44:02 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:46:24.047" starttime="20170823 13:46:13.669"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:24.048" starttime="20170823 13:46:24.048"></status>
</kw>
<msg timestamp="20170823 13:46:24.049" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20170823 13:46:24.049" starttime="20170823 13:46:24.048"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20170823 13:46:24.175" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05368A80&gt;</msg>
<msg timestamp="20170823 13:46:24.175" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20170823 13:46:24.175" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:46:24.176" starttime="20170823 13:46:24.053"></status>
</kw>
<msg timestamp="20170823 13:46:24.176" level="INFO">${ret} = lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:46:24.176" starttime="20170823 13:46:24.049"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:24.181" starttime="20170823 13:46:24.180"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:24.181" starttime="20170823 13:46:24.180"></status>
</kw>
<msg timestamp="20170823 13:46:24.181" level="INFO">${ret1} = ('PASS', '0x2018')</msg>
<status status="PASS" endtime="20170823 13:46:24.181" starttime="20170823 13:46:24.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<msg timestamp="20170823 13:46:24.186" level="FAIL">'lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;' does not match '0x1018'</msg>
<status status="FAIL" endtime="20170823 13:46:24.186" starttime="20170823 13:46:24.185"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:24.186" starttime="20170823 13:46:24.185"></status>
</kw>
<msg timestamp="20170823 13:46:24.186" level="INFO">${ret2} = ('FAIL', u"'lxc-ls --active\n0x2015\t0x2016\t0x2018\t0x201b\nroot@fctj-4a:~ &gt;' does not match '0x1018'")</msg>
<status status="PASS" endtime="20170823 13:46:24.186" starttime="20170823 13:46:24.181"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<msg timestamp="20170823 13:46:24.312" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05368A80&gt;</msg>
<msg timestamp="20170823 13:46:24.313" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x2018</msg>
<msg timestamp="20170823 13:46:24.313" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x2018
root@0x2018:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:46:24.313" starttime="20170823 13:46:24.194"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:24.313" starttime="20170823 13:46:24.190"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:24.313" starttime="20170823 13:46:24.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:24.320" starttime="20170823 13:46:24.317"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:24.320" starttime="20170823 13:46:24.313"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:24.325" starttime="20170823 13:46:24.324"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:24.325" starttime="20170823 13:46:24.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<msg timestamp="20170823 13:46:24.497" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05368A80&gt;</msg>
<msg timestamp="20170823 13:46:24.497" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.17.128 2323</msg>
<msg timestamp="20170823 13:46:24.497" level="INFO">[ssh_common.py@314] Get Response: 
Trying 172.16.17.1</msg>
<status status="PASS" endtime="20170823 13:46:24.498" starttime="20170823 13:46:24.328"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:24.498" starttime="20170823 13:46:24.325"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20170823 13:46:24.725" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05368A80&gt;</msg>
<msg timestamp="20170823 13:46:24.725" level="INFO">[ssh_common.py@258] Execute command: sendFault 1104 0 0 1 0 0</msg>
<msg timestamp="20170823 13:46:24.725" level="INFO">[ssh_common.py@314] Get Response:</msg>
<status status="PASS" endtime="20170823 13:46:24.725" starttime="20170823 13:46:24.502"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:24.725" starttime="20170823 13:46:24.498"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:24.729" starttime="20170823 13:46:24.725"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:24.732" starttime="20170823 13:46:24.729"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:24.735" starttime="20170823 13:46:24.732"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:24.740" starttime="20170823 13:46:24.736"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:24.743" starttime="20170823 13:46:24.740"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:24.747" starttime="20170823 13:46:24.743"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20170823 13:46:24.782" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05368A80&gt;</msg>
<status status="PASS" endtime="20170823 13:46:24.782" starttime="20170823 13:46:24.747"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:24.783" starttime="20170823 13:46:13.668"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>${msg_check_list_alarm_cancel}</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${msg_check_list}</arg>
<arg>timeout=240</arg>
</arguments>
<msg timestamp="20170823 13:46:26.158" level="INFO">[infomodel_control.py@328] query infomodel: 'count /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/ALARM_L-* is [alarmInformation.faultId=1906] =0' succeed .</msg>
<status status="PASS" endtime="20170823 13:46:26.158" starttime="20170823 13:46:24.784"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:26.159" starttime="20170823 13:46:24.783"></status>
</kw>
<kw name="Send_RRU_Command" library="SISO1 Resource">
<arguments>
<arg>${RRU_IP}</arg>
<arg>${fault_trigger}</arg>
</arguments>
<kw name="Connect To Bts" library="tdd_ev_robotws">
<doc>connect to BTS with given ip/user/passwd.</doc>
<msg timestamp="20170823 13:46:36.536" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:46:36.536" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:46:14 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:46:36.536" starttime="20170823 13:46:26.160"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<assign>
<var>${ret0}</var>
</assign>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${RRU_IP}</arg>
<arg>^172</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:36.537" starttime="20170823 13:46:36.537"></status>
</kw>
<msg timestamp="20170823 13:46:36.538" level="INFO">${ret0} = ('PASS', u'172')</msg>
<status status="PASS" endtime="20170823 13:46:36.538" starttime="20170823 13:46:36.536"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-ls --active</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-ls --active</arg>
</arguments>
<msg timestamp="20170823 13:46:36.663" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05297C88&gt;</msg>
<msg timestamp="20170823 13:46:36.664" level="INFO">[ssh_common.py@258] Execute command: lxc-ls --active</msg>
<msg timestamp="20170823 13:46:36.664" level="INFO">[ssh_common.py@314] Get Response: lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:46:36.664" starttime="20170823 13:46:36.542"></status>
</kw>
<msg timestamp="20170823 13:46:36.664" level="INFO">${ret} = lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:46:36.664" starttime="20170823 13:46:36.538"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<assign>
<var>${ret1}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x2018</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:36.669" starttime="20170823 13:46:36.669"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:36.669" starttime="20170823 13:46:36.668"></status>
</kw>
<msg timestamp="20170823 13:46:36.669" level="INFO">${ret1} = ('PASS', '0x2018')</msg>
<status status="PASS" endtime="20170823 13:46:36.669" starttime="20170823 13:46:36.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<assign>
<var>${ret2}</var>
</assign>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Match Regexp</arg>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<kw name="Should Match Regexp" library="BuiltIn">
<doc>Fails if ``string`` does not match ``pattern`` as a regular expression.</doc>
<arguments>
<arg>${ret}</arg>
<arg>0x1018</arg>
</arguments>
<msg timestamp="20170823 13:46:36.674" level="FAIL">'lxc-ls --active
0x2015	0x2016	0x2018	0x201b
root@fctj-4a:~ &gt;' does not match '0x1018'</msg>
<status status="FAIL" endtime="20170823 13:46:36.674" starttime="20170823 13:46:36.674"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:36.674" starttime="20170823 13:46:36.673"></status>
</kw>
<msg timestamp="20170823 13:46:36.675" level="INFO">${ret2} = ('FAIL', u"'lxc-ls --active\n0x2015\t0x2016\t0x2018\t0x201b\nroot@fctj-4a:~ &gt;' does not match '0x1018'")</msg>
<status status="PASS" endtime="20170823 13:46:36.675" starttime="20170823 13:46:36.670"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret1[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>lxc-attach -n 0x2018</arg>
</arguments>
<msg timestamp="20170823 13:46:36.807" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05297C88&gt;</msg>
<msg timestamp="20170823 13:46:36.808" level="INFO">[ssh_common.py@258] Execute command: lxc-attach -n 0x2018</msg>
<msg timestamp="20170823 13:46:36.808" level="INFO">[ssh_common.py@314] Get Response: lxc-attach -n 0x2018
root@0x2018:~ &gt;</msg>
<status status="PASS" endtime="20170823 13:46:36.808" starttime="20170823 13:46:36.682"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:36.808" starttime="20170823 13:46:36.678"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:36.808" starttime="20170823 13:46:36.675"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret0[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ret2[0]}'=='PASS'</arg>
<arg>Execute Shell Command</arg>
<arg>lxc-attach -n 0x1018</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:36.816" starttime="20170823 13:46:36.813"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:36.816" starttime="20170823 13:46:36.808"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*$</arg>
</arguments>
<kw name="Set Shell Prompt" library="tdd_ev_robotws">
<doc>This keyword sets the connection prompt to new prompt other than default one.</doc>
<arguments>
<arg>.*$</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:36.820" starttime="20170823 13:46:36.820"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:36.820" starttime="20170823 13:46:36.816"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>telnet ${RRU_IP} ${RRU_Port}</arg>
</arguments>
<msg timestamp="20170823 13:46:36.993" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05297C88&gt;</msg>
<msg timestamp="20170823 13:46:36.993" level="INFO">[ssh_common.py@258] Execute command: telnet 172.16.17.128 2323</msg>
<msg timestamp="20170823 13:46:36.994" level="INFO">[ssh_common.py@314] Get Response: 
Trying 172.16.17.1</msg>
<status status="PASS" endtime="20170823 13:46:36.994" starttime="20170823 13:46:36.824"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:36.994" starttime="20170823 13:46:36.821"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='previous'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>${rrucommand}</arg>
</arguments>
<msg timestamp="20170823 13:46:37.168" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05297C88&gt;</msg>
<msg timestamp="20170823 13:46:37.168" level="INFO">[ssh_common.py@258] Execute command: sendFault 1104 0 0 0 0 0</msg>
<msg timestamp="20170823 13:46:37.168" level="INFO">[ssh_common.py@314] Get Response:</msg>
<status status="PASS" endtime="20170823 13:46:37.169" starttime="20170823 13:46:36.997"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:37.169" starttime="20170823 13:46:36.994"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*:</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:37.172" starttime="20170823 13:46:37.169"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>telnet ${RRU_IP} 23</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:37.176" starttime="20170823 13:46:37.172"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:37.180" starttime="20170823 13:46:37.176"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Set Shell Prompt</arg>
<arg>.*#</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:37.183" starttime="20170823 13:46:37.180"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>root</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:37.187" starttime="20170823 13:46:37.183"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${RRU_Tag}'=='new'</arg>
<arg>Execute Shell Command</arg>
<arg>${rrucommand}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:46:37.191" starttime="20170823 13:46:37.188"></status>
</kw>
<kw name="Disconnect From Host" library="tdd_ev_robotws">
<doc>Closes the telnet connections to the currently active remote host.</doc>
<msg timestamp="20170823 13:46:37.209" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05297C88&gt;</msg>
<status status="PASS" endtime="20170823 13:46:37.209" starttime="20170823 13:46:37.191"></status>
</kw>
<status status="PASS" endtime="20170823 13:46:37.209" starttime="20170823 13:46:26.159"></status>
</kw>
<kw name="_Check Alarm Status">
<arguments>
<arg>${msg_check_list_alarm_start}</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${msg_check_list}</arg>
<arg>timeout=240</arg>
</arguments>
<msg timestamp="20170823 13:48:37.255" level="INFO">[infomodel_control.py@328] query infomodel: '/MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/ALARM_L-* is [alarmInformation.faultId=1906]' succeed .</msg>
<status status="PASS" endtime="20170823 13:48:37.255" starttime="20170823 13:46:37.210"></status>
</kw>
<status status="PASS" endtime="20170823 13:48:37.255" starttime="20170823 13:46:37.210"></status>
</kw>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\alarm</arg>
</arguments>
<msg timestamp="20170823 13:48:37.264" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906\alarm' succeed .</msg>
<status status="PASS" endtime="20170823 13:48:37.264" starttime="20170823 13:48:37.257"></status>
</kw>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170823 13:48:37.897" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170823 13:48:37.897" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170823 13:48:37.897" starttime="20170823 13:48:37.264"></status>
</kw>
<kw name="_Rf Block Unblock And Alarm Disappear">
<arguments>
<arg>alarm_cancel</arg>
<arg>${msg_check_list_alarm_cancel}</arg>
</arguments>
<kw name="GUI SM HW Action" library="gui_resource">
<doc>this keyword is used for most HW operation,such as block,unblock,reset</doc>
<arguments>
<arg>RRU</arg>
<arg>${RRU1_INFO.NODE}</arg>
<arg>Reset</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>HWType=${HWType}</arg>
<arg>HWID=${HWID}</arg>
<arg>HWAction=${HWAction}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170823 13:48:37.901" level="INFO">${para_list} = [u'HWType=RRU', u'HWID=1.1.1.1', u'HWAction=Reset', u'LogPath=D:\\TA\\TA_logs\\TestLog_20170823134207\\ev_logs\\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\\FZHQ_RF_alarm_1906\\'...</msg>
<status status="PASS" endtime="20170823 13:48:37.901" starttime="20170823 13:48:37.900"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}HW_Action</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170823 13:49:23.935" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\HW_Action is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\HW_Action ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
HWType="RRU"
HWID="1.1.1.1"
HWAction="Reset"
LogPath="D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906\"
&lt;QTP&gt; Save log to D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906\GUILog\qtp_log20170823134837\Report
&lt;QTP&gt; Start to run script...

GetInto_MainView  BTS Site Manager is not launched. Please check it manually.
Test Fail. SaveImage  to D:\TA\TA_logs\TestLog_20170823134207\ev_logs\FZHQ_T1_RF_module_alarm_without_recovery_action_19_20170823134209\FZHQ_RF_alarm_1906\2017-08-23_13-49-23.png
&lt;QTP&gt; run Failed.
Start to kill QTP process.
Finshed to kill QTP process.</msg>
<msg timestamp="20170823 13:49:23.974" level="FAIL">AttributeError: QuickTest.Application.Quit</msg>
<status status="FAIL" endtime="20170823 13:49:23.974" starttime="20170823 13:48:37.901"></status>
</kw>
<status status="FAIL" endtime="20170823 13:49:23.975" starttime="20170823 13:48:37.900"></status>
</kw>
<status status="FAIL" endtime="20170823 13:49:23.975" starttime="20170823 13:48:37.898"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170823 13:49:23.979" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05297F80&gt;.</msg>
<status status="PASS" endtime="20170823 13:49:23.980" starttime="20170823 13:49:23.976"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170823 13:49:24.359" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170823 13:49:24.359" starttime="20170823 13:49:23.980"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170823 13:49:24.361" starttime="20170823 13:49:24.360"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:24.362" starttime="20170823 13:49:24.361"></status>
</kw>
<msg timestamp="20170823 13:49:24.362" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:49:24.362" starttime="20170823 13:49:24.361"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170823 13:49:24.367" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 13:49:24.367" starttime="20170823 13:49:24.366"></status>
</kw>
<status status="FAIL" endtime="20170823 13:49:24.367" starttime="20170823 13:49:24.363"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:24.367" starttime="20170823 13:49:24.362"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170823 13:49:24.725" level="INFO">[infomodel_control.py@189] stop infomodel logger failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20170823 13:49:24.725" level="INFO">[infomodel_control.py@193] disconnect from infomodel failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20170823 13:49:24.725" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<msg timestamp="20170823 13:49:24.725" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 13:49:24.725" starttime="20170823 13:49:24.371"></status>
</kw>
<status status="FAIL" endtime="20170823 13:49:24.726" starttime="20170823 13:49:24.368"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:24.726" starttime="20170823 13:49:24.367"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170823 13:49:24.976" level="INFO">Exit code: 1</msg>
<msg timestamp="20170823 13:49:24.976" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:36396
</msg>
<msg timestamp="20170823 13:49:24.976" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170823 13:49:24.980" starttime="20170823 13:49:24.726"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:24.981" starttime="20170823 13:49:24.981"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:24.981" starttime="20170823 13:49:24.981"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:24.983" starttime="20170823 13:49:24.983"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:24.984" starttime="20170823 13:49:24.983"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170823 13:49:24.990" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170823 13:49:24.990" starttime="20170823 13:49:24.984"></status>
</kw>
<msg timestamp="20170823 13:49:24.990" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170823 13:49:24.991" starttime="20170823 13:49:24.984"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:24.994" starttime="20170823 13:49:24.991"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:24.997" starttime="20170823 13:49:24.994"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170823 13:49:24.998" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170823 13:49:24.998" starttime="20170823 13:49:24.997"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:25.000" starttime="20170823 13:49:24.999"></status>
</kw>
<msg timestamp="20170823 13:49:25.000" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170823 13:49:25.000" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170823 13:49:25.000" starttime="20170823 13:49:24.999"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:25.003" starttime="20170823 13:49:25.000"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170823 13:49:29.026" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170823 13:49:29.027" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170823 13:49:29.027" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170823 13:49:29.027" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170823 13:49:29.027" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170823 13:49:29.027" starttime="20170823 13:49:25.004"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:29.027" starttime="20170823 13:49:24.999"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:29.028" starttime="20170823 13:49:29.028"></status>
</kw>
<msg timestamp="20170823 13:49:29.028" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170823 13:49:29.028" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170823 13:49:29.029" starttime="20170823 13:49:29.027"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:29.032" starttime="20170823 13:49:29.029"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170823 13:49:33.054" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170823 13:49:33.054" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170823 13:49:33.054" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170823 13:49:33.054" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170823 13:49:33.054" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170823 13:49:33.054" starttime="20170823 13:49:29.032"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:33.054" starttime="20170823 13:49:29.027"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170823 13:49:33.062" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170823 13:49:33.062" starttime="20170823 13:49:33.055"></status>
</kw>
<msg timestamp="20170823 13:49:33.062" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170823 13:49:33.062" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170823 13:49:33.062" starttime="20170823 13:49:33.055"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170823 13:49:33.065" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170823 13:49:33.066" starttime="20170823 13:49:33.062"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:33.066" starttime="20170823 13:49:33.055"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:33.066" starttime="20170823 13:49:24.999"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:33.066" starttime="20170823 13:49:24.998"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:33.066" starttime="20170823 13:49:33.066"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170823 13:49:33.070" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170823 13:49:33.070" starttime="20170823 13:49:33.066"></status>
</kw>
<status status="FAIL" endtime="20170823 13:49:33.070" starttime="20170823 13:49:24.982"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:33.070" starttime="20170823 13:49:24.982"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170823 13:49:33.076" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170823 13:49:33.076" starttime="20170823 13:49:33.071"></status>
</kw>
<msg timestamp="20170823 13:49:33.077" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170823 13:49:33.077" starttime="20170823 13:49:33.070"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:33.080" starttime="20170823 13:49:33.077"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170823 13:49:42.419" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170823 13:49:42.995" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170823 13:49:42.995" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170823 13:49:42.995" starttime="20170823 13:49:33.080"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170823 13:49:43.301" level="INFO">['fatal'] ['fatal']</msg>
<status status="PASS" endtime="20170823 13:49:43.302" starttime="20170823 13:49:42.995"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170823 13:49:43.303" level="FAIL">'FZHQ_RF_alarm_1906' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170823 13:49:43.303" starttime="20170823 13:49:43.303"></status>
</kw>
<msg timestamp="20170823 13:49:43.303" level="INFO">${return1} = ('FAIL', u"'FZHQ_RF_alarm_1906' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170823 13:49:43.303" starttime="20170823 13:49:43.302"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:43.307" starttime="20170823 13:49:43.304"></status>
</kw>
<msg timestamp="20170823 13:49:43.308" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170823 13:49:43.308" starttime="20170823 13:49:43.304"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:43.312" starttime="20170823 13:49:43.308"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:43.312" starttime="20170823 13:49:43.308"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:43.312" starttime="20170823 13:49:43.312"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:43.313" starttime="20170823 13:49:43.312"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:43.313" starttime="20170823 13:49:43.313"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170823 13:49:43.314" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170823 13:49:43.314" starttime="20170823 13:49:43.314"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:43.319" starttime="20170823 13:49:43.315"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:43.319" starttime="20170823 13:49:43.315"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:43.319" starttime="20170823 13:49:43.315"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:43.323" starttime="20170823 13:49:43.320"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:43.323" starttime="20170823 13:49:43.319"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:43.323" starttime="20170823 13:49:43.319"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170823 13:49:43.327" starttime="20170823 13:49:43.324"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:43.327" starttime="20170823 13:49:43.324"></status>
</kw>
<status status="PASS" endtime="20170823 13:49:43.328" starttime="20170823 13:49:43.323"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170823 13:50:04.438" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:50:04.438" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:46:27 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052EAE18&gt;</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052EAE18&gt;</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">[ssh_common.py@203] Last login: Wed Aug 23 13:49:44 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0521C698&gt;</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0521C698&gt;</msg>
<msg timestamp="20170823 13:50:04.439" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170823 13:50:04.439" starttime="20170823 13:49:43.328"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170823 13:50:04.445" starttime="20170823 13:50:04.441"></status>
</kw>
<status status="PASS" endtime="20170823 13:50:04.445" starttime="20170823 13:50:04.441"></status>
</kw>
<status status="PASS" endtime="20170823 13:50:04.445" starttime="20170823 13:50:04.440"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170823 13:50:04.449" starttime="20170823 13:50:04.446"></status>
</kw>
<status status="PASS" endtime="20170823 13:50:04.449" starttime="20170823 13:50:04.445"></status>
</kw>
<status status="PASS" endtime="20170823 13:50:04.449" starttime="20170823 13:50:04.445"></status>
</kw>
<status status="PASS" endtime="20170823 13:50:04.449" starttime="20170823 13:49:43.313"></status>
</kw>
<status status="PASS" endtime="20170823 13:50:04.449" starttime="20170823 13:49:23.976"></status>
</kw>
<tags>
<tag>owner-sue.nie@nokia.com</tag>
<tag>QC_720749</tag>
</tags>
<status status="FAIL" endtime="20170823 13:50:04.450" critical="yes" starttime="20170823 13:43:28.723">AttributeError: QuickTest.Application.Quit</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170823 13:50:04.465" starttime="20170823 13:42:08.306"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-sue.nie@nokia.com</stat>
<stat fail="1" pass="0">QC_720749</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T1 RF module alarm without recovery action 1906" pass="0">FZHQ T1 RF module alarm without recovery action 1906</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170823 13:42:08.770" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170823 13:49:42.419" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
