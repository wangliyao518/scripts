<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170720 11:18:12.370" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\CRT\FZHQ_ASMI\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_middle\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_middle.robot" id="s1" name="FZHQ T1 Carrier Frequency and supported EARFCN middle">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170720111204//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170720 11:12:05.920" level="INFO">${timestamp} = 20170720111205</msg>
<status status="PASS" endtime="20170720 11:12:05.920" starttime="20170720 11:12:05.885"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170720 11:12:05.921" level="INFO">${FILE_NAME} = FZHQ T1 Carrier Frequency and supported EARFCN mid</msg>
<status status="PASS" endtime="20170720 11:12:05.921" starttime="20170720 11:12:05.920"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170720 11:12:05.922" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ T1 Carrier Frequency and supported EARFCN mid_20170720111205</msg>
<status status="PASS" endtime="20170720 11:12:05.922" starttime="20170720 11:12:05.922"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170720 11:12:05.923" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205</msg>
<status status="PASS" endtime="20170720 11:12:05.923" starttime="20170720 11:12:05.922"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170720 11:12:05.924" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205</msg>
<status status="PASS" endtime="20170720 11:12:05.924" starttime="20170720 11:12:05.923"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170720 11:12:05.925" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205"&gt;D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170720 11:12:05.925" starttime="20170720 11:12:05.924"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170720 11:12:05.925" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205</msg>
<status status="PASS" endtime="20170720 11:12:05.925" starttime="20170720 11:12:05.925"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170720 11:12:05.929" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170720 11:12:05.929" starttime="20170720 11:12:05.925"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170720 11:12:05.946" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170720 11:12:05.946" starttime="20170720 11:12:05.941"></status>
</kw>
<msg timestamp="20170720 11:12:05.946" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170720 11:12:05.947" starttime="20170720 11:12:05.940"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:12:05.948" starttime="20170720 11:12:05.947"></status>
</kw>
<msg timestamp="20170720 11:12:05.948" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170720 11:12:05.948" starttime="20170720 11:12:05.947"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:12:05.954" starttime="20170720 11:12:05.951"></status>
</kw>
<msg timestamp="20170720 11:12:05.954" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205</msg>
<status status="PASS" endtime="20170720 11:12:05.954" starttime="20170720 11:12:05.948"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170720 11:12:05.958" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205</msg>
<status status="PASS" endtime="20170720 11:12:05.958" starttime="20170720 11:12:05.955"></status>
</kw>
<status status="PASS" endtime="20170720 11:12:05.958" starttime="20170720 11:12:05.940"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170720 11:12:05.982" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170720 11:12:05.982" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170720 11:12:05.982" starttime="20170720 11:12:05.959"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:12:05.983" starttime="20170720 11:12:05.982"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170720 11:12:05.983" starttime="20170720 11:12:05.983"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:12:05.984" starttime="20170720 11:12:05.984"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170720 11:12:05.984" starttime="20170720 11:12:05.984"></status>
</kw>
<status status="PASS" endtime="20170720 11:12:05.984" starttime="20170720 11:12:05.959"></status>
</kw>
<status status="PASS" endtime="20170720 11:12:05.984" starttime="20170720 11:12:05.958"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 11:05:28 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056073A0&gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056073A0&gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 11:12:07 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x034AD878&gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x034AD878&gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 11:12:17 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055F45F8&gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055F45F8&gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 11:12:28 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05633F80&gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05633F80&gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 11:12:39 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05608080&gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05608080&gt;</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170720 11:13:22.910" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170720 11:13:22.912" starttime="20170720 11:12:05.985"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:22.912" starttime="20170720 11:12:05.985"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170720 11:13:22.913" starttime="20170720 11:13:22.912"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170720 11:13:22.915" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170720 11:13:22.915" starttime="20170720 11:13:22.914"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170720 11:13:22.918" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170720 11:13:22.918" starttime="20170720 11:13:22.915"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170720 11:13:22.921" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170720 11:13:22.921" starttime="20170720 11:13:22.918"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170720 11:13:22.924" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170720 11:13:22.924" starttime="20170720 11:13:22.921"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170720 11:13:24.320" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170720 11:13:24.320" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170720 11:13:24.320" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170720 11:13:24.320" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170720 11:13:24.320" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170720 11:13:24.320" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0567DC38&gt;</msg>
<status status="PASS" endtime="20170720 11:13:24.320" starttime="20170720 11:13:22.924"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170720 11:13:24.321" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0567DC38&gt;</msg>
<status status="PASS" endtime="20170720 11:13:24.321" starttime="20170720 11:13:24.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170720 11:13:25.511" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0567DC38&gt;</msg>
<msg timestamp="20170720 11:13:25.511" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170720 11:13:25.511" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170720 11:13:25.512" starttime="20170720 11:13:24.325"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:25.512" starttime="20170720 11:13:24.321"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:25.512" starttime="20170720 11:13:22.913"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170720 11:13:25.515" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0567DC38&gt;.</msg>
<status status="PASS" endtime="20170720 11:13:25.515" starttime="20170720 11:13:25.512"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:25.516" starttime="20170720 11:12:05.884"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:18:08.838" starttime="20170720 11:18:08.835"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170720 11:18:08.845" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170720 11:18:08.845" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0567DC38&gt;</msg>
<status status="PASS" endtime="20170720 11:18:08.846" starttime="20170720 11:18:08.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170720 11:18:08.847" starttime="20170720 11:18:08.846"></status>
</kw>
<status status="PASS" endtime="20170720 11:18:08.847" starttime="20170720 11:18:08.846"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:18:08.848" starttime="20170720 11:18:08.847"></status>
</kw>
<status status="PASS" endtime="20170720 11:18:08.848" starttime="20170720 11:18:08.847"></status>
</kw>
<status status="PASS" endtime="20170720 11:18:08.848" starttime="20170720 11:18:08.835"></status>
</kw>
<test id="s1-t1" name="FZHQ_EARFCN_middle_20M">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170720111204//ev_logs//D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170720 11:13:25.521" level="INFO">${timestamp} = 20170720111325</msg>
<status status="PASS" endtime="20170720 11:13:25.522" starttime="20170720 11:13:25.521"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170720 11:13:25.522" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205\FZHQ_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20170720 11:13:25.522" starttime="20170720 11:13:25.522"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170720 11:13:25.523" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205\FZHQ_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20170720 11:13:25.523" starttime="20170720 11:13:25.523"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170720 11:13:25.524" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205\FZHQ_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20170720 11:13:25.524" starttime="20170720 11:13:25.523"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170720 11:13:25.525" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205\FZHQ_EARFCN_middle_20M"&gt;D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205\FZHQ_EARFCN_middle_20M&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170720 11:13:25.525" starttime="20170720 11:13:25.524"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170720 11:13:25.525" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205\FZHQ_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20170720 11:13:25.525" starttime="20170720 11:13:25.525"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170720 11:13:25.526" starttime="20170720 11:13:25.526"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:13:25.528" starttime="20170720 11:13:25.527"></status>
</kw>
<msg timestamp="20170720 11:13:25.528" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170720 11:13:25.528" starttime="20170720 11:13:25.527"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:13:25.529" starttime="20170720 11:13:25.529"></status>
</kw>
<msg timestamp="20170720 11:13:25.529" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170720 11:13:25.529" starttime="20170720 11:13:25.528"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170720 11:13:25.532" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205\FZHQ_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20170720 11:13:25.532" starttime="20170720 11:13:25.529"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170720 11:13:25.533" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205\FZHQ_EARFCN_middle_20M</msg>
<status status="PASS" endtime="20170720 11:13:25.533" starttime="20170720 11:13:25.533"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:25.533" starttime="20170720 11:13:25.527"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:25.533" starttime="20170720 11:13:25.521"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170720 11:13:25.535" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=40782 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpuzrqzt --insecure</msg>
<msg timestamp="20170720 11:13:27.538" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170720 11:13:27.538" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170720 11:13:31.538" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170720 11:13:31.538" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170720 11:13:35.538" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170720 11:13:35.538" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170720 11:13:38.538" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170720 11:13:38.538" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 9109, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170720 11:13:45.874" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 9109, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:13:48.587" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 9109, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170720 11:13:48.587" starttime="20170720 11:13:25.534"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:48.587" starttime="20170720 11:13:25.517"></status>
</kw>
<kw name="Reset_BTS_If_Ini_State_Unmatch" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${ini_state_check}</arg>
</arguments>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170720 11:13:58.230" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170720 11:13:58.230" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170720 11:13:58.230" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170720 11:13:58.231" starttime="20170720 11:13:48.589"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Query_Infomodel_With_Multi_Condition</arg>
<arg>${ini_state_check}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Query_Infomodel_With_Multi_Condition" library="SISO1 Resource">
<arguments>
<arg>${ini_state_check}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${condition_list}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170720 11:13:58.232" level="INFO">Length is 3</msg>
<msg timestamp="20170720 11:13:58.232" level="INFO">${ret} = 3</msg>
<status status="PASS" endtime="20170720 11:13:58.232" starttime="20170720 11:13:58.232"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${ret} ]">
<kw type="foritem" name="${num} = 0">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20170720 11:13:58.713" level="INFO">[infomodel_control.py@328] query infomodel: 'count /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1 is [fcnDLs[0]=40200] =0' succeed .</msg>
<status status="PASS" endtime="20170720 11:13:58.713" starttime="20170720 11:13:58.233"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:58.713" starttime="20170720 11:13:58.233"></status>
</kw>
<kw type="foritem" name="${num} = 1">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20170720 11:13:58.826" level="INFO">[infomodel_control.py@328] query infomodel: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]=1' succeed .</msg>
<status status="PASS" endtime="20170720 11:13:58.826" starttime="20170720 11:13:58.714"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:58.827" starttime="20170720 11:13:58.714"></status>
</kw>
<kw type="foritem" name="${num} = 2">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20170720 11:13:58.876" level="INFO">[infomodel_control.py@328] query infomodel: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is =1' succeed .</msg>
<status status="PASS" endtime="20170720 11:13:58.877" starttime="20170720 11:13:58.827"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:58.877" starttime="20170720 11:13:58.827"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:58.877" starttime="20170720 11:13:58.232"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:58.877" starttime="20170720 11:13:58.231"></status>
</kw>
<msg timestamp="20170720 11:13:58.877" level="INFO">${result} = PASS</msg>
<msg timestamp="20170720 11:13:58.877" level="INFO">${ret} = None</msg>
<status status="PASS" endtime="20170720 11:13:58.877" starttime="20170720 11:13:58.231"></status>
</kw>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170720 11:13:59.470" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170720 11:13:59.470" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170720 11:13:59.470" starttime="20170720 11:13:58.877"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:13:59.474" starttime="20170720 11:13:59.471"></status>
</kw>
<status status="PASS" endtime="20170720 11:13:59.474" starttime="20170720 11:13:48.588"></status>
</kw>
<kw name="_Modify_Earfcn_and_Attach">
<doc>Operation with BTS</doc>
<arguments>
<arg>40200</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170720 11:13:59.478" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0567DC38&gt;.</msg>
<status status="PASS" endtime="20170720 11:13:59.478" starttime="20170720 11:13:59.475"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170720 11:13:59.713" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170720 11:13:59.713" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170720 11:13:59.713" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205\FZHQ_EARFCN_middle_20M" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170720 11:13:59.713" starttime="20170720 11:13:59.479"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170720 11:14:08.960" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170720 11:14:08.960" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170720 11:14:08.960" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170720 11:14:08.960" starttime="20170720 11:13:59.713"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170720 11:14:08.961" level="INFO">${case_execute_log_name} = owner_debug</msg>
<status status="PASS" endtime="20170720 11:14:08.961" starttime="20170720 11:14:08.961"></status>
</kw>
<status status="PASS" endtime="20170720 11:14:08.961" starttime="20170720 11:13:59.478"></status>
</kw>
<kw name="Get_BTS_DN" library="SISO1 Resource">
<arguments>
<arg>CELL_M</arg>
</arguments>
<assign>
<var>${CELL_M_DN}</var>
</assign>
<kw name="Get Objects By Class Name" library="ute_admin">
<doc>Get objects by class name.</doc>
<arguments>
<arg>${DN_Name}</arg>
</arguments>
<assign>
<var>${DN_LIST1}</var>
</assign>
<msg timestamp="20170720 11:14:08.962" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 39696, "parameters": {"name": "getItemsByClassName", "parameters": {"className": "CELL_M"}}}}</msg>
<msg timestamp="20170720 11:14:09.026" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 39696, "requestMessage": [{"distName": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 61", "parameters": {"routingState": "Routable", "timeDomainState": "HardwareFullyConfigured", "stateInfo": {"operationalState": "Enabled", "automaticBlockState": "Unblocked", "blockingState": "Unblocked", "availabilityStatus": "Online", "administrativeState": "Unlocked", "recoveryLockingState": "Unlocked", "reasoningStatus": [], "proceduralState": "OnAirDone"}, "testingState": "Disabled", "rat": "LTE", "setupAllowed": true, "carriersState": "Activated", "gainCalcState": "NotCalculated", "deploymentCalcState": "CalculationDone", "bbCalcState": "CalculationDone", "delayCalculationState": "CalculationDone", "feedback": ""}}]}}</msg>
<msg timestamp="20170720 11:14:09.026" level="INFO">${DN_LIST1} = [{u'distName': u'/MRBTS-1/RAT-1/MCTRL-4/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-1', u'parameters': {u'routingState': u'Routable', u'timeDomainState': u'HardwareFullyConfigured', u'stateInfo': {u'operatio...</msg>
<status status="PASS" endtime="20170720 11:14:09.026" starttime="20170720 11:14:08.962"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${DN_LIST1}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:14:09.027" starttime="20170720 11:14:09.027"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${DN_LIST}</var>
</assign>
<msg timestamp="20170720 11:14:09.028" level="INFO">${DN_LIST} = []</msg>
<status status="PASS" endtime="20170720 11:14:09.028" starttime="20170720 11:14:09.027"></status>
</kw>
<kw type="for" name="${index} IN [ @{DN_LIST1} ]">
<kw type="foritem" name="${index} = {u'distName': u'/MRBTS-1/RAT-1/MCTRL-4/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-1', u'parameters': {u'routingState': u'Routable', u'timeDomainState': u'HardwareFullyConfigured', u'stateInfo': {u'operation...">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${DN_LIST}</arg>
<arg>${index.distName}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:14:09.029" starttime="20170720 11:14:09.028"></status>
</kw>
<status status="PASS" endtime="20170720 11:14:09.029" starttime="20170720 11:14:09.028"></status>
</kw>
<status status="PASS" endtime="20170720 11:14:09.029" starttime="20170720 11:14:09.028"></status>
</kw>
<msg timestamp="20170720 11:14:09.029" level="INFO">${CELL_M_DN} = [u'/MRBTS-1/RAT-1/MCTRL-4/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-1']</msg>
<status status="PASS" endtime="20170720 11:14:09.029" starttime="20170720 11:14:08.961"></status>
</kw>
<kw name="Perform Parameter Recommissioning" library="ute_admin">
<doc>Perform parameter recommissioning.</doc>
<arguments>
<arg>${BTS_INFO.MRBTS}/${BTS_INFO.LNBTS}/${CELL1_INFO.LNCELL}/LNCEL_TDD-0</arg>
<arg>earfcn</arg>
<arg>update</arg>
<arg>${modify_earfcn}</arg>
<arg>skip_parameter_relation_errors=True</arg>
<arg>should_activate=True</arg>
</arguments>
<msg timestamp="20170720 11:14:09.031" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 78910, "parameters": {"name": "setParameter", "parameters": {"skipParameterRelationErrors": true, "distName": "MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0", "value": "40200", "parameterName": "earfcn", "operation": "update", "shouldBeActivated": true}}}}</msg>
<msg timestamp="20170720 11:14:14.034" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 78910, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:14:19.035" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 78910, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:14:24.035" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 78910, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:14:26.951" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 78910, "requestMessage": {"validationResult": {"niddValidationResult": {"status": "OK", "logs": {"objectsOccurencesErrors": null, "invalidObjectsDistnames": null, "definitionErrors": null, "skippedElementsErrors": null}}, "pdlValidationResult": {"status": "FAIL", "logs": "[u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-2 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-4 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-5 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-6 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-8 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-1 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-7 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-3 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-2 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-4 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\"] ... &lt;type 'list'&gt; of lenght: 95"}}}}}</msg>
<status status="PASS" endtime="20170720 11:14:26.951" starttime="20170720 11:14:09.029"></status>
</kw>
<kw name="Wait For Parameters Value" library="ute_admin">
<doc>Wait for parameters value.</doc>
<arguments>
<arg>${CELL_M_DN[0]}</arg>
<arg>stateInfo.proceduralState=OnAirDone</arg>
<arg>timeout=180</arg>
</arguments>
<msg timestamp="20170720 11:14:26.952" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 68378, "parameters": {"name": "waitForParameterValue", "parameters": {"parametersList": [{"parameterPath": "stateInfo.proceduralState", "value": "OnAirDone"}], "distNameRegEx": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 61", "timeout": 180000.0}}}}</msg>
<msg timestamp="20170720 11:14:31.954" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:14:36.955" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:14:41.955" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:14:46.955" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:14:51.956" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:14:56.956" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:01.956" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:06.956" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:11.956" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:16.956" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:21.956" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:26.957" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:31.956" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:36.956" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:41.957" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:46.958" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:51.959" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:15:56.959" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:01.959" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:06.959" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:11.975" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:16.974" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:21.973" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:26.972" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:31.971" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:36.970" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:41.969" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:46.969" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:51.969" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:16:56.969" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:17:01.969" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:17:06.969" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:17:11.969" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:17:16.969" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:17:21.969" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:17:26.969" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 68378, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170720 11:17:27.132" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "failed", "requestId": 68378, "requestMessage": "Procedure timeout 180000 ms exceeded"}}</msg>
<msg timestamp="20170720 11:17:27.133" level="FAIL">AdminApiProcedureFailureException: Status reached: Procedure timeout 180000 ms exceeded</msg>
<status status="FAIL" endtime="20170720 11:17:27.133" starttime="20170720 11:14:26.952"></status>
</kw>
<status status="FAIL" endtime="20170720 11:17:27.134" starttime="20170720 11:13:59.474"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170720 11:17:27.139" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0567DC38&gt;.</msg>
<status status="PASS" endtime="20170720 11:17:27.139" starttime="20170720 11:17:27.135"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170720 11:17:27.588" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170720 11:17:27.588" starttime="20170720 11:17:27.139"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170720 11:17:27.596" starttime="20170720 11:17:27.589"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:27.597" starttime="20170720 11:17:27.596"></status>
</kw>
<msg timestamp="20170720 11:17:27.597" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170720 11:17:27.597" starttime="20170720 11:17:27.596"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170720 11:17:27.612" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170720111204\ev_logs\FZHQ_T1_Carrier_Frequency_and_supported_EARFCN_mid_20170720111205\FZHQ_EARFCN_middle_20M\owner_debug' succeed .</msg>
<status status="PASS" endtime="20170720 11:17:27.613" starttime="20170720 11:17:27.601"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:27.613" starttime="20170720 11:17:27.598"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:27.613" starttime="20170720 11:17:27.597"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170720 11:17:28.270" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170720 11:17:28.270" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170720 11:17:28.270" starttime="20170720 11:17:27.617"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:28.270" starttime="20170720 11:17:27.614"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:28.270" starttime="20170720 11:17:27.613"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170720 11:17:28.521" level="INFO">Exit code: 1</msg>
<msg timestamp="20170720 11:17:28.521" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:40782
</msg>
<msg timestamp="20170720 11:17:28.521" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170720 11:17:28.525" starttime="20170720 11:17:28.270"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:28.527" starttime="20170720 11:17:28.526"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:28.527" starttime="20170720 11:17:28.526"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:28.528" starttime="20170720 11:17:28.528"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:28.528" starttime="20170720 11:17:28.528"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170720 11:17:28.535" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170720 11:17:28.535" starttime="20170720 11:17:28.529"></status>
</kw>
<msg timestamp="20170720 11:17:28.535" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170720 11:17:28.535" starttime="20170720 11:17:28.529"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:28.538" starttime="20170720 11:17:28.535"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:28.542" starttime="20170720 11:17:28.539"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170720 11:17:28.543" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170720 11:17:28.543" starttime="20170720 11:17:28.542"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:28.545" starttime="20170720 11:17:28.545"></status>
</kw>
<msg timestamp="20170720 11:17:28.545" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170720 11:17:28.545" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170720 11:17:28.546" starttime="20170720 11:17:28.544"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:28.549" starttime="20170720 11:17:28.546"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170720 11:17:32.573" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170720 11:17:32.573" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170720 11:17:32.573" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170720 11:17:32.573" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170720 11:17:32.573" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170720 11:17:32.574" starttime="20170720 11:17:28.549"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:32.574" starttime="20170720 11:17:28.544"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:32.575" starttime="20170720 11:17:32.575"></status>
</kw>
<msg timestamp="20170720 11:17:32.575" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170720 11:17:32.575" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170720 11:17:32.575" starttime="20170720 11:17:32.574"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:32.578" starttime="20170720 11:17:32.575"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170720 11:17:36.601" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170720 11:17:36.601" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170720 11:17:36.601" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170720 11:17:36.601" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170720 11:17:36.601" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170720 11:17:36.601" starttime="20170720 11:17:32.579"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:36.601" starttime="20170720 11:17:32.574"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170720 11:17:36.608" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170720 11:17:36.608" starttime="20170720 11:17:36.602"></status>
</kw>
<msg timestamp="20170720 11:17:36.609" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170720 11:17:36.609" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170720 11:17:36.609" starttime="20170720 11:17:36.602"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170720 11:17:36.612" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170720 11:17:36.612" starttime="20170720 11:17:36.609"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:36.612" starttime="20170720 11:17:36.601"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:36.612" starttime="20170720 11:17:28.544"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:36.612" starttime="20170720 11:17:28.543"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:36.613" starttime="20170720 11:17:36.613"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170720 11:17:36.616" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170720 11:17:36.616" starttime="20170720 11:17:36.613"></status>
</kw>
<status status="FAIL" endtime="20170720 11:17:36.616" starttime="20170720 11:17:28.527"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:36.616" starttime="20170720 11:17:28.527"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170720 11:17:36.623" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170720 11:17:36.623" starttime="20170720 11:17:36.617"></status>
</kw>
<msg timestamp="20170720 11:17:36.623" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170720 11:17:36.623" starttime="20170720 11:17:36.617"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:36.627" starttime="20170720 11:17:36.623"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170720 11:17:46.719" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170720 11:17:47.320" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170720 11:17:47.320" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170720 11:17:47.320" starttime="20170720 11:17:36.627"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170720 11:17:47.662" level="INFO">['fatal'] ['fatal']</msg>
<status status="PASS" endtime="20170720 11:17:47.662" starttime="20170720 11:17:47.320"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170720 11:17:47.664" level="FAIL">'FZHQ_EARFCN_middle_20M' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170720 11:17:47.664" starttime="20170720 11:17:47.663"></status>
</kw>
<msg timestamp="20170720 11:17:47.664" level="INFO">${return1} = ('FAIL', u"'FZHQ_EARFCN_middle_20M' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170720 11:17:47.664" starttime="20170720 11:17:47.663"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:47.668" starttime="20170720 11:17:47.664"></status>
</kw>
<msg timestamp="20170720 11:17:47.668" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170720 11:17:47.668" starttime="20170720 11:17:47.664"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:47.671" starttime="20170720 11:17:47.668"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:47.671" starttime="20170720 11:17:47.668"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:47.672" starttime="20170720 11:17:47.672"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:47.672" starttime="20170720 11:17:47.672"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:47.673" starttime="20170720 11:17:47.672"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170720 11:17:47.674" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170720 11:17:47.674" starttime="20170720 11:17:47.673"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:47.678" starttime="20170720 11:17:47.675"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:47.678" starttime="20170720 11:17:47.675"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:47.678" starttime="20170720 11:17:47.674"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:47.682" starttime="20170720 11:17:47.679"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:47.682" starttime="20170720 11:17:47.679"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:47.682" starttime="20170720 11:17:47.678"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170720 11:17:47.687" starttime="20170720 11:17:47.683"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:47.687" starttime="20170720 11:17:47.683"></status>
</kw>
<status status="PASS" endtime="20170720 11:17:47.687" starttime="20170720 11:17:47.682"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170720 11:18:08.823" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 11:12:49 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0571F4E0&gt;</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0571F4E0&gt;</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[ssh_common.py@203] Last login: Thu Jul 20 11:17:49 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0475A2D8&gt;</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0475A2D8&gt;</msg>
<msg timestamp="20170720 11:18:08.823" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170720 11:18:08.823" starttime="20170720 11:17:47.687"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170720 11:18:08.828" starttime="20170720 11:18:08.825"></status>
</kw>
<status status="PASS" endtime="20170720 11:18:08.828" starttime="20170720 11:18:08.824"></status>
</kw>
<status status="PASS" endtime="20170720 11:18:08.828" starttime="20170720 11:18:08.824"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170720 11:18:08.832" starttime="20170720 11:18:08.829"></status>
</kw>
<status status="PASS" endtime="20170720 11:18:08.832" starttime="20170720 11:18:08.829"></status>
</kw>
<status status="PASS" endtime="20170720 11:18:08.832" starttime="20170720 11:18:08.828"></status>
</kw>
<status status="PASS" endtime="20170720 11:18:08.832" starttime="20170720 11:17:47.673"></status>
</kw>
<status status="PASS" endtime="20170720 11:18:08.832" starttime="20170720 11:17:27.135"></status>
</kw>
<tags>
<tag>owner-sue.nie@nokia.com</tag>
<tag>QC_720759</tag>
</tags>
<status status="FAIL" endtime="20170720 11:18:08.833" critical="yes" starttime="20170720 11:13:25.516">AdminApiProcedureFailureException: Status reached: Procedure timeout 180000 ms exceeded</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170720 11:18:08.848" starttime="20170720 11:12:04.779"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-sue.nie@nokia.com</stat>
<stat fail="1" pass="0">QC_720759</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T1 Carrier Frequency and supported EARFCN middle" pass="0">FZHQ T1 Carrier Frequency and supported EARFCN middle</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170720 11:12:05.229" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170720 11:17:46.719" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
