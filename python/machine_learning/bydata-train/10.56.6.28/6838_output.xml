<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170724 09:54:28.349" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\CRT\FZHQ_ASMI\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7.robot" id="s1" name="FZHQ T2 Throughput UDP 20M TM4 4X2 2 7">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170724094959//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170724 09:50:13.752" level="INFO">${timestamp} = 20170724095013</msg>
<status status="PASS" endtime="20170724 09:50:13.752" starttime="20170724 09:50:13.691"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170724 09:50:13.753" level="INFO">${FILE_NAME} = FZHQ T2 Throughput UDP 20M TM4 4X2 2 7</msg>
<status status="PASS" endtime="20170724 09:50:13.753" starttime="20170724 09:50:13.753"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170724 09:50:13.754" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ T2 Throughput UDP 20M TM4 4X2 2 7_20170724095013</msg>
<status status="PASS" endtime="20170724 09:50:13.754" starttime="20170724 09:50:13.754"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170724 09:50:13.755" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013</msg>
<status status="PASS" endtime="20170724 09:50:13.755" starttime="20170724 09:50:13.754"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170724 09:50:13.756" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013</msg>
<status status="PASS" endtime="20170724 09:50:13.756" starttime="20170724 09:50:13.755"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170724 09:50:13.757" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013"&gt;D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170724 09:50:13.758" starttime="20170724 09:50:13.756"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170724 09:50:13.758" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013</msg>
<status status="PASS" endtime="20170724 09:50:13.758" starttime="20170724 09:50:13.758"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170724 09:50:13.763" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170724 09:50:13.763" starttime="20170724 09:50:13.759"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170724 09:50:13.783" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170724 09:50:13.783" starttime="20170724 09:50:13.776"></status>
</kw>
<msg timestamp="20170724 09:50:13.783" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170724 09:50:13.783" starttime="20170724 09:50:13.776"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:50:13.784" starttime="20170724 09:50:13.784"></status>
</kw>
<msg timestamp="20170724 09:50:13.784" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170724 09:50:13.784" starttime="20170724 09:50:13.784"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:50:13.791" starttime="20170724 09:50:13.788"></status>
</kw>
<msg timestamp="20170724 09:50:13.791" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013</msg>
<status status="PASS" endtime="20170724 09:50:13.791" starttime="20170724 09:50:13.785"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170724 09:50:13.795" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013</msg>
<status status="PASS" endtime="20170724 09:50:13.795" starttime="20170724 09:50:13.791"></status>
</kw>
<status status="PASS" endtime="20170724 09:50:13.795" starttime="20170724 09:50:13.775"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170724 09:50:13.874" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170724 09:50:13.874" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170724 09:50:13.874" starttime="20170724 09:50:13.796"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:50:13.875" starttime="20170724 09:50:13.875"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170724 09:50:13.876" starttime="20170724 09:50:13.875"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:50:13.876" starttime="20170724 09:50:13.876"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170724 09:50:13.876" starttime="20170724 09:50:13.876"></status>
</kw>
<status status="PASS" endtime="20170724 09:50:13.877" starttime="20170724 09:50:13.796"></status>
</kw>
<status status="PASS" endtime="20170724 09:50:13.877" starttime="20170724 09:50:13.795"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:32:35 CST 2017 from 10.69.80.114 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0551A058&gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0551A058&gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:50:15 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055BF440&gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055BF440&gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:50:26 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045A9648&gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045A9648&gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:50:36 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045A99B8&gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045A99B8&gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:50:47 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045A99B8&gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x045A99B8&gt;</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170724 09:51:30.947" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170724 09:51:30.948" starttime="20170724 09:50:13.877"></status>
</kw>
<status status="PASS" endtime="20170724 09:51:30.948" starttime="20170724 09:50:13.877"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170724 09:51:30.949" starttime="20170724 09:51:30.949"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170724 09:51:30.950" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170724 09:51:30.950" starttime="20170724 09:51:30.950"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170724 09:51:30.954" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170724 09:51:30.954" starttime="20170724 09:51:30.951"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170724 09:51:30.957" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170724 09:51:30.958" starttime="20170724 09:51:30.954"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170724 09:51:30.961" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170724 09:51:30.961" starttime="20170724 09:51:30.958"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170724 09:51:32.663" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170724 09:51:32.663" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170724 09:51:32.663" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170724 09:51:32.663" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170724 09:51:32.663" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170724 09:51:32.664" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05614F58&gt;</msg>
<status status="PASS" endtime="20170724 09:51:32.664" starttime="20170724 09:51:30.961"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170724 09:51:32.664" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05614F58&gt;</msg>
<status status="PASS" endtime="20170724 09:51:32.665" starttime="20170724 09:51:32.664"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170724 09:51:33.881" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05614F58&gt;</msg>
<msg timestamp="20170724 09:51:33.881" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170724 09:51:33.881" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170724 09:51:33.881" starttime="20170724 09:51:32.668"></status>
</kw>
<status status="PASS" endtime="20170724 09:51:33.881" starttime="20170724 09:51:32.665"></status>
</kw>
<status status="PASS" endtime="20170724 09:51:33.881" starttime="20170724 09:51:30.949"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170724 09:51:33.885" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05614F58&gt;.</msg>
<status status="PASS" endtime="20170724 09:51:33.885" starttime="20170724 09:51:33.882"></status>
</kw>
<status status="PASS" endtime="20170724 09:51:33.885" starttime="20170724 09:50:13.691"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:21.408" starttime="20170724 09:54:21.405"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170724 09:54:21.415" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170724 09:54:21.415" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05614F58&gt;</msg>
<status status="PASS" endtime="20170724 09:54:21.415" starttime="20170724 09:54:21.409"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:21.416" starttime="20170724 09:54:21.415"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:21.416" starttime="20170724 09:54:21.415"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:21.417" starttime="20170724 09:54:21.416"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:21.417" starttime="20170724 09:54:21.416"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:21.417" starttime="20170724 09:54:21.405"></status>
</kw>
<test id="s1-t1" name="FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170724094959//ev_logs//D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170724 09:51:33.891" level="INFO">${timestamp} = 20170724095133</msg>
<status status="PASS" endtime="20170724 09:51:33.891" starttime="20170724 09:51:33.890"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170724 09:51:33.891" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 09:51:33.892" starttime="20170724 09:51:33.891"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170724 09:51:33.892" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 09:51:33.892" starttime="20170724 09:51:33.892"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170724 09:51:33.893" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 09:51:33.893" starttime="20170724 09:51:33.893"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170724 09:51:33.894" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7"&gt;D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170724 09:51:33.894" starttime="20170724 09:51:33.893"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170724 09:51:33.895" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 09:51:33.895" starttime="20170724 09:51:33.894"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170724 09:51:33.895" starttime="20170724 09:51:33.895"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:51:33.897" starttime="20170724 09:51:33.897"></status>
</kw>
<msg timestamp="20170724 09:51:33.897" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170724 09:51:33.897" starttime="20170724 09:51:33.896"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:51:33.899" starttime="20170724 09:51:33.898"></status>
</kw>
<msg timestamp="20170724 09:51:33.899" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170724 09:51:33.899" starttime="20170724 09:51:33.898"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170724 09:51:33.902" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 09:51:33.902" starttime="20170724 09:51:33.899"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170724 09:51:33.903" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170724094959\ev_logs\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7_20170724095013\FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7</msg>
<status status="PASS" endtime="20170724 09:51:33.903" starttime="20170724 09:51:33.903"></status>
</kw>
<status status="PASS" endtime="20170724 09:51:33.904" starttime="20170724 09:51:33.896"></status>
</kw>
<status status="PASS" endtime="20170724 09:51:33.904" starttime="20170724 09:51:33.890"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170724 09:51:33.905" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=38057 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpgaup2p --insecure</msg>
<msg timestamp="20170724 09:51:35.907" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 09:51:35.907" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 09:51:39.907" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 09:51:39.907" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 09:51:43.907" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 09:51:43.907" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 09:51:47.907" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 09:51:48.013" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 09:51:50.948" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170724 09:51:50.963" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 10585, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170724 09:51:58.626" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 10585, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170724 09:52:01.239" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 10585, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170724 09:52:01.239" starttime="20170724 09:51:33.904"></status>
</kw>
<status status="PASS" endtime="20170724 09:52:01.239" starttime="20170724 09:51:33.886"></status>
</kw>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170724 09:52:01.321" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05614F58&gt;.</msg>
<status status="PASS" endtime="20170724 09:52:01.321" starttime="20170724 09:52:01.241"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170724 09:52:05.888" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05614F58&gt;</msg>
<msg timestamp="20170724 09:52:05.888" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170724 09:52:05.888" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170724 09:52:05.888" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170724 09:52:05.888" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170724 09:52:05.888" starttime="20170724 09:52:01.321"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:52:05.892" starttime="20170724 09:52:05.889"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170724 09:52:05.896" starttime="20170724 09:52:05.892"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>bts_host=${ADMIN.IP}</arg>
<arg>bts_port=${ADMIN.PORT}</arg>
<arg>use_ssl=${ADMIN.USE_SSL}</arg>
<arg>skip_parameter_relation_errors=${ADMIN.SKIP_PARAMETER_RELATION_ERRORS}</arg>
</arguments>
<msg timestamp="20170724 09:52:48.225" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.1 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_uploadscf.log --interval=5000 --cli-port=38639 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmpsnpyr6 --insecure</msg>
<msg timestamp="20170724 09:52:50.229" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 09:52:50.229" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 09:52:54.229" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 09:52:54.229" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 09:52:59.229" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 09:52:59.229" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 09:53:03.229" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 09:53:03.229" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 09:53:07.229" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170724 09:53:07.229" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170724 09:53:11.229" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170724 09:53:11.229" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 31561, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170724 09:53:18.742" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 31561, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170724 09:53:21.205" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 31561, "requestMessage": "onAir"}}</msg>
<msg timestamp="20170724 09:53:21.501" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 95335, "parameters": {"name": "downloadPlan", "parameters": {"skipParameterRelationErrors": true, "inputFileContent": "", "btsId": "797", "shouldBeActivated": true}}}}</msg>
<msg timestamp="20170724 09:53:21.545" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"type": "SIZE", "id": 95335}}</msg>
<msg timestamp="20170724 09:53:21.546" level="INFO">Send message: {"type": "FILE_TRANSFER", "payload": {"data": 108321, "type": "SIZE", "id": 95335}}</msg>
<msg timestamp="20170724 09:53:21.561" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"length": 108321, "type": "READ", "id": 95335, "offset": 0}}</msg>
<msg timestamp="20170724 09:53:21.721" level="INFO">Send message: {"type": "FILE_TRANSFER", "payload": {"data": "PD94bWwgdm ... &lt;type 'str'&gt; of lenght: 144428", "type": "READ", "id": 95335}}</msg>
<msg timestamp="20170724 09:53:27.886" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 95335, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170724 09:53:31.514" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"type": "CLOSE_READER", "id": 95335}}</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "failed", "requestId": 95335, "requestMessage": {"result": {"resultNode": {"distName": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 74", "parameters": {"deltaDN": "", "result": "Failed", "feedback": "&lt;message&gt;&lt; ... &lt;type 'unicode'&gt; of lenght: 211"}}, "failCause": "RESULT_FAILED", "indicationDistName": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 51", "confirmationNode": {"eventType": "onObjectAppeared"}}, "validationResult": {"niddValidationResult": {"status": "OK", "logs": {"objectsOccurencesErrors": null, "invalidObjectsDistnames": null, "definitionErrors": null, "skippedElementsErrors": [{"distName": "MRBTS-797", "field": "altitude", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797", "field": "latitude", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797", "field": "longitude", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797/LNBTS-797", "field": "operationalState", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797/LNBTS-797", "field": "supportedNumOfAnrMoi", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797/LNBTS-797", "field": "supportedNumOfLnadj", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797/LNBTS-797/LNCEL-1", "field": "energySavingState", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797/LNBTS-797/LNCEL-1", "field": "eutraCelId", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797/LNBTS-797/LNCEL-1", "field": "operationalState", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797/LNBTS-797/LNMME-0", "field": "mmeName", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797/LNBTS-797/LNMME-0", "field": "relMmeCap", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"distName": "MRBTS-797/LNBTS-797/LNMME-0", "field": "s1LinkStatus", "error": [{"key": "CAN_BE_ONLY_SET_BY_SYSTEM"}]}, {"field": "CHANNEL", "distName": "MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72", "removedMocs": {"notification": [{"key": "MANAGED_OBJECTS_REMOVED"}, " CHANNEL "], "removedMocsDNList": ["MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72"]}, "error": [{"key": "MANAGED_OBJECT_WITH_DIST_NAME"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 63", {"key": "SHOULD_BE_PARENT"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 74", {"key": "NOT_EXIST"}]}, {"field": "CHANNEL", "distName": "MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72", "removedMocs": {"notification": [{"key": "MANAGED_OBJECTS_REMOVED"}, " CHANNEL "], "removedMocsDNList": ["MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72"]}, "error": [{"key": "MANAGED_OBJECT_WITH_DIST_NAME"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 63", {"key": "SHOULD_BE_PARENT"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 74", {"key": "NOT_EXIST"}]}, {"field": "CHANNEL", "distName": "MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72", "removedMocs": {"notification": [{"key": "MANAGED_OBJECTS_REMOVED"}, " CHANNEL "], "removedMocsDNList": ["MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72"]}, "error": [{"key": "MANAGED_OBJECT_WITH_DIST_NAME"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 63", {"key": "SHOULD_BE_PARENT"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 74", {"key": "NOT_EXIST"}]}, {"field": "CHANNEL", "distName": "MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72", "removedMocs": {"notification": [{"key": "MANAGED_OBJECTS_REMOVED"}, " CHANNEL "], "removedMocsDNList": ["MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72"]}, "error": [{"key": "MANAGED_OBJECT_WITH_DIST_NAME"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 63", {"key": "SHOULD_BE_PARENT"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 74", {"key": "NOT_EXIST"}]}, {"field": "CHANNEL", "distName": "MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72", "removedMocs": {"notification": [{"key": "MANAGED_OBJECTS_REMOVED"}, " CHANNEL "], "removedMocsDNList": ["MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72"]}, "error": [{"key": "MANAGED_OBJECT_WITH_DIST_NAME"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 63", {"key": "SHOULD_BE_PARENT"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 74", {"key": "NOT_EXIST"}]}, {"field": "CHANNEL", "distName": "MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72", "removedMocs": {"notification": [{"key": "MANAGED_OBJECTS_REMOVED"}, " CHANNEL "], "removedMocsDNList": ["MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72"]}, "error": [{"key": "MANAGED_OBJECT_WITH_DIST_NAME"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 63", {"key": "SHOULD_BE_PARENT"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 74", {"key": "NOT_EXIST"}]}, {"field": "CHANNEL", "distName": "MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72", "removedMocs": {"notification": [{"key": "MANAGED_OBJECTS_REMOVED"}, " CHANNEL "], "removedMocsDNList": ["MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 72"]}, "error": [{"key": "MANAGED_OBJECT_WITH_DIST_NAME"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 63", {"key": "SHOULD_BE_PARENT"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 74", {"key": "NOT_EXIST"}]}, {"field": "CHANNEL", "distName": "MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 71", "removedMocs": {"notification": [{"key": "MANAGED_OBJECTS_REMOVED"}, " CHANNEL "], "removedMocsDNList": ["MRBTS-797/ ... &lt;type 'unicode'&gt; of lenght: 71"]}, "error": [{"key": "MANAGED_OBJECT_WITH_DIST_NAME"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 63", {"key": "SHOULD_BE_PARENT"}, " MRBTS-797 ... &lt;type 'unicode'&gt; of lenght: 73", {"key": "NOT_EXIST"}]}]}}, "pdlValidationResult": {"status": "FAIL", "logs": "[u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-5 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-6 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-7 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-8 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-5 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-6 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-7 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u\"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-8 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)\", u'rule failed: MRBTS-797/MNL-1/MNLENT-1/CERTH-1 CERTH(cmpCrlSrcIpAddressDN defined) have \\t    (every IPADDRESSV4(IPADDRESSV4.distname = external CERTH.cmpCrlSrcIpAddressDN) exist) \\t    or\\t    (every IPADDRESSV6(IPADDRESSV6.distname = external CERTH.cmpCrlSrcIpAddressDN) exist)', u\"rule failed: MRBTS-797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1.syncInputList-0 MNL/MNLENT/SYNC(btsSyncMode = 'PhaseSync')/CLOCK.syncInputList(syncInputType = '1pps/ToD from external GNSS receiver') have CLOCK/GNSSE.gnssCableLength defined or CLOCK/GNSSE.gnssLineDelay defined\"] ... &lt;type 'list'&gt; of lenght: 63"}}}}}</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:50:57 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05563F58&gt;</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05563F58&gt;</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:52:07 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05522AD0&gt;</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05522AD0&gt;</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:52:18 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055BF120&gt;</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170724 09:53:31.515" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:53:31.516" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055BF120&gt;</msg>
<msg timestamp="20170724 09:53:31.516" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:53:31.516" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:52:28 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:53:31.516" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0553AC60&gt;</msg>
<msg timestamp="20170724 09:53:31.516" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170724 09:53:31.516" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170724 09:53:31.516" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0553AC60&gt;</msg>
<msg timestamp="20170724 09:53:31.516" level="INFO">[enb_resource.py@371] Start to setup admin</msg>
<msg timestamp="20170724 09:53:31.516" level="INFO">[enb_resource.py@374] Start to perform commissioning</msg>
<msg timestamp="20170724 09:53:31.576" level="FAIL">AdminApiProcedureFailureException: Status reached: {u'result': {u'resultNode': {u'distName': u'/MRBTS-1/RAT-1/URI-4/SESSION-16/PLAN_VALIDATE_IND-0/PLAN_VALIDATE_RESULT-1', u'parameters': {u'result': u'Failed', u'feedback': u'&lt;message&gt;&lt;p name="version"&gt;SBTS00&lt;/p&gt;&lt;p name="dn"&gt;MRBTS-797&lt;/p&gt;&lt;p name="text"&gt;Plan operation failed.&lt;/p&gt;&lt;p name="status"&gt;Error&lt;/p&gt;&lt;p name="details"&gt;Plan download failed because BTS_DATA is invalid.&lt;/p&gt;&lt;/message&gt;', u'deltaDN': u''}}, u'failCause': u'RESULT_FAILED', u'indicationDistName': u'/MRBTS-1/RAT-1/URI-4/SESSION-16/PLAN_VALIDATE_IND-0', u'confirmationNode': {u'eventType': u'onObjectAppeared'}}, u'validationResult': {u'niddValidationResult': {u'status': u'OK', u'logs': {u'objectsOccurencesErrors': None, u'invalidObjectsDistnames': None, u'definitionErrors': None, u'skippedElementsErrors': [{u'distName': u'MRBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'altitude'}, {u'distName': u'MRBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'latitude'}, {u'distName': u'MRBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'longitude'}, {u'distName': u'MRBTS-797/LNBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'operationalState'}, {u'distName': u'MRBTS-797/LNBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'supportedNumOfAnrMoi'}, {u'distName': u'MRBTS-797/LNBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'supportedNumOfLnadj'}, {u'distName': u'MRBTS-797/LNBTS-797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'energySavingState'}, {u'distName': u'MRBTS-797/LNBTS-797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'eutraCelId'}, {u'distName': u'MRBTS-797/LNBTS-797/LNCEL-1', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'operationalState'}, {u'distName': u'MRBTS-797/LNBTS-797/LNMME-0', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'mmeName'}, {u'distName': u'MRBTS-797/LNBTS-797/LNMME-0', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'relMmeCap'}, {u'distName': u'MRBTS-797/LNBTS-797/LNMME-0', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u's1LinkStatus'}, {u'distName': u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-10', u'error': [{u'key': u'MANAGED_OBJECT_WITH_DIST_NAME'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1 ', {u'key': u'SHOULD_BE_PARENT'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-10 ', {u'key': u'NOT_EXIST'}], u'removedMocs': {u'notification': [{u'key': u'MANAGED_OBJECTS_REMOVED'}, u' CHANNEL '], u'removedMocsDNList': [u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-10']}, u'field': u'CHANNEL'}, {u'distName': u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-11', u'error': [{u'key': u'MANAGED_OBJECT_WITH_DIST_NAME'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1 ', {u'key': u'SHOULD_BE_PARENT'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-11 ', {u'key': u'NOT_EXIST'}], u'removedMocs': {u'notification': [{u'key': u'MANAGED_OBJECTS_REMOVED'}, u' CHANNEL '], u'removedMocsDNList': [u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-11']}, u'field': u'CHANNEL'}, {u'distName': u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-12', u'error': [{u'key': u'MANAGED_OBJECT_WITH_DIST_NAME'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1 ', {u'key': u'SHOULD_BE_PARENT'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-12 ', {u'key': u'NOT_EXIST'}], u'removedMocs': {u'notification': [{u'key': u'MANAGED_OBJECTS_REMOVED'}, u' CHANNEL '], u'removedMocsDNList': [u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-12']}, u'field': u'CHANNEL'}, {u'distName': u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-13', u'error': [{u'key': u'MANAGED_OBJECT_WITH_DIST_NAME'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1 ', {u'key': u'SHOULD_BE_PARENT'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-13 ', {u'key': u'NOT_EXIST'}], u'removedMocs': {u'notification': [{u'key': u'MANAGED_OBJECTS_REMOVED'}, u' CHANNEL '], u'removedMocsDNList': [u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-13']}, u'field': u'CHANNEL'}, {u'distName': u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-14', u'error': [{u'key': u'MANAGED_OBJECT_WITH_DIST_NAME'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1 ', {u'key': u'SHOULD_BE_PARENT'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-14 ', {u'key': u'NOT_EXIST'}], u'removedMocs': {u'notification': [{u'key': u'MANAGED_OBJECTS_REMOVED'}, u' CHANNEL '], u'removedMocsDNList': [u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-14']}, u'field': u'CHANNEL'}, {u'distName': u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-15', u'error': [{u'key': u'MANAGED_OBJECT_WITH_DIST_NAME'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1 ', {u'key': u'SHOULD_BE_PARENT'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-15 ', {u'key': u'NOT_EXIST'}], u'removedMocs': {u'notification': [{u'key': u'MANAGED_OBJECTS_REMOVED'}, u' CHANNEL '], u'removedMocsDNList': [u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-15']}, u'field': u'CHANNEL'}, {u'distName': u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-16', u'error': [{u'key': u'MANAGED_OBJECT_WITH_DIST_NAME'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1 ', {u'key': u'SHOULD_BE_PARENT'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-16 ', {u'key': u'NOT_EXIST'}], u'removedMocs': {u'notification': [{u'key': u'MANAGED_OBJECTS_REMOVED'}, u' CHANNEL '], u'removedMocsDNList': [u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-16']}, u'field': u'CHANNEL'}, {u'distName': u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-9', u'error': [{u'key': u'MANAGED_OBJECT_WITH_DIST_NAME'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1 ', {u'key': u'SHOULD_BE_PARENT'}, u' MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-9 ', {u'key': u'NOT_EXIST'}], u'removedMocs': {u'notification': [{u'key': u'MANAGED_OBJECTS_REMOVED'}, u' CHANNEL '], u'removedMocsDNList': [u'MRBTS-797/MNL-1/MNLENT-1/CELLMAPPING-1/LCELL-2/CHANNELGROUP-1/CHANNEL-9']}, u'field': u'CHANNEL'}]}}, u'pdlValidationResult': {u'status': u'FAIL', u'logs': [u"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-5 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-6 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-7 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-8 ANTL have vswrMinorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-5 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-6 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-7 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u"rule failed: MRBTS-797/EQM-1/APEQM-1/RMOD-1/ANTL-8 ANTL have vswrMajorThreshold undefined if (every CHANNEL(antlDN = external ANTL.distname and direction = 'TX') not exist)", u'rule failed: MRBTS-797/MNL-1/MNLENT-1/CERTH-1 CERTH(cmpCrlSrcIpAddressDN defined) have \t    (every IPADDRESSV4(IPADDRESSV4.distname = external CERTH.cmpCrlSrcIpAddressDN) exist) \t    or\t    (every IPADDRESSV6(IPADDRESSV6.distname = external CERTH.cmpCrlSrcIpAddressDN) exist)', u"rule failed: MRBTS-797/MNL-1/MNLENT-1/SYNC-1/CLOCK-1.syncInputList-0 MNL/MNLENT/SYNC(btsSyncMode = 'PhaseSync')/CLOCK.syncInputList(syncInputType = '1pps/ToD from external GNSS receiver') have CLOCK/GNSSE.gnssCableLength defined or CLOCK/GNSSE.gnssLineDelay defined", u"rule failed: MRBTS-797/TNLSVC-1/TNL-1/IPNO-1/IPIF-1/IPADDRESSV4-1 IPADDRESSV4(ipAddressAllocationMethod = 'MANUAL') have localIpAddr undefined", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1 LNBTS(actIfHo='disabled')/LNCEL have a2TimeToTriggerActInterFreqMeas undefined", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2 LNBTS(actIfHo='disabled')/LNCEL have a2TimeToTriggerActInterFreqMeas undefined", u'rule failed: global LNCEL have lcrId unique', u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2 LNCEL(actUlpcMethod in range 'PuschOLPucchCL'|'PuschCLPucchCL'|'PuschCLSrsPucchCL'|'PuschIAwPucchCL') have ulpcPucchConfig defined", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1 LNCEL(cellTechnology = 'TDD' and actUlpcMethod = 'PuschCLSrsPucchCL') have ulpcPucchConfig defined and ulpcPuschConfig defined and ulpcReadPeriod defined and LNCEL/LNCEL_FDD.srsActivation = 'true'", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2 LNCEL(cellTechnology = 'TDD' and actUlpcMethod = 'PuschCLSrsPucchCL') have ulpcPucchConfig defined and ulpcPuschConfig defined and ulpcReadPeriod defined and LNCEL/LNCEL_FDD.srsActivation = 'true'", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2 LNCEL(actUlpcMethod in range 'PuschCLPucchOL' | 'PuschCLPucchCL' | 'PuschCLSrsPucchOL' | 'PuschCLSrsPucchCL') have ulpcPuschConfig defined", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1 LNCEL(cellTechnology = 'TDD') have ulsSchedMethod in range 'interference aware'|'channel unaware'", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2 LNCEL(cellTechnology = 'TDD') have ulsSchedMethod in range 'interference aware'|'channel unaware'", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD(dlMimoMode in range 'Closed Loop MIMO (4x2)'|'Closed Loop MIMO (4x4)') have activatedMimoTM defined", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL_TDD(dlMimoMode in range 'Closed Loop MIMO (4x2)'|'Closed Loop MIMO (4x4)') have activatedMimoTM defined", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD(dlMimoMode = 'Closed Loop MIMO (4x2)') have activatedMimoTM &lt;&gt; 'TM9_maxLayer'", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL_TDD(dlMimoMode = 'Closed Loop MIMO (4x2)') have activatedMimoTM &lt;&gt; 'TM9_maxLayer'", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD(dlMimoMode = 'Closed Loop MIMO (4x2)') have activatedMimoTM defined", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL_TDD(dlMimoMode = 'Closed Loop MIMO (4x2)') have activatedMimoTM defined", u'rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD(tddSpecSubfConf = 7) have maxNumUeDlDwPTS &lt;&gt; 0 and (prachConfIndex in range 3..7 or prachConfIndex in range 51..53)', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL_TDD(tddSpecSubfConf = 7) have maxNumUeDlDwPTS &lt;&gt; 0 and (prachConfIndex in range 3..7 or prachConfIndex in range 51..53)', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD(tddSpecSubfConf in range 3|4|6|7|9) have maxNumUeDlDwPTS &lt;&gt; 0', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL_TDD(tddSpecSubfConf in range 3|4|6|7|9) have maxNumUeDlDwPTS &lt;&gt; 0', u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD(actAutoPucchAlloc = 'false') have ulSpsConfig.ulSpsMaxNumPrb &lt;= toPRBS(chBw) - 6 - temporary maxPucchResourceSize", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL_TDD(actAutoPucchAlloc = 'false') have ulSpsConfig.ulSpsMaxNumPrb &lt;= toPRBS(chBw) - 6 - temporary maxPucchResourceSize", u'rule failed: MRBTS-797/LNBTS-797/LNCEL-1 LNCEL have LNCEL/LNCEL_TDD.prachFreqOff &gt;= ceil(temporary maxPucchResourceSize / 2) and LNCEL/LNCEL_TDD.prachFreqOff &lt;= toPRBS(LNCEL/LNCEL_TDD.chBw) - 6 - ceil(temporary maxPucchResourceSize / 2) if LNCEL/LNCEL_TDD.prachConfIndex &lt; 51 or LNCEL/LNCEL_TDD.prachConfIndex &gt; 53', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-2 LNCEL have LNCEL/LNCEL_TDD.prachFreqOff &gt;= ceil(temporary maxPucchResourceSize / 2) and LNCEL/LNCEL_TDD.prachFreqOff &lt;= toPRBS(LNCEL/LNCEL_TDD.chBw) - 6 - ceil(temporary maxPucchResourceSize / 2) if LNCEL/LNCEL_TDD.prachConfIndex &lt; 51 or LNCEL/LNCEL_TDD.prachConfIndex &gt; 53', u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD(actReduceWimaxInterference &lt;&gt; 'false' and (tddFrameConf &lt;&gt; 1 or actReduceWimaxInterference &lt;&gt; 'true' or (tddSpecSubfConf &lt;&gt; 3 and tddSpecSubfConf &lt;&gt; 4 and tddSpecSubfConf &lt;&gt; 7))) have rxCalibrationConfiguration = 'noRxCalibration'", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL_TDD(actReduceWimaxInterference &lt;&gt; 'false' and (tddFrameConf &lt;&gt; 1 or actReduceWimaxInterference &lt;&gt; 'true' or (tddSpecSubfConf &lt;&gt; 3 and tddSpecSubfConf &lt;&gt; 4 and tddSpecSubfConf &lt;&gt; 7))) have rxCalibrationConfiguration = 'noRxCalibration'", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL_TDD(srsActivation = 'true') have srsDlMimoModeDepConf defined", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL_TDD(srsActivation = 'true') have srsSubfrConf defined and srsBwConf defined and srsSimAckNack defined and srsDlMimoModeDepConf defined and srsHoppingBw defined and srsPwrOffset defined and srsDuration defined", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0 LNCEL/LNCEL_TDD(actSuperCell = 'false') have dlSectorBeamformingMode undefined unless (every LCELL(lCellId = external LNCEL.lcrId)/CHANNELGROUP/CHANNEL(direction = 'TX') have cardinality = 8)", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL/LNCEL_TDD(actSuperCell = 'false') have dlSectorBeamformingMode undefined unless (every LCELL(lCellId = external LNCEL.lcrId)/CHANNELGROUP/CHANNEL(direction = 'TX') have cardinality = 8)", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0 LNCEL/LNCEL_TDD have dlSectorBeamformingMode undefined if (every LCELL(lCellId = external LNCEL.lcrId)/CHANNELGROUP/CHANNEL(direction = 'TX') have cardinality &lt;&gt; 8) or actSuperCell = 'true'", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL/LNCEL_TDD have dlSectorBeamformingMode undefined if (every LCELL(lCellId = external LNCEL.lcrId)/CHANNELGROUP/CHANNEL(direction = 'TX') have cardinality &lt;&gt; 8) or actSuperCell = 'true'", u'rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0 LNCEL_TDD have fourLayerMimoAvSpectralEff &gt;= twoLayerMimoAvSpectralEff', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0 LNCEL_TDD have fourLayerMimoAvSpectralEff &gt;= twoLayerMimoAvSpectralEff', u"rule failed: MRBTS-797/LNBTS-797/LNMME-0 LNMME(mmeRatSupport = 'Wideband-LTE') have (every LNCEL(cellTechnology = 'FDD') exist)", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-1/LNCEL_TDD-0/MPUCCH_TDD-0 LNCEL_TDD(chBw in range '10 MHz'|'15 MHz'|'20 MHz' and tddFrameConf = 2 and temporary ackNackResNumber defined)/MPUCCH_TDD have toPRBS(nCqiRb + ceil((((temporary ackNackResNumber + n1PucchAn) - (LNCEL_TDD.pucchNAnCs*3)/deltaPucchShift)*deltaPucchShift)/36 + ceil(LNCEL_TDD.pucchNAnCs/8))) &lt;= 28", u"rule failed: MRBTS-797/LNBTS-797/LNCEL-2/LNCEL_TDD-0/MPUCCH_TDD-0 LNCEL_TDD(chBw in range '10 MHz'|'15 MHz'|'20 MHz' and tddFrameConf = 2 and temporary ackNackResNumber defined)/MPUCCH_TDD have toPRBS(nCqiRb + ceil((((temporary ackNackResNumber + n1PucchAn) - (LNCEL_TDD.pucchNAnCs*3)/deltaPucchShift)*deltaPucchShift)/36 + ceil(LNCEL_TDD.pucchNAnCs/8))) &lt;= 28", u'rule failed: MRBTS-797/LNBTS-797/LNCEL-1/SIB-0 SIB have acbNumRrcConnCellStop &lt;= acbNumRrcConnCellStart', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-2/SIB-0 SIB have acbNumRrcConnCellStop &lt;= acbNumRrcConnCellStart', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-1/SIB-0 SIB have acbNumRrcReqStart &gt; acbNumRrcReqStop', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-2/SIB-0 SIB have acbNumRrcReqStart &gt; acbNumRrcReqStop', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-1/SIB-0 SIB have acbNumRrcConnCellStart &gt;= acbNumRrcConnCellStop', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-2/SIB-0 SIB have acbNumRrcConnCellStart &gt;= acbNumRrcConnCellStop', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-1/SIB-0 SIB have acbNumRrcReqStop &lt; acbNumRrcReqStart', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-2/SIB-0 SIB have acbNumRrcReqStop &lt; acbNumRrcReqStart', u"rule failed: MRBTS-797/LNBTS-797/TRSNW-1 TRSNW(transportNwInUse = 'true') have (every LTAC(transportNwId = external TRSNW.trsNwId) exist)", u"rule failed: MRBTS-797/LNBTS-797/TRSNW-1 TRSNW(transportNwInUse = 'true') have (every LNMME(transportNwId = external TRSNW.trsNwId) exist)", u'rule failed: MRBTS-797/LNBTS-797/TRSNW-1 TRSNW have (every LTAC(transportNwId = external TRSNW.trsNwId) exist)', u'rule failed: MRBTS-797/EQM-1/HWTOP-1/CABLINK-13000/secondEndpointDN Object with distName MRBTS-797/EQM-1/APEQM-1/PHYANT-13000 does not exists', u'rule failed: MRBTS-797/EQM-1/HWTOP-1/CABLINK-13002/secondEndpointDN Object with distName MRBTS-797/EQM-1/APEQM-1/PHYANT-13002 does not exists', u'rule failed: MRBTS-797/EQM-1/HWTOP-1/CABLINK-13001/secondEndpointDN Object with distName MRBTS-797/EQM-1/APEQM-1/PHYANT-13001 does not exists', u'rule failed: MRBTS-797/EQM-1/HWTOP-1/CABLINK-13003/secondEndpointDN Object with distName MRBTS-797/EQM-1/APEQM-1/PHYANT-13003 does not exists', u'rule failed: MRBTS-797/MNL-1/MNLENT-1/CERTH-1/cmpCrlSrcIpAddressDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-1/SCF-4/10.56.126.22 does not exists']}}}</msg>
<status status="FAIL" endtime="20170724 09:53:31.577" starttime="20170724 09:52:05.896"></status>
</kw>
<status status="FAIL" endtime="20170724 09:53:31.577" starttime="20170724 09:52:01.240"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170724 09:53:31.619" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05614F58&gt;.</msg>
<status status="PASS" endtime="20170724 09:53:31.620" starttime="20170724 09:53:31.579"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170724 09:53:33.530" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170724 09:53:33.530" starttime="20170724 09:53:31.620"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20170724 09:53:33.560" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<status status="PASS" endtime="20170724 09:53:33.560" starttime="20170724 09:53:33.531"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170724 09:53:33.567" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20170724 09:53:33.567" starttime="20170724 09:53:33.561"></status>
</kw>
<msg timestamp="20170724 09:53:33.567" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20170724 09:53:33.567" starttime="20170724 09:53:33.560"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:33.571" starttime="20170724 09:53:33.568"></status>
</kw>
<status status="PASS" endtime="20170724 09:53:33.571" starttime="20170724 09:53:33.568"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:33.575" starttime="20170724 09:53:33.572"></status>
</kw>
<status status="PASS" endtime="20170724 09:53:33.575" starttime="20170724 09:53:33.571"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170724 09:53:33.826" level="INFO">Exit code: 1</msg>
<msg timestamp="20170724 09:53:33.826" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:38057
</msg>
<msg timestamp="20170724 09:53:33.826" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170724 09:53:33.827" starttime="20170724 09:53:33.575"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:33.828" starttime="20170724 09:53:33.828"></status>
</kw>
<status status="PASS" endtime="20170724 09:53:33.828" starttime="20170724 09:53:33.827"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:33.829" starttime="20170724 09:53:33.829"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:33.830" starttime="20170724 09:53:33.829"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170724 09:53:33.837" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170724 09:53:33.837" starttime="20170724 09:53:33.831"></status>
</kw>
<msg timestamp="20170724 09:53:33.838" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170724 09:53:33.838" starttime="20170724 09:53:33.830"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:33.841" starttime="20170724 09:53:33.838"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:33.844" starttime="20170724 09:53:33.841"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170724 09:53:33.908" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170724 09:53:33.908" starttime="20170724 09:53:33.845"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:33.910" starttime="20170724 09:53:33.910"></status>
</kw>
<msg timestamp="20170724 09:53:33.910" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170724 09:53:33.911" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170724 09:53:33.911" starttime="20170724 09:53:33.909"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:33.914" starttime="20170724 09:53:33.911"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170724 09:53:38.007" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170724 09:53:38.007" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170724 09:53:38.007" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170724 09:53:38.007" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170724 09:53:38.007" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170724 09:53:38.008" starttime="20170724 09:53:33.914"></status>
</kw>
<status status="PASS" endtime="20170724 09:53:38.008" starttime="20170724 09:53:33.909"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:38.009" starttime="20170724 09:53:38.009"></status>
</kw>
<msg timestamp="20170724 09:53:38.009" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170724 09:53:38.009" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170724 09:53:38.009" starttime="20170724 09:53:38.008"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:38.013" starttime="20170724 09:53:38.010"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170724 09:53:42.040" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170724 09:53:42.040" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170724 09:53:42.040" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170724 09:53:42.040" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170724 09:53:42.040" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170724 09:53:42.041" starttime="20170724 09:53:38.013"></status>
</kw>
<status status="PASS" endtime="20170724 09:53:42.041" starttime="20170724 09:53:38.008"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170724 09:53:42.051" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170724 09:53:42.052" starttime="20170724 09:53:42.042"></status>
</kw>
<msg timestamp="20170724 09:53:42.052" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170724 09:53:42.052" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170724 09:53:42.052" starttime="20170724 09:53:42.041"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170724 09:53:42.057" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170724 09:53:42.057" starttime="20170724 09:53:42.052"></status>
</kw>
<status status="PASS" endtime="20170724 09:53:42.057" starttime="20170724 09:53:42.041"></status>
</kw>
<status status="PASS" endtime="20170724 09:53:42.057" starttime="20170724 09:53:33.909"></status>
</kw>
<status status="PASS" endtime="20170724 09:53:42.058" starttime="20170724 09:53:33.908"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:42.058" starttime="20170724 09:53:42.058"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170724 09:53:42.064" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170724 09:53:42.064" starttime="20170724 09:53:42.059"></status>
</kw>
<status status="FAIL" endtime="20170724 09:53:42.064" starttime="20170724 09:53:33.828"></status>
</kw>
<status status="PASS" endtime="20170724 09:53:42.064" starttime="20170724 09:53:33.828"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170724 09:53:42.075" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170724 09:53:42.075" starttime="20170724 09:53:42.065"></status>
</kw>
<msg timestamp="20170724 09:53:42.076" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170724 09:53:42.076" starttime="20170724 09:53:42.065"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:53:42.081" starttime="20170724 09:53:42.076"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170724 09:53:59.672" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170724 09:54:00.236" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170724 09:54:00.236" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170724 09:54:00.236" starttime="20170724 09:53:42.081"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:00.238" starttime="20170724 09:54:00.237"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170724 09:54:00.239" level="FAIL">'FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170724 09:54:00.239" starttime="20170724 09:54:00.238"></status>
</kw>
<msg timestamp="20170724 09:54:00.239" level="INFO">${return1} = ('FAIL', u"'FZHQ_T2_Throughput_UDP_20M_TM4_4X2_2_7' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170724 09:54:00.239" starttime="20170724 09:54:00.238"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:00.243" starttime="20170724 09:54:00.240"></status>
</kw>
<msg timestamp="20170724 09:54:00.243" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170724 09:54:00.243" starttime="20170724 09:54:00.239"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:00.247" starttime="20170724 09:54:00.244"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:00.247" starttime="20170724 09:54:00.244"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:00.248" starttime="20170724 09:54:00.247"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:00.248" starttime="20170724 09:54:00.248"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:00.248" starttime="20170724 09:54:00.248"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170724 09:54:00.250" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170724 09:54:00.250" starttime="20170724 09:54:00.249"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:00.254" starttime="20170724 09:54:00.251"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:00.254" starttime="20170724 09:54:00.250"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:00.254" starttime="20170724 09:54:00.250"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:00.258" starttime="20170724 09:54:00.255"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:00.258" starttime="20170724 09:54:00.254"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:00.258" starttime="20170724 09:54:00.254"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:00.263" starttime="20170724 09:54:00.259"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:00.263" starttime="20170724 09:54:00.259"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:00.263" starttime="20170724 09:54:00.259"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170724 09:54:21.392" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:52:39 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057BD6C0&gt;</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x057BD6C0&gt;</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[ssh_common.py@203] Last login: Mon Jul 24 09:54:01 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05536080&gt;</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05536080&gt;</msg>
<msg timestamp="20170724 09:54:21.392" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170724 09:54:21.392" starttime="20170724 09:54:00.263"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:21.397" starttime="20170724 09:54:21.394"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:21.397" starttime="20170724 09:54:21.393"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:21.397" starttime="20170724 09:54:21.393"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170724 09:54:21.402" starttime="20170724 09:54:21.398"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:21.402" starttime="20170724 09:54:21.398"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:21.402" starttime="20170724 09:54:21.397"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:21.402" starttime="20170724 09:54:00.249"></status>
</kw>
<status status="PASS" endtime="20170724 09:54:21.402" starttime="20170724 09:53:31.578"></status>
</kw>
<tags>
<tag>owner-sue.nie@nokia.com</tag>
<tag>QC_720763</tag>
</tags>
<status status="FAIL" endtime="20170724 09:54:21.403" critical="yes" starttime="20170724 09:51:33.885">AdminApiProcedureFailureException: Status reached: {u'result': {u'resultNode': {u'distName': u'/MRBTS-1/RAT-1/URI-4/SESSION-16/PLAN_VALIDATE_IND-0/PLAN_VALIDATE_RESULT-1', u'parameters': {u'result': u'Failed', u'feedback': u'&lt;message&gt;&lt;p name="version"&gt;SBTS00&lt;/p&gt;&lt;p name="dn"&gt;MRBTS-797&lt;/p&gt;&lt;p name="text"&gt;Plan operation failed.&lt;/p&gt;&lt;p name="status"&gt;Error&lt;/p&gt;&lt;p name="details"&gt;Plan download failed because BTS_DATA is invalid.&lt;/p&gt;&lt;/message&gt;', u'deltaDN': u''}}, u'failCause': u'RESULT_FAILED', u'indicationDistName': u'/MRBTS-1/RAT-1/URI-4/SESSION-16/PLAN_VALIDATE_IND-0', u'confirmationNode': {u'eventType': u'onObjectAppeared'}}, u'validationResult': {u'niddValidationResult': {u'status': u'OK', u'logs': {u'objectsOccurencesErrors': None, u'invalidObjectsDistnames': None, u'definitionErrors': None, u'skippedElementsErrors': [{u'distName': u'MRBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'altitude'}, {u'distName': u'MRBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'latitude'}, {u'distName': u'MRBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'longitude'}, {u'distName': u'MRBTS-797/LNBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'operationalState'}, {u'distName': u'MRBTS-797/LNBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'supportedNumOfAnrMoi'}, {u'distName': u'MRBTS-797/LNBTS-797', u'error': [{u'key': u'CAN_BE_ONLY_SET_BY_SYSTEM'}], u'field': u'supportedNumOfLnadj'}, {u'distName': u'MRBTS-797/LNBTS-797/LNCEL-1',...
    [ Message content over the limit has been removed. ]
...le failed: MRBTS-797/LNBTS-797/LNCEL-1/SIB-0 SIB have acbNumRrcConnCellStart &gt;= acbNumRrcConnCellStop', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-2/SIB-0 SIB have acbNumRrcConnCellStart &gt;= acbNumRrcConnCellStop', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-1/SIB-0 SIB have acbNumRrcReqStop &lt; acbNumRrcReqStart', u'rule failed: MRBTS-797/LNBTS-797/LNCEL-2/SIB-0 SIB have acbNumRrcReqStop &lt; acbNumRrcReqStart', u"rule failed: MRBTS-797/LNBTS-797/TRSNW-1 TRSNW(transportNwInUse = 'true') have (every LTAC(transportNwId = external TRSNW.trsNwId) exist)", u"rule failed: MRBTS-797/LNBTS-797/TRSNW-1 TRSNW(transportNwInUse = 'true') have (every LNMME(transportNwId = external TRSNW.trsNwId) exist)", u'rule failed: MRBTS-797/LNBTS-797/TRSNW-1 TRSNW have (every LTAC(transportNwId = external TRSNW.trsNwId) exist)', u'rule failed: MRBTS-797/EQM-1/HWTOP-1/CABLINK-13000/secondEndpointDN Object with distName MRBTS-797/EQM-1/APEQM-1/PHYANT-13000 does not exists', u'rule failed: MRBTS-797/EQM-1/HWTOP-1/CABLINK-13002/secondEndpointDN Object with distName MRBTS-797/EQM-1/APEQM-1/PHYANT-13002 does not exists', u'rule failed: MRBTS-797/EQM-1/HWTOP-1/CABLINK-13001/secondEndpointDN Object with distName MRBTS-797/EQM-1/APEQM-1/PHYANT-13001 does not exists', u'rule failed: MRBTS-797/EQM-1/HWTOP-1/CABLINK-13003/secondEndpointDN Object with distName MRBTS-797/EQM-1/APEQM-1/PHYANT-13003 does not exists', u'rule failed: MRBTS-797/MNL-1/MNLENT-1/CERTH-1/cmpCrlSrcIpAddressDN Object with distName MRBTS-1/RAT-1/BTS_L-4/BTS_CONF-1/NP-1/SCF-4/10.56.126.22 does not exists']}}}</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170724 09:54:21.417" starttime="20170724 09:50:07.486"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-sue.nie@nokia.com</stat>
<stat fail="1" pass="0">QC_720763</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T2 Throughput UDP 20M TM4 4X2 2 7" pass="0">FZHQ T2 Throughput UDP 20M TM4 4X2 2 7</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170724 09:50:10.954" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170724 09:53:59.672" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
