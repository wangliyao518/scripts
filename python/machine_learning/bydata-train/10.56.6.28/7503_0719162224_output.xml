<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170719 16:22:24.973" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\SBTS00_TDD\CRT\FZHQ_ASMI\FZHQ_T1_Operational_RF_block_unblock\FZHQ_T1_Operational_RF_block_unblock.robot" id="s1" name="FZHQ T1 Operational RF block unblock">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA\TA_logs\TestLog_20170719161040//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170719 16:10:51.101" level="INFO">${timestamp} = 20170719161051</msg>
<status status="PASS" endtime="20170719 16:10:51.101" starttime="20170719 16:10:51.044"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170719 16:10:51.102" level="INFO">${FILE_NAME} = FZHQ T1 Operational RF block unblock</msg>
<status status="PASS" endtime="20170719 16:10:51.102" starttime="20170719 16:10:51.101"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170719 16:10:51.102" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ T1 Operational RF block unblock_20170719161051</msg>
<status status="PASS" endtime="20170719 16:10:51.103" starttime="20170719 16:10:51.102"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170719 16:10:51.103" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051</msg>
<status status="PASS" endtime="20170719 16:10:51.103" starttime="20170719 16:10:51.103"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170719 16:10:51.104" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051</msg>
<status status="PASS" endtime="20170719 16:10:51.104" starttime="20170719 16:10:51.104"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170719 16:10:51.105" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051"&gt;D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170719 16:10:51.105" starttime="20170719 16:10:51.104"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170719 16:10:51.106" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051</msg>
<status status="PASS" endtime="20170719 16:10:51.106" starttime="20170719 16:10:51.106"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170719 16:10:51.109" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170719 16:10:51.109" starttime="20170719 16:10:51.106"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170719 16:10:51.129" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170719 16:10:51.129" starttime="20170719 16:10:51.123"></status>
</kw>
<msg timestamp="20170719 16:10:51.129" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170719 16:10:51.129" starttime="20170719 16:10:51.123"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:10:51.130" starttime="20170719 16:10:51.130"></status>
</kw>
<msg timestamp="20170719 16:10:51.131" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170719 16:10:51.131" starttime="20170719 16:10:51.130"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:10:51.137" starttime="20170719 16:10:51.134"></status>
</kw>
<msg timestamp="20170719 16:10:51.137" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051</msg>
<status status="PASS" endtime="20170719 16:10:51.137" starttime="20170719 16:10:51.131"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170719 16:10:51.141" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051</msg>
<status status="PASS" endtime="20170719 16:10:51.141" starttime="20170719 16:10:51.137"></status>
</kw>
<status status="PASS" endtime="20170719 16:10:51.141" starttime="20170719 16:10:51.122"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170719 16:10:51.176" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170719 16:10:51.176" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170719 16:10:51.176" starttime="20170719 16:10:51.142"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:10:51.177" starttime="20170719 16:10:51.177"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170719 16:10:51.177" starttime="20170719 16:10:51.177"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:10:51.178" starttime="20170719 16:10:51.178"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170719 16:10:51.178" starttime="20170719 16:10:51.178"></status>
</kw>
<status status="PASS" endtime="20170719 16:10:51.179" starttime="20170719 16:10:51.142"></status>
</kw>
<status status="PASS" endtime="20170719 16:10:51.179" starttime="20170719 16:10:51.142"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 16:05:19 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055DB738&gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055DB738&gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 16:10:52 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E4F80&gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E4F80&gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 16:11:03 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x03EA21C0&gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x03EA21C0&gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 16:11:13 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055DB968&gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055DB968&gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[enb_resource.py@1139] 
 ****Current BTS version is 'SBTS00_TDDFSM4_9999_170608_000754' *****</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[enb_resource.py@1169] activeBuildVersion=SBTS00_TDDFSM4_9999_170608_000754</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 16:11:24 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E4170&gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: cannot access /ram/SiteConf.xml: No such file or directory
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:12:07.931" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E4170&gt;</msg>
<msg timestamp="20170719 16:12:07.932" level="INFO">[enb_resource.py@1139] 
 ****Not find /ram/SiteConf.xml *****</msg>
<msg timestamp="20170719 16:12:07.932" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20170719 16:12:07.933" starttime="20170719 16:10:51.179"></status>
</kw>
<status status="PASS" endtime="20170719 16:12:07.933" starttime="20170719 16:10:51.179"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170719 16:12:07.934" starttime="20170719 16:12:07.933"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170719 16:12:07.935" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170719 16:12:07.935" starttime="20170719 16:12:07.934"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170719 16:12:07.938" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170719 16:12:07.939" starttime="20170719 16:12:07.935"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170719 16:12:07.942" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170719 16:12:07.942" starttime="20170719 16:12:07.939"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170719 16:12:07.945" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170719 16:12:07.945" starttime="20170719 16:12:07.942"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170719 16:12:09.401" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170719 16:12:09.401" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170719 16:12:09.401" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170719 16:12:09.401" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170719 16:12:09.401" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:12:09.401" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;</msg>
<status status="PASS" endtime="20170719 16:12:09.401" starttime="20170719 16:12:07.945"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170719 16:12:09.402" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;</msg>
<status status="PASS" endtime="20170719 16:12:09.402" starttime="20170719 16:12:09.402"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170719 16:12:10.626" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;</msg>
<msg timestamp="20170719 16:12:10.626" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170719 16:12:10.626" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170719 16:12:10.626" starttime="20170719 16:12:09.406"></status>
</kw>
<status status="PASS" endtime="20170719 16:12:10.626" starttime="20170719 16:12:09.403"></status>
</kw>
<status status="PASS" endtime="20170719 16:12:10.627" starttime="20170719 16:12:07.934"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170719 16:12:10.630" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;.</msg>
<status status="PASS" endtime="20170719 16:12:10.630" starttime="20170719 16:12:10.627"></status>
</kw>
<status status="PASS" endtime="20170719 16:12:10.630" starttime="20170719 16:10:51.043"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:22:19.832" starttime="20170719 16:22:19.829"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170719 16:22:19.846" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170719 16:22:19.846" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;</msg>
<msg timestamp="20170719 16:22:19.846" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170719 16:22:19.846" level="INFO">[telnet_common.py@189] Disconnect from 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<status status="PASS" endtime="20170719 16:22:19.847" starttime="20170719 16:22:19.832"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170719 16:22:19.848" starttime="20170719 16:22:19.848"></status>
</kw>
<status status="PASS" endtime="20170719 16:22:19.848" starttime="20170719 16:22:19.847"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:22:19.849" starttime="20170719 16:22:19.849"></status>
</kw>
<status status="PASS" endtime="20170719 16:22:19.849" starttime="20170719 16:22:19.848"></status>
</kw>
<status status="PASS" endtime="20170719 16:22:19.849" starttime="20170719 16:22:19.829"></status>
</kw>
<test id="s1-t1" name="FZHQ_T1_Operational_RF_block_unblock">
<kw type="setup" name="Test Setup Action" library="SISO1 Resource">
<kw name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA\TA_logs\TestLog_20170719161040//ev_logs//D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170719 16:12:10.636" level="INFO">${timestamp} = 20170719161210</msg>
<status status="PASS" endtime="20170719 16:12:10.636" starttime="20170719 16:12:10.635"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170719 16:12:10.637" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 16:12:10.637" starttime="20170719 16:12:10.636"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170719 16:12:10.637" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 16:12:10.637" starttime="20170719 16:12:10.637"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170719 16:12:10.638" level="INFO">${TEST_LOG_DIR} = D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 16:12:10.638" starttime="20170719 16:12:10.638"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170719 16:12:10.639" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock"&gt;D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170719 16:12:10.639" starttime="20170719 16:12:10.638"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170719 16:12:10.640" level="INFO">save log dir:D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 16:12:10.640" starttime="20170719 16:12:10.639"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170719 16:12:10.640" starttime="20170719 16:12:10.640"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:12:10.642" starttime="20170719 16:12:10.642"></status>
</kw>
<msg timestamp="20170719 16:12:10.642" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170719 16:12:10.642" starttime="20170719 16:12:10.641"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:12:10.643" starttime="20170719 16:12:10.643"></status>
</kw>
<msg timestamp="20170719 16:12:10.643" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170719 16:12:10.643" starttime="20170719 16:12:10.642"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170719 16:12:10.647" level="INFO">${log dir} = D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 16:12:10.647" starttime="20170719 16:12:10.644"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170719 16:12:10.648" level="INFO">${SAVE LOG DIRECTORY} = D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170719 16:12:10.648" starttime="20170719 16:12:10.647"></status>
</kw>
<status status="PASS" endtime="20170719 16:12:10.648" starttime="20170719 16:12:10.641"></status>
</kw>
<status status="PASS" endtime="20170719 16:12:10.648" starttime="20170719 16:12:10.635"></status>
</kw>
<kw name="Setup Admin" library="ute_admin">
<doc>Setup Admin API.</doc>
<arguments>
<arg>bts_host=192.168.255.129</arg>
<arg>bts_port=9002</arg>
<arg>use_ssl=False</arg>
</arguments>
<msg timestamp="20170719 16:12:10.650" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.129 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_default.log --interval=5000 --cli-port=41380 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmptus8nj --insecure</msg>
<msg timestamp="20170719 16:12:12.667" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 16:12:12.667" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 16:12:16.670" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 16:12:16.670" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 16:12:20.671" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 16:12:20.671" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 16:12:23.686" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170719 16:12:23.686" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 73525, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170719 16:12:31.099" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 73525, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170719 16:12:34.098" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 73525, "requestMessage": "onAir"}}</msg>
<status status="PASS" endtime="20170719 16:12:34.098" starttime="20170719 16:12:10.648"></status>
</kw>
<status status="PASS" endtime="20170719 16:12:34.098" starttime="20170719 16:12:10.631"></status>
</kw>
<kw name="Reset_BTS_If_Ini_State_Unmatch" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${ini_state_check}</arg>
</arguments>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170719 16:12:42.561" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170719 16:12:42.561" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170719 16:12:42.561" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170719 16:12:42.561" starttime="20170719 16:12:34.100"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Query_Infomodel_With_Multi_Condition</arg>
<arg>${ini_state_check}</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Query_Infomodel_With_Multi_Condition" library="SISO1 Resource">
<arguments>
<arg>${ini_state_check}</arg>
</arguments>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${condition_list}</arg>
</arguments>
<assign>
<var>${ret}</var>
</assign>
<msg timestamp="20170719 16:12:42.563" level="INFO">Length is 1</msg>
<msg timestamp="20170719 16:12:42.563" level="INFO">${ret} = 1</msg>
<status status="PASS" endtime="20170719 16:12:42.563" starttime="20170719 16:12:42.562"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${ret} ]">
<kw type="foritem" name="${num} = 0">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>${condition_list[${num}]}</arg>
</arguments>
<msg timestamp="20170719 16:12:52.633" level="FAIL">InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=onAirDone] = 1' doesn't pass in timeout=10.0. Actual count = 0</msg>
<status status="FAIL" endtime="20170719 16:12:52.634" starttime="20170719 16:12:42.563"></status>
</kw>
<status status="FAIL" endtime="20170719 16:12:52.634" starttime="20170719 16:12:42.563"></status>
</kw>
<status status="FAIL" endtime="20170719 16:12:52.634" starttime="20170719 16:12:42.563"></status>
</kw>
<status status="FAIL" endtime="20170719 16:12:52.634" starttime="20170719 16:12:42.562"></status>
</kw>
<msg timestamp="20170719 16:12:52.634" level="INFO">${result} = FAIL</msg>
<msg timestamp="20170719 16:12:52.634" level="INFO">${ret} = InfoModelQueryTimeoutException: Query: 'count /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=onAirDone] = 1' doesn't pass in timeout=10.0. Actual count = 0</msg>
<status status="PASS" endtime="20170719 16:12:52.634" starttime="20170719 16:12:42.561"></status>
</kw>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170719 16:12:53.220" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170719 16:12:53.221" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170719 16:12:53.221" starttime="20170719 16:12:52.635"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170719 16:12:53.230" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;.</msg>
<status status="PASS" endtime="20170719 16:12:53.230" starttime="20170719 16:12:53.225"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170719 16:12:57.418" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;</msg>
<msg timestamp="20170719 16:12:57.418" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170719 16:12:57.419" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170719 16:12:57.419" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170719 16:12:57.419" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170719 16:12:57.419" starttime="20170719 16:12:53.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:12:57.422" starttime="20170719 16:12:57.419"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170719 16:12:57.425" starttime="20170719 16:12:57.422"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>bts_host=${ADMIN.IP}</arg>
<arg>bts_port=${ADMIN.PORT}</arg>
<arg>use_ssl=${ADMIN.USE_SSL}</arg>
<arg>skip_parameter_relation_errors=${ADMIN.SKIP_PARAMETER_RELATION_ERRORS}</arg>
</arguments>
<msg timestamp="20170719 16:13:39.756" level="INFO">D:\TA\trunk_soam\ute_admin\resource\node\windows\bin\node.exe D:\TA\trunk_soam\ute_admin\resource\src\main.js --bts-host=192.168.255.1 --bts-port=9002 --bts-username=Nemuadmin --bts-password=nemuuser --debug=admin_api_uploadscf.log --interval=5000 --cli-port=37246 --bundles-dir=c:\users\tdlte-~1\appdata\local\temp\tmptf_i_l --insecure</msg>
<msg timestamp="20170719 16:13:41.761" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 16:13:41.761" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 16:13:45.762" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 16:13:45.762" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 16:13:49.762" level="INFO">Recived response: Connection closed. [Errno 10061] No connection could be made because the target machine actively refused it</msg>
<msg timestamp="20170719 16:13:49.762" level="INFO">Recived response: Connection closed. </msg>
<msg timestamp="20170719 16:13:52.777" level="INFO">Recived response: Connection opened.</msg>
<msg timestamp="20170719 16:13:52.777" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 46268, "parameters": {"name": "lnbtsState", "parameters": {}}}}</msg>
<msg timestamp="20170719 16:14:00.490" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 46268, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170719 16:14:03.153" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 46268, "requestMessage": "onAir"}}</msg>
<msg timestamp="20170719 16:14:03.158" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 70018, "parameters": {"name": "downloadPlan", "parameters": {"skipParameterRelationErrors": true, "inputFileContent": "", "btsId": "797", "shouldBeActivated": true}}}}</msg>
<msg timestamp="20170719 16:14:03.189" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"type": "SIZE", "id": 70018}}</msg>
<msg timestamp="20170719 16:14:03.189" level="INFO">Send message: {"type": "FILE_TRANSFER", "payload": {"data": 86643, "type": "SIZE", "id": 70018}}</msg>
<msg timestamp="20170719 16:14:03.220" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"length": 86643, "type": "READ", "id": 70018, "offset": 0}}</msg>
<msg timestamp="20170719 16:14:03.276" level="INFO">Send message: {"type": "FILE_TRANSFER", "payload": {"data": "PD94bWwgdm ... &lt;type 'str'&gt; of lenght: 115524", "type": "READ", "id": 70018}}</msg>
<msg timestamp="20170719 16:14:09.276" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 70018, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170719 16:14:14.275" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 70018, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170719 16:14:16.275" level="INFO">Recived response: {"type": "FILE_TRANSFER", "payload": {"type": "CLOSE_READER", "id": 70018}}</msg>
<msg timestamp="20170719 16:14:16.275" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 70018, "requestMessage": {"validationResult": {"niddValidationResult": {"status": "OK", "logs": {"objectsOccurencesErrors": null, "invalidObjectsDistnames": null, "definitionErrors": null, "skippedElementsErrors": null}}, "pdlValidationResult": {"status": "FAIL", "logs": ["rule faile ... &lt;type 'unicode'&gt; of lenght: 275", "rule faile ... &lt;type 'unicode'&gt; of lenght: 265", "rule faile ... &lt;type 'unicode'&gt; of lenght: 142", "rule faile ... &lt;type 'unicode'&gt; of lenght: 119", "rule faile ... &lt;type 'unicode'&gt; of lenght: 237", "rule faile ... &lt;type 'unicode'&gt; of lenght: 138", "rule faile ... &lt;type 'unicode'&gt; of lenght: 176", "rule faile ... &lt;type 'unicode'&gt; of lenght: 314", "rule faile ... &lt;type 'unicode'&gt; of lenght: 293", "rule faile ... &lt;type 'unicode'&gt; of lenght: 123", "rule faile ... &lt;type 'unicode'&gt; of lenght: 127", "rule faile ... &lt;type 'unicode'&gt; of lenght: 360", "rule faile ... &lt;type 'unicode'&gt; of lenght: 103", "rule faile ... &lt;type 'unicode'&gt; of lenght: 92", "rule faile ... &lt;type 'unicode'&gt; of lenght: 103", "rule faile ... &lt;type 'unicode'&gt; of lenght: 92", "rule faile ... &lt;type 'unicode'&gt; of lenght: 137", "rule faile ... &lt;type 'unicode'&gt; of lenght: 138", "rule faile ... &lt;type 'unicode'&gt; of lenght: 110", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 141", "rule faile ... &lt;type 'unicode'&gt; of lenght: 160"]}}}}}</msg>
<msg timestamp="20170719 16:14:16.530" level="INFO">Exit code: 1</msg>
<msg timestamp="20170719 16:14:16.530" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:37246
</msg>
<msg timestamp="20170719 16:14:16.530" level="INFO">STDERR
</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 16:11:35 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056772B0&gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056772B0&gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 16:12:58 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E4B20&gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055E4B20&gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ftm_control.py@299] SRAN don't need to enable ssh and rdport</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 16:13:09 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056875A8&gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056875A8&gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 16:13:19 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0433E030&gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0433E030&gt;</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[enb_resource.py@371] Start to setup admin</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[enb_resource.py@374] Start to perform commissioning</msg>
<msg timestamp="20170719 16:14:16.535" level="INFO">[enb_resource.py@380] Start to teardown admin</msg>
<status status="PASS" endtime="20170719 16:14:16.537" starttime="20170719 16:12:57.426"></status>
</kw>
<kw name="Restart Bts Until Onair" library="tdd_ev_robotws">
<doc>restart bts with powerbreaker and then wait until it is onair.</doc>
<arguments>
<arg>bts_powerbreak_port=${bts_powerbreak}</arg>
</arguments>
<msg timestamp="20170719 16:18:39.949" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20170719 16:18:39.949" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170719 16:18:39.949" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[facom.py@60] Power off port 1 succeed!</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[facom.py@60] Power off port 1 succeed!</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[facom.py@83] Power on port 1 succeed!</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[facom.py@83] Power on port 1 succeed!</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[tools_resource.py@39] restart port '['FACOM:10.69.66.100:1', 'FACOM:10.56.7.144:1']' with powerbreak succeed !</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock" already exists, no need to create it again.</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Failed'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'configured', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@211] check onair failed for 3rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@222] check onair failed for 4rd way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@182] check onair failed 1st way, Query: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will try another way</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@199] check onair failed for 2rd way, Query: 'every /MRBTS-1/RAT-1/BTS_L-*/LNBTS-* is [stateInfo.proceduralState=onAir]' doesn't pass in timeout=1.0. Object does not match given predicates.
/MRBTS-1/RAT-1/BTS_L-4/LNBTS-1 : {u'actDLCAggr': False, u'restartCause': 'PowerOn', u'btsId': 797L, u'actInterEnbDLCAggr': False, u'planHandlingState': 'Idle', u'stateInfo': {u'blockingState': 'Unblocked', u'testingState': 'Disabled', u'usageState': 'Active', u'administrativeState': 'Unlocked', u'reasoningStatus': [], u'softwareState': 'Deployed', u'proceduralState': 'integrated__Space__to__Space__RAN', u'operationalState': 'Enabled', u'availabilityStatus': 'Degraded'}, u'actBbPooling': False}
, it will sleep and try again</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1//LNBTS-* is [stateInfo.proceduralState=onAir]' succeed .</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@225] infomodel check every cell onair succeed !</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[enb_resource.py@253] bts log check onair msg succeed !</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock\im_20170719161839' succeed .</msg>
<msg timestamp="20170719 16:18:39.950" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170719 16:18:39.951" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170719 16:18:39.953" starttime="20170719 16:14:16.537"></status>
</kw>
<status status="PASS" endtime="20170719 16:18:39.953" starttime="20170719 16:12:53.225"></status>
</kw>
<status status="PASS" endtime="20170719 16:18:39.953" starttime="20170719 16:12:53.222"></status>
</kw>
<status status="PASS" endtime="20170719 16:18:39.953" starttime="20170719 16:12:34.099"></status>
</kw>
<kw name="Start_Udp_And_Infomodel_Log" library="SISO1 Resource">
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}.log</arg>
</arguments>
<msg timestamp="20170719 16:18:40.178" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<msg timestamp="20170719 16:18:40.178" level="INFO">[file_common.py@209] Directory "D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170719 16:18:40.178" starttime="20170719 16:18:39.955"></status>
</kw>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170719 16:18:48.666" level="INFO">[infomodel_control.py@158] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20170719 16:18:48.666" level="INFO">[infomodel_control.py@162] start infomodel succeed .</msg>
<msg timestamp="20170719 16:18:48.666" level="INFO">[infomodel_control.py@164] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20170719 16:18:48.666" starttime="20170719 16:18:40.178"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170719 16:18:48.667" level="INFO">${case_execute_log_name} = owner_debug</msg>
<status status="PASS" endtime="20170719 16:18:48.667" starttime="20170719 16:18:48.666"></status>
</kw>
<status status="PASS" endtime="20170719 16:18:48.667" starttime="20170719 16:18:39.954"></status>
</kw>
<kw name="Get_BTS_DN" library="SISO1 Resource">
<arguments>
<arg>RMOD_L</arg>
</arguments>
<assign>
<var>${RMOD_L_DN}</var>
</assign>
<kw name="Get Objects By Class Name" library="ute_admin">
<doc>Get objects by class name.</doc>
<arguments>
<arg>${DN_Name}</arg>
</arguments>
<assign>
<var>${DN_LIST1}</var>
</assign>
<msg timestamp="20170719 16:18:48.669" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 19111, "parameters": {"name": "getItemsByClassName", "parameters": {"className": "RMOD_L"}}}}</msg>
<msg timestamp="20170719 16:18:48.905" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 19111, "requestMessage": [{"distName": "/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1", "parameters": {"macAddress": "00:00:02:01:00:35", "hwVariant": null, "identityDN": null, "l3Protocol": "CPRI_RP1", "routingDirectionCalculated": "CCW", "productCode": "473106A.X11", "filterIpAddress": "1.1.1.1", "supportsLineRateAutoNegotiation": false, "supportsMultiRouter": false, "l3MinorProtocolVersion": 0, "hwVersion": "X11  ", "bpfForRadioAvailabilityState": "Unknown", "supportsChaining": false, "routingDirectionApplied": "CCW", "sourceEthernetBBswitchDN": "", "productName": "FZHQ", "masterAgentDN": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 51", "supportsMixedLinkRates": "Unknown", "tempNetActId": 1, "frameForwardingDelay": [], "serialNumber": "RY151105157", "l3MajorProtocolVersion": 1, "stateInfo": {"usageState": "Active", "detectionState": "Done", "workingState": "dedicated", "availabilityStatus": "Online", "administrativeState": "Unlocked", "operationalState": "Enabled", "reasoningStatus": [], "proceduralState": "ethernetEnabled"}, "filterMacAddress": "aa:bb:cc:dd:ee:ff", "ipAddress": "172.16.17.128"}}]}}</msg>
<msg timestamp="20170719 16:18:48.905" level="INFO">${DN_LIST1} = [{u'distName': u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1', u'parameters': {u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': u'CPRI_RP1', u'routingDirectionC...</msg>
<status status="PASS" endtime="20170719 16:18:48.905" starttime="20170719 16:18:48.669"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${DN_LIST1}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:18:48.906" starttime="20170719 16:18:48.906"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${DN_LIST}</var>
</assign>
<msg timestamp="20170719 16:18:48.906" level="INFO">${DN_LIST} = []</msg>
<status status="PASS" endtime="20170719 16:18:48.906" starttime="20170719 16:18:48.906"></status>
</kw>
<kw type="for" name="${index} IN [ @{DN_LIST1} ]">
<kw type="foritem" name="${index} = {u'distName': u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1', u'parameters': {u'macAddress': u'00:00:02:01:00:35', u'hwVariant': None, u'identityDN': None, u'l3Protocol': u'CPRI_RP1', u'routingDirectionCa...">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${DN_LIST}</arg>
<arg>${index.distName}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:18:48.907" starttime="20170719 16:18:48.907"></status>
</kw>
<status status="PASS" endtime="20170719 16:18:48.907" starttime="20170719 16:18:48.907"></status>
</kw>
<status status="PASS" endtime="20170719 16:18:48.908" starttime="20170719 16:18:48.907"></status>
</kw>
<msg timestamp="20170719 16:18:48.908" level="INFO">${RMOD_L_DN} = [u'/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1']</msg>
<status status="PASS" endtime="20170719 16:18:48.908" starttime="20170719 16:18:48.668"></status>
</kw>
<kw name="Get_BTS_DN" library="SISO1 Resource">
<arguments>
<arg>LNCEL_L</arg>
</arguments>
<assign>
<var>${LNCEL_L_DN}</var>
</assign>
<kw name="Get Objects By Class Name" library="ute_admin">
<doc>Get objects by class name.</doc>
<arguments>
<arg>${DN_Name}</arg>
</arguments>
<assign>
<var>${DN_LIST1}</var>
</assign>
<msg timestamp="20170719 16:18:48.917" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 53690, "parameters": {"name": "getItemsByClassName", "parameters": {"className": "LNCEL_L"}}}}</msg>
<msg timestamp="20170719 16:18:49.042" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 53690, "requestMessage": [{"distName": "/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1", "parameters": {"ulChBw": "20MHz", "attachedLncelDNs": [], "maxPucchResourceSize": null, "actMicroDtx": false, "stateInfo": {"ecgiReportedInFaultReq": null, "reasoningStatus": [], "administrativeState": "Unlocked", "suggestedEnergySaving": "notEnergySaving", "s1LinkState": "Available", "barringState": "NotBarred", "energySaving": "notEnergySaving", "mappingState": "ReadyForSetup"}, "phyCellId": 121, "caPoolId": 0, "dlChBw": "20MHz", "requestedNumberOfUeToBeSupportedFromFaultReq": null, "lcrId": 1, "paDNs": [], "allowedNumberOfUeWithTheCurrentConfigurationFromFaultReq": null, "technology": "tdd", "type": "Local", "helperLncelDN": ""}}]}}</msg>
<msg timestamp="20170719 16:18:49.043" level="INFO">${DN_LIST1} = [{u'distName': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1', u'parameters': {u'ulChBw': u'20MHz', u'attachedLncelDNs': [], u'maxPucchResourceSize': None, u'actMicroDtx': False, u'stateInfo': {u'ecgiRep...</msg>
<status status="PASS" endtime="20170719 16:18:49.043" starttime="20170719 16:18:48.916"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${DN_LIST1}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:18:49.044" starttime="20170719 16:18:49.043"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${DN_LIST}</var>
</assign>
<msg timestamp="20170719 16:18:49.044" level="INFO">${DN_LIST} = []</msg>
<status status="PASS" endtime="20170719 16:18:49.044" starttime="20170719 16:18:49.044"></status>
</kw>
<kw type="for" name="${index} IN [ @{DN_LIST1} ]">
<kw type="foritem" name="${index} = {u'distName': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1', u'parameters': {u'ulChBw': u'20MHz', u'attachedLncelDNs': [], u'maxPucchResourceSize': None, u'actMicroDtx': False, u'stateInfo': {u'ecgiRepo...">
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${DN_LIST}</arg>
<arg>${index.distName}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:18:49.045" starttime="20170719 16:18:49.045"></status>
</kw>
<status status="PASS" endtime="20170719 16:18:49.045" starttime="20170719 16:18:49.044"></status>
</kw>
<status status="PASS" endtime="20170719 16:18:49.045" starttime="20170719 16:18:49.044"></status>
</kw>
<msg timestamp="20170719 16:18:49.045" level="INFO">${LNCEL_L_DN} = [u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1']</msg>
<status status="PASS" endtime="20170719 16:18:49.045" starttime="20170719 16:18:48.915"></status>
</kw>
<kw type="for" name="${num} IN RANGE [ ${total_times} ]">
<kw type="foritem" name="${num} = 0">
<kw name="_RF_Block_Unblock_and_Attach">
<doc>Operation with BTS</doc>
<arguments>
<arg>${RMOD_L_DN[0]}</arg>
<arg>${LNCEL_L_DN[0]}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170719 16:18:49.055" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;.</msg>
<status status="PASS" endtime="20170719 16:18:49.055" starttime="20170719 16:18:49.051"></status>
</kw>
<kw name="Block" library="ute_admin">
<doc>Preform block procedure.</doc>
<arguments>
<arg>dist_name=${RMOD_DN}</arg>
</arguments>
<msg timestamp="20170719 16:18:49.056" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 39075, "parameters": {"name": "block", "parameters": {"distName": "/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1"}}}}</msg>
<msg timestamp="20170719 16:18:54.057" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 39075, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170719 16:18:59.058" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "ongoing", "requestId": 39075, "requestMessage": "Waiting for response"}}</msg>
<msg timestamp="20170719 16:19:02.443" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 39075, "requestMessage": ""}}</msg>
<status status="PASS" endtime="20170719 16:19:02.443" starttime="20170719 16:18:49.055"></status>
</kw>
<kw name="Wait For Alarm Presence" library="ute_admin">
<doc>Wait for alarm presence. Checks if alaram with given parameters exists.</doc>
<arguments>
<arg>${LNCEL_L_DN}</arg>
<arg>alarmInformation.faultId=${48}</arg>
</arguments>
<msg timestamp="20170719 16:19:02.444" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 63926, "parameters": {"name": "waitForAlarms", "parameters": {"alarmProperties": {"alarmInformation.faultId": 48}, "operationType": "presence", "timeout": 10000.0, "parentDistName": "/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1"}}}}</msg>
<msg timestamp="20170719 16:19:05.562" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 63926, "requestMessage": [{"transportInformation": {"reportedNumber": null, "notificationId": null, "faultSourceObject": null, "argumentInfo": null, "probableCause": null}, "alarmInformation": {"alarmActivity": "Set", "alarmNumber": 7653, "faultId": 48, "alarmSeverity": "Critical", "eventType": "QualityOfService", "alarmText": {"alarmDetailNbr": 48, "faultDescription": "Unit blocked", "alarmAdditionalInfo": {"additionalFaultReason": null, "sourceIPAddr": null, "destinationPortNum": null, "supplDestinationIPAddr": null, "supplAlarmInfo": null, "shared": null, "destinationIPAddr": null, "additionalFaultID": 48}, "groupDescription": null, "alarmDetail": "Unit blocked"}, "togglingId": null, "alarmAttribute": [], "faultSeverity": "Critical", "observationTime": "20170719161905.852+0800", "groupId": null}, "unitInformation": {"reportingResource": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 66", "alarmingResource": "/MRBTS-1/R ... &lt;type 'unicode'&gt; of lenght: 66"}}]}}</msg>
<status status="PASS" endtime="20170719 16:19:05.570" starttime="20170719 16:19:02.443"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>5 sec</arg>
</arguments>
<msg timestamp="20170719 16:19:10.570" level="INFO">Slept 5 seconds</msg>
<status status="PASS" endtime="20170719 16:19:10.570" starttime="20170719 16:19:05.570"></status>
</kw>
<kw name="Unblock" library="ute_admin">
<doc>Preform unblock procedure.</doc>
<arguments>
<arg>dist_name=${RMOD_DN}</arg>
</arguments>
<msg timestamp="20170719 16:19:10.571" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "procedure", "requestId": 40806, "parameters": {"name": "unblock", "parameters": {"distName": "/MRBTS-1/RAT-1/BTS_L-4/EQM_L-1/RMOD_L-1"}}}}</msg>
<msg timestamp="20170719 16:19:11.934" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 40806, "requestMessage": ""}}</msg>
<status status="PASS" endtime="20170719 16:19:11.934" starttime="20170719 16:19:10.570"></status>
</kw>
<kw name="Wait For Alarm Deletion" library="ute_admin">
<doc>Wait for alarm deletion. Checks if alaram with given parameters not exist.</doc>
<arguments>
<arg>${LNCEL_L_DN}</arg>
<arg>alarmInformation.faultId=${48}</arg>
</arguments>
<msg timestamp="20170719 16:19:11.935" level="INFO">Send message: {"type": "ADMIN_API", "payload": {"requestType": "infoModel", "requestId": 61931, "parameters": {"name": "waitForAlarms", "parameters": {"alarmProperties": {"alarmInformation.faultId": 48}, "operationType": "deletion", "timeout": 10000.0, "parentDistName": "/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1"}}}}</msg>
<msg timestamp="20170719 16:19:11.998" level="INFO">Recived response: {"type": "ADMIN_API", "payload": {"requestStatus": "completed", "requestId": 61931, "requestMessage": []}}</msg>
<status status="PASS" endtime="20170719 16:19:11.998" starttime="20170719 16:19:11.934"></status>
</kw>
<kw name="Wait_BTS_Until_Onair" library="SISO1 Resource">
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>10 sec</arg>
</arguments>
<msg timestamp="20170719 16:19:21.999" level="INFO">Slept 10 seconds</msg>
<status status="PASS" endtime="20170719 16:19:21.999" starttime="20170719 16:19:11.999"></status>
</kw>
<kw name="Wait Until Keyword Succeeds" library="BuiltIn">
<doc>Runs the specified keyword and retries if it fails.</doc>
<arguments>
<arg>8 min</arg>
<arg>20 sec</arg>
<arg>Query Infomodel</arg>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
</arguments>
<msg timestamp="20170719 16:19:22.123" level="INFO">[infomodel_control.py@328] query infomodel: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' succeed .</msg>
<status status="PASS" endtime="20170719 16:19:22.123" starttime="20170719 16:19:22.001"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.124" starttime="20170719 16:19:22.000"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.124" starttime="20170719 16:19:11.998"></status>
</kw>
<kw name="UE_Attach_SISO1" library="SISO1 Resource">
<doc>Example</doc>
<arguments>
<arg>1</arg>
</arguments>
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${cell_id}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>@{cell_list}</var>
</assign>
<msg timestamp="20170719 16:19:22.130" level="INFO">@{cell_list} = [ 1 ]</msg>
<status status="PASS" endtime="20170719 16:19:22.130" starttime="20170719 16:19:22.130"></status>
</kw>
<kw name="Get Length" library="BuiltIn">
<doc>Returns and logs the length of the given item as an integer.</doc>
<arguments>
<arg>${cell_list}</arg>
</arguments>
<assign>
<var>${cell_list_length}</var>
</assign>
<msg timestamp="20170719 16:19:22.131" level="INFO">Length is 1</msg>
<msg timestamp="20170719 16:19:22.131" level="INFO">${cell_list_length} = 1</msg>
<status status="PASS" endtime="20170719 16:19:22.131" starttime="20170719 16:19:22.130"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Split String</arg>
<arg>${attach_earfcn}</arg>
<arg>:</arg>
</arguments>
<assign>
<var>${earfcn_list1}</var>
</assign>
<msg timestamp="20170719 16:19:22.135" level="INFO">${earfcn_list1} = None</msg>
<status status="PASS" endtime="20170719 16:19:22.135" starttime="20170719 16:19:22.131"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Change_Earfcn_To_Freqency</arg>
<arg>${earfcn_list1}</arg>
</arguments>
<assign>
<var>${freqency_list1}</var>
<var>${band_list1}</var>
</assign>
<msg timestamp="20170719 16:19:22.139" level="INFO">${freqency_list1} = None</msg>
<msg timestamp="20170719 16:19:22.139" level="INFO">${band_list1} = None</msg>
<status status="PASS" endtime="20170719 16:19:22.139" starttime="20170719 16:19:22.135"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Get_Earfcn_From_Infomodel</arg>
</arguments>
<assign>
<var>${earfcn_list2}</var>
<var>${freqency_list2}</var>
<var>${band_list2}</var>
</assign>
<kw name="Get_Earfcn_From_Infomodel" library="SISO1 Resource">
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>get list /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1</arg>
</arguments>
<assign>
<var>@{ret_earfcn}</var>
</assign>
<msg timestamp="20170719 16:19:22.198" level="INFO">[infomodel_control.py@328] query infomodel: 'get list /MRBTS-1/RAT-1/LTS-*/LNBTS_L-*/LNCEL_L-*/CARRIER_GROUP_L-1' succeed .</msg>
<msg timestamp="20170719 16:19:22.198" level="INFO">@{ret_earfcn} = [ InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1/CARRIER_GROUP_L-1: {u'fcnULs': [40890L], u'fcnDLs': [40890L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1/CARRIER_GROUP_L-1', u's...</msg>
<status status="PASS" endtime="20170719 16:19:22.198" starttime="20170719 16:19:22.145"></status>
</kw>
<kw name="Sort List" library="Collections">
<doc>Sorts the given list in place.</doc>
<arguments>
<arg>${ret_earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.199" starttime="20170719 16:19:22.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${earfcn_list}</var>
</assign>
<msg timestamp="20170719 16:19:22.200" level="INFO">${earfcn_list} = []</msg>
<status status="PASS" endtime="20170719 16:19:22.200" starttime="20170719 16:19:22.199"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${freqency_list}</var>
</assign>
<msg timestamp="20170719 16:19:22.200" level="INFO">${freqency_list} = []</msg>
<status status="PASS" endtime="20170719 16:19:22.200" starttime="20170719 16:19:22.200"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<assign>
<var>${band_list}</var>
</assign>
<msg timestamp="20170719 16:19:22.201" level="INFO">${band_list} = []</msg>
<status status="PASS" endtime="20170719 16:19:22.201" starttime="20170719 16:19:22.200"></status>
</kw>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_OFFSET}</arg>
</arguments>
<assign>
<var>${offset_dict}</var>
</assign>
<msg timestamp="20170719 16:19:22.201" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170719 16:19:22.206" level="INFO">${offset_dict} = {u'38': u'1205', u'40': u'1565', u'39': u'1945', u'41': u'1469', u'42': u'759', u'43': u'759', u'37': u'1845', u'36': u'1765', u'35': u'1785', u'34': u'1610', u'33': u'1700'}</msg>
<status status="PASS" endtime="20170719 16:19:22.206" starttime="20170719 16:19:22.201"></status>
</kw>
<kw type="for" name="${index} IN [ @{ret_earfcn} ]">
<kw type="foritem" name="${index} = InfoModelObject /MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1/CARRIER_GROUP_L-1: {u'fcnULs': [40890L], u'fcnDLs': [40890L], 'dist_name': u'/MRBTS-1/RAT-1/LTS-4/LNBTS_L-4/LNCEL_L-1/CARRIER_GROUP_L-1', u'sta...">
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${index.fcnDLs[0]}</arg>
</arguments>
<assign>
<var>${index.earfcn}</var>
</assign>
<msg timestamp="20170719 16:19:22.207" level="INFO">${index.earfcn} = 40890</msg>
<status status="PASS" endtime="20170719 16:19:22.207" starttime="20170719 16:19:22.207"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${earfcn_list}</arg>
<arg>${index.earfcn}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.208" starttime="20170719 16:19:22.208"></status>
</kw>
<kw name="Get_Band_From_earfcn" library="SISO1 Resource">
<arguments>
<arg>${index.earfcn}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<kw name="Create Dictionary" library="BuiltIn">
<doc>Creates and returns a dictionary based on given items.</doc>
<arguments>
<arg>@{BAND_RANGE}</arg>
</arguments>
<assign>
<var>${band_dict}</var>
</assign>
<msg timestamp="20170719 16:19:22.209" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170719 16:19:22.211" level="INFO">${band_dict} = {u'38': u'37750-38249', u'39': u'38250-38649', u'40': u'38650-39649', u'41': u'39650-41589', u'42': u'41590-43589'}</msg>
<status status="PASS" endtime="20170719 16:19:22.211" starttime="20170719 16:19:22.209"></status>
</kw>
<kw name="Get Dictionary Keys" library="Collections">
<doc>Returns keys of the given ``dictionary``.</doc>
<arguments>
<arg>${band_dict}</arg>
</arguments>
<assign>
<var>@{keys}</var>
</assign>
<msg timestamp="20170719 16:19:22.211" level="INFO">@{keys} = [ 38 | 39 | 40 | 41 | 42 ]</msg>
<status status="PASS" endtime="20170719 16:19:22.212" starttime="20170719 16:19:22.211"></status>
</kw>
<kw type="for" name="${index} IN [ @{keys} ]">
<kw type="foritem" name="${index} = 38">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170719 16:19:22.213" level="INFO">@{temp1} = [ 37750 | 38249 ]</msg>
<status status="PASS" endtime="20170719 16:19:22.213" starttime="20170719 16:19:22.212"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170719 16:19:22.216" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170719 16:19:22.216" starttime="20170719 16:19:22.213"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.217" starttime="20170719 16:19:22.216"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.217" starttime="20170719 16:19:22.212"></status>
</kw>
<kw type="foritem" name="${index} = 39">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170719 16:19:22.218" level="INFO">@{temp1} = [ 38250 | 38649 ]</msg>
<status status="PASS" endtime="20170719 16:19:22.218" starttime="20170719 16:19:22.217"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170719 16:19:22.221" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170719 16:19:22.221" starttime="20170719 16:19:22.218"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.222" starttime="20170719 16:19:22.221"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.222" starttime="20170719 16:19:22.217"></status>
</kw>
<kw type="foritem" name="${index} = 40">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170719 16:19:22.223" level="INFO">@{temp1} = [ 38650 | 39649 ]</msg>
<status status="PASS" endtime="20170719 16:19:22.223" starttime="20170719 16:19:22.222"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170719 16:19:22.228" level="INFO">${result} = False</msg>
<status status="PASS" endtime="20170719 16:19:22.228" starttime="20170719 16:19:22.223"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.228" starttime="20170719 16:19:22.228"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.228" starttime="20170719 16:19:22.222"></status>
</kw>
<kw type="foritem" name="${index} = 41">
<kw name="Split String" library="String">
<doc>Splits the ``string`` using ``separator`` as a delimiter string.</doc>
<arguments>
<arg>${band_dict['${index}']}</arg>
<arg>-</arg>
</arguments>
<assign>
<var>@{temp1}</var>
</assign>
<msg timestamp="20170719 16:19:22.229" level="INFO">@{temp1} = [ 39650 | 41589 ]</msg>
<status status="PASS" endtime="20170719 16:19:22.229" starttime="20170719 16:19:22.228"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${temp1[1]} &gt;=${earfcn}&gt;=${temp1[0]}</arg>
</arguments>
<assign>
<var>${result}</var>
</assign>
<msg timestamp="20170719 16:19:22.234" level="INFO">${result} = True</msg>
<status status="PASS" endtime="20170719 16:19:22.234" starttime="20170719 16:19:22.229"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>${result}</arg>
</arguments>
<msg timestamp="20170719 16:19:22.234" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170719 16:19:22.235" starttime="20170719 16:19:22.234"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.235" starttime="20170719 16:19:22.228"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.235" starttime="20170719 16:19:22.212"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${result}'=='False'</arg>
<arg>Fail</arg>
<arg>no corresponding bts band find</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.238" starttime="20170719 16:19:22.235"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${index}</arg>
</arguments>
<assign>
<var>${bts_band}</var>
</assign>
<msg timestamp="20170719 16:19:22.241" level="INFO">${bts_band} = 41</msg>
<status status="PASS" endtime="20170719 16:19:22.241" starttime="20170719 16:19:22.238"></status>
</kw>
<msg timestamp="20170719 16:19:22.241" level="INFO">${attach_band} = 41</msg>
<status status="PASS" endtime="20170719 16:19:22.241" starttime="20170719 16:19:22.208"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${attach_band}</var>
</assign>
<msg timestamp="20170719 16:19:22.242" level="INFO">${attach_band} = 41</msg>
<status status="PASS" endtime="20170719 16:19:22.242" starttime="20170719 16:19:22.242"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${band_list}</arg>
<arg>${attach_band}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.242" starttime="20170719 16:19:22.242"></status>
</kw>
<kw name="Get From Dictionary" library="Collections">
<doc>Returns a value from the given ``dictionary`` based on the given ``key``.</doc>
<arguments>
<arg>${offset_dict}</arg>
<arg>${attach_band}</arg>
</arguments>
<assign>
<var>${offset}</var>
</assign>
<msg timestamp="20170719 16:19:22.243" level="INFO">${offset} = 1469</msg>
<status status="PASS" endtime="20170719 16:19:22.243" starttime="20170719 16:19:22.243"></status>
</kw>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>(${index.earfcn}*0.1-${offset})*10</arg>
</arguments>
<assign>
<var>${freq}</var>
</assign>
<msg timestamp="20170719 16:19:22.246" level="INFO">${freq} = 26200.0</msg>
<status status="PASS" endtime="20170719 16:19:22.247" starttime="20170719 16:19:22.243"></status>
</kw>
<kw name="Convert To Integer" library="BuiltIn">
<doc>Converts the given item to an integer number.</doc>
<arguments>
<arg>${freq}</arg>
</arguments>
<assign>
<var>${fq}</var>
</assign>
<msg timestamp="20170719 16:19:22.247" level="INFO">${fq} = 26200</msg>
<status status="PASS" endtime="20170719 16:19:22.247" starttime="20170719 16:19:22.247"></status>
</kw>
<kw name="Convert To String" library="BuiltIn">
<doc>Converts the given item to a Unicode string.</doc>
<arguments>
<arg>${fq}</arg>
</arguments>
<assign>
<var>${freqency}</var>
</assign>
<msg timestamp="20170719 16:19:22.248" level="INFO">${freqency} = 26200</msg>
<status status="PASS" endtime="20170719 16:19:22.248" starttime="20170719 16:19:22.247"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${freqency_list}</arg>
<arg>${freqency}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.249" starttime="20170719 16:19:22.248"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.249" starttime="20170719 16:19:22.206"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.249" starttime="20170719 16:19:22.206"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.249" starttime="20170719 16:19:22.144"></status>
</kw>
<msg timestamp="20170719 16:19:22.249" level="INFO">${earfcn_list2} = [u'40890']</msg>
<msg timestamp="20170719 16:19:22.249" level="INFO">${freqency_list2} = [u'26200']</msg>
<msg timestamp="20170719 16:19:22.249" level="INFO">${band_list2} = [u'41']</msg>
<status status="PASS" endtime="20170719 16:19:22.249" starttime="20170719 16:19:22.140"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${earfcn_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<assign>
<var>${earfcn_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${earfcn_list2}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.256" starttime="20170719 16:19:22.253"></status>
</kw>
<msg timestamp="20170719 16:19:22.256" level="INFO">${earfcn_list} = [u'40890']</msg>
<status status="PASS" endtime="20170719 16:19:22.256" starttime="20170719 16:19:22.249"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${freqency_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<assign>
<var>${freqency_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${freqency_list2}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.262" starttime="20170719 16:19:22.259"></status>
</kw>
<msg timestamp="20170719 16:19:22.262" level="INFO">${freqency_list} = [u'26200']</msg>
<status status="PASS" endtime="20170719 16:19:22.262" starttime="20170719 16:19:22.256"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>${band_list1}</arg>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<assign>
<var>${band_list}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'${attach_earfcn}'==''</arg>
<arg>${band_list2}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.269" starttime="20170719 16:19:22.266"></status>
</kw>
<msg timestamp="20170719 16:19:22.269" level="INFO">${band_list} = [u'41']</msg>
<status status="PASS" endtime="20170719 16:19:22.270" starttime="20170719 16:19:22.263"></status>
</kw>
<kw name="Set Variable" library="BuiltIn">
<doc>Returns the given values which can then be assigned to a variables.</doc>
<arguments>
<arg>0</arg>
</arguments>
<assign>
<var>${cell_index1}</var>
</assign>
<msg timestamp="20170719 16:19:22.270" level="INFO">${cell_index1} = 0</msg>
<status status="PASS" endtime="20170719 16:19:22.270" starttime="20170719 16:19:22.270"></status>
</kw>
<kw type="for" name="${cell_index2} IN [ @{cell_list} ]">
<kw type="foritem" name="${cell_index2} = 1">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${attach_earfcn}'!=''</arg>
<arg>Evaluate</arg>
<arg>${cell_index1}</arg>
<arg>ELSE</arg>
<arg>Evaluate</arg>
<arg>${cell_index2}-1</arg>
</arguments>
<assign>
<var>${cell_index}</var>
</assign>
<kw name="Evaluate" library="BuiltIn">
<doc>Evaluates the given expression in Python and returns the results.</doc>
<arguments>
<arg>${cell_index2}-1</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.277" starttime="20170719 16:19:22.274"></status>
</kw>
<msg timestamp="20170719 16:19:22.277" level="INFO">${cell_index} = 0</msg>
<status status="PASS" endtime="20170719 16:19:22.278" starttime="20170719 16:19:22.271"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='CPE'</arg>
<arg>Run Keyword If</arg>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'!='TM500'</arg>
<arg>Fail</arg>
<arg>The keyword doesn't yet support this type of UE</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.284" starttime="20170719 16:19:22.281"></status>
</kw>
<status status="PASS" endtime="20170719 16:19:22.284" starttime="20170719 16:19:22.278"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='CPE'</arg>
<arg>CPE_Attach_SISO1_src</arg>
<arg>${earfcn_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${band_list[${cell_index}]}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:19:22.287" starttime="20170719 16:19:22.284"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${UE_TYPE}'=='TM500'</arg>
<arg>TM500_Attach_SISO1_src</arg>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="TM500_Attach_SISO1_src" library="SISO1 Resource">
<arguments>
<arg>${freqency_list[${cell_index}]}</arg>
<arg>${cell_index2}</arg>
<arg>${modify_tm500_script}</arg>
<arg>${attach_scripts}</arg>
</arguments>
<kw name="Tm500 Setup" library="tdd_ev_robotws">
<doc>tm500 setup.</doc>
<msg timestamp="20170719 16:19:24.110" level="INFO">${TM500_PC_CONNECTION} = 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.034" level="INFO">[robot_func.py@29] Can't get variable '${TM500_PC_CONNECTION}' ! details: 'Variable '${TM500_PC_CONNECTION}' not found.'</msg>
<msg timestamp="20170719 16:20:51.034" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170719 16:20:51.034" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;.</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',tdd_ev_robotws.__version__"</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',tdd_ev_robotws.__version__"
*SEP* 1.0.1

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@276] Execute command: "D:\TA\trunk_soam\tdd_ev_robotws\tools\psexec.exe" -i -d python "D:\TA\trunk_soam\tdd_ev_robotws\tools\robotremoteserver.py"  -l tdd_ev_robotws -i 0.0.0.0 -p 8273 -s True</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@306] Get Response: "D:\TA\trunk_soam\tdd_ev_robotws\tools\psexec.exe" -i -d python "D:\TA\trunk_soam\tdd_ev_robotws\tools\robotremoteserver.py"  -l tdd_ev_robotws -i 0.0.0.0 -p 8273 -s True

PsExec v1.98 - Execute processes remotely
Copyright (C) 2001-2010 Mark Russinovich
Sysinternals - www.sysinternals.com

python started with process ID 3308.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[process_control.py@74] Process start successed ! process id: 3308</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[remote_lib_control.py@62] start remote server succeed !</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[tm500.py@108] have setup Remotelib instance: RemoteLibInstance: 10.69.71.199:8273</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[tm500.py@408] Request TM500 Resource:
sent -&gt; "request:15:1"
received &lt;- "Welcome! Please use it, You are No.1 in 1 user queue.

"</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[tm500.py@412] Get TM500 resource success!</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;.</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@276] Execute command: ls "C:\Program Files\FileZilla Server"</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@306] Get Response: ls "C:\Program Files\FileZilla Server"
ls: cannot access 'C:\Program Files\FileZilla Server': No such file or directory

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;.</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[file_control.py@332] copyfile2local command: 'D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock\FileZilla server.xml"'</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.28:23 DeviceType:Windows Timeout:10 minutes &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@276] Execute command: D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock\FileZilla server.xml"</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@306] Get Response: D:\TA\trunk_soam\tdd_ev_robotws\tools\pscp.exe -r -q -scp -unsafe -pw btstest tdlte-tester@10.69.71.199:"C:/Program\ Files\ \(x86\)/FileZilla\ Server/FileZilla\ server.xml" "D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock\FileZilla server.xml"
The server's host key is not cached in the registry. You
have no guarantee that the server is the computer you
think it is.
The server's rsa2 key fingerprint is:
ssh-rsa 2048 82:b8:57:f2:3b:0d:e1:65:f6:b9:0e:2c:ca:70:97:64
If you trust this host, enter "y" to add the key to
PuTTY's cache and carry on connecting.
If you want to carry on connecting just once, without
adding the key to the cache, enter "n".
If you do not trust this host, press Return to abandon the
connection.
Store key in cache? (y/n)</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@276] Execute command: y</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@306] Get Response: y

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@276] Execute command: echo ERRORCODE is: %ERRORLEVEL%</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[telnet_common.py@306] Get Response: echo ERRORCODE is: %ERRORLEVEL%
ERRORCODE is: 0

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[file_common.py@168] Copy file "D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock\FileZilla server.xml" to "D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock\FileZilla server.xml.change_bak" succeeded.</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[filezilla_control.py@182] Filezilla configed right, no need to change TM500 version.</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@147] Switch to connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;.</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.035" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$CLOSE</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: CLOSE 0x00 ok.</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[telnet_common.py@276] Execute command: TASKKILL /F /T /IM TmaApplication.exe</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[telnet_common.py@306] Get Response: TASKKILL /F /T /IM TmaApplication.exe
ERROR: The process "TmaApplication.exe" not found.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[telnet_common.py@276] Execute command: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[telnet_common.py@306] Get Response: python -c "import tdd_ev_robotws, os;print '*SEP*',os.path.dirname(tdd_ev_robotws.__file__)"
*SEP* D:\TA\trunk_soam\tdd_ev_robotws

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[connection_mgr.py@278] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[telnet_common.py@276] Execute command: "D:\TA\trunk_soam\tdd_ev_robotws\tools\Server_Client\client.exe" localhost "C:\Program Files (x86)\Aeroflex\TM500\LTE - LSC 1.2.0\Test Mobile Application\TmaApplication.exe" /u \"Default User\" /c y /p 5003 /a n</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[telnet_common.py@276] Execute command: Ctrl-C</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[telnet_common.py@306] Get Response: Server Keep Alive Message Interval is [4 bytes]: '3'
Keep Alive Message from Server Received [3 bytes]: '(be 0 3)' 
Keep Alive Message from Server Received [3 bytes]: '(be 0 3)' 
^C
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[connection_mgr.py@208] Current connection: 10.69.71.199:23 DeviceType:Windows Timeout:1 minute 30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x03E9AFA8&gt;</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@591] Prev msg:</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DISCONNECT</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: DISCONNECT 0x00 OK</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$CONNECT</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: CONNECT 0x00 ok. Waiting for User to Configure Test Mobile</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: GSTS</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: GSTS 0x00 Ok Reset</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: ABOT 0 0 1</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: ABOT 0x00 Ok 0x0000001e</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: SELR 0 0 RC1 COMBINED</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: SELR 0x00 Ok</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: EREF 0 0 0</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: EREF 0x00 Ok</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: GETR</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: GETR 0x00 Ok 
Radio cards
==============
*  Card   : UMBRA2 LTE (20MHz)
   Slot   : RC1
   Chassis: 0
   Context: 0
   RF     : type 200
   A:  DL : 400.0 - 4000.0 MHz
       UL : 400.0 - 4000.0 MHz
   B:  DL : 0.0 - 0.0 MHz
       UL : 0.0 - 0.0 MHz
==============
   Card   : UMBRA2 LTE (20MHz)
   Slot   : RC2
   Chassis: 0
   Context: -
   RF     : type 17
   A:  DL : 2110.0 - 2170.0 MHz
       UL : 1920.0 - 1980.0 MHz
   B:  DL : 1880.0 - 1920.0 MHz
       UL : 1880.0 - 1920.0 MHz</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: SCFG NAS_MODE</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: SCFG 0x00 Ok NAS_MODE</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: STRT</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: STRT 0x00 Ok</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DATA_LOG_FOLDER 1 "C:\TM500_log\"</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: DATA_LOG_FOLDER 0x00 ok.</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DATA_LOG_OPTIONS 0 1 0</msg>
<msg timestamp="20170719 16:20:51.036" level="INFO">[tm500.py@1736] TM500 command reply: C: DATA_LOG_OPTIONS 0x00 ok.</msg>
<status status="PASS" endtime="20170719 16:20:51.039" starttime="20170719 16:19:22.292"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Use_Tag}</arg>
<arg>used</arg>
</arguments>
<msg timestamp="20170719 16:20:51.043" level="INFO">${TM500_Use_Tag} = used</msg>
<status status="PASS" endtime="20170719 16:20:51.043" starttime="20170719 16:20:51.040"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${cell_id}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170719 16:20:55.070" level="INFO">$TA,C,081E*</msg>
<msg timestamp="20170719 16:20:55.070" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,081E*', Receive&lt;-'$TA,C,081E*'</msg>
<msg timestamp="20170719 16:20:55.070" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,081E*'
$TA,C,161E*</msg>
<msg timestamp="20170719 16:20:55.070" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,161E*', Receive&lt;-'$TA,C,161E*'</msg>
<msg timestamp="20170719 16:20:55.070" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,161E*'</msg>
<status status="PASS" endtime="20170719 16:20:55.071" starttime="20170719 16:20:51.043"></status>
</kw>
<kw name="Tm500 Configure Logging" library="tdd_ev_robotws">
<doc>This keyword selects TM500's logging items.</doc>
<arguments>
<arg>${ue_log_types}</arg>
</arguments>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: GVER</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: GVER 0x00 Ok 
 PPC-0:
    BSP: 2.0/q/R13
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-0: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-1: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-2: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-3: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-4: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-5: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-6: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-7: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-8: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x101C
 DSP-9: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-10: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-11: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-12: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x208A
 DSP-13: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-14: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-15: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 Version Label: LSC_1_2_0_REV01
 UMBRA-0
    API: 19.2.1  Product: 3
    APP: 1.0.170  Built: Jun 20 2016 14:03:54
    CON: 3.5.3  Build: 0
    SIG: 2.1.1  Build: 46
    MMC: 1.7
    Carrier:  Loc: 13  PCB: 3.0 (OWI: 3.0)  SN: 0x9A000001D5F93823  BarCode: 20-1435-1360070-2517
    MOD TX: 0.0.17  Build: 16  Type: 200  PCB: 3.0 (OWI: 3.0)  SN: 0x6700000167952823  BarCode: 00000044830737250112
    MOD RX: 0.0.31  Build: 34  PCB: 3.0</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@507] TM500 command line response of "GVER":
C: GVER 0x00 Ok 
 PPC-0:
    BSP: 2.0/q/R13
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-0: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-1: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-2: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-3: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-4: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x0062
 DSP-5: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-6: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-7: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-8: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x101C
 DSP-9: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-10: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-11: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-12: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
    PCB: 0
   VHDL: 0x208A
 DSP-13: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-14: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 DSP-15: 
    APP: TM500 LTE VERSION: LSC1.2.0 Rev1
 Version Label: LSC_1_2_0_REV01
 UMBRA-0
    API: 19.2.1  Product: 3
    APP: 1.0.170  Built: Jun 20 2016 14:03:54
    CON: 3.5.3  Build: 0
    SIG: 2.1.1  Build: 46
    MMC: 1.7
    Carrier:  Loc: 13  PCB: 3.0 (OWI: 3.0)  SN: 0x9A000001D5F93823  BarCode: 20-1435-1360070-2517
    MOD TX: 0.0.17  Build: 16  Type: 200  PCB: 3.0 (OWI: 3.0)  SN: 0x6700000167952823  BarCode: 00000044830737250112
    MOD RX: 0.0.31  Build: 34  PCB: 3.0</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CLEAR_ALL</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CLEAR_ALL 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_ITM 1 1 1 Manual</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_ITM 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 100 0 0 0 UEOVERVIEW</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 1 0 0 0 ProtocolLog</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 CQIREPORTING #Subband 0-24 2</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 262 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 263 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_CAT 264 1 0 0 #GRP:CQIREPORTING</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_CAT 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 100 0 0 0 L1RBPOWERS #Component_Carrier 0,1 0</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 200 0 0 0 L1CELLWATCH</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLSCHRX</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLHARQRX</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 ULHARQTX</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 ULSRS</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 0 1 0 0 0 DLL1L2CONTROL</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_GRP 0 1 1 100 0 0 0 L1DLRSPOWER #Radio_Context_ID 0,1 0</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_GRP 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_ITM 0 0 0 Automatic</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_ITM 0x00 ok.</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$LC_END</msg>
<msg timestamp="20170719 16:20:57.448" level="INFO">[tm500.py@1736] TM500 command reply: C: LC_END 0x00 ok.</msg>
<status status="PASS" endtime="20170719 16:20:57.449" starttime="20170719 16:20:55.071"></status>
</kw>
<kw name="Tm500 Start Logging" library="tdd_ev_robotws">
<doc>This keyword starts TM500's logging.</doc>
<msg timestamp="20170719 16:20:58.232" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$START_LOGGING</msg>
<msg timestamp="20170719 16:20:58.232" level="INFO">[tm500.py@1736] TM500 command reply: I: TMAE 0x0 Information - Connecting to Protocol logging port 25699</msg>
<msg timestamp="20170719 16:20:58.232" level="INFO">[tm500.py@1352] TM500 command line response of "START LOGGING":
I: TMAE 0x0 Information - Connecting to Protocol logging port 25699
C: START_LOGGING 0x00 OK. Current logging folder is 'C:\TM500_LOG\/170719_162156_session/170719_162204'</msg>
<msg timestamp="20170719 16:20:58.232" level="INFO">[tm500.py@1363] C:\TM500_LOG\170719_162156_session\170719_162204</msg>
<status status="PASS" endtime="20170719 16:20:58.232" starttime="20170719 16:20:57.450"></status>
</kw>
<kw name="Convert To List" library="Collections">
<doc>Converts the given ``item`` to a Python ``list`` type.</doc>
<arguments>
<arg>${modify_tm500_script}</arg>
</arguments>
<assign>
<var>${modify_tm500_script}</var>
</assign>
<msg timestamp="20170719 16:20:58.233" level="INFO">${modify_tm500_script} = []</msg>
<status status="PASS" endtime="20170719 16:20:58.233" starttime="20170719 16:20:58.233"></status>
</kw>
<kw name="Append To List" library="Collections">
<doc>Adds ``values`` to the end of ``list``.</doc>
<arguments>
<arg>${modify_tm500_script}</arg>
<arg>forw mte RrcAptConfigCellSelection: ${attach_freqency}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:20:58.234" starttime="20170719 16:20:58.233"></status>
</kw>
<kw name="Tm500 Attach" library="tdd_ev_robotws">
<doc>This keyword does UE attach operation of TM500.</doc>
<arguments>
<arg>${attach_scripts}</arg>
<arg>${modify_tm500_script}</arg>
</arguments>
<assign>
<var>${tm500_attach_result}</var>
</assign>
<msg timestamp="20170719 16:21:18.325" level="INFO">[file_common.py@125] Write file "D:\TA\BTS797\modified_attach_MIMO.txt" succeeded</msg>
<msg timestamp="20170719 16:21:18.325" level="INFO">[tm500.py@1728] TM500 command to be sent: SETP RRC_NUM_DL_ANTENNAS 4</msg>
<msg timestamp="20170719 16:21:18.326" level="INFO">[tm500.py@1736] TM500 command reply: C: SETP 0x00 Ok RRC_NUM_DL_ANTENNAS 0x00000004</msg>
<msg timestamp="20170719 16:21:18.326" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE USIMCONFIG 1([262030020000522 2] [] [] [] []) [] [] [A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5A5] [CDC202D5123E20F62B6D676AC72CB318 00000000000000000000000000000000 00000000000000000000000000000001 00000000000000000000000000000002 00000000000000000000000000000004 00000000000000000000000000000008 64 0 32 64 96]</msg>
<msg timestamp="20170719 16:21:18.326" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE USIMCONFIG: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170719 16:21:18.326" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE PHYCONFIGSYSCAP 2 4 4</msg>
<msg timestamp="20170719 16:21:18.326" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x00 Ok MTE PHYCONFIGSYSCAP: RETURN CODE:0 SUCCEEDED</msg>
<msg timestamp="20170719 16:21:18.326" level="INFO">[tm500.py@1728] TM500 command to be sent: FORW MTE PHYSETTDDCFG 1 7</msg>
<msg timestamp="20170719 16:21:18.326" level="INFO">[tm500.py@1736] TM500 command reply: C: FORW 0x06 Failure of the command(s):
		FORW : Failure MTE PHYSETTDDCFG: RETURN CODE:6 FAILED TM500 LTE TDD not licensed or PhySetRATType not set</msg>
<msg timestamp="20170719 16:21:18.326" level="FAIL">TM500 return message does NOT contain "Ok"! ("Ok" is case insensitive)</msg>
<status status="FAIL" endtime="20170719 16:21:18.326" starttime="20170719 16:20:58.234"></status>
</kw>
<status status="FAIL" endtime="20170719 16:21:18.327" starttime="20170719 16:19:22.291"></status>
</kw>
<status status="FAIL" endtime="20170719 16:21:18.327" starttime="20170719 16:19:22.288"></status>
</kw>
<status status="FAIL" endtime="20170719 16:21:18.327" starttime="20170719 16:19:22.270"></status>
</kw>
<status status="FAIL" endtime="20170719 16:21:18.327" starttime="20170719 16:19:22.270"></status>
</kw>
<status status="FAIL" endtime="20170719 16:21:18.327" starttime="20170719 16:19:22.129"></status>
</kw>
<status status="FAIL" endtime="20170719 16:21:18.327" starttime="20170719 16:18:49.050"></status>
</kw>
<status status="FAIL" endtime="20170719 16:21:18.327" starttime="20170719 16:18:49.050"></status>
</kw>
<status status="FAIL" endtime="20170719 16:21:18.327" starttime="20170719 16:18:49.050"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170719 16:21:18.332" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.28:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x056773F0&gt;.</msg>
<status status="PASS" endtime="20170719 16:21:18.333" starttime="20170719 16:21:18.329"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170719 16:21:18.759" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170719 16:21:18.759" starttime="20170719 16:21:18.333"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170719 16:21:18.766" starttime="20170719 16:21:18.760"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:18.767" starttime="20170719 16:21:18.766"></status>
</kw>
<msg timestamp="20170719 16:21:18.767" level="INFO">${return} = ('PASS', None)</msg>
<status status="PASS" endtime="20170719 16:21:18.767" starttime="20170719 16:21:18.766"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Save Infomodel Log" library="tdd_ev_robotws">
<doc>Save InfoModel log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170719 16:21:18.782" level="INFO">[infomodel_control.py@215] save infomodel log to file: 'D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock\owner_debug' succeed .</msg>
<status status="PASS" endtime="20170719 16:21:18.782" starttime="20170719 16:21:18.771"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:18.782" starttime="20170719 16:21:18.768"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:18.782" starttime="20170719 16:21:18.767"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20170719 16:21:19.422" level="INFO">[infomodel_control.py@187] stop infomodel logger succeed .</msg>
<msg timestamp="20170719 16:21:19.422" level="INFO">[infomodel_control.py@199] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170719 16:21:19.422" starttime="20170719 16:21:18.787"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:19.422" starttime="20170719 16:21:18.783"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:19.422" starttime="20170719 16:21:18.783"></status>
</kw>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<msg timestamp="20170719 16:21:19.673" level="INFO">Exit code: 1</msg>
<msg timestamp="20170719 16:21:19.673" level="INFO">STDOUT
CLI LOG:  CLI server is listening on localhost:41380
</msg>
<msg timestamp="20170719 16:21:19.673" level="INFO">STDERR
</msg>
<status status="PASS" endtime="20170719 16:21:19.677" starttime="20170719 16:21:19.422"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>ute_admin.Teardown Admin</arg>
<arg>alias=uploadscf</arg>
</arguments>
<kw name="Teardown Admin" library="ute_admin">
<doc>Teardown Admin API. Keyword will release used resources.</doc>
<arguments>
<arg>alias=uploadscf</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:19.678" starttime="20170719 16:21:19.678"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:19.678" starttime="20170719 16:21:19.678"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:19.680" starttime="20170719 16:21:19.679"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:19.680" starttime="20170719 16:21:19.680"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170719 16:21:19.687" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170719 16:21:19.687" starttime="20170719 16:21:19.681"></status>
</kw>
<msg timestamp="20170719 16:21:19.687" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170719 16:21:19.688" starttime="20170719 16:21:19.681"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:19.691" starttime="20170719 16:21:19.688"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:19.694" starttime="20170719 16:21:19.691"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170719 16:21:37.098" level="INFO">[tm500.py@591] Prev msg: I: TICK</msg>
<msg timestamp="20170719 16:21:37.098" level="INFO">[tm500.py@1728] TM500 command to be sent: #$$DISCONNECT</msg>
<msg timestamp="20170719 16:21:37.098" level="INFO">[tm500.py@1736] TM500 command reply: I: TMAE 0x1 Warning - Logging is being stopped automatically. Please wait for logging stopped message.
I: TMAE 0x1 Warning - Logging has been stopped automatically.
C: DISCONNECT 0x00 OK</msg>
<msg timestamp="20170719 16:21:37.098" level="INFO">[tm500.py@437] Release TM500 Resource:
sent -&gt; "release"
received &lt;- "Bye!"
Robot Framework remote server at 0.0.0.0:8273 stopping</msg>
<status status="PASS" endtime="20170719 16:21:37.099" starttime="20170719 16:21:19.695"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:37.101" starttime="20170719 16:21:37.100"></status>
</kw>
<msg timestamp="20170719 16:21:37.101" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170719 16:21:37.101" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170719 16:21:37.101" starttime="20170719 16:21:37.100"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:37.105" starttime="20170719 16:21:37.101"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170719 16:21:41.129" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170719 16:21:41.129" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170719 16:21:41.129" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170719 16:21:41.129" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170719 16:21:41.129" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170719 16:21:41.130" starttime="20170719 16:21:37.105"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:41.130" starttime="20170719 16:21:37.100"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:41.131" starttime="20170719 16:21:41.131"></status>
</kw>
<msg timestamp="20170719 16:21:41.131" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170719 16:21:41.131" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170719 16:21:41.131" starttime="20170719 16:21:41.130"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:41.135" starttime="20170719 16:21:41.132"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170719 16:21:45.156" level="INFO">$TA,C,08F0*</msg>
<msg timestamp="20170719 16:21:45.157" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,08F0*', Receive&lt;-'$TA,C,08F0*'</msg>
<msg timestamp="20170719 16:21:45.157" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,08*', Receive&lt;-'$TA,C,08F0*'
$TA,C,16F0*</msg>
<msg timestamp="20170719 16:21:45.157" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,16F0*', Receive&lt;-'$TA,C,16F0*'</msg>
<msg timestamp="20170719 16:21:45.157" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,16*', Receive&lt;-'$TA,C,16F0*'</msg>
<status status="PASS" endtime="20170719 16:21:45.157" starttime="20170719 16:21:41.136"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:45.157" starttime="20170719 16:21:41.130"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170719 16:21:45.165" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170719 16:21:45.165" starttime="20170719 16:21:45.158"></status>
</kw>
<msg timestamp="20170719 16:21:45.165" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170719 16:21:45.165" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170719 16:21:45.165" starttime="20170719 16:21:45.157"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170719 16:21:45.168" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170719 16:21:45.168" starttime="20170719 16:21:45.165"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:45.168" starttime="20170719 16:21:45.157"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:45.168" starttime="20170719 16:21:37.099"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:45.168" starttime="20170719 16:21:37.099"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:45.169" starttime="20170719 16:21:45.169"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170719 16:21:45.172" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170719 16:21:45.172" starttime="20170719 16:21:45.169"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:45.172" starttime="20170719 16:21:19.679"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:45.172" starttime="20170719 16:21:19.679"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170719 16:21:45.180" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170719 16:21:45.180" starttime="20170719 16:21:45.173"></status>
</kw>
<msg timestamp="20170719 16:21:45.180" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170719 16:21:45.180" starttime="20170719 16:21:45.173"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:45.185" starttime="20170719 16:21:45.181"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170719 16:21:57.013" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170719 16:21:57.577" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}
++++++++++++++++++++++++++++++++++++++++++
{'alarm2': [], 'alarm1': [], 'data': {'alarm2': [], 'alarm1': []}}</msg>
<msg timestamp="20170719 16:21:57.577" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170719 16:21:57.578" starttime="20170719 16:21:45.186"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170719 16:21:58.657" level="INFO">['fatal'] ['fatal']</msg>
<msg timestamp="20170719 16:21:58.657" level="INFO">[file_control.py@109] *HTML*&lt;a href = "D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock\udplog_20170719161421.log"&gt;fail log&lt;/a&gt;
Find '['fatal']' in 'D:\TA\TA_logs\TestLog_20170719161040\ev_logs\FZHQ_T1_Operational_RF_block_unblock_20170719161051\FZHQ_T1_Operational_RF_block_unblock\udplog_20170719161421.log'
write successfully</msg>
<status status="PASS" endtime="20170719 16:21:58.658" starttime="20170719 16:21:57.578"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170719 16:21:58.659" level="FAIL">'FZHQ_T1_Operational_RF_block_unblock' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170719 16:21:58.659" starttime="20170719 16:21:58.659"></status>
</kw>
<msg timestamp="20170719 16:21:58.659" level="INFO">${return1} = ('FAIL', u"'FZHQ_T1_Operational_RF_block_unblock' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170719 16:21:58.660" starttime="20170719 16:21:58.658"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:58.665" starttime="20170719 16:21:58.661"></status>
</kw>
<msg timestamp="20170719 16:21:58.665" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170719 16:21:58.665" starttime="20170719 16:21:58.660"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:58.668" starttime="20170719 16:21:58.666"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:58.669" starttime="20170719 16:21:58.665"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:58.669" starttime="20170719 16:21:58.669"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:58.669" starttime="20170719 16:21:58.669"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:58.670" starttime="20170719 16:21:58.670"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170719 16:21:58.671" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170719 16:21:58.671" starttime="20170719 16:21:58.671"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:58.676" starttime="20170719 16:21:58.672"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:58.676" starttime="20170719 16:21:58.672"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:58.676" starttime="20170719 16:21:58.672"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:58.680" starttime="20170719 16:21:58.677"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:58.680" starttime="20170719 16:21:58.676"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:58.680" starttime="20170719 16:21:58.676"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170719 16:21:58.684" starttime="20170719 16:21:58.681"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:58.684" starttime="20170719 16:21:58.681"></status>
</kw>
<status status="PASS" endtime="20170719 16:21:58.684" starttime="20170719 16:21:58.680"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170719 16:22:19.816" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:22:19.816" level="INFO">[ssh_common.py@203] root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05706620&gt;</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05706620&gt;</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">[ssh_common.py@203] Last login: Wed Jul 19 16:21:59 CST 2017 from 192.168.255.126 on pts/0
root@fctj-4a:~ &gt;</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05706620&gt;</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_SBTS00_TDDFSM4_9999_170608_000754.xml
root@fctj-4a:/ffs/fs1 &gt;</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05706620&gt;</msg>
<msg timestamp="20170719 16:22:19.817" level="INFO">${version} = SBTS00_TDDFSM4_9999_170608_000754</msg>
<status status="PASS" endtime="20170719 16:22:19.817" starttime="20170719 16:21:58.685"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170719 16:22:19.822" starttime="20170719 16:22:19.819"></status>
</kw>
<status status="PASS" endtime="20170719 16:22:19.822" starttime="20170719 16:22:19.818"></status>
</kw>
<status status="PASS" endtime="20170719 16:22:19.822" starttime="20170719 16:22:19.818"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170719 16:22:19.826" starttime="20170719 16:22:19.823"></status>
</kw>
<status status="PASS" endtime="20170719 16:22:19.826" starttime="20170719 16:22:19.822"></status>
</kw>
<status status="PASS" endtime="20170719 16:22:19.826" starttime="20170719 16:22:19.822"></status>
</kw>
<status status="PASS" endtime="20170719 16:22:19.826" starttime="20170719 16:21:58.670"></status>
</kw>
<status status="PASS" endtime="20170719 16:22:19.826" starttime="20170719 16:21:18.328"></status>
</kw>
<tags>
<tag>owner-xingqiang.wu@nokia.com</tag>
<tag>QC_443311</tag>
</tags>
<status status="FAIL" endtime="20170719 16:22:19.827" critical="yes" starttime="20170719 16:12:10.630">TM500 return message does NOT contain "Ok"! ("Ok" is case insensitive)</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170719 16:22:19.849" starttime="20170719 16:10:45.807"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-xingqiang.wu@nokia.com</stat>
<stat fail="1" pass="0">QC_443311</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZHQ T1 Operational RF block unblock" pass="0">FZHQ T1 Operational RF block unblock</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170719 16:10:48.474" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170719 16:19:22.201" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170719 16:19:22.209" level="WARN">Giving keys and values separately to 'Create Dictionary' keyword is deprecated. Use 'key=value' syntax instead.</msg>
<msg timestamp="20170719 16:21:57.013" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
