<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170827 17:44:50.415" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\Trunk_CRT\SISO1\CIT\CPRI_Single_FZFI\FZFI_Operational_Cell_block_unblock\FZFI_Operational_Cell_block_unblock.html" id="s1" name="FZFI Operational Cell block unblock">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA_logs\TestLog_20170827171138//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170827 17:32:02.041" level="INFO">${timestamp} = 20170827173202</msg>
<status status="PASS" endtime="20170827 17:32:02.041" starttime="20170827 17:32:02.002"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170827 17:32:02.042" level="INFO">${FILE_NAME} = FZFI Operational Cell block unblock</msg>
<status status="PASS" endtime="20170827 17:32:02.042" starttime="20170827 17:32:02.041"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170827 17:32:02.043" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI Operational Cell block unblock_20170827173202</msg>
<status status="PASS" endtime="20170827 17:32:02.043" starttime="20170827 17:32:02.042"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170827 17:32:02.044" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202</msg>
<status status="PASS" endtime="20170827 17:32:02.044" starttime="20170827 17:32:02.043"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170827 17:32:02.044" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202</msg>
<status status="PASS" endtime="20170827 17:32:02.045" starttime="20170827 17:32:02.044"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170827 17:32:02.045" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202"&gt;D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170827 17:32:02.046" starttime="20170827 17:32:02.045"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170827 17:32:02.046" level="INFO">save log dir:D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202</msg>
<status status="PASS" endtime="20170827 17:32:02.046" starttime="20170827 17:32:02.046"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170827 17:32:02.050" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170827 17:32:02.050" starttime="20170827 17:32:02.046"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170827 17:32:02.070" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170827 17:32:02.070" starttime="20170827 17:32:02.064"></status>
</kw>
<msg timestamp="20170827 17:32:02.070" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170827 17:32:02.070" starttime="20170827 17:32:02.063"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:32:02.071" starttime="20170827 17:32:02.071"></status>
</kw>
<msg timestamp="20170827 17:32:02.071" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170827 17:32:02.072" starttime="20170827 17:32:02.071"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:32:02.079" starttime="20170827 17:32:02.075"></status>
</kw>
<msg timestamp="20170827 17:32:02.079" level="INFO">${log dir} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202</msg>
<status status="PASS" endtime="20170827 17:32:02.079" starttime="20170827 17:32:02.072"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170827 17:32:02.082" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202</msg>
<status status="PASS" endtime="20170827 17:32:02.083" starttime="20170827 17:32:02.079"></status>
</kw>
<status status="PASS" endtime="20170827 17:32:02.083" starttime="20170827 17:32:02.063"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170827 17:32:05.967" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170827 17:32:05.967" starttime="20170827 17:32:02.084"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<kw name="Wait Until Units Startup" library="tdd_ev_robotws">
<doc>This keyword tests the reachability of given unit/units.</doc>
<arguments>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<msg timestamp="20170827 17:32:15.996" level="INFO">[ping_control.py@155] ping 192.168.255.129 OK!</msg>
<status status="PASS" endtime="20170827 17:32:15.996" starttime="20170827 17:32:05.968"></status>
</kw>
<status status="PASS" endtime="20170827 17:32:15.996" starttime="20170827 17:32:05.967"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<kw name="Btscli Disable Bts Port Security" library="tdd_ev_robotws">
<doc>Disable Ethernet port security.</doc>
<msg timestamp="20170827 17:32:16.447" level="INFO">Starting process:
D:\TA\trunk_soam\tdd_ev_others\btscli\resource\jre_windows\bin\java -Djava.awt.headless=true -classpath .;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\btsemappl.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\coreasset.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\ganymed-ssh2-build262.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\jansi-1.11.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\javabuilder.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\json-20140107.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\laf.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\log4j.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\poseidon.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\rfview.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\rpmaster.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\xz.jar com.nokia.em.bts.coreasset.application.CoreAssetToolApplication -op changesecurity -ne "192.168.255.129" -outdir "D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202" -pw "Nemuadmin:nemuuser" -timeout "300" -disable</msg>
<msg timestamp="20170827 17:32:16.454" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20170827 17:32:41.556" level="INFO">Process completed.</msg>
<msg timestamp="20170827 17:32:41.563" level="INFO">[runner.py@40] execute cmd: D:\TA\trunk_soam\tdd_ev_others\btscli\resource\jre_windows\bin\java -Djava.awt.headless=true -classpath .;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\btsemappl.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\coreasset.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\ganymed-ssh2-build262.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\jansi-1.11.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\javabuilder.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\json-20140107.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\laf.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\log4j.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\poseidon.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\rfview.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\rpmaster.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\xz.jar com.nokia.em.bts.coreasset.application.CoreAssetToolApplication -op changesecurity -ne "192.168.255.129" -outdir "D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202" -pw "Nemuadmin:nemuuser" -timeout "300" -disable</msg>
<msg timestamp="20170827 17:32:41.563" level="INFO">[runner.py@44] Start to kill Site Manager process...</msg>
<msg timestamp="20170827 17:32:41.563" level="INFO">[runner.py@60] response: 27/08 17:32:18  INFO Ethernet Security Tool version 3.0
27/08 17:32:18  INFO Connecting to 192.168.255.129...
27/08 17:32:19 ERROR Unable to get siteEM from address: 192.168.255.129
27/08 17:32:19 ERROR Cannot connect to 192.168.255.129
27/08 17:32:20  INFO Connecting to 192.168.255.129...
27/08 17:32:37  INFO Create write connection to 192.168.255.129
27/08 17:32:37  INFO Connected to 192.168.255.129
27/08 17:32:38  INFO Successfully changed ethernet security status to 192.168.255.129
27/08 17:32:38  INFO Disconnected from 192.168.255.129
27/08 17:32:41  INFO Ethernet Security Tool finished
27/08 17:32:41  INFO Operations finished successfully
Picked up JAVA_TOOL_OPTIONS: -agentlib:jvmhook
Picked up _JAVA_OPTIONS: -Xrunjvmhook -Xbootclasspath/a:"C:\Program Files (x86)\HP\Unified Functional Testing\bin\java_shared\classes";"C:\Program Files (x86)\HP\Unified Functional Testing\bin\java_shared\classes\jasmine.jar"
Picked up JAVA_TOOL_OPTIONS: -agentlib:jvmhook</msg>
<status status="PASS" endtime="20170827 17:32:41.563" starttime="20170827 17:32:15.997"></status>
</kw>
<status status="PASS" endtime="20170827 17:32:41.563" starttime="20170827 17:32:15.997"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<kw name="Wait Until Units Startup" library="tdd_ev_robotws">
<doc>This keyword tests the reachability of given unit/units.</doc>
<arguments>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<msg timestamp="20170827 17:33:05.493" level="INFO">[ping_control.py@155] ping 192.168.255.1 OK!</msg>
<status status="PASS" endtime="20170827 17:33:05.493" starttime="20170827 17:32:41.565"></status>
</kw>
<status status="PASS" endtime="20170827 17:33:05.493" starttime="20170827 17:32:41.564"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170827 17:33:05.494" starttime="20170827 17:33:05.494"></status>
</kw>
<status status="PASS" endtime="20170827 17:33:05.494" starttime="20170827 17:32:02.084"></status>
</kw>
<status status="PASS" endtime="20170827 17:33:05.495" starttime="20170827 17:32:02.083"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170827 17:33:51.724" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170827 17:33:51.759" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170827 17:34:02.893" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170827 17:34:02.923" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170827 17:34:03.486" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170827 17:34:03.526" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1503826402&amp;token=bede5c270e3572216a61bc469d2b58e226cb8afe3858cd2b78b5b1b6a2b177ab&amp;frame=sshservice'</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1503826408&amp;token=782828be84bfb45c7102a1f8a648f3f83cbf87b86d645a2018ead534cf56a69c&amp;frame=RndPortsService'</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ssh_common.py@203] -bash-4.4#</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Unknow Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052D9288&gt;</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Unknow Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052D9288&gt;</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ssh_common.py@203] Last login: Sun Aug 27 09:33:33 UTC 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052D9350&gt;</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170827_066253.xml
-bash-4.4#</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052D9350&gt;</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[enb_resource.py@1086] 
 ****Current BTS version is 'TL18_ENB_9999_170827_066253' *****</msg>
<msg timestamp="20170827 17:34:27.466" level="INFO">[enb_resource.py@1113] activeBuildVersion=TL18_ENB_9999_170827_066253</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[ssh_common.py@203] Last login: Sun Aug 27 09:33:43 UTC 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0536FBC0&gt;</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
-bash-4.4#</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0536FBC0&gt;</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\SiteConf.xml' is ok. local file size is 26k</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[ssh_common.py@203] Last login: Sun Aug 27 09:34:04 UTC 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04D4E3A0&gt;</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x04D4E3A0&gt;</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[enb_resource.py@375] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FileDirectory_20170827173351.xml' is ok. local file size is 38k</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_119.xml</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/config/SCFC_119.xml' to 'D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\SCFC_119.xml' is ok. local file size is 115k</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[enb_resource.py@1086] 
 ****Current bbu type is 'FSIH' *****</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[enb_resource.py@1208] HW_BBU_TYPE=FSIH</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[enb_resource.py@1086] 
 ****Current rru type is 'FR:FR' *****</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[enb_resource.py@1211] HW_RRU_TYPE=FR:FR</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[enb_resource.py@1086] 
 ****Current HW type is 'null' *****</msg>
<msg timestamp="20170827 17:34:27.467" level="INFO">[enb_resource.py@1214] BTS_HW_TYPE=null</msg>
<status status="PASS" endtime="20170827 17:34:27.469" starttime="20170827 17:33:05.496"></status>
</kw>
<status status="PASS" endtime="20170827 17:34:27.469" starttime="20170827 17:33:05.495"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170827 17:34:27.470" starttime="20170827 17:34:27.469"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170827 17:34:27.471" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170827 17:34:27.471" starttime="20170827 17:34:27.471"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170827 17:34:27.475" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170827 17:34:27.475" starttime="20170827 17:34:27.472"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170827 17:34:27.478" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170827 17:34:27.478" starttime="20170827 17:34:27.475"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170827 17:34:27.482" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170827 17:34:27.482" starttime="20170827 17:34:27.479"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170827 17:34:28.898" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170827 17:34:28.898" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170827 17:34:28.898" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170827 17:34:28.898" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170827 17:34:28.898" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170827 17:34:28.899" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053E93C8&gt;</msg>
<status status="PASS" endtime="20170827 17:34:28.899" starttime="20170827 17:34:27.482"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170827 17:34:28.900" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053E93C8&gt;</msg>
<status status="PASS" endtime="20170827 17:34:28.900" starttime="20170827 17:34:28.899"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170827 17:34:30.094" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053E93C8&gt;</msg>
<msg timestamp="20170827 17:34:30.094" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170827 17:34:30.094" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170827 17:34:30.095" starttime="20170827 17:34:28.904"></status>
</kw>
<status status="PASS" endtime="20170827 17:34:30.095" starttime="20170827 17:34:28.900"></status>
</kw>
<status status="PASS" endtime="20170827 17:34:30.095" starttime="20170827 17:34:27.470"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170827 17:34:30.099" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053E93C8&gt;.</msg>
<status status="PASS" endtime="20170827 17:34:30.100" starttime="20170827 17:34:30.096"></status>
</kw>
<status status="PASS" endtime="20170827 17:34:30.100" starttime="20170827 17:32:02.001"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:45.527" starttime="20170827 17:44:45.523"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170827 17:44:45.537" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170827 17:44:45.537" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053E93C8&gt;</msg>
<status status="PASS" endtime="20170827 17:44:45.537" starttime="20170827 17:44:45.527"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:45.539" starttime="20170827 17:44:45.538"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:45.539" starttime="20170827 17:44:45.538"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:45.540" starttime="20170827 17:44:45.540"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:45.541" starttime="20170827 17:44:45.539"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:45.541" starttime="20170827 17:44:45.523"></status>
</kw>
<test id="s1-t1" name="FZFI_Operational_Cell_block_unblock">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA_logs\TestLog_20170827171138//ev_logs//D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170827 17:34:30.105" level="INFO">${timestamp} = 20170827173430</msg>
<status status="PASS" endtime="20170827 17:34:30.105" starttime="20170827 17:34:30.105"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170827 17:34:30.106" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170827 17:34:30.106" starttime="20170827 17:34:30.106"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170827 17:34:30.107" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170827 17:34:30.107" starttime="20170827 17:34:30.107"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170827 17:34:30.108" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170827 17:34:30.108" starttime="20170827 17:34:30.108"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170827 17:34:30.109" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock"&gt;D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170827 17:34:30.109" starttime="20170827 17:34:30.108"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170827 17:34:30.110" level="INFO">save log dir:D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170827 17:34:30.110" starttime="20170827 17:34:30.110"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170827 17:34:30.111" starttime="20170827 17:34:30.110"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:34:30.113" starttime="20170827 17:34:30.112"></status>
</kw>
<msg timestamp="20170827 17:34:30.113" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170827 17:34:30.113" starttime="20170827 17:34:30.112"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:34:30.114" starttime="20170827 17:34:30.114"></status>
</kw>
<msg timestamp="20170827 17:34:30.114" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170827 17:34:30.114" starttime="20170827 17:34:30.113"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170827 17:34:30.118" level="INFO">${log dir} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170827 17:34:30.118" starttime="20170827 17:34:30.115"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170827 17:34:30.119" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock</msg>
<status status="PASS" endtime="20170827 17:34:30.119" starttime="20170827 17:34:30.119"></status>
</kw>
<status status="PASS" endtime="20170827 17:34:30.120" starttime="20170827 17:34:30.111"></status>
</kw>
<status status="PASS" endtime="20170827 17:34:30.120" starttime="20170827 17:34:30.104"></status>
</kw>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170827 17:34:30.126" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053E93C8&gt;.</msg>
<status status="PASS" endtime="20170827 17:34:30.126" starttime="20170827 17:34:30.121"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20170827 17:34:34.310" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053E93C8&gt;</msg>
<msg timestamp="20170827 17:34:34.310" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20170827 17:34:34.310" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20170827 17:34:34.311" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20170827 17:34:34.311" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20170827 17:34:34.311" starttime="20170827 17:34:30.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:34:34.315" starttime="20170827 17:34:34.311"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170827 17:34:34.319" starttime="20170827 17:34:34.315"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
</arguments>
<msg timestamp="20170827 17:34:57.956" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170827 17:34:57.983" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170827 17:35:09.152" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170827 17:35:09.375" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1503826490&amp;token=1195fdbb21c132debf8099724fea719544d07f99cd8802719ee2a8cb9f7c0caa&amp;frame=sshservice'</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1503826495&amp;token=6cec35465f3cc0ca64f3ff5e57636d707a832f7d29b40d1f1f04aaa5a93225e0&amp;frame=RndPortsService'</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ssh_common.py@203] Last login: Sun Aug 27 09:34:22 UTC 2017 from 10.69.80.114 on ssh
-bash-4.4#</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053E9878&gt;</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053E9878&gt;</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[enb_resource.py@375] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock\FileDirectory_20170827173446.xml' is ok. local file size is 38k</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.129</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ssh_common.py@203] Last login: Sun Aug 27 09:35:10 UTC 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053E9B20&gt;</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ssh_common.py@258] Execute command: rm -rf /ffs/fs2/config/hwf.bin.gz</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ssh_common.py@314] Get Response: rm -rf /ffs/fs2/config/hwf.bin.gz
-bash-4.4#</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x053E9B20&gt;</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[sftp_control.py@61] sftp upload from 'D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock\scf_modified.xml' to '/ffs/fs2/config/SCFC_119.xml' is ok.</msg>
<msg timestamp="20170827 17:35:09.381" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_119.xml</msg>
<status status="PASS" endtime="20170827 17:35:09.383" starttime="20170827 17:34:34.319"></status>
</kw>
<kw name="Restart Bts Until Onair" library="tdd_ev_robotws">
<doc>restart bts with powerbreaker and then wait until it is onair.</doc>
<arguments>
<arg>bts_powerbreak_port=${bts_powerbreak}</arg>
</arguments>
<msg timestamp="20170827 17:44:08.510" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20170827 17:44:08.510" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170827 17:44:08.510" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[facom.py@60] Power off port 1 succeed!</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[facom.py@60] Power off port 5 succeed!</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[facom.py@83] Power on port 1 succeed!</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[facom.py@83] Power on port 5 succeed!</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[tools_resource.py@39] restart port '['FACOM:10.56.7.221:1', 'FACOM:10.56.7.128:5']' with powerbreak succeed !</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[file_common.py@209] Directory "D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock" already exists, no need to create it again.</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[infomodel_control.py@157] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170827 17:44:08.511" level="INFO">[infomodel_control.py@157] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170827 17:44:08.514" level="FAIL">start infomodel failed for Expected connection status: RegisteredToInfoModel not achieved. Status reached: Started</msg>
<status status="FAIL" endtime="20170827 17:44:08.514" starttime="20170827 17:35:09.383"></status>
</kw>
<status status="FAIL" endtime="20170827 17:44:08.515" starttime="20170827 17:34:30.120"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170827 17:44:08.522" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x053E93C8&gt;.</msg>
<status status="PASS" endtime="20170827 17:44:08.522" starttime="20170827 17:44:08.516"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170827 17:44:08.970" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170827 17:44:08.970" starttime="20170827 17:44:08.523"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170827 17:44:08.972" starttime="20170827 17:44:08.971"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170827 17:44:08.979" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20170827 17:44:08.979" starttime="20170827 17:44:08.973"></status>
</kw>
<msg timestamp="20170827 17:44:08.980" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20170827 17:44:08.980" starttime="20170827 17:44:08.972"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:08.984" starttime="20170827 17:44:08.980"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:08.984" starttime="20170827 17:44:08.980"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:08.988" starttime="20170827 17:44:08.985"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:08.988" starttime="20170827 17:44:08.984"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:08.989" starttime="20170827 17:44:08.989"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:08.990" starttime="20170827 17:44:08.990"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170827 17:44:08.998" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170827 17:44:08.998" starttime="20170827 17:44:08.991"></status>
</kw>
<msg timestamp="20170827 17:44:08.998" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170827 17:44:08.998" starttime="20170827 17:44:08.990"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:09.002" starttime="20170827 17:44:08.999"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:09.006" starttime="20170827 17:44:09.002"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170827 17:44:09.007" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170827 17:44:09.007" starttime="20170827 17:44:09.006"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:09.009" starttime="20170827 17:44:09.009"></status>
</kw>
<msg timestamp="20170827 17:44:09.009" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170827 17:44:09.010" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170827 17:44:09.010" starttime="20170827 17:44:09.008"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:09.013" starttime="20170827 17:44:09.010"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170827 17:44:13.044" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20170827 17:44:13.044" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20170827 17:44:13.044" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20170827 17:44:13.044" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20170827 17:44:13.044" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20170827 17:44:13.044" starttime="20170827 17:44:09.014"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:13.044" starttime="20170827 17:44:09.008"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:13.045" starttime="20170827 17:44:13.045"></status>
</kw>
<msg timestamp="20170827 17:44:13.046" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170827 17:44:13.046" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170827 17:44:13.046" starttime="20170827 17:44:13.045"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:13.049" starttime="20170827 17:44:13.046"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170827 17:44:17.077" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20170827 17:44:17.077" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20170827 17:44:17.078" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20170827 17:44:17.078" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20170827 17:44:17.078" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20170827 17:44:17.078" starttime="20170827 17:44:13.050"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:17.078" starttime="20170827 17:44:13.044"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170827 17:44:17.087" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170827 17:44:17.088" starttime="20170827 17:44:17.079"></status>
</kw>
<msg timestamp="20170827 17:44:17.088" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170827 17:44:17.088" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170827 17:44:17.088" starttime="20170827 17:44:17.079"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170827 17:44:17.092" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170827 17:44:17.092" starttime="20170827 17:44:17.088"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:17.092" starttime="20170827 17:44:17.078"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:17.092" starttime="20170827 17:44:09.008"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:17.092" starttime="20170827 17:44:09.007"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:17.093" starttime="20170827 17:44:17.092"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170827 17:44:17.096" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170827 17:44:17.096" starttime="20170827 17:44:17.093"></status>
</kw>
<status status="FAIL" endtime="20170827 17:44:17.097" starttime="20170827 17:44:08.989"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:17.097" starttime="20170827 17:44:08.988"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170827 17:44:17.106" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170827 17:44:17.106" starttime="20170827 17:44:17.097"></status>
</kw>
<msg timestamp="20170827 17:44:17.107" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170827 17:44:17.107" starttime="20170827 17:44:17.097"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:17.110" starttime="20170827 17:44:17.107"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170827 17:44:23.499" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170827 17:44:24.074" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170827 17:44:24.074" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170827 17:44:24.074" starttime="20170827 17:44:17.111"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170827 17:44:24.332" level="INFO">[file_control.py@109] *HTML*&lt;a href = "D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock\udplog_20170827173514.log"&gt;fail log&lt;/a&gt;
Find '['fatal']' in 'D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_Cell_block_unblock_20170827173202\FZFI_Operational_Cell_block_unblock\udplog_20170827173514.log'
write successfully</msg>
<status status="PASS" endtime="20170827 17:44:24.332" starttime="20170827 17:44:24.074"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170827 17:44:24.334" level="FAIL">'FZFI_Operational_Cell_block_unblock' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170827 17:44:24.334" starttime="20170827 17:44:24.333"></status>
</kw>
<msg timestamp="20170827 17:44:24.334" level="INFO">${return1} = ('FAIL', u"'FZFI_Operational_Cell_block_unblock' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170827 17:44:24.334" starttime="20170827 17:44:24.332"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:24.338" starttime="20170827 17:44:24.335"></status>
</kw>
<msg timestamp="20170827 17:44:24.338" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170827 17:44:24.338" starttime="20170827 17:44:24.334"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:24.343" starttime="20170827 17:44:24.339"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:24.343" starttime="20170827 17:44:24.339"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:24.344" starttime="20170827 17:44:24.343"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:24.344" starttime="20170827 17:44:24.344"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:24.345" starttime="20170827 17:44:24.345"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170827 17:44:24.346" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170827 17:44:24.346" starttime="20170827 17:44:24.346"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:24.352" starttime="20170827 17:44:24.348"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:24.352" starttime="20170827 17:44:24.347"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:24.352" starttime="20170827 17:44:24.347"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:24.356" starttime="20170827 17:44:24.353"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:24.357" starttime="20170827 17:44:24.352"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:24.357" starttime="20170827 17:44:24.352"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:24.362" starttime="20170827 17:44:24.358"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:24.362" starttime="20170827 17:44:24.358"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:24.362" starttime="20170827 17:44:24.357"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170827 17:44:45.509" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[ssh_common.py@203] -bash-4.4#</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Unknow Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056202B0&gt;</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Unknow Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056202B0&gt;</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[ssh_common.py@203] Last login: Thu Jan  1 00:08:38 UTC 2004 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052D95F8&gt;</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170827_066253.xml
-bash-4.4#</msg>
<msg timestamp="20170827 17:44:45.509" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x052D95F8&gt;</msg>
<msg timestamp="20170827 17:44:45.510" level="INFO">${version} = TL18_ENB_9999_170827_066253</msg>
<status status="PASS" endtime="20170827 17:44:45.510" starttime="20170827 17:44:24.363"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:45.516" starttime="20170827 17:44:45.512"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:45.516" starttime="20170827 17:44:45.511"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:45.516" starttime="20170827 17:44:45.511"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:45.521" starttime="20170827 17:44:45.518"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:45.521" starttime="20170827 17:44:45.517"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:45.521" starttime="20170827 17:44:45.516"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:45.521" starttime="20170827 17:44:24.345"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:45.522" starttime="20170827 17:44:08.515"></status>
</kw>
<tags>
<tag>owner-jiaqi.jin@nokia.com</tag>
<tag>QC_464834</tag>
</tags>
<status status="FAIL" endtime="20170827 17:44:45.522" critical="yes" starttime="20170827 17:34:30.100">start infomodel failed for Expected connection status: RegisteredToInfoModel not achieved. Status reached: Started</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170827 17:44:45.541" starttime="20170827 17:32:00.853"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-jiaqi.jin@nokia.com</stat>
<stat fail="1" pass="0">QC_464834</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZFI Operational Cell block unblock" pass="0">FZFI Operational Cell block unblock</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170827 17:32:01.483" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170827 17:44:23.499" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
