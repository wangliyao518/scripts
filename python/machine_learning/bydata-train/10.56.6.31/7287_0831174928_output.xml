<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170831 17:49:28.587" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\Trunk_CRT\SISO1\CIT\CPRI_Single_FZFI\FZFI_Operational_RF_block_unblock\FZFI_Operational_RF_block_unblock.html" id="s1" name="FZFI Operational RF block unblock">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA_logs\TestLog_20170831172307//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170831 17:43:31.185" level="INFO">${timestamp} = 20170831174331</msg>
<status status="PASS" endtime="20170831 17:43:31.185" starttime="20170831 17:43:31.147"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170831 17:43:31.186" level="INFO">${FILE_NAME} = FZFI Operational RF block unblock</msg>
<status status="PASS" endtime="20170831 17:43:31.186" starttime="20170831 17:43:31.186"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170831 17:43:31.187" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI Operational RF block unblock_20170831174331</msg>
<status status="PASS" endtime="20170831 17:43:31.187" starttime="20170831 17:43:31.187"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170831 17:43:31.188" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331</msg>
<status status="PASS" endtime="20170831 17:43:31.188" starttime="20170831 17:43:31.187"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170831 17:43:31.189" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331</msg>
<status status="PASS" endtime="20170831 17:43:31.189" starttime="20170831 17:43:31.188"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170831 17:43:31.189" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331"&gt;D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170831 17:43:31.190" starttime="20170831 17:43:31.189"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170831 17:43:31.190" level="INFO">save log dir:D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331</msg>
<status status="PASS" endtime="20170831 17:43:31.190" starttime="20170831 17:43:31.190"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170831 17:43:31.194" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170831 17:43:31.194" starttime="20170831 17:43:31.191"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170831 17:43:31.213" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170831 17:43:31.214" starttime="20170831 17:43:31.207"></status>
</kw>
<msg timestamp="20170831 17:43:31.214" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170831 17:43:31.214" starttime="20170831 17:43:31.207"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:43:31.215" starttime="20170831 17:43:31.215"></status>
</kw>
<msg timestamp="20170831 17:43:31.215" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170831 17:43:31.215" starttime="20170831 17:43:31.214"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:43:31.222" starttime="20170831 17:43:31.219"></status>
</kw>
<msg timestamp="20170831 17:43:31.223" level="INFO">${log dir} = D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331</msg>
<status status="PASS" endtime="20170831 17:43:31.223" starttime="20170831 17:43:31.216"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170831 17:43:31.226" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331</msg>
<status status="PASS" endtime="20170831 17:43:31.226" starttime="20170831 17:43:31.223"></status>
</kw>
<status status="PASS" endtime="20170831 17:43:31.226" starttime="20170831 17:43:31.206"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170831 17:43:35.023" level="INFO">${status} = False</msg>
<status status="PASS" endtime="20170831 17:43:35.023" starttime="20170831 17:43:31.228"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<kw name="Wait Until Units Startup" library="tdd_ev_robotws">
<doc>This keyword tests the reachability of given unit/units.</doc>
<arguments>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<msg timestamp="20170831 17:43:45.052" level="INFO">[ping_control.py@155] ping 192.168.255.129 OK!</msg>
<status status="PASS" endtime="20170831 17:43:45.052" starttime="20170831 17:43:35.024"></status>
</kw>
<status status="PASS" endtime="20170831 17:43:45.052" starttime="20170831 17:43:35.023"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<kw name="Btscli Disable Bts Port Security" library="tdd_ev_robotws">
<doc>Disable Ethernet port security.</doc>
<msg timestamp="20170831 17:43:45.493" level="INFO">Starting process:
D:\TA\trunk_soam\tdd_ev_others\btscli\resource\jre_windows\bin\java -Djava.awt.headless=true -classpath .;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\btsemappl.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\coreasset.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\ganymed-ssh2-build262.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\jansi-1.11.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\javabuilder.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\json-20140107.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\laf.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\log4j.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\poseidon.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\rfview.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\rpmaster.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\xz.jar com.nokia.em.bts.coreasset.application.CoreAssetToolApplication -op changesecurity -ne "192.168.255.129" -outdir "D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331" -pw "Nemuadmin:nemuuser" -timeout "300" -disable</msg>
<msg timestamp="20170831 17:43:45.500" level="INFO">Waiting for process to complete.</msg>
<msg timestamp="20170831 17:43:54.502" level="INFO">Process completed.</msg>
<msg timestamp="20170831 17:43:54.509" level="INFO">[runner.py@40] execute cmd: D:\TA\trunk_soam\tdd_ev_others\btscli\resource\jre_windows\bin\java -Djava.awt.headless=true -classpath .;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\btsemappl.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\coreasset.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\ganymed-ssh2-build262.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\jansi-1.11.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\javabuilder.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\json-20140107.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\laf.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\log4j.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\poseidon.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\rfview.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\rpmaster.jar;D:\TA\trunk_soam\tdd_ev_robotws\TdlteLib\enb_lib\btscli\resource\jars\xz.jar com.nokia.em.bts.coreasset.application.CoreAssetToolApplication -op changesecurity -ne "192.168.255.129" -outdir "D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331" -pw "Nemuadmin:nemuuser" -timeout "300" -disable</msg>
<msg timestamp="20170831 17:43:54.509" level="INFO">[runner.py@44] Start to kill Site Manager process...</msg>
<msg timestamp="20170831 17:43:54.509" level="INFO">[runner.py@60] response: 31/08 17:43:47  INFO Ethernet Security Tool version 3.0
31/08 17:43:47  INFO Connecting to 192.168.255.129...
31/08 17:43:50  INFO Create write connection to 192.168.255.129
31/08 17:43:50  INFO Connected to 192.168.255.129
31/08 17:43:52  INFO Successfully changed ethernet security status to 192.168.255.129
31/08 17:43:52  INFO Disconnected from 192.168.255.129
31/08 17:43:54  INFO Ethernet Security Tool finished
31/08 17:43:54  INFO Operations finished successfully
Picked up JAVA_TOOL_OPTIONS: -agentlib:jvmhook
Picked up _JAVA_OPTIONS: -Xrunjvmhook -Xbootclasspath/a:"C:\Program Files (x86)\HP\Unified Functional Testing\bin\java_shared\classes";"C:\Program Files (x86)\HP\Unified Functional Testing\bin\java_shared\classes\jasmine.jar"
Picked up JAVA_TOOL_OPTIONS: -agentlib:jvmhook</msg>
<status status="PASS" endtime="20170831 17:43:54.509" starttime="20170831 17:43:45.053"></status>
</kw>
<status status="PASS" endtime="20170831 17:43:54.509" starttime="20170831 17:43:45.052"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<kw name="Wait Until Units Startup" library="tdd_ev_robotws">
<doc>This keyword tests the reachability of given unit/units.</doc>
<arguments>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<msg timestamp="20170831 17:44:18.558" level="INFO">[ping_control.py@155] ping 192.168.255.1 OK!</msg>
<status status="PASS" endtime="20170831 17:44:18.558" starttime="20170831 17:43:54.510"></status>
</kw>
<status status="PASS" endtime="20170831 17:44:18.558" starttime="20170831 17:43:54.510"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170831 17:44:18.559" starttime="20170831 17:44:18.559"></status>
</kw>
<status status="PASS" endtime="20170831 17:44:18.559" starttime="20170831 17:43:31.227"></status>
</kw>
<status status="PASS" endtime="20170831 17:44:18.559" starttime="20170831 17:43:31.227"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170831 17:45:03.654" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170831 17:45:03.697" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170831 17:45:14.813" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170831 17:45:14.863" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170831 17:45:15.378" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170831 17:45:15.423" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1504172666&amp;token=896fa313463c6540e9805bf9bc2ce5e9040558ab5a3168d36c98740b205cde9a&amp;frame=sshservice'</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1504172671&amp;token=c9e161dfc663cedfab9b06f1dbe25ab5e3c37449eae2e32edf0ebaef478efd24&amp;frame=RndPortsService'</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ssh_common.py@203] -bash-4.4#</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Unknow Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0552E800&gt;</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Unknow Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0552E800&gt;</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ssh_common.py@203] Last login: Thu Aug 31 09:44:36 UTC 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0552E8C8&gt;</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170831_066468.xml
-bash-4.4#</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0552E8C8&gt;</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[enb_resource.py@1086] 
 ****Current BTS version is 'TL18_ENB_9999_170831_066468' *****</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[enb_resource.py@1113] activeBuildVersion=TL18_ENB_9999_170831_066468</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170831 17:45:39.034" level="INFO">[ssh_common.py@203] Last login: Thu Aug 31 09:44:47 UTC 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05531120&gt;</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
-bash-4.4#</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05531120&gt;</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\SiteConf.xml' is ok. local file size is 195k</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[ssh_common.py@203] Last login: Thu Aug 31 09:45:08 UTC 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05526BE8&gt;</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05526BE8&gt;</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[enb_resource.py@375] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\FileDirectory_20170831174503.xml' is ok. local file size is 38k</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_132.xml</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/config/SCFC_132.xml' to 'D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\SCFC_132.xml' is ok. local file size is 115k</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[enb_resource.py@1086] 
 ****Current bbu type is 'FSIH' *****</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[enb_resource.py@1208] HW_BBU_TYPE=FSIH</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[enb_resource.py@1086] 
 ****Current rru type is 'FZFI-f:FZFI-d' *****</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[enb_resource.py@1211] HW_RRU_TYPE=FZFI-f:FZFI-d</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[enb_resource.py@1086] 
 ****Current HW type is 'null' *****</msg>
<msg timestamp="20170831 17:45:39.035" level="INFO">[enb_resource.py@1214] BTS_HW_TYPE=null</msg>
<status status="PASS" endtime="20170831 17:45:39.037" starttime="20170831 17:44:18.560"></status>
</kw>
<status status="PASS" endtime="20170831 17:45:39.037" starttime="20170831 17:44:18.559"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170831 17:45:39.038" starttime="20170831 17:45:39.038"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170831 17:45:39.039" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170831 17:45:39.039" starttime="20170831 17:45:39.039"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170831 17:45:39.043" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170831 17:45:39.043" starttime="20170831 17:45:39.040"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170831 17:45:39.046" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170831 17:45:39.046" starttime="20170831 17:45:39.043"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170831 17:45:39.050" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170831 17:45:39.050" starttime="20170831 17:45:39.047"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170831 17:45:40.458" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170831 17:45:40.458" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170831 17:45:40.458" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170831 17:45:40.458" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170831 17:45:40.459" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170831 17:45:40.459" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055A14B8&gt;</msg>
<status status="PASS" endtime="20170831 17:45:40.459" starttime="20170831 17:45:39.050"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170831 17:45:40.460" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055A14B8&gt;</msg>
<status status="PASS" endtime="20170831 17:45:40.460" starttime="20170831 17:45:40.459"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170831 17:45:41.655" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055A14B8&gt;</msg>
<msg timestamp="20170831 17:45:41.656" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170831 17:45:41.656" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170831 17:45:41.656" starttime="20170831 17:45:40.466"></status>
</kw>
<status status="PASS" endtime="20170831 17:45:41.656" starttime="20170831 17:45:40.461"></status>
</kw>
<status status="PASS" endtime="20170831 17:45:41.656" starttime="20170831 17:45:39.038"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170831 17:45:41.660" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055A14B8&gt;.</msg>
<status status="PASS" endtime="20170831 17:45:41.660" starttime="20170831 17:45:41.657"></status>
</kw>
<status status="PASS" endtime="20170831 17:45:41.660" starttime="20170831 17:43:31.146"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:25.443" starttime="20170831 17:49:25.440"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170831 17:49:25.452" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170831 17:49:25.452" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055A14B8&gt;</msg>
<status status="PASS" endtime="20170831 17:49:25.452" starttime="20170831 17:49:25.443"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:25.453" starttime="20170831 17:49:25.453"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:25.453" starttime="20170831 17:49:25.453"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:25.455" starttime="20170831 17:49:25.454"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:25.455" starttime="20170831 17:49:25.454"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:25.455" starttime="20170831 17:49:25.440"></status>
</kw>
<test id="s1-t1" name="FZFI_Operational_RF_block_unblock">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA_logs\TestLog_20170831172307//ev_logs//D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170831 17:45:41.665" level="INFO">${timestamp} = 20170831174541</msg>
<status status="PASS" endtime="20170831 17:45:41.665" starttime="20170831 17:45:41.665"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170831 17:45:41.666" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170831 17:45:41.666" starttime="20170831 17:45:41.665"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170831 17:45:41.667" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170831 17:45:41.667" starttime="20170831 17:45:41.666"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170831 17:45:41.667" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170831 17:45:41.667" starttime="20170831 17:45:41.667"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170831 17:45:41.668" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\FZFI_Operational_RF_block_unblock"&gt;D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\FZFI_Operational_RF_block_unblock&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170831 17:45:41.668" starttime="20170831 17:45:41.668"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170831 17:45:41.669" level="INFO">save log dir:D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170831 17:45:41.669" starttime="20170831 17:45:41.669"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170831 17:45:41.670" starttime="20170831 17:45:41.669"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:45:41.672" starttime="20170831 17:45:41.671"></status>
</kw>
<msg timestamp="20170831 17:45:41.672" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170831 17:45:41.672" starttime="20170831 17:45:41.671"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:45:41.673" starttime="20170831 17:45:41.673"></status>
</kw>
<msg timestamp="20170831 17:45:41.673" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170831 17:45:41.673" starttime="20170831 17:45:41.672"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170831 17:45:41.677" level="INFO">${log dir} = D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170831 17:45:41.677" starttime="20170831 17:45:41.673"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170831 17:45:41.677" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\TestLog_20170831172307\ev_logs\FZFI_Operational_RF_block_unblock_20170831174331\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170831 17:45:41.677" starttime="20170831 17:45:41.677"></status>
</kw>
<status status="PASS" endtime="20170831 17:45:41.678" starttime="20170831 17:45:41.670"></status>
</kw>
<status status="PASS" endtime="20170831 17:45:41.678" starttime="20170831 17:45:41.664"></status>
</kw>
<kw name="Reset_BTS_If_Ini_Earfcn_Unmatch" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${ini_earfcn_check}</arg>
</arguments>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170831 17:48:48.693" level="INFO">[infomodel_control.py@157] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170831 17:48:48.694" level="FAIL">InfoModelConnectionException: Expected connection status: RegisteredToInfoModel not achieved. Status reached: SocketCreation</msg>
<status status="FAIL" endtime="20170831 17:48:48.694" starttime="20170831 17:45:41.679"></status>
</kw>
<status status="FAIL" endtime="20170831 17:48:48.694" starttime="20170831 17:45:41.678"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170831 17:48:48.699" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055A14B8&gt;.</msg>
<status status="PASS" endtime="20170831 17:48:48.699" starttime="20170831 17:48:48.695"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170831 17:48:49.106" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170831 17:48:49.106" starttime="20170831 17:48:48.699"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20170831 17:48:49.110" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<status status="PASS" endtime="20170831 17:48:49.110" starttime="20170831 17:48:49.107"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170831 17:48:49.117" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20170831 17:48:49.117" starttime="20170831 17:48:49.111"></status>
</kw>
<msg timestamp="20170831 17:48:49.117" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20170831 17:48:49.118" starttime="20170831 17:48:49.110"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:49.121" starttime="20170831 17:48:49.118"></status>
</kw>
<status status="PASS" endtime="20170831 17:48:49.121" starttime="20170831 17:48:49.118"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:49.125" starttime="20170831 17:48:49.122"></status>
</kw>
<status status="PASS" endtime="20170831 17:48:49.125" starttime="20170831 17:48:49.122"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:49.127" starttime="20170831 17:48:49.126"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:49.127" starttime="20170831 17:48:49.127"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170831 17:48:49.134" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170831 17:48:49.134" starttime="20170831 17:48:49.128"></status>
</kw>
<msg timestamp="20170831 17:48:49.134" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170831 17:48:49.134" starttime="20170831 17:48:49.127"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:49.138" starttime="20170831 17:48:49.134"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:49.141" starttime="20170831 17:48:49.138"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170831 17:48:49.142" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170831 17:48:49.142" starttime="20170831 17:48:49.141"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:49.144" starttime="20170831 17:48:49.144"></status>
</kw>
<msg timestamp="20170831 17:48:49.144" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170831 17:48:49.144" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170831 17:48:49.144" starttime="20170831 17:48:49.143"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:49.149" starttime="20170831 17:48:49.145"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170831 17:48:53.177" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20170831 17:48:53.177" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20170831 17:48:53.177" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20170831 17:48:53.177" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20170831 17:48:53.177" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20170831 17:48:53.178" starttime="20170831 17:48:49.149"></status>
</kw>
<status status="PASS" endtime="20170831 17:48:53.178" starttime="20170831 17:48:49.143"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:53.179" starttime="20170831 17:48:53.179"></status>
</kw>
<msg timestamp="20170831 17:48:53.179" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170831 17:48:53.180" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170831 17:48:53.180" starttime="20170831 17:48:53.178"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:53.183" starttime="20170831 17:48:53.180"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170831 17:48:57.210" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20170831 17:48:57.210" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20170831 17:48:57.210" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20170831 17:48:57.210" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20170831 17:48:57.210" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20170831 17:48:57.211" starttime="20170831 17:48:53.183"></status>
</kw>
<status status="PASS" endtime="20170831 17:48:57.211" starttime="20170831 17:48:53.178"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170831 17:48:57.219" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170831 17:48:57.219" starttime="20170831 17:48:57.212"></status>
</kw>
<msg timestamp="20170831 17:48:57.219" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170831 17:48:57.219" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170831 17:48:57.220" starttime="20170831 17:48:57.211"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170831 17:48:57.223" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170831 17:48:57.223" starttime="20170831 17:48:57.220"></status>
</kw>
<status status="PASS" endtime="20170831 17:48:57.223" starttime="20170831 17:48:57.211"></status>
</kw>
<status status="PASS" endtime="20170831 17:48:57.223" starttime="20170831 17:48:49.143"></status>
</kw>
<status status="PASS" endtime="20170831 17:48:57.224" starttime="20170831 17:48:49.142"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:57.224" starttime="20170831 17:48:57.224"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170831 17:48:57.228" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170831 17:48:57.228" starttime="20170831 17:48:57.224"></status>
</kw>
<status status="FAIL" endtime="20170831 17:48:57.228" starttime="20170831 17:48:49.126"></status>
</kw>
<status status="PASS" endtime="20170831 17:48:57.228" starttime="20170831 17:48:49.126"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170831 17:48:57.235" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170831 17:48:57.235" starttime="20170831 17:48:57.229"></status>
</kw>
<msg timestamp="20170831 17:48:57.236" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170831 17:48:57.236" starttime="20170831 17:48:57.228"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:48:57.239" starttime="20170831 17:48:57.236"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170831 17:49:03.631" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170831 17:49:04.224" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170831 17:49:04.224" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170831 17:49:04.224" starttime="20170831 17:48:57.240"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:04.225" starttime="20170831 17:49:04.224"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170831 17:49:04.227" level="FAIL">'FZFI_Operational_RF_block_unblock' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170831 17:49:04.227" starttime="20170831 17:49:04.226"></status>
</kw>
<msg timestamp="20170831 17:49:04.227" level="INFO">${return1} = ('FAIL', u"'FZFI_Operational_RF_block_unblock' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170831 17:49:04.227" starttime="20170831 17:49:04.226"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:04.231" starttime="20170831 17:49:04.228"></status>
</kw>
<msg timestamp="20170831 17:49:04.231" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170831 17:49:04.231" starttime="20170831 17:49:04.227"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:04.235" starttime="20170831 17:49:04.232"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:04.235" starttime="20170831 17:49:04.231"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:04.235" starttime="20170831 17:49:04.235"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:04.236" starttime="20170831 17:49:04.236"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:04.236" starttime="20170831 17:49:04.236"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170831 17:49:04.237" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170831 17:49:04.238" starttime="20170831 17:49:04.237"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:04.242" starttime="20170831 17:49:04.239"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:04.242" starttime="20170831 17:49:04.238"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:04.242" starttime="20170831 17:49:04.238"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:04.246" starttime="20170831 17:49:04.243"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:04.246" starttime="20170831 17:49:04.243"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:04.247" starttime="20170831 17:49:04.242"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:04.251" starttime="20170831 17:49:04.248"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:04.251" starttime="20170831 17:49:04.247"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:04.251" starttime="20170831 17:49:04.247"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170831 17:49:25.428" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[ssh_common.py@203] Last login: Thu Aug 31 09:45:19 UTC 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055A1C10&gt;</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055A1C10&gt;</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[ssh_common.py@203] Last login: Thu Aug 31 09:49:09 UTC 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056E1BC0&gt;</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170831_066468.xml
-bash-4.4#</msg>
<msg timestamp="20170831 17:49:25.428" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056E1BC0&gt;</msg>
<msg timestamp="20170831 17:49:25.429" level="INFO">${version} = TL18_ENB_9999_170831_066468</msg>
<status status="PASS" endtime="20170831 17:49:25.429" starttime="20170831 17:49:04.251"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:25.434" starttime="20170831 17:49:25.430"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:25.434" starttime="20170831 17:49:25.430"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:25.434" starttime="20170831 17:49:25.429"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170831 17:49:25.438" starttime="20170831 17:49:25.435"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:25.438" starttime="20170831 17:49:25.434"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:25.438" starttime="20170831 17:49:25.434"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:25.439" starttime="20170831 17:49:04.237"></status>
</kw>
<status status="PASS" endtime="20170831 17:49:25.439" starttime="20170831 17:48:48.695"></status>
</kw>
<tags>
<tag>owner-jiaqi.jin@nokia.com</tag>
<tag>QC_464835</tag>
</tags>
<status status="FAIL" endtime="20170831 17:49:25.439" critical="yes" starttime="20170831 17:45:41.660">InfoModelConnectionException: Expected connection status: RegisteredToInfoModel not achieved. Status reached: SocketCreation</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170831 17:49:25.455" starttime="20170831 17:43:30.045"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-jiaqi.jin@nokia.com</stat>
<stat fail="1" pass="0">QC_464835</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZFI Operational RF block unblock" pass="0">FZFI Operational RF block unblock</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170831 17:43:30.456" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170831 17:49:03.631" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
