<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170827 17:49:50.922" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\Trunk_CRT\SISO1\CIT\CPRI_Single_FZFI\FZFI_Operational_RF_block_unblock\FZFI_Operational_RF_block_unblock.html" id="s1" name="FZFI Operational RF block unblock">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA_logs\TestLog_20170827171138//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170827 17:44:53.511" level="INFO">${timestamp} = 20170827174453</msg>
<status status="PASS" endtime="20170827 17:44:53.511" starttime="20170827 17:44:53.467"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170827 17:44:53.513" level="INFO">${FILE_NAME} = FZFI Operational RF block unblock</msg>
<status status="PASS" endtime="20170827 17:44:53.513" starttime="20170827 17:44:53.512"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170827 17:44:53.514" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI Operational RF block unblock_20170827174453</msg>
<status status="PASS" endtime="20170827 17:44:53.514" starttime="20170827 17:44:53.513"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170827 17:44:53.514" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453</msg>
<status status="PASS" endtime="20170827 17:44:53.514" starttime="20170827 17:44:53.514"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170827 17:44:53.515" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453</msg>
<status status="PASS" endtime="20170827 17:44:53.515" starttime="20170827 17:44:53.515"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170827 17:44:53.517" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453"&gt;D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170827 17:44:53.517" starttime="20170827 17:44:53.515"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170827 17:44:53.518" level="INFO">save log dir:D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453</msg>
<status status="PASS" endtime="20170827 17:44:53.518" starttime="20170827 17:44:53.518"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170827 17:44:53.524" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170827 17:44:53.524" starttime="20170827 17:44:53.519"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170827 17:44:53.548" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170827 17:44:53.548" starttime="20170827 17:44:53.538"></status>
</kw>
<msg timestamp="20170827 17:44:53.549" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170827 17:44:53.549" starttime="20170827 17:44:53.537"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:53.551" starttime="20170827 17:44:53.550"></status>
</kw>
<msg timestamp="20170827 17:44:53.551" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170827 17:44:53.551" starttime="20170827 17:44:53.549"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:53.558" starttime="20170827 17:44:53.554"></status>
</kw>
<msg timestamp="20170827 17:44:53.558" level="INFO">${log dir} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453</msg>
<status status="PASS" endtime="20170827 17:44:53.558" starttime="20170827 17:44:53.551"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170827 17:44:53.562" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453</msg>
<status status="PASS" endtime="20170827 17:44:53.562" starttime="20170827 17:44:53.558"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:53.562" starttime="20170827 17:44:53.537"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170827 17:44:53.587" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170827 17:44:53.587" starttime="20170827 17:44:53.563"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:53.588" starttime="20170827 17:44:53.587"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:53.588" starttime="20170827 17:44:53.588"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:53.589" starttime="20170827 17:44:53.589"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170827 17:44:53.589" starttime="20170827 17:44:53.589"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:53.590" starttime="20170827 17:44:53.563"></status>
</kw>
<status status="PASS" endtime="20170827 17:44:53.590" starttime="20170827 17:44:53.562"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1072915750&amp;token=4de5360e207c113f7007693e64642aa104c3fbc8ff88d6b8d6f49ca4c2261f9e&amp;frame=sshservice'</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1072915755&amp;token=a7574c80c67415c5e7e77603cbc98993219e7d270166d02fe101b2ac25642235&amp;frame=RndPortsService'</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ssh_common.py@203] Last login: Thu Jan  1 00:08:48 UTC 2004 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055357D8&gt;</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055357D8&gt;</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:46:00.965" level="INFO">[ssh_common.py@203] Last login: Thu Jan  1 00:09:19 UTC 2004 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055358A0&gt;</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170827_066253.xml
-bash-4.4#</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055358A0&gt;</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[enb_resource.py@1086] 
 ****Current BTS version is 'TL18_ENB_9999_170827_066253' *****</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[enb_resource.py@1113] activeBuildVersion=TL18_ENB_9999_170827_066253</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[ssh_common.py@203] Last login: Thu Jan  1 00:09:30 UTC 2004 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05536148&gt;</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
ls: /ram/SiteConf.xml: No such file or directory
-bash-4.4#</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05536148&gt;</msg>
<msg timestamp="20170827 17:46:00.966" level="INFO">[enb_resource.py@1086] 
 ****Not find /ram/SiteConf.xml *****</msg>
<status status="PASS" endtime="20170827 17:46:00.968" starttime="20170827 17:44:53.590"></status>
</kw>
<status status="PASS" endtime="20170827 17:46:00.968" starttime="20170827 17:44:53.590"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170827 17:46:00.969" starttime="20170827 17:46:00.968"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170827 17:46:00.970" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170827 17:46:00.970" starttime="20170827 17:46:00.969"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170827 17:46:00.974" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170827 17:46:00.974" starttime="20170827 17:46:00.970"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170827 17:46:00.978" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170827 17:46:00.978" starttime="20170827 17:46:00.975"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170827 17:46:00.982" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170827 17:46:00.982" starttime="20170827 17:46:00.978"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170827 17:46:02.396" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170827 17:46:02.396" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170827 17:46:02.396" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170827 17:46:02.396" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170827 17:46:02.396" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170827 17:46:02.396" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055ADFA8&gt;</msg>
<status status="PASS" endtime="20170827 17:46:02.396" starttime="20170827 17:46:00.982"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170827 17:46:02.397" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055ADFA8&gt;</msg>
<status status="PASS" endtime="20170827 17:46:02.397" starttime="20170827 17:46:02.397"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170827 17:46:03.594" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055ADFA8&gt;</msg>
<msg timestamp="20170827 17:46:03.594" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170827 17:46:03.594" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170827 17:46:03.595" starttime="20170827 17:46:02.401"></status>
</kw>
<status status="PASS" endtime="20170827 17:46:03.595" starttime="20170827 17:46:02.398"></status>
</kw>
<status status="PASS" endtime="20170827 17:46:03.595" starttime="20170827 17:46:00.969"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170827 17:46:03.599" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055ADFA8&gt;.</msg>
<status status="PASS" endtime="20170827 17:46:03.599" starttime="20170827 17:46:03.595"></status>
</kw>
<status status="PASS" endtime="20170827 17:46:03.599" starttime="20170827 17:44:53.467"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:47.347" starttime="20170827 17:49:47.344"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170827 17:49:47.355" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170827 17:49:47.355" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055ADFA8&gt;</msg>
<status status="PASS" endtime="20170827 17:49:47.355" starttime="20170827 17:49:47.347"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:47.356" starttime="20170827 17:49:47.356"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:47.357" starttime="20170827 17:49:47.355"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:47.358" starttime="20170827 17:49:47.357"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:47.358" starttime="20170827 17:49:47.357"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:47.358" starttime="20170827 17:49:47.343"></status>
</kw>
<test id="s1-t1" name="FZFI_Operational_RF_block_unblock">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA_logs\TestLog_20170827171138//ev_logs//D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170827 17:46:03.604" level="INFO">${timestamp} = 20170827174603</msg>
<status status="PASS" endtime="20170827 17:46:03.604" starttime="20170827 17:46:03.604"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170827 17:46:03.605" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170827 17:46:03.605" starttime="20170827 17:46:03.604"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170827 17:46:03.606" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170827 17:46:03.606" starttime="20170827 17:46:03.606"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170827 17:46:03.607" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170827 17:46:03.607" starttime="20170827 17:46:03.606"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170827 17:46:03.608" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453\FZFI_Operational_RF_block_unblock"&gt;D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453\FZFI_Operational_RF_block_unblock&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170827 17:46:03.608" starttime="20170827 17:46:03.607"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170827 17:46:03.609" level="INFO">save log dir:D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170827 17:46:03.609" starttime="20170827 17:46:03.608"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170827 17:46:03.609" starttime="20170827 17:46:03.609"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:46:03.611" starttime="20170827 17:46:03.611"></status>
</kw>
<msg timestamp="20170827 17:46:03.611" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170827 17:46:03.612" starttime="20170827 17:46:03.611"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:46:03.613" starttime="20170827 17:46:03.612"></status>
</kw>
<msg timestamp="20170827 17:46:03.613" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170827 17:46:03.613" starttime="20170827 17:46:03.612"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170827 17:46:03.616" level="INFO">${log dir} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170827 17:46:03.616" starttime="20170827 17:46:03.613"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170827 17:46:03.617" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\TestLog_20170827171138\ev_logs\FZFI_Operational_RF_block_unblock_20170827174453\FZFI_Operational_RF_block_unblock</msg>
<status status="PASS" endtime="20170827 17:46:03.617" starttime="20170827 17:46:03.616"></status>
</kw>
<status status="PASS" endtime="20170827 17:46:03.617" starttime="20170827 17:46:03.610"></status>
</kw>
<status status="PASS" endtime="20170827 17:46:03.617" starttime="20170827 17:46:03.603"></status>
</kw>
<kw name="Reset_BTS_If_Ini_Earfcn_Unmatch" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
<arg>${ini_earfcn_check}</arg>
</arguments>
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20170827 17:49:10.636" level="INFO">[infomodel_control.py@157] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170827 17:49:10.637" level="FAIL">InfoModelConnectionException: Expected connection status: RegisteredToInfoModel not achieved. Status reached: Started</msg>
<status status="FAIL" endtime="20170827 17:49:10.637" starttime="20170827 17:46:03.618"></status>
</kw>
<status status="FAIL" endtime="20170827 17:49:10.637" starttime="20170827 17:46:03.618"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170827 17:49:10.642" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055ADFA8&gt;.</msg>
<status status="PASS" endtime="20170827 17:49:10.642" starttime="20170827 17:49:10.638"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170827 17:49:11.055" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170827 17:49:11.055" starttime="20170827 17:49:10.642"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20170827 17:49:11.059" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<status status="PASS" endtime="20170827 17:49:11.060" starttime="20170827 17:49:11.055"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170827 17:49:11.067" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20170827 17:49:11.067" starttime="20170827 17:49:11.061"></status>
</kw>
<msg timestamp="20170827 17:49:11.067" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20170827 17:49:11.067" starttime="20170827 17:49:11.060"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:11.071" starttime="20170827 17:49:11.068"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:11.071" starttime="20170827 17:49:11.067"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:11.075" starttime="20170827 17:49:11.072"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:11.075" starttime="20170827 17:49:11.071"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:11.077" starttime="20170827 17:49:11.076"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:11.077" starttime="20170827 17:49:11.077"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170827 17:49:11.085" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170827 17:49:11.085" starttime="20170827 17:49:11.078"></status>
</kw>
<msg timestamp="20170827 17:49:11.085" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170827 17:49:11.085" starttime="20170827 17:49:11.077"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:11.089" starttime="20170827 17:49:11.086"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:11.093" starttime="20170827 17:49:11.089"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170827 17:49:11.094" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170827 17:49:11.094" starttime="20170827 17:49:11.093"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:11.096" starttime="20170827 17:49:11.095"></status>
</kw>
<msg timestamp="20170827 17:49:11.096" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170827 17:49:11.096" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170827 17:49:11.096" starttime="20170827 17:49:11.095"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:11.099" starttime="20170827 17:49:11.096"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170827 17:49:15.129" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20170827 17:49:15.129" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20170827 17:49:15.129" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20170827 17:49:15.129" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20170827 17:49:15.129" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20170827 17:49:15.130" starttime="20170827 17:49:11.100"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:15.130" starttime="20170827 17:49:11.095"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:15.132" starttime="20170827 17:49:15.132"></status>
</kw>
<msg timestamp="20170827 17:49:15.133" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170827 17:49:15.133" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170827 17:49:15.133" starttime="20170827 17:49:15.131"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:15.137" starttime="20170827 17:49:15.133"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170827 17:49:19.167" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20170827 17:49:19.167" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20170827 17:49:19.167" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20170827 17:49:19.167" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20170827 17:49:19.167" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20170827 17:49:19.167" starttime="20170827 17:49:15.137"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:19.167" starttime="20170827 17:49:15.130"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170827 17:49:19.177" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170827 17:49:19.177" starttime="20170827 17:49:19.168"></status>
</kw>
<msg timestamp="20170827 17:49:19.177" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170827 17:49:19.177" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170827 17:49:19.177" starttime="20170827 17:49:19.168"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170827 17:49:19.181" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170827 17:49:19.181" starttime="20170827 17:49:19.178"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:19.181" starttime="20170827 17:49:19.167"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:19.181" starttime="20170827 17:49:11.094"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:19.181" starttime="20170827 17:49:11.094"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:19.182" starttime="20170827 17:49:19.182"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170827 17:49:19.186" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170827 17:49:19.186" starttime="20170827 17:49:19.182"></status>
</kw>
<status status="FAIL" endtime="20170827 17:49:19.186" starttime="20170827 17:49:11.076"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:19.186" starttime="20170827 17:49:11.075"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170827 17:49:19.193" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170827 17:49:19.193" starttime="20170827 17:49:19.187"></status>
</kw>
<msg timestamp="20170827 17:49:19.193" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170827 17:49:19.193" starttime="20170827 17:49:19.186"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:19.197" starttime="20170827 17:49:19.194"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170827 17:49:25.589" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170827 17:49:26.150" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170827 17:49:26.150" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170827 17:49:26.151" starttime="20170827 17:49:19.197"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:26.152" starttime="20170827 17:49:26.151"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170827 17:49:26.153" level="FAIL">'FZFI_Operational_RF_block_unblock' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170827 17:49:26.153" starttime="20170827 17:49:26.152"></status>
</kw>
<msg timestamp="20170827 17:49:26.153" level="INFO">${return1} = ('FAIL', u"'FZFI_Operational_RF_block_unblock' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170827 17:49:26.153" starttime="20170827 17:49:26.152"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:26.157" starttime="20170827 17:49:26.154"></status>
</kw>
<msg timestamp="20170827 17:49:26.157" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170827 17:49:26.158" starttime="20170827 17:49:26.154"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:26.162" starttime="20170827 17:49:26.158"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:26.162" starttime="20170827 17:49:26.158"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:26.162" starttime="20170827 17:49:26.162"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:26.163" starttime="20170827 17:49:26.162"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:26.163" starttime="20170827 17:49:26.163"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170827 17:49:26.164" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170827 17:49:26.164" starttime="20170827 17:49:26.164"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:26.169" starttime="20170827 17:49:26.166"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:26.169" starttime="20170827 17:49:26.165"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:26.169" starttime="20170827 17:49:26.165"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:26.173" starttime="20170827 17:49:26.170"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:26.173" starttime="20170827 17:49:26.170"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:26.173" starttime="20170827 17:49:26.169"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:26.178" starttime="20170827 17:49:26.175"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:26.178" starttime="20170827 17:49:26.174"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:26.178" starttime="20170827 17:49:26.174"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170827 17:49:47.332" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[ssh_common.py@203] Last login: Thu Jan  1 00:09:40 UTC 2004 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055AF710&gt;</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055AF710&gt;</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[ssh_common.py@203] Last login: Thu Jan  1 00:13:40 UTC 2004 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05536328&gt;</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170827_066253.xml
-bash-4.4#</msg>
<msg timestamp="20170827 17:49:47.332" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05536328&gt;</msg>
<msg timestamp="20170827 17:49:47.333" level="INFO">${version} = TL18_ENB_9999_170827_066253</msg>
<status status="PASS" endtime="20170827 17:49:47.333" starttime="20170827 17:49:26.178"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:47.338" starttime="20170827 17:49:47.334"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:47.338" starttime="20170827 17:49:47.334"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:47.338" starttime="20170827 17:49:47.333"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170827 17:49:47.342" starttime="20170827 17:49:47.339"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:47.342" starttime="20170827 17:49:47.338"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:47.342" starttime="20170827 17:49:47.338"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:47.342" starttime="20170827 17:49:26.163"></status>
</kw>
<status status="PASS" endtime="20170827 17:49:47.342" starttime="20170827 17:49:10.637"></status>
</kw>
<tags>
<tag>owner-jiaqi.jin@nokia.com</tag>
<tag>QC_464835</tag>
</tags>
<status status="FAIL" endtime="20170827 17:49:47.343" critical="yes" starttime="20170827 17:46:03.599">InfoModelConnectionException: Expected connection status: RegisteredToInfoModel not achieved. Status reached: Started</status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170827 17:49:47.358" starttime="20170827 17:44:52.309"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-jiaqi.jin@nokia.com</stat>
<stat fail="1" pass="0">QC_464835</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZFI Operational RF block unblock" pass="0">FZFI Operational RF block unblock</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170827 17:44:52.770" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170827 17:49:25.589" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
