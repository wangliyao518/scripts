<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170815 16:25:42.595" generator="Robot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\Trunk_CRT\SISO1\CRT\CPRI_Single_FZFI\FZFI_Addtional_SWDL_SW_upgrade\FZFI_Addtional_SWDL_SW_upgrade.html" id="s1" name="FZFI Addtional SWDL SW upgrade">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA_logs//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170815 16:25:45.754" level="INFO">${timestamp} = 20170815162545</msg>
<status status="PASS" endtime="20170815 16:25:45.754" starttime="20170815 16:25:45.713"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170815 16:25:45.755" level="INFO">${FILE_NAME} = FZFI Addtional SWDL SW upgrade</msg>
<status status="PASS" endtime="20170815 16:25:45.756" starttime="20170815 16:25:45.755"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170815 16:25:45.756" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI Addtional SWDL SW upgrade_20170815162545</msg>
<status status="PASS" endtime="20170815 16:25:45.756" starttime="20170815 16:25:45.756"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170815 16:25:45.757" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545</msg>
<status status="PASS" endtime="20170815 16:25:45.757" starttime="20170815 16:25:45.757"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170815 16:25:45.758" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545</msg>
<status status="PASS" endtime="20170815 16:25:45.758" starttime="20170815 16:25:45.757"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170815 16:25:45.767" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545"&gt;D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170815 16:25:45.767" starttime="20170815 16:25:45.758"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170815 16:25:45.768" level="INFO">save log dir:D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545</msg>
<status status="PASS" endtime="20170815 16:25:45.768" starttime="20170815 16:25:45.767"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170815 16:25:45.771" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170815 16:25:45.771" starttime="20170815 16:25:45.768"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170815 16:25:45.791" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170815 16:25:45.791" starttime="20170815 16:25:45.785"></status>
</kw>
<msg timestamp="20170815 16:25:45.791" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170815 16:25:45.791" starttime="20170815 16:25:45.784"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170815 16:25:45.792" starttime="20170815 16:25:45.792"></status>
</kw>
<msg timestamp="20170815 16:25:45.793" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170815 16:25:45.793" starttime="20170815 16:25:45.791"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170815 16:25:45.799" starttime="20170815 16:25:45.796"></status>
</kw>
<msg timestamp="20170815 16:25:45.799" level="INFO">${log dir} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545</msg>
<status status="PASS" endtime="20170815 16:25:45.799" starttime="20170815 16:25:45.793"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170815 16:25:45.803" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545</msg>
<status status="PASS" endtime="20170815 16:25:45.803" starttime="20170815 16:25:45.800"></status>
</kw>
<status status="PASS" endtime="20170815 16:25:45.803" starttime="20170815 16:25:45.784"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170815 16:25:45.837" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170815 16:25:45.837" starttime="20170815 16:25:45.804"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170815 16:25:45.838" starttime="20170815 16:25:45.837"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170815 16:25:45.838" starttime="20170815 16:25:45.838"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170815 16:25:45.839" starttime="20170815 16:25:45.838"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170815 16:25:45.839" starttime="20170815 16:25:45.839"></status>
</kw>
<status status="PASS" endtime="20170815 16:25:45.839" starttime="20170815 16:25:45.804"></status>
</kw>
<status status="PASS" endtime="20170815 16:25:45.839" starttime="20170815 16:25:45.804"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170815 16:26:30.983" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170815 16:26:31.022" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170815 16:26:42.189" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170815 16:26:42.224" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170815 16:26:42.730" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170815 16:26:42.771" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1502785586&amp;token=94f2129ede7ddf21e4c8867cf0f774b49d66168713a8b1467726c304371945be&amp;frame=sshservice'</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1502785591&amp;token=ba8d10649dd455c5a912ff89b82e10759558b0edfb93ff336a409988336656f6&amp;frame=RndPortsService'</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@203] Last login: Tue Aug 15 16:04:26 CST 2017 from 10.69.80.114 on ssh
-bash-4.4#</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x051E19E0&gt;</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x051E19E0&gt;</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@203] Last login: Tue Aug 15 16:26:36 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x051E1260&gt;</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170809_065605.xml
-bash-4.4#</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x051E1260&gt;</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[enb_resource.py@1086] 
 ****Current BTS version is 'TL18_ENB_9999_170809_065605' *****</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[enb_resource.py@1113] activeBuildVersion=TL18_ENB_9999_170809_065605</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@203] Last login: Tue Aug 15 16:26:46 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x051EABE8&gt;</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
-bash-4.4#</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x051EABE8&gt;</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\SiteConf.xml' is ok. local file size is 120k</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@203] Last login: Tue Aug 15 16:27:07 CST 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0529E9B8&gt;</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170815 16:27:06.498" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0529E9B8&gt;</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[enb_resource.py@375] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FileDirectory_20170815162631.xml' is ok. local file size is 37k</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_100.xml</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/config/SCFC_100.xml' to 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\SCFC_100.xml' is ok. local file size is 131k</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[enb_resource.py@1086] 
 ****Current bbu type is 'FSIH' *****</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[enb_resource.py@1208] HW_BBU_TYPE=FSIH</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[enb_resource.py@1086] 
 ****Current rru type is 'FR:FZFI-d' *****</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[enb_resource.py@1211] HW_RRU_TYPE=FR:FZFI-d</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[enb_resource.py@1086] 
 ****Current HW type is 'null' *****</msg>
<msg timestamp="20170815 16:27:06.499" level="INFO">[enb_resource.py@1214] BTS_HW_TYPE=null</msg>
<status status="PASS" endtime="20170815 16:27:06.501" starttime="20170815 16:25:45.840"></status>
</kw>
<status status="PASS" endtime="20170815 16:27:06.501" starttime="20170815 16:25:45.840"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170815 16:27:06.502" starttime="20170815 16:27:06.501"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170815 16:27:06.504" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170815 16:27:06.504" starttime="20170815 16:27:06.503"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170815 16:27:06.508" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170815 16:27:06.508" starttime="20170815 16:27:06.504"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170815 16:27:06.511" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170815 16:27:06.511" starttime="20170815 16:27:06.508"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170815 16:27:06.514" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170815 16:27:06.514" starttime="20170815 16:27:06.511"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170815 16:27:08.059" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 

login:</msg>
<msg timestamp="20170815 16:27:08.059" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170815 16:27:08.059" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester
password:</msg>
<msg timestamp="20170815 16:27:08.059" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170815 16:27:08.059" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170815 16:27:08.059" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0532DAD0&gt;</msg>
<status status="PASS" endtime="20170815 16:27:08.059" starttime="20170815 16:27:06.515"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170815 16:27:08.060" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0532DAD0&gt;</msg>
<status status="PASS" endtime="20170815 16:27:08.060" starttime="20170815 16:27:08.060"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170815 16:27:09.263" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0532DAD0&gt;</msg>
<msg timestamp="20170815 16:27:09.263" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170815 16:27:09.263" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170815 16:27:09.264" starttime="20170815 16:27:08.064"></status>
</kw>
<status status="PASS" endtime="20170815 16:27:09.264" starttime="20170815 16:27:08.061"></status>
</kw>
<status status="PASS" endtime="20170815 16:27:09.264" starttime="20170815 16:27:06.502"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170815 16:27:09.268" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0532DAD0&gt;.</msg>
<status status="PASS" endtime="20170815 16:27:09.268" starttime="20170815 16:27:09.264"></status>
</kw>
<status status="PASS" endtime="20170815 16:27:09.268" starttime="20170815 16:25:45.712"></status>
</kw>
<test id="s1-t1" name="FZFI_Addtional_SWDL_SW_upgrade">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA_logs//ev_logs//D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170815 16:27:09.273" level="INFO">${timestamp} = 20170815162709</msg>
<status status="PASS" endtime="20170815 16:27:09.273" starttime="20170815 16:27:09.273"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170815 16:27:09.274" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade</msg>
<status status="PASS" endtime="20170815 16:27:09.274" starttime="20170815 16:27:09.274"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170815 16:27:09.275" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade</msg>
<status status="PASS" endtime="20170815 16:27:09.275" starttime="20170815 16:27:09.275"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170815 16:27:09.276" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade</msg>
<status status="PASS" endtime="20170815 16:27:09.276" starttime="20170815 16:27:09.276"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170815 16:27:09.278" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade"&gt;D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170815 16:27:09.278" starttime="20170815 16:27:09.276"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170815 16:27:09.279" level="INFO">save log dir:D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade</msg>
<status status="PASS" endtime="20170815 16:27:09.279" starttime="20170815 16:27:09.279"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170815 16:27:09.280" starttime="20170815 16:27:09.280"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170815 16:27:09.283" starttime="20170815 16:27:09.283"></status>
</kw>
<msg timestamp="20170815 16:27:09.284" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170815 16:27:09.284" starttime="20170815 16:27:09.282"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170815 16:27:09.285" starttime="20170815 16:27:09.285"></status>
</kw>
<msg timestamp="20170815 16:27:09.285" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170815 16:27:09.285" starttime="20170815 16:27:09.284"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170815 16:27:09.291" level="INFO">${log dir} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade</msg>
<status status="PASS" endtime="20170815 16:27:09.291" starttime="20170815 16:27:09.286"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170815 16:27:09.292" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade</msg>
<status status="PASS" endtime="20170815 16:27:09.293" starttime="20170815 16:27:09.292"></status>
</kw>
<status status="PASS" endtime="20170815 16:27:09.293" starttime="20170815 16:27:09.281"></status>
</kw>
<status status="PASS" endtime="20170815 16:27:09.293" starttime="20170815 16:27:09.273"></status>
</kw>
<kw name="_Update_SW_to_BTS_Site">
<kw name="Kill Sitemanager Process" library="tdd_ev_robotws">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20170815 16:27:13.334" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0532DAD0&gt;</msg>
<msg timestamp="20170815 16:27:13.334" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170815 16:27:13.334" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\WIN7-631\ROOT\CIMV2:Win32_Process.Handle="4204"
Instance deletion successful.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170815 16:27:13.334" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0532DAD0&gt;</msg>
<msg timestamp="20170815 16:27:13.334" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170815 16:27:13.334" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\WIN7-631\ROOT\CIMV2:Win32_Process.Handle="5500"
Instance deletion successful.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170815 16:27:13.334" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0532DAD0&gt;</msg>
<msg timestamp="20170815 16:27:13.334" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20170815 16:27:13.334" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170815 16:27:13.335" starttime="20170815 16:27:09.294"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20170815 16:27:13.342" starttime="20170815 16:27:13.342"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20170815 16:27:13.346" starttime="20170815 16:27:13.342"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170815 16:27:13.347" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\TA_logs\\ev_logs\\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\\FZFI_Addtional_SWDL_SW_upgrade\\', u'CheckExist=1']</msg>
<status status="PASS" endtime="20170815 16:27:13.347" starttime="20170815 16:27:13.346"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20170815 16:27:13.348" starttime="20170815 16:27:13.347"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170815 16:28:17.110" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade\GUILog\qtp_log20170815162713\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20170815 16:28:17.110" starttime="20170815 16:27:13.348"></status>
</kw>
<status status="PASS" endtime="20170815 16:28:17.110" starttime="20170815 16:27:13.341"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30 sec</arg>
</arguments>
<msg timestamp="20170815 16:28:47.111" level="INFO">Slept 30 seconds</msg>
<status status="PASS" endtime="20170815 16:28:47.111" starttime="20170815 16:28:17.110"></status>
</kw>
<kw name="GUI SM MenuOperation" library="gui_resource">
<doc>This keyword is provid menu operation in BTS Site Manager</doc>
<arguments>
<arg>Software//Update SW to BTS Site...</arg>
<arg>UpdateSWToBTS</arg>
<arg>${bts_sw_dir}</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>MenuName=${MenuName}</arg>
<arg>OperationName=${OperationName}</arg>
<arg>JEditValue=${JEditValue}</arg>
<arg>JEditName=${JEditName}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20170815 16:28:47.120" level="INFO">${para_list} = [u'MenuName=Software//Update SW to BTS Site...', u'OperationName=UpdateSWToBTS', u'JEditValue=', u'JEditName=D:\\BTS_SW_trunk\\TL00_ENB_9999_170815_065870\\TL00_ENB_9999_170815_065870_release_BTSSM_do...</msg>
<status status="PASS" endtime="20170815 16:28:47.120" starttime="20170815 16:28:47.119"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}SiteMan_MenuOperation</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20170815 17:04:57.374" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\SiteMan_MenuOperation is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\SiteMan_MenuOperation ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
MenuName="Software//Update SW to BTS Site..."
OperationName="UpdateSWToBTS"
JEditValue=""
JEditName="D:\BTS_SW_trunk\TL00_ENB_9999_170815_065870\TL00_ENB_9999_170815_065870_release_BTSSM_downloadable.zip"
LogPath="D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade\"
&lt;QTP&gt; Save log to D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade\GUILog\qtp_log20170815162847\Report
&lt;QTP&gt; Start to run script...

Test Fail. SaveImage  to D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_20170815162545\FZFI_Addtional_SWDL_SW_upgrade\2017-08-15_17-04-56.png
UpdateSWToBTS failed CloseJDialog_SWUpdate failed Update SoftWare To BTS failed in 181 secs., UpgradeTime=1800
&lt;QTP&gt; run Failed.
Start to kill QTP process.
Finshed to kill QTP process.</msg>
<msg timestamp="20170815 17:04:57.378" level="FAIL">AttributeError: QuickTest.Application.Quit</msg>
<status status="FAIL" endtime="20170815 17:04:57.378" starttime="20170815 16:28:47.121"></status>
</kw>
<status status="FAIL" endtime="20170815 17:04:57.379" starttime="20170815 16:28:47.119"></status>
</kw>
<status status="FAIL" endtime="20170815 17:04:57.380" starttime="20170815 16:27:09.293"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170815 17:04:57.386" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0532DAD0&gt;.</msg>
<status status="PASS" endtime="20170815 17:04:57.387" starttime="20170815 17:04:57.381"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170815 17:04:57.823" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170815 17:04:57.824" starttime="20170815 17:04:57.387"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20170815 17:04:57.829" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<status status="PASS" endtime="20170815 17:04:57.830" starttime="20170815 17:04:57.824"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170815 17:04:57.837" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20170815 17:04:57.837" starttime="20170815 17:04:57.830"></status>
</kw>
<msg timestamp="20170815 17:04:57.837" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20170815 17:04:57.837" starttime="20170815 17:04:57.830"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:04:57.842" starttime="20170815 17:04:57.838"></status>
</kw>
<status status="PASS" endtime="20170815 17:04:57.842" starttime="20170815 17:04:57.838"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20170815 17:04:57.846" starttime="20170815 17:04:57.842"></status>
</kw>
<status status="PASS" endtime="20170815 17:04:57.846" starttime="20170815 17:04:57.842"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:04:57.847" starttime="20170815 17:04:57.847"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:04:57.848" starttime="20170815 17:04:57.847"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:04:57.850" starttime="20170815 17:04:57.850"></status>
</kw>
<msg timestamp="20170815 17:04:57.851" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170815 17:04:57.851" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170815 17:04:57.851" starttime="20170815 17:04:57.849"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170815 17:04:57.854" starttime="20170815 17:04:57.851"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170815 17:05:01.888" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20170815 17:05:01.888" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20170815 17:05:01.888" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20170815 17:05:01.888" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20170815 17:05:01.888" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20170815 17:05:01.889" starttime="20170815 17:04:57.854"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:01.889" starttime="20170815 17:04:57.848"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:01.890" starttime="20170815 17:05:01.890"></status>
</kw>
<msg timestamp="20170815 17:05:01.890" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170815 17:05:01.890" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170815 17:05:01.890" starttime="20170815 17:05:01.889"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:01.894" starttime="20170815 17:05:01.891"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170815 17:05:05.924" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20170815 17:05:05.924" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20170815 17:05:05.924" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20170815 17:05:05.924" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20170815 17:05:05.924" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20170815 17:05:05.924" starttime="20170815 17:05:01.895"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:05.924" starttime="20170815 17:05:01.889"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170815 17:05:05.933" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170815 17:05:05.933" starttime="20170815 17:05:05.925"></status>
</kw>
<msg timestamp="20170815 17:05:05.933" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170815 17:05:05.933" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170815 17:05:05.933" starttime="20170815 17:05:05.925"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170815 17:05:05.937" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170815 17:05:05.937" starttime="20170815 17:05:05.933"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:05.937" starttime="20170815 17:05:05.925"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:05.937" starttime="20170815 17:04:57.848"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:05.937" starttime="20170815 17:04:57.848"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170815 17:05:05.941" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170815 17:05:05.941" starttime="20170815 17:05:05.937"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:05.941" starttime="20170815 17:05:05.941"></status>
</kw>
<status status="FAIL" endtime="20170815 17:05:05.941" starttime="20170815 17:04:57.846"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:05.942" starttime="20170815 17:04:57.846"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170815 17:05:05.949" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170815 17:05:05.949" starttime="20170815 17:05:05.942"></status>
</kw>
<msg timestamp="20170815 17:05:05.949" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170815 17:05:05.949" starttime="20170815 17:05:05.942"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:05.953" starttime="20170815 17:05:05.950"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170815 17:05:14.542" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170815 17:05:15.174" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170815 17:05:15.174" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170815 17:05:15.174" starttime="20170815 17:05:05.954"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:15.176" starttime="20170815 17:05:15.175"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170815 17:05:15.177" level="FAIL">'FZFI_Addtional_SWDL_SW_upgrade' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170815 17:05:15.177" starttime="20170815 17:05:15.176"></status>
</kw>
<msg timestamp="20170815 17:05:15.178" level="INFO">${return1} = ('FAIL', u"'FZFI_Addtional_SWDL_SW_upgrade' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170815 17:05:15.178" starttime="20170815 17:05:15.176"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:15.182" starttime="20170815 17:05:15.179"></status>
</kw>
<msg timestamp="20170815 17:05:15.182" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170815 17:05:15.182" starttime="20170815 17:05:15.178"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:15.186" starttime="20170815 17:05:15.183"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:15.186" starttime="20170815 17:05:15.182"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:15.190" starttime="20170815 17:05:15.187"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:15.190" starttime="20170815 17:05:15.187"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:15.195" starttime="20170815 17:05:15.191"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:15.195" starttime="20170815 17:05:15.191"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:15.199" starttime="20170815 17:05:15.196"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:15.199" starttime="20170815 17:05:15.195"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170815 17:05:15.200" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170815 17:05:15.201" starttime="20170815 17:05:15.200"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:15.205" starttime="20170815 17:05:15.202"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:15.205" starttime="20170815 17:05:15.201"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:15.205" starttime="20170815 17:05:15.201"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:15.210" starttime="20170815 17:05:15.207"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:15.210" starttime="20170815 17:05:15.206"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:15.210" starttime="20170815 17:05:15.206"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:15.215" starttime="20170815 17:05:15.212"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:15.215" starttime="20170815 17:05:15.211"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:15.215" starttime="20170815 17:05:15.211"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170815 17:05:36.380" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170815 17:05:36.380" level="INFO">[ssh_common.py@203] Last login: Tue Aug 15 17:04:40 CST 2017 from 10.69.80.114 on ssh
-bash-4.4#</msg>
<msg timestamp="20170815 17:05:36.380" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05409C88&gt;</msg>
<msg timestamp="20170815 17:05:36.380" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170815 17:05:36.380" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
-bash-4.4#</msg>
<msg timestamp="20170815 17:05:36.380" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05409C88&gt;</msg>
<msg timestamp="20170815 17:05:36.380" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170815 17:05:36.380" level="INFO">[ssh_common.py@203] Last login: Tue Aug 15 17:05:52 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170815 17:05:36.380" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x051EA3A0&gt;</msg>
<msg timestamp="20170815 17:05:36.380" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170815 17:05:36.380" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170815_065870.xml
-bash-4.4#</msg>
<msg timestamp="20170815 17:05:36.381" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x051EA3A0&gt;</msg>
<msg timestamp="20170815 17:05:36.381" level="INFO">${version} = TL18_ENB_9999_170815_065870</msg>
<status status="PASS" endtime="20170815 17:05:36.381" starttime="20170815 17:05:15.215"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:36.386" starttime="20170815 17:05:36.383"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:36.386" starttime="20170815 17:05:36.382"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:36.387" starttime="20170815 17:05:36.382"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:36.391" starttime="20170815 17:05:36.388"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:36.391" starttime="20170815 17:05:36.387"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:36.391" starttime="20170815 17:05:36.387"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:36.391" starttime="20170815 17:05:15.199"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:36.392" starttime="20170815 17:04:57.380"></status>
</kw>
<tags>
<tag>owner-jiaqi.jin@nokia.com</tag>
<tag>QC_612238</tag>
</tags>
<status status="FAIL" endtime="20170815 17:05:36.392" critical="yes" starttime="20170815 16:27:09.268">AttributeError: QuickTest.Application.Quit</status>
</test>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:36.396" starttime="20170815 17:05:36.393"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170815 17:05:36.403" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170815 17:05:36.403" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0532DAD0&gt;</msg>
<status status="PASS" endtime="20170815 17:05:36.404" starttime="20170815 17:05:36.396"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:36.405" starttime="20170815 17:05:36.404"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:36.405" starttime="20170815 17:05:36.404"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170815 17:05:36.406" starttime="20170815 17:05:36.406"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:36.406" starttime="20170815 17:05:36.405"></status>
</kw>
<status status="PASS" endtime="20170815 17:05:36.406" starttime="20170815 17:05:36.392"></status>
</kw>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20170815 17:05:36.406" starttime="20170815 16:25:44.102"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-jiaqi.jin@nokia.com</stat>
<stat fail="1" pass="0">QC_612238</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZFI Addtional SWDL SW upgrade" pass="0">FZFI Addtional SWDL SW upgrade</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170815 16:25:44.801" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170815 17:05:14.542" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
