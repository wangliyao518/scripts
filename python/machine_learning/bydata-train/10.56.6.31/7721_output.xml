<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20170824 17:55:47.340" generator="Rebot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\Trunk_CRT\SISO1\CIT\CPRI_Single_FZFI\FZFI_BS_FV_TX_and_RX_antenna_Calibration\FZFI_BS_FV_TX_and_RX_antenna_Calibration.html" id="s1" name="FZFI BS FV TX and RX antenna Calibration">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA_logs\TestLog_20170824174638//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170824 17:46:41.664" level="INFO">${timestamp} = 20170824174641</msg>
<status status="PASS" endtime="20170824 17:46:41.664" starttime="20170824 17:46:41.619"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20170824 17:46:41.665" level="INFO">${FILE_NAME} = FZFI BS FV TX and RX antenna Calibration</msg>
<status status="PASS" endtime="20170824 17:46:41.665" starttime="20170824 17:46:41.664"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170824 17:46:41.666" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI BS FV TX and RX antenna Calibration_20170824174641</msg>
<status status="PASS" endtime="20170824 17:46:41.666" starttime="20170824 17:46:41.665"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20170824 17:46:41.667" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641</msg>
<status status="PASS" endtime="20170824 17:46:41.667" starttime="20170824 17:46:41.666"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170824 17:46:41.668" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641</msg>
<status status="PASS" endtime="20170824 17:46:41.668" starttime="20170824 17:46:41.667"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170824 17:46:41.669" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641"&gt;D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 17:46:41.669" starttime="20170824 17:46:41.668"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20170824 17:46:41.669" level="INFO">save log dir:D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641</msg>
<status status="PASS" endtime="20170824 17:46:41.669" starttime="20170824 17:46:41.669"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20170824 17:46:41.674" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20170824 17:46:41.674" starttime="20170824 17:46:41.670"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20170824 17:46:41.693" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20170824 17:46:41.694" starttime="20170824 17:46:41.687"></status>
</kw>
<msg timestamp="20170824 17:46:41.694" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20170824 17:46:41.694" starttime="20170824 17:46:41.687"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:46:41.695" starttime="20170824 17:46:41.694"></status>
</kw>
<msg timestamp="20170824 17:46:41.695" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170824 17:46:41.695" starttime="20170824 17:46:41.694"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:46:41.702" starttime="20170824 17:46:41.699"></status>
</kw>
<msg timestamp="20170824 17:46:41.702" level="INFO">${log dir} = D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641</msg>
<status status="PASS" endtime="20170824 17:46:41.702" starttime="20170824 17:46:41.695"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170824 17:46:41.706" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641</msg>
<status status="PASS" endtime="20170824 17:46:41.706" starttime="20170824 17:46:41.703"></status>
</kw>
<status status="PASS" endtime="20170824 17:46:41.706" starttime="20170824 17:46:41.686"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20170824 17:46:41.736" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20170824 17:46:41.736" starttime="20170824 17:46:41.708"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:46:41.737" starttime="20170824 17:46:41.736"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20170824 17:46:41.738" starttime="20170824 17:46:41.737"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:46:41.738" starttime="20170824 17:46:41.738"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20170824 17:46:41.739" starttime="20170824 17:46:41.738"></status>
</kw>
<status status="PASS" endtime="20170824 17:46:41.739" starttime="20170824 17:46:41.707"></status>
</kw>
<status status="PASS" endtime="20170824 17:46:41.739" starttime="20170824 17:46:41.707"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20170824 17:47:26.860" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170824 17:47:26.908" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170824 17:47:38.022" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170824 17:47:38.056" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170824 17:47:38.592" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20170824 17:47:38.634" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1503568011&amp;token=9f0f0bed025bdff98be88a341db9c4df21ada5f3dcbd180b9bb03f39ec8d5f0a&amp;frame=sshservice'</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1503568016&amp;token=49ef23f1f4a52bba2855e6a2e6ac7bc4f6fbee8a9c6f2edae7a71e47c37e5977&amp;frame=RndPortsService'</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ssh_common.py@203] Last login: Thu Aug 24 17:46:04 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05458F30&gt;</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
-bash-4.4#</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05458F30&gt;</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ssh_common.py@203] Last login: Thu Aug 24 17:47:01 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05458F80&gt;</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170824_066183.xml
-bash-4.4#</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05458F80&gt;</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[enb_resource.py@1086] 
 ****Current BTS version is 'TL18_ENB_9999_170824_066183' *****</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[enb_resource.py@1113] activeBuildVersion=TL18_ENB_9999_170824_066183</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ssh_common.py@203] Last login: Thu Aug 24 17:47:11 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05458F80&gt;</msg>
<msg timestamp="20170824 17:48:02.673" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
-bash-4.4#</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05458F80&gt;</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\SiteConf.xml' is ok. local file size is 202k</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[ssh_common.py@203] Last login: Thu Aug 24 17:47:32 CST 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0545BDC8&gt;</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
-bash-4.4#</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0545BDC8&gt;</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[enb_resource.py@375] The real falsh folder is /ffs/fs1</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[sftp_control.py@176] /ffs/fs1/FileDirectory.xml</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs1/FileDirectory.xml' to 'D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\FileDirectory_20170824174726.xml' is ok. local file size is 38k</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[sftp_control.py@176] /ffs/fs1/config/SCFC_114.xml</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs1/config/SCFC_114.xml' to 'D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\SCFC_114.xml' is ok. local file size is 103k</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[enb_resource.py@1086] 
 ****Current bbu type is 'FSIH' *****</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[enb_resource.py@1208] HW_BBU_TYPE=FSIH</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[enb_resource.py@1086] 
 ****Current rru type is 'FZFI-d:FZFI-f' *****</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[enb_resource.py@1211] HW_RRU_TYPE=FZFI-d:FZFI-f</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[enb_resource.py@1086] 
 ****Current HW type is 'null' *****</msg>
<msg timestamp="20170824 17:48:02.674" level="INFO">[enb_resource.py@1214] BTS_HW_TYPE=null</msg>
<status status="PASS" endtime="20170824 17:48:02.676" starttime="20170824 17:46:41.740"></status>
</kw>
<status status="PASS" endtime="20170824 17:48:02.676" starttime="20170824 17:46:41.739"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20170824 17:48:02.677" starttime="20170824 17:48:02.676"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170824 17:48:02.678" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170824 17:48:02.678" starttime="20170824 17:48:02.677"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20170824 17:48:02.681" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20170824 17:48:02.681" starttime="20170824 17:48:02.678"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20170824 17:48:02.685" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20170824 17:48:02.685" starttime="20170824 17:48:02.682"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20170824 17:48:02.688" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20170824 17:48:02.688" starttime="20170824 17:48:02.685"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20170824 17:48:04.115" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 


login:</msg>
<msg timestamp="20170824 17:48:04.115" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20170824 17:48:04.115" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester

password:</msg>
<msg timestamp="20170824 17:48:04.115" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20170824 17:48:04.115" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20170824 17:48:04.115" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05536A58&gt;</msg>
<status status="PASS" endtime="20170824 17:48:04.115" starttime="20170824 17:48:02.688"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170824 17:48:04.116" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05536A58&gt;</msg>
<status status="PASS" endtime="20170824 17:48:04.116" starttime="20170824 17:48:04.116"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20170824 17:48:05.310" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05536A58&gt;</msg>
<msg timestamp="20170824 17:48:05.310" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20170824 17:48:05.310" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20170824 17:48:05.310" starttime="20170824 17:48:04.120"></status>
</kw>
<status status="PASS" endtime="20170824 17:48:05.311" starttime="20170824 17:48:04.116"></status>
</kw>
<status status="PASS" endtime="20170824 17:48:05.311" starttime="20170824 17:48:02.677"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170824 17:48:05.314" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05536A58&gt;.</msg>
<status status="PASS" endtime="20170824 17:48:05.315" starttime="20170824 17:48:05.311"></status>
</kw>
<status status="PASS" endtime="20170824 17:48:05.315" starttime="20170824 17:46:41.618"></status>
</kw>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:43.230" starttime="20170824 17:55:43.227"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20170824 17:55:43.238" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20170824 17:55:43.238" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05536A58&gt;</msg>
<status status="PASS" endtime="20170824 17:55:43.238" starttime="20170824 17:55:43.230"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<kw name="Zip File" library="tdd_ev_robotws">
<doc>This keyword can zip specific files.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<msg timestamp="20170824 17:55:43.266" level="INFO">[zip_control.py@316]</msg>
<msg timestamp="20170824 17:55:43.266" level="WARN">[zip_control.py@322] zip D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641 to D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641.zip failed!</msg>
<status status="PASS" endtime="20170824 17:55:43.266" starttime="20170824 17:55:43.239"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:43.266" starttime="20170824 17:55:43.239"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:43.267" starttime="20170824 17:55:43.238"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Remove Directory" library="OperatingSystem">
<doc>Removes the directory pointed to by the given ``path``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<msg timestamp="20170824 17:55:43.274" html="yes" level="INFO">Removed directory '&lt;a href="file://D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641"&gt;D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 17:55:43.275" starttime="20170824 17:55:43.268"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:43.275" starttime="20170824 17:55:43.267"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:43.275" starttime="20170824 17:55:43.267"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:43.275" starttime="20170824 17:55:43.227"></status>
</kw>
<test id="s1-t1" name="FZFI_BS_FV_TX_and_RX_antenna_Calibration">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA_logs\TestLog_20170824174638//ev_logs//D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20170824 17:48:05.320" level="INFO">${timestamp} = 20170824174805</msg>
<status status="PASS" endtime="20170824 17:48:05.320" starttime="20170824 17:48:05.319"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170824 17:48:05.321" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\FZFI_BS_FV_TX_and_RX_antenna_Calibration</msg>
<status status="PASS" endtime="20170824 17:48:05.321" starttime="20170824 17:48:05.320"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20170824 17:48:05.321" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\FZFI_BS_FV_TX_and_RX_antenna_Calibration</msg>
<status status="PASS" endtime="20170824 17:48:05.321" starttime="20170824 17:48:05.321"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170824 17:48:05.322" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\FZFI_BS_FV_TX_and_RX_antenna_Calibration</msg>
<status status="PASS" endtime="20170824 17:48:05.322" starttime="20170824 17:48:05.322"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170824 17:48:05.323" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\FZFI_BS_FV_TX_and_RX_antenna_Calibration"&gt;D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\FZFI_BS_FV_TX_and_RX_antenna_Calibration&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20170824 17:48:05.323" starttime="20170824 17:48:05.322"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20170824 17:48:05.324" level="INFO">save log dir:D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\FZFI_BS_FV_TX_and_RX_antenna_Calibration</msg>
<status status="PASS" endtime="20170824 17:48:05.324" starttime="20170824 17:48:05.324"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20170824 17:48:05.325" starttime="20170824 17:48:05.324"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:48:05.327" starttime="20170824 17:48:05.326"></status>
</kw>
<msg timestamp="20170824 17:48:05.327" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170824 17:48:05.327" starttime="20170824 17:48:05.326"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:48:05.328" starttime="20170824 17:48:05.328"></status>
</kw>
<msg timestamp="20170824 17:48:05.328" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20170824 17:48:05.328" starttime="20170824 17:48:05.327"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20170824 17:48:05.332" level="INFO">${log dir} = D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\FZFI_BS_FV_TX_and_RX_antenna_Calibration</msg>
<status status="PASS" endtime="20170824 17:48:05.332" starttime="20170824 17:48:05.329"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20170824 17:48:05.333" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\FZFI_BS_FV_TX_and_RX_antenna_Calibration</msg>
<status status="PASS" endtime="20170824 17:48:05.333" starttime="20170824 17:48:05.332"></status>
</kw>
<status status="PASS" endtime="20170824 17:48:05.333" starttime="20170824 17:48:05.325"></status>
</kw>
<status status="PASS" endtime="20170824 17:48:05.333" starttime="20170824 17:48:05.319"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>4 min</arg>
</arguments>
<msg timestamp="20170824 17:52:05.334" level="INFO">Slept 4 minutes</msg>
<status status="PASS" endtime="20170824 17:52:05.334" starttime="20170824 17:48:05.333"></status>
</kw>
<kw name="Get_BTS_log_Check_Calibration" library="SISO1 Resource">
<kw name="Start Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword starts catching of BTS system(UDP) log.</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\bts_calibration.log</arg>
</arguments>
<msg timestamp="20170824 17:52:05.625" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20170824 17:52:05.625" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20170824 17:52:05.625" level="INFO">[file_common.py@209] Directory "D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641\FZFI_BS_FV_TX_and_RX_antenna_Calibration" already exists, no need to create it again.</msg>
<status status="PASS" endtime="20170824 17:52:05.626" starttime="20170824 17:52:05.336"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>3 min</arg>
</arguments>
<msg timestamp="20170824 17:55:05.626" level="INFO">Slept 3 minutes</msg>
<status status="PASS" endtime="20170824 17:55:05.626" starttime="20170824 17:52:05.626"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20170824 17:55:05.628" starttime="20170824 17:55:05.626"></status>
</kw>
<kw name="Check Udp Log Calibration" library="tdd_ev_robotws">
<doc>This keyword is used for analyzing UDPlog calibration information</doc>
<arguments>
<arg>${TEST_LOG_DIR}\\bts_calibration.log</arg>
<arg>${bandwidth}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:06.153" starttime="20170824 17:55:05.628"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:06.154" starttime="20170824 17:52:05.335"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20170824 17:55:06.159" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x05536A58&gt;.</msg>
<status status="PASS" endtime="20170824 17:55:06.159" starttime="20170824 17:55:06.155"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20170824 17:55:06.617" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20170824 17:55:06.617" starttime="20170824 17:55:06.159"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20170824 17:55:06.623" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'isAlive'</msg>
<status status="PASS" endtime="20170824 17:55:06.623" starttime="20170824 17:55:06.618"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20170824 17:55:06.633" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20170824 17:55:06.633" starttime="20170824 17:55:06.624"></status>
</kw>
<msg timestamp="20170824 17:55:06.633" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20170824 17:55:06.633" starttime="20170824 17:55:06.623"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:06.638" starttime="20170824 17:55:06.634"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:06.638" starttime="20170824 17:55:06.633"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:06.643" starttime="20170824 17:55:06.639"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:06.643" starttime="20170824 17:55:06.638"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:06.644" starttime="20170824 17:55:06.644"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:06.645" starttime="20170824 17:55:06.645"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
</arguments>
<msg timestamp="20170824 17:55:06.653" level="FAIL">Variable ${TM500_Pppoe_Tag} does not exist.</msg>
<status status="FAIL" endtime="20170824 17:55:06.653" starttime="20170824 17:55:06.646"></status>
</kw>
<msg timestamp="20170824 17:55:06.654" level="INFO">${return} = ('FAIL', u'Variable ${TM500_Pppoe_Tag} does not exist.')</msg>
<status status="PASS" endtime="20170824 17:55:06.654" starttime="20170824 17:55:06.645"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Switch Host Connection</arg>
<arg>${TM500_PC_CONNECTION}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:06.657" starttime="20170824 17:55:06.654"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Pppoe_Tag}'=='used'</arg>
<arg>Tm500 Stop Pppoe Connection</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:06.660" starttime="20170824 17:55:06.657"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20170824 17:55:06.661" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20170824 17:55:06.662" starttime="20170824 17:55:06.661"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:06.664" starttime="20170824 17:55:06.663"></status>
</kw>
<msg timestamp="20170824 17:55:06.664" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170824 17:55:06.664" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170824 17:55:06.664" starttime="20170824 17:55:06.663"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:06.667" starttime="20170824 17:55:06.664"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170824 17:55:10.697" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20170824 17:55:10.698" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20170824 17:55:10.698" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20170824 17:55:10.698" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20170824 17:55:10.698" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20170824 17:55:10.698" starttime="20170824 17:55:06.667"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:10.698" starttime="20170824 17:55:06.662"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:10.700" starttime="20170824 17:55:10.699"></status>
</kw>
<msg timestamp="20170824 17:55:10.700" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20170824 17:55:10.700" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20170824 17:55:10.700" starttime="20170824 17:55:10.699"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:10.704" starttime="20170824 17:55:10.700"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20170824 17:55:14.733" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20170824 17:55:14.733" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20170824 17:55:14.733" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20170824 17:55:14.733" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20170824 17:55:14.733" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20170824 17:55:14.733" starttime="20170824 17:55:10.704"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:14.733" starttime="20170824 17:55:10.698"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20170824 17:55:14.742" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20170824 17:55:14.742" starttime="20170824 17:55:14.735"></status>
</kw>
<msg timestamp="20170824 17:55:14.743" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20170824 17:55:14.743" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20170824 17:55:14.743" starttime="20170824 17:55:14.734"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20170824 17:55:14.746" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20170824 17:55:14.747" starttime="20170824 17:55:14.743"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:14.747" starttime="20170824 17:55:14.734"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:14.747" starttime="20170824 17:55:06.662"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:14.747" starttime="20170824 17:55:06.662"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:14.747" starttime="20170824 17:55:14.747"></status>
</kw>
<kw name="Set Test Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current test.</doc>
<arguments>
<arg>${TM500_Pppoe_Tag}</arg>
<arg>unused</arg>
</arguments>
<msg timestamp="20170824 17:55:14.751" level="INFO">${TM500_Pppoe_Tag} = unused</msg>
<status status="PASS" endtime="20170824 17:55:14.751" starttime="20170824 17:55:14.748"></status>
</kw>
<status status="FAIL" endtime="20170824 17:55:14.751" starttime="20170824 17:55:06.644"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:14.752" starttime="20170824 17:55:06.643"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20170824 17:55:14.759" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20170824 17:55:14.759" starttime="20170824 17:55:14.752"></status>
</kw>
<msg timestamp="20170824 17:55:14.759" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20170824 17:55:14.759" starttime="20170824 17:55:14.752"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:14.763" starttime="20170824 17:55:14.759"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170824 17:55:21.147" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170824 17:55:21.724" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20170824 17:55:21.724" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20170824 17:55:21.724" starttime="20170824 17:55:14.763"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20170824 17:55:22.011" level="INFO">['fatal'] ['fatal']</msg>
<status status="PASS" endtime="20170824 17:55:22.011" starttime="20170824 17:55:21.724"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20170824 17:55:22.013" level="FAIL">'FZFI_BS_FV_TX_and_RX_antenna_Calibration' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20170824 17:55:22.013" starttime="20170824 17:55:22.012"></status>
</kw>
<msg timestamp="20170824 17:55:22.013" level="INFO">${return1} = ('FAIL', u"'FZFI_BS_FV_TX_and_RX_antenna_Calibration' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20170824 17:55:22.013" starttime="20170824 17:55:22.012"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:22.017" starttime="20170824 17:55:22.014"></status>
</kw>
<msg timestamp="20170824 17:55:22.018" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20170824 17:55:22.018" starttime="20170824 17:55:22.014"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:22.021" starttime="20170824 17:55:22.018"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:22.021" starttime="20170824 17:55:22.018"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:22.022" starttime="20170824 17:55:22.022"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:22.022" starttime="20170824 17:55:22.022"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:22.023" starttime="20170824 17:55:22.023"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20170824 17:55:22.025" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20170824 17:55:22.025" starttime="20170824 17:55:22.024"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:22.025" starttime="20170824 17:55:22.025"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:22.026" starttime="20170824 17:55:22.026"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:22.026" starttime="20170824 17:55:22.026"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20170824 17:55:43.223" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[ssh_common.py@203] Last login: Thu Aug 24 17:47:44 CST 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05649850&gt;</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
-bash-4.4#</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05649850&gt;</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[enb_command_control.py@32] argument host is: 192.168.255.1</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[ssh_common.py@203] Last login: Thu Aug 24 17:55:28 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0552DB20&gt;</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170824_066183.xml
-bash-4.4#</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0552DB20&gt;</msg>
<msg timestamp="20170824 17:55:43.224" level="INFO">${version} = TL18_ENB_9999_170824_066183</msg>
<status status="PASS" endtime="20170824 17:55:43.224" starttime="20170824 17:55:22.027"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:43.225" starttime="20170824 17:55:43.225"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20170824 17:55:43.225" starttime="20170824 17:55:43.225"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:43.226" starttime="20170824 17:55:22.024"></status>
</kw>
<status status="PASS" endtime="20170824 17:55:43.226" starttime="20170824 17:55:06.154"></status>
</kw>
<tags>
<tag>owner-jiaqi.jin@nokia.com</tag>
<tag>QC_464833</tag>
</tags>
<status status="PASS" endtime="20170824 17:55:43.226" critical="yes" starttime="20170824 17:48:05.315"></status>
</test>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="PASS" endtime="20170824 17:55:43.275" starttime="20170824 17:46:40.165"></status>
</suite>
<statistics>
<total>
<stat fail="0" pass="1">Critical Tests</stat>
<stat fail="0" pass="1">All Tests</stat>
</total>
<tag>
<stat fail="0" pass="1">owner-jiaqi.jin@nokia.com</stat>
<stat fail="0" pass="1">QC_464833</stat>
</tag>
<suite>
<stat fail="0" id="s1" name="FZFI BS FV TX and RX antenna Calibration" pass="1">FZFI BS FV TX and RX antenna Calibration</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20170824 17:46:40.779" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20170824 17:55:21.147" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20170824 17:55:43.266" level="WARN">[zip_control.py@322] zip D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641 to D:\TA_logs\TestLog_20170824174638\ev_logs\FZFI_BS_FV_TX_and_RX_antenna_Calibration_20170824174641.zip failed!</msg>
</errors>
</robot>
