<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171030 16:26:50.384" generator="Robot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\Trunk_CRT\SISO1\CRT\CPRI_Single_FZFI\FZFI_Addtional_SWDL_SW_upgrade_both\FZFI_Addtional_SWDL_SW_upgrade_both.html" id="s1" name="FZFI Addtional SWDL SW upgrade both">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA_logs//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171030 16:26:53.154" level="INFO">${timestamp} = 20171030162653</msg>
<status status="PASS" endtime="20171030 16:26:53.154" starttime="20171030 16:26:53.112"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20171030 16:26:53.156" level="INFO">${FILE_NAME} = FZFI Addtional SWDL SW upgrade both</msg>
<status status="PASS" endtime="20171030 16:26:53.156" starttime="20171030 16:26:53.155"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171030 16:26:53.156" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI Addtional SWDL SW upgrade both_20171030162653</msg>
<status status="PASS" endtime="20171030 16:26:53.156" starttime="20171030 16:26:53.156"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171030 16:26:53.157" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653</msg>
<status status="PASS" endtime="20171030 16:26:53.157" starttime="20171030 16:26:53.157"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171030 16:26:53.158" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653</msg>
<status status="PASS" endtime="20171030 16:26:53.158" starttime="20171030 16:26:53.157"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171030 16:26:53.161" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653"&gt;D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171030 16:26:53.161" starttime="20171030 16:26:53.158"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171030 16:26:53.161" level="INFO">save log dir:D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653</msg>
<status status="PASS" endtime="20171030 16:26:53.161" starttime="20171030 16:26:53.161"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20171030 16:26:53.165" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20171030 16:26:53.165" starttime="20171030 16:26:53.162"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20171030 16:26:53.184" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20171030 16:26:53.184" starttime="20171030 16:26:53.178"></status>
</kw>
<msg timestamp="20171030 16:26:53.184" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20171030 16:26:53.184" starttime="20171030 16:26:53.178"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171030 16:26:53.185" starttime="20171030 16:26:53.185"></status>
</kw>
<msg timestamp="20171030 16:26:53.186" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171030 16:26:53.186" starttime="20171030 16:26:53.185"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20171030 16:26:53.192" starttime="20171030 16:26:53.189"></status>
</kw>
<msg timestamp="20171030 16:26:53.193" level="INFO">${log dir} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653</msg>
<status status="PASS" endtime="20171030 16:26:53.193" starttime="20171030 16:26:53.186"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171030 16:26:53.196" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653</msg>
<status status="PASS" endtime="20171030 16:26:53.197" starttime="20171030 16:26:53.193"></status>
</kw>
<status status="PASS" endtime="20171030 16:26:53.197" starttime="20171030 16:26:53.177"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20171030 16:26:53.227" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171030 16:26:53.228" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171030 16:26:53.228" starttime="20171030 16:26:53.198"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20171030 16:26:53.228" starttime="20171030 16:26:53.228"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20171030 16:26:53.229" starttime="20171030 16:26:53.229"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20171030 16:26:53.229" starttime="20171030 16:26:53.229"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20171030 16:26:53.230" starttime="20171030 16:26:53.230"></status>
</kw>
<status status="PASS" endtime="20171030 16:26:53.230" starttime="20171030 16:26:53.197"></status>
</kw>
<status status="PASS" endtime="20171030 16:26:53.230" starttime="20171030 16:26:53.197"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20171030 16:27:59.283" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171030 16:27:59.326" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171030 16:28:10.461" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171030 16:28:10.496" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171030 16:28:11.000" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171030 16:28:11.038" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 15:23:09 CST 2017 from 192.168.255.126 on pts/1
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0548AFA8&gt;</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0548AFA8&gt;</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:27:19 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054DD350&gt;</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170809_065605.xml
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x054DD350&gt;</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1509352063&amp;token=1184bb6aad654732d0deb3893005d984aca139bb12782d1a2af65a03743ef773&amp;frame=sshservice'</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1509352068&amp;token=2170724842df4888132cfad6203099215458f662ad9952c6f3035917cacac643&amp;frame=RndPortsService'</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:27:30 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05537760&gt;</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05537760&gt;</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:27:53 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05537C38&gt;</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170809_065605.xml
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05537C38&gt;</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[enb_resource.py@1238] 
 ****Current BTS version is 'TL18_ENB_9999_170809_065605' *****</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[enb_resource.py@1268] activeBuildVersion=TL18_ENB_9999_170809_065605</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:28:38.743" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:28:03 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05537A08&gt;</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05537A08&gt;</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\SiteConf.xml' is ok. local file size is 203k</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:28:24 CST 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05377508&gt;</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05377508&gt;</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[enb_resource.py@500] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FileDirectory_20171030162759.xml' is ok. local file size is 38k</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_1.xml</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/config/SCFC_1.xml' to 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\SCFC_1.xml' is ok. local file size is 94k</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[enb_resource.py@1238] 
 ****Current bbu type is 'FSIH' *****</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[enb_resource.py@1363] HW_BBU_TYPE=FSIH</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[enb_resource.py@1238] 
 ****Current rru type is 'FZFI-d:FZFI-f' *****</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[enb_resource.py@1366] HW_RRU_TYPE=FZFI-d:FZFI-f</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[enb_resource.py@1238] 
 ****Current HW type is 'null' *****</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[enb_resource.py@1369] BTS_HW_TYPE=null</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[ping_control.py@189] 
Pinging 192.168.200.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.200.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:28:38.744" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20171030 16:28:38.747" starttime="20171030 16:26:53.231"></status>
</kw>
<status status="PASS" endtime="20171030 16:28:38.747" starttime="20171030 16:26:53.230"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20171030 16:28:38.748" starttime="20171030 16:28:38.747"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171030 16:28:38.749" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171030 16:28:38.749" starttime="20171030 16:28:38.748"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20171030 16:28:38.752" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20171030 16:28:38.752" starttime="20171030 16:28:38.749"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20171030 16:28:38.756" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20171030 16:28:38.756" starttime="20171030 16:28:38.753"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20171030 16:28:38.759" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20171030 16:28:38.759" starttime="20171030 16:28:38.756"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20171030 16:28:40.229" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 

login:</msg>
<msg timestamp="20171030 16:28:40.229" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20171030 16:28:40.229" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester
password:</msg>
<msg timestamp="20171030 16:28:40.229" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20171030 16:28:40.229" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20171030 16:28:40.230" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;</msg>
<status status="PASS" endtime="20171030 16:28:40.230" starttime="20171030 16:28:38.760"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171030 16:28:40.231" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;</msg>
<status status="PASS" endtime="20171030 16:28:40.231" starttime="20171030 16:28:40.230"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20171030 16:28:41.429" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;</msg>
<msg timestamp="20171030 16:28:41.429" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20171030 16:28:41.429" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20171030 16:28:41.429" starttime="20171030 16:28:40.234"></status>
</kw>
<status status="PASS" endtime="20171030 16:28:41.429" starttime="20171030 16:28:40.231"></status>
</kw>
<status status="PASS" endtime="20171030 16:28:41.429" starttime="20171030 16:28:38.748"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171030 16:28:41.434" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;.</msg>
<status status="PASS" endtime="20171030 16:28:41.434" starttime="20171030 16:28:41.430"></status>
</kw>
<status status="PASS" endtime="20171030 16:28:41.435" starttime="20171030 16:26:53.111"></status>
</kw>
<test id="s1-t1" name="FZFI_Addtional_SWDL_SW_upgrade_both">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA_logs//ev_logs//D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171030 16:28:41.441" level="INFO">${timestamp} = 20171030162841</msg>
<status status="PASS" endtime="20171030 16:28:41.442" starttime="20171030 16:28:41.441"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171030 16:28:41.442" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171030 16:28:41.442" starttime="20171030 16:28:41.442"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171030 16:28:41.443" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171030 16:28:41.443" starttime="20171030 16:28:41.443"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171030 16:28:41.444" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171030 16:28:41.444" starttime="20171030 16:28:41.443"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171030 16:28:41.446" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both"&gt;D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171030 16:28:41.446" starttime="20171030 16:28:41.444"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171030 16:28:41.446" level="INFO">save log dir:D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171030 16:28:41.446" starttime="20171030 16:28:41.446"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20171030 16:28:41.447" starttime="20171030 16:28:41.447"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20171030 16:28:41.450" starttime="20171030 16:28:41.449"></status>
</kw>
<msg timestamp="20171030 16:28:41.450" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171030 16:28:41.450" starttime="20171030 16:28:41.449"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171030 16:28:41.451" starttime="20171030 16:28:41.451"></status>
</kw>
<msg timestamp="20171030 16:28:41.451" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171030 16:28:41.451" starttime="20171030 16:28:41.450"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20171030 16:28:41.455" level="INFO">${log dir} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171030 16:28:41.455" starttime="20171030 16:28:41.452"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171030 16:28:41.456" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171030 16:28:41.456" starttime="20171030 16:28:41.455"></status>
</kw>
<status status="PASS" endtime="20171030 16:28:41.456" starttime="20171030 16:28:41.448"></status>
</kw>
<status status="PASS" endtime="20171030 16:28:41.456" starttime="20171030 16:28:41.441"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Reset_BTS_If_Not_Onair</arg>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Reset_BTS_If_Not_Onair" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171030 16:28:41.464" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;.</msg>
<status status="PASS" endtime="20171030 16:28:41.464" starttime="20171030 16:28:41.458"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20171030 16:28:45.665" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;</msg>
<msg timestamp="20171030 16:28:45.665" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20171030 16:28:45.665" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20171030 16:28:45.665" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20171030 16:28:45.665" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20171030 16:28:45.665" starttime="20171030 16:28:41.465"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20171030 16:28:45.670" starttime="20171030 16:28:45.666"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171030 16:28:45.673" starttime="20171030 16:28:45.670"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Check_BTS_Onair_Status</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Check_BTS_Onair_Status" library="SISO1 Resource">
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20171030 16:31:54.771" level="INFO">[infomodel_control.py@156] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20171030 16:31:54.772" level="FAIL">InfoModelConnectionException: Expected connection status: RegisteredToInfoModel not achieved. Status reached: Disconnected</msg>
<status status="FAIL" endtime="20171030 16:31:54.772" starttime="20171030 16:28:45.675"></status>
</kw>
<status status="FAIL" endtime="20171030 16:31:54.772" starttime="20171030 16:28:45.674"></status>
</kw>
<msg timestamp="20171030 16:31:54.772" level="INFO">${result} = FAIL</msg>
<msg timestamp="20171030 16:31:54.773" level="INFO">${ret} = InfoModelConnectionException: Expected connection status: RegisteredToInfoModel not achieved. Status reached: Disconnected</msg>
<status status="PASS" endtime="20171030 16:31:54.773" starttime="20171030 16:28:45.674"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20171030 16:31:54.794" level="INFO">[infomodel_control.py@187] stop infomodel logger failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20171030 16:31:54.794" level="INFO">[infomodel_control.py@191] disconnect from infomodel failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20171030 16:31:54.794" level="INFO">[infomodel_control.py@195] teardown infomodel failed, details: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<msg timestamp="20171030 16:31:54.794" level="INFO">[infomodel_control.py@197] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171030 16:31:54.794" starttime="20171030 16:31:54.776"></status>
</kw>
<status status="PASS" endtime="20171030 16:31:54.794" starttime="20171030 16:31:54.773"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171030 16:31:54.805" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;.</msg>
<status status="PASS" endtime="20171030 16:31:54.805" starttime="20171030 16:31:54.799"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20171030 16:31:59.011" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;</msg>
<msg timestamp="20171030 16:31:59.011" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20171030 16:31:59.011" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20171030 16:31:59.012" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20171030 16:31:59.012" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20171030 16:31:59.012" starttime="20171030 16:31:54.805"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20171030 16:31:59.018" starttime="20171030 16:31:59.012"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171030 16:31:59.024" starttime="20171030 16:31:59.018"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
</arguments>
<msg timestamp="20171030 16:33:04.114" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171030 16:33:04.152" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171030 16:33:15.290" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171030 16:33:15.530" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:28:36 CST 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05537800&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05537800&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:32:25 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x041D4C10&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170809_065605.xml
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x041D4C10&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1509352368&amp;token=b74d4cd0807a1be5f3b337c94eb67d669888df66af43390160f3f1c676375403&amp;frame=sshservice'</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1509352373&amp;token=bd2e773c48f29c55af169dcbb8a645edd932939ebb0f1d7e5381a6df1ffd81ef&amp;frame=RndPortsService'</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:32:36 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056CEFD0&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056CEFD0&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:32:58 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056CE990&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170809_065605.xml
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056CE990&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:33:08 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05555EB8&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05555EB8&gt;</msg>
<msg timestamp="20171030 16:33:15.538" level="INFO">[enb_resource.py@500] The real falsh folder is /ffs/fs2</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[sftp_control.py@176] /ffs/fs2/FileDirectory.xml</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs2/FileDirectory.xml' to 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both\FileDirectory_20171030163252.xml' is ok. local file size is 38k</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.129</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[ssh_common.py@203] Last login: Mon Oct 30 16:33:29 CST 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0553E7B0&gt;</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[ssh_common.py@258] Execute command: rm -rf /ffs/fs2/config/hwf.bin.gz</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[ssh_common.py@314] Get Response: rm -rf /ffs/fs2/config/hwf.bin.gz
-bash-4.4#</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.129:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0553E7B0&gt;</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[sftp_control.py@61] sftp upload from 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both\scf_modified.xml' to '/ffs/fs2/config/SCFC_1.xml' is ok.</msg>
<msg timestamp="20171030 16:33:15.539" level="INFO">[sftp_control.py@176] /ffs/fs2/config/SCFC_1.xml</msg>
<status status="PASS" endtime="20171030 16:33:15.541" starttime="20171030 16:31:59.024"></status>
</kw>
<kw name="Restart Bts Until Onair" library="tdd_ev_robotws">
<doc>restart bts with powerbreaker and then wait until it is onair.</doc>
<arguments>
<arg>bts_powerbreak_port=${bts_powerbreak}</arg>
</arguments>
<msg timestamp="20171030 16:42:18.150" level="INFO">[tools_resource.py@34] start power off ..</msg>
<msg timestamp="20171030 16:42:18.150" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[facom.py@60] Power off port 1 succeed!</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[base.py@48] trial power off for 0 times</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[facom.py@60] Power off port 5 succeed!</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[tools_resource.py@37] start power on ..</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[facom.py@83] Power on port 1 succeed!</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[facom.py@121] Connect to Facom succeed !</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[base.py@36] trial power on for 0 times</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[facom.py@83] Power on port 5 succeed!</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[tools_resource.py@39] restart port '['FACOM:10.56.7.221:1', 'FACOM:10.56.7.128:5']' with powerbreak succeed !</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[btslog_control.py@117] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[btslog_control.py@174] use ip is 192.168.255.126</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[file_common.py@209] Directory "D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both" already exists, no need to create it again.</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:42:18.151" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:42:18.152" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:42:18.152" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:42:18.152" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:42:18.152" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:42:18.152" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:42:18.152" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:42:18.152" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171030 16:42:18.152" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171030 16:42:18.152" level="INFO">[infomodel_control.py@156] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20171030 16:42:18.152" level="INFO">[infomodel_control.py@156] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20171030 16:42:18.154" level="FAIL">start infomodel failed for Expected connection status: RegisteredToInfoModel not achieved. Status reached: Started</msg>
<status status="FAIL" endtime="20171030 16:42:18.154" starttime="20171030 16:33:15.541"></status>
</kw>
<status status="FAIL" endtime="20171030 16:42:18.154" starttime="20171030 16:31:54.798"></status>
</kw>
<status status="FAIL" endtime="20171030 16:42:18.154" starttime="20171030 16:31:54.795"></status>
</kw>
<status status="FAIL" endtime="20171030 16:42:18.154" starttime="20171030 16:28:41.457"></status>
</kw>
<status status="PASS" endtime="20171030 16:42:18.155" starttime="20171030 16:28:41.456"></status>
</kw>
<kw name="_Update_SW_to_BTS_Site">
<kw name="Kill Sitemanager Process" library="tdd_ev_robotws">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171030 16:42:22.052" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;</msg>
<msg timestamp="20171030 16:42:22.052" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171030 16:42:22.052" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\WIN7-631\ROOT\CIMV2:Win32_Process.Handle="2028"
Instance deletion successful.
Deleting instance \\WIN7-631\ROOT\CIMV2:Win32_Process.Handle="4840"
Instance deletion successful.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20171030 16:42:22.052" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;</msg>
<msg timestamp="20171030 16:42:22.052" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171030 16:42:22.052" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\WIN7-631\ROOT\CIMV2:Win32_Process.Handle="3908"
Instance deletion successful.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20171030 16:42:22.052" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;</msg>
<msg timestamp="20171030 16:42:22.052" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171030 16:42:22.052" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20171030 16:42:22.054" starttime="20171030 16:42:18.156"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20171030 16:42:22.063" starttime="20171030 16:42:22.063"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20171030 16:42:22.068" starttime="20171030 16:42:22.063"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171030 16:42:22.070" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\TA_logs\\ev_logs\\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\\FZFI_Addtional_SWDL_SW_upgrade_both\\', u'CheckExi...</msg>
<status status="PASS" endtime="20171030 16:42:22.070" starttime="20171030 16:42:22.069"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20171030 16:42:22.071" starttime="20171030 16:42:22.070"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171030 17:01:20.826" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both\GUILog\qtp_log20171030164222\Report
&lt;QTP&gt; Start to run script...

 Login_BTSSiteManager  SetSEMDissconnect  OpenMenu MenuName File doesn't exist.
Test Fail. SaveImage  to D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171030162653\FZFI_Addtional_SWDL_SW_upgrade_both\2017-10-30_17-01-19.png
&lt;QTP&gt; run Failed.
Start to kill QTP process.
Finshed to kill QTP process.</msg>
<msg timestamp="20171030 17:01:20.831" level="FAIL">AttributeError: QuickTest.Application.Quit</msg>
<status status="FAIL" endtime="20171030 17:01:20.831" starttime="20171030 16:42:22.071"></status>
</kw>
<status status="FAIL" endtime="20171030 17:01:20.832" starttime="20171030 16:42:22.062"></status>
</kw>
<status status="FAIL" endtime="20171030 17:01:20.832" starttime="20171030 16:42:18.155"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171030 17:01:20.838" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;.</msg>
<status status="PASS" endtime="20171030 17:01:20.838" starttime="20171030 17:01:20.833"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20171030 17:01:21.334" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20171030 17:01:21.334" starttime="20171030 17:01:20.838"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<status status="PASS" endtime="20171030 17:01:21.336" starttime="20171030 17:01:21.334"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20171030 17:01:21.342" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20171030 17:01:21.342" starttime="20171030 17:01:21.337"></status>
</kw>
<msg timestamp="20171030 17:01:21.343" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20171030 17:01:21.343" starttime="20171030 17:01:21.336"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:21.347" starttime="20171030 17:01:21.343"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:21.347" starttime="20171030 17:01:21.343"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:21.351" starttime="20171030 17:01:21.348"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:21.351" starttime="20171030 17:01:21.348"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:21.352" starttime="20171030 17:01:21.352"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:21.353" starttime="20171030 17:01:21.353"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:21.356" starttime="20171030 17:01:21.354"></status>
</kw>
<msg timestamp="20171030 17:01:21.356" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171030 17:01:21.356" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171030 17:01:21.356" starttime="20171030 17:01:21.354"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:21.359" starttime="20171030 17:01:21.356"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171030 17:01:25.389" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20171030 17:01:25.389" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20171030 17:01:25.389" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20171030 17:01:25.389" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20171030 17:01:25.389" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20171030 17:01:25.390" starttime="20171030 17:01:21.360"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:25.390" starttime="20171030 17:01:21.354"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:25.391" starttime="20171030 17:01:25.391"></status>
</kw>
<msg timestamp="20171030 17:01:25.391" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171030 17:01:25.391" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171030 17:01:25.391" starttime="20171030 17:01:25.390"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:25.395" starttime="20171030 17:01:25.392"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171030 17:01:29.424" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20171030 17:01:29.424" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20171030 17:01:29.425" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20171030 17:01:29.425" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20171030 17:01:29.425" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20171030 17:01:29.425" starttime="20171030 17:01:25.395"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:29.425" starttime="20171030 17:01:25.390"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20171030 17:01:29.433" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20171030 17:01:29.434" starttime="20171030 17:01:29.427"></status>
</kw>
<msg timestamp="20171030 17:01:29.434" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20171030 17:01:29.434" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20171030 17:01:29.434" starttime="20171030 17:01:29.425"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20171030 17:01:29.437" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171030 17:01:29.437" starttime="20171030 17:01:29.434"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:29.437" starttime="20171030 17:01:29.425"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:29.437" starttime="20171030 17:01:21.353"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:29.438" starttime="20171030 17:01:21.353"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20171030 17:01:29.442" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20171030 17:01:29.442" starttime="20171030 17:01:29.438"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:29.442" starttime="20171030 17:01:29.442"></status>
</kw>
<status status="FAIL" endtime="20171030 17:01:29.442" starttime="20171030 17:01:21.352"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:29.443" starttime="20171030 17:01:21.351"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20171030 17:01:29.450" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20171030 17:01:29.450" starttime="20171030 17:01:29.444"></status>
</kw>
<msg timestamp="20171030 17:01:29.450" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20171030 17:01:29.450" starttime="20171030 17:01:29.443"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:29.454" starttime="20171030 17:01:29.451"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20171030 17:01:36.873" level="ERROR">Infomodel not connected.</msg>
<msg timestamp="20171030 17:01:37.447" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20171030 17:01:37.447" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171030 17:01:37.447" starttime="20171030 17:01:29.454"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20171030 17:01:37.449" level="INFO">['fatal'] ['fatal']</msg>
<status status="PASS" endtime="20171030 17:01:37.449" starttime="20171030 17:01:37.448"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20171030 17:01:37.450" level="FAIL">'FZFI_Addtional_SWDL_SW_upgrade_both' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20171030 17:01:37.450" starttime="20171030 17:01:37.449"></status>
</kw>
<msg timestamp="20171030 17:01:37.450" level="INFO">${return1} = ('FAIL', u"'FZFI_Addtional_SWDL_SW_upgrade_both' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20171030 17:01:37.450" starttime="20171030 17:01:37.449"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:37.454" starttime="20171030 17:01:37.451"></status>
</kw>
<msg timestamp="20171030 17:01:37.454" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20171030 17:01:37.454" starttime="20171030 17:01:37.451"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:37.458" starttime="20171030 17:01:37.455"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:37.458" starttime="20171030 17:01:37.455"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:37.462" starttime="20171030 17:01:37.459"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:37.462" starttime="20171030 17:01:37.459"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:37.467" starttime="20171030 17:01:37.463"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:37.467" starttime="20171030 17:01:37.463"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:37.471" starttime="20171030 17:01:37.468"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:37.471" starttime="20171030 17:01:37.467"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171030 17:01:37.472" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171030 17:01:37.472" starttime="20171030 17:01:37.472"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:37.477" starttime="20171030 17:01:37.474"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:37.477" starttime="20171030 17:01:37.473"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:37.477" starttime="20171030 17:01:37.473"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:37.482" starttime="20171030 17:01:37.478"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:37.482" starttime="20171030 17:01:37.478"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:37.482" starttime="20171030 17:01:37.477"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:37.487" starttime="20171030 17:01:37.483"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:37.487" starttime="20171030 17:01:37.483"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:37.487" starttime="20171030 17:01:37.482"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20171030 17:01:58.689" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[ssh_common.py@203] -bash-4.4#</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Unknow Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056CE120&gt;</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Unknow Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x056CE120&gt;</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[ssh_common.py@203] Last login: Thu Jan  1 00:27:45 UTC 2004 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05BA7198&gt;</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_170809_065605.xml
-bash-4.4#</msg>
<msg timestamp="20171030 17:01:58.689" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05BA7198&gt;</msg>
<msg timestamp="20171030 17:01:58.690" level="INFO">${version} = TL18_ENB_9999_170809_065605</msg>
<status status="PASS" endtime="20171030 17:01:58.690" starttime="20171030 17:01:37.487"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:58.695" starttime="20171030 17:01:58.692"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:58.695" starttime="20171030 17:01:58.691"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:58.695" starttime="20171030 17:01:58.691"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:58.700" starttime="20171030 17:01:58.696"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:58.700" starttime="20171030 17:01:58.696"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:58.700" starttime="20171030 17:01:58.695"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:58.700" starttime="20171030 17:01:37.471"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:58.700" starttime="20171030 17:01:20.833"></status>
</kw>
<tags>
<tag>owner-xingqiang.wu@nokia.com</tag>
<tag>QC_612238</tag>
</tags>
<status status="FAIL" endtime="20171030 17:01:58.700" critical="yes" starttime="20171030 16:28:41.435">AttributeError: QuickTest.Application.Quit</status>
</test>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:58.705" starttime="20171030 17:01:58.702"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20171030 17:01:58.712" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20171030 17:01:58.712" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x0554A2D8&gt;</msg>
<status status="PASS" endtime="20171030 17:01:58.712" starttime="20171030 17:01:58.705"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${zip_pass_log}</arg>
</arguments>
<assign>
<var>${para_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${zip_pass_log}</arg>
</arguments>
<msg timestamp="20171030 17:01:58.720" level="FAIL">Variable ${zip_pass_log} does not exist.</msg>
<status status="FAIL" endtime="20171030 17:01:58.720" starttime="20171030 17:01:58.713"></status>
</kw>
<msg timestamp="20171030 17:01:58.720" level="INFO">${para_exist} = ('FAIL', u'Variable ${zip_pass_log} does not exist.')</msg>
<status status="PASS" endtime="20171030 17:01:58.720" starttime="20171030 17:01:58.713"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS' == '${para_exist[0]}'</arg>
<arg>${zip_pass_log}</arg>
<arg>${True}</arg>
</arguments>
<assign>
<var>${zip_log}</var>
</assign>
<msg timestamp="20171030 17:01:58.724" level="INFO">${zip_log} = True</msg>
<status status="PASS" endtime="20171030 17:01:58.724" starttime="20171030 17:01:58.720"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:58.725" starttime="20171030 17:01:58.725"></status>
</kw>
<msg timestamp="20171030 17:01:58.726" level="INFO">${status} = PASS</msg>
<msg timestamp="20171030 17:01:58.726" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20171030 17:01:58.726" starttime="20171030 17:01:58.724"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171030 17:01:58.727" starttime="20171030 17:01:58.726"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:58.727" starttime="20171030 17:01:58.726"></status>
</kw>
<status status="PASS" endtime="20171030 17:01:58.727" starttime="20171030 17:01:58.701"></status>
</kw>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20171030 17:01:58.727" starttime="20171030 16:26:51.421"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-xingqiang.wu@nokia.com</stat>
<stat fail="1" pass="0">QC_612238</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZFI Addtional SWDL SW upgrade both" pass="0">FZFI Addtional SWDL SW upgrade both</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171030 16:26:52.242" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
<msg timestamp="20171030 17:01:36.873" level="ERROR">Infomodel not connected.</msg>
</errors>
</robot>
