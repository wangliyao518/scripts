<?xml version="1.0" encoding="UTF-8"?>
<robot generated="20171216 16:08:35.169" generator="Robot 3.0 (Python 2.7.5 on win32)">
<suite source="D:\TA\Test_Case_Svn\Trunk_CRT\SISO1\CRT\CPRI_Single_FZFI\FZFI_Addtional_SWDL_SW_upgrade_both\FZFI_Addtional_SWDL_SW_upgrade_both.html" id="s1" name="FZFI Addtional SWDL SW upgrade both">
<kw type="setup" name="Common Suite Setup" library="common_resource">
<doc>this keyword create suite name directory path as D:\TA_logs//logs//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171216 16:08:36.802" level="INFO">${timestamp} = 20171216160836</msg>
<status status="PASS" endtime="20171216 16:08:36.802" starttime="20171216 16:08:36.762"></status>
</kw>
<kw name="Replace String Using Regexp" library="String">
<doc>Replaces ``pattern`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_NAME[:50]}</arg>
<arg>\\s+$</arg>
<arg>${EMPTY}</arg>
</arguments>
<assign>
<var>${FILE_NAME}</var>
</assign>
<msg timestamp="20171216 16:08:36.803" level="INFO">${FILE_NAME} = FZFI Addtional SWDL SW upgrade both</msg>
<status status="PASS" endtime="20171216 16:08:36.803" starttime="20171216 16:08:36.802"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>ev_logs</arg>
<arg>${FILE_NAME}_${timestamp}</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171216 16:08:36.804" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI Addtional SWDL SW upgrade both_20171216160836</msg>
<status status="PASS" endtime="20171216 16:08:36.804" starttime="20171216 16:08:36.803"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${SUITE_LOG_DIRECTORY}</var>
</assign>
<msg timestamp="20171216 16:08:36.805" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836</msg>
<status status="PASS" endtime="20171216 16:08:36.805" starttime="20171216 16:08:36.804"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171216 16:08:36.805" level="INFO">${SUITE_LOG_DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836</msg>
<status status="PASS" endtime="20171216 16:08:36.805" starttime="20171216 16:08:36.805"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171216 16:08:36.808" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836"&gt;D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171216 16:08:36.808" starttime="20171216 16:08:36.806"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${SUITE_LOG_DIRECTORY}</arg>
</arguments>
<msg timestamp="20171216 16:08:36.809" level="INFO">save log dir:D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836</msg>
<status status="PASS" endtime="20171216 16:08:36.809" starttime="20171216 16:08:36.808"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${snapshot_flag}</arg>
<arg>0</arg>
</arguments>
<msg timestamp="20171216 16:08:36.812" level="INFO">${snapshot_flag} = 0</msg>
<status status="PASS" endtime="20171216 16:08:36.813" starttime="20171216 16:08:36.809"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<msg timestamp="20171216 16:08:36.832" level="FAIL">Variable ${TEST LOG DIR} does not exist.</msg>
<status status="FAIL" endtime="20171216 16:08:36.832" starttime="20171216 16:08:36.826"></status>
</kw>
<msg timestamp="20171216 16:08:36.832" level="INFO">${case_dir_exist} = ('FAIL', u'Variable ${TEST LOG DIR} does not exist.')</msg>
<status status="PASS" endtime="20171216 16:08:36.832" starttime="20171216 16:08:36.826"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:08:36.834" starttime="20171216 16:08:36.833"></status>
</kw>
<msg timestamp="20171216 16:08:36.834" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171216 16:08:36.834" starttime="20171216 16:08:36.833"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:08:36.841" starttime="20171216 16:08:36.837"></status>
</kw>
<msg timestamp="20171216 16:08:36.841" level="INFO">${log dir} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836</msg>
<status status="PASS" endtime="20171216 16:08:36.841" starttime="20171216 16:08:36.834"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171216 16:08:36.845" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836</msg>
<status status="PASS" endtime="20171216 16:08:36.845" starttime="20171216 16:08:36.841"></status>
</kw>
<status status="PASS" endtime="20171216 16:08:36.845" starttime="20171216 16:08:36.825"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Make Sure FCT Ping Ok</arg>
</arguments>
<kw name="Make Sure FCT Ping Ok" library="common_resource">
<kw name="Ping Should Ok" library="tdd_ev_robotws">
<doc>This function is used for check whether ping host success, if yes, return 1, else return 0</doc>
<arguments>
<arg>${FCMD_IP}</arg>
</arguments>
<assign>
<var>${status}</var>
</assign>
<msg timestamp="20171216 16:08:36.870" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171216 16:08:36.870" level="INFO">${status} = True</msg>
<status status="PASS" endtime="20171216 16:08:36.870" starttime="20171216 16:08:36.846"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>300</arg>
<arg>${FTM_IP}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:08:36.871" starttime="20171216 16:08:36.871"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Btscli Disable Bts Port Security</arg>
</arguments>
<status status="PASS" endtime="20171216 16:08:36.871" starttime="20171216 16:08:36.871"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${status}</arg>
<arg>Wait Until Units Startup</arg>
<arg>60</arg>
<arg>${FCMD_IP}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:08:36.872" starttime="20171216 16:08:36.872"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Wait Until Keyword Succeeds</arg>
<arg>5min</arg>
<arg>5s</arg>
<arg>_make sure fctb connect ok</arg>
</arguments>
<status status="PASS" endtime="20171216 16:08:36.872" starttime="20171216 16:08:36.872"></status>
</kw>
<status status="PASS" endtime="20171216 16:08:36.873" starttime="20171216 16:08:36.846"></status>
</kw>
<status status="PASS" endtime="20171216 16:08:36.873" starttime="20171216 16:08:36.845"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>get_enb_infomation</arg>
</arguments>
<kw name="Get Enb Infomation" library="tdd_ev_robotws">
<doc>This keyword will print bts sw version, bbu type and RRU type.</doc>
<msg timestamp="20171216 16:09:42.684" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171216 16:09:42.729" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171216 16:09:53.815" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171216 16:09:53.850" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171216 16:09:54.367" level="INFO">[chan 0] Opened sftp connection (server version 3)</msg>
<msg timestamp="20171216 16:09:54.414" level="INFO">[chan 0] sftp session closed.</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ssh_common.py@203] Last login: Sat Dec 16 16:08:02 CST 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0546D800&gt;</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0546D800&gt;</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ssh_common.py@203] Last login: Sat Dec 16 16:09:11 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05542850&gt;</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_171215_071463.xml
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05542850&gt;</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1513411775&amp;token=214afea57a246d2bb36df642f6efb81df243eaa7674062f85e94bbd224093154&amp;frame=sshservice'</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1513411780&amp;token=c67dc2268d03e771ac014b3318668293efe4d0508483296b99bda72cab457710&amp;frame=RndPortsService'</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ssh_common.py@203] Last login: Sat Dec 16 16:09:21 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055B6238&gt;</msg>
<msg timestamp="20171216 16:10:22.052" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055B6238&gt;</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@203] Last login: Sat Dec 16 16:09:44 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055B63A0&gt;</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_171215_071463.xml
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055B63A0&gt;</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_resource.py@1238] 
 ****Current BTS version is 'TL18_ENB_9999_171215_071463' *****</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_resource.py@1268] activeBuildVersion=TL18_ENB_9999_171215_071463</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@203] Last login: Sat Dec 16 16:09:55 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055B6080&gt;</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@258] Execute command: ls /ram/SiteConf.xml</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@314] Get Response: ls /ram/SiteConf.xml
/ram/SiteConf.xml
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055B6080&gt;</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[sftp_control.py@176] /ram/SiteConf.xml</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[sftp_control.py@79] sftp download from '/ram/SiteConf.xml' to 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\SiteConf.xml' is ok. local file size is 205k</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@203] Last login: Sat Dec 16 16:10:16 CST 2017 from 192.168.255.126 on ssh
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0555CAA8&gt;</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
-bash-4.4#</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0555CAA8&gt;</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_resource.py@500] The real falsh folder is /ffs/fs1</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[sftp_control.py@176] /ffs/fs1/FileDirectory.xml</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs1/FileDirectory.xml' to 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FileDirectory_20171216160942.xml' is ok. local file size is 42k</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[sftp_control.py@39] sftp connect to '192.168.255.1', username:'toor4nsn', password:'oZPS0POrRieRtu' is ok</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[sftp_control.py@176] /ffs/fs1/config/SCFC_53.xml</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[sftp_control.py@79] sftp download from '/ffs/fs1/config/SCFC_53.xml' to 'D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\SCFC_53.xml' is ok. local file size is 148k</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_resource.py@1238] 
 ****Current bbu type is 'FSIH' *****</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_resource.py@1363] HW_BBU_TYPE=FSIH</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_resource.py@1238] 
 ****Current rru type is 'FZFI-d:FZFI-f' *****</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_resource.py@1366] HW_RRU_TYPE=FZFI-d:FZFI-f</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_resource.py@1238] 
 ****Current HW type is 'null' *****</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[enb_resource.py@1369] BTS_HW_TYPE=null</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ping_control.py@189] 
Pinging 192.168.200.1 with 32 bytes of data:
Request timed out.

Ping statistics for 192.168.200.1:
    Packets: Sent = 1, Received = 0, Lost = 1 (100% loss),</msg>
<msg timestamp="20171216 16:10:22.053" level="INFO">[ping_control.py@189] 
Pinging 192.168.255.20 with 32 bytes of data:
Reply from 192.168.255.126: Destination host unreachable.

Ping statistics for 192.168.255.20:
    Packets: Sent = 1, Received = 1, Lost = 0 (0% loss),</msg>
<status status="PASS" endtime="20171216 16:10:22.055" starttime="20171216 16:08:36.873"></status>
</kw>
<status status="PASS" endtime="20171216 16:10:22.055" starttime="20171216 16:08:36.873"></status>
</kw>
<kw name="Set Library Search Order" library="BuiltIn">
<doc>Sets the resolution order to use when a name matches multiple keywords.</doc>
<arguments>
<arg>tdd_ev_robotws</arg>
<arg>OperatingSystem</arg>
</arguments>
<status status="PASS" endtime="20171216 16:10:22.056" starttime="20171216 16:10:22.056"></status>
</kw>
<kw name="Initial Connection With BTS PC" library="common_resource">
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171216 16:10:22.058" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171216 16:10:22.058" starttime="20171216 16:10:22.057"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>${TELNET_PORT}</arg>
<arg>${SSH_PORT}</arg>
</arguments>
<assign>
<var>${conn_port}</var>
</assign>
<msg timestamp="20171216 16:10:22.061" level="INFO">${conn_port} = 23</msg>
<status status="PASS" endtime="20171216 16:10:22.061" starttime="20171216 16:10:22.058"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>TELNET</arg>
<arg>SSH</arg>
</arguments>
<assign>
<var>${conn_type}</var>
</assign>
<msg timestamp="20171216 16:10:22.064" level="INFO">${conn_type} = TELNET</msg>
<status status="PASS" endtime="20171216 16:10:22.065" starttime="20171216 16:10:22.062"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>30</arg>
<arg>5</arg>
</arguments>
<assign>
<var>${timeout}</var>
</assign>
<msg timestamp="20171216 16:10:22.068" level="INFO">${timeout} = 30</msg>
<status status="PASS" endtime="20171216 16:10:22.068" starttime="20171216 16:10:22.065"></status>
</kw>
<kw name="Connect To Host" library="tdd_ev_robotws">
<doc>Used to connect to host, either TELNET or SSH</doc>
<arguments>
<arg>${BTS_PC_INFO.IP}</arg>
<arg>port=${conn_port}</arg>
<arg>username=${BTS_PC_INFO.USERNAME}</arg>
<arg>password=${BTS_PC_INFO.PASSWORD}</arg>
<arg>conn_type=${conn_type}</arg>
<arg>timeout=${timeout}</arg>
</arguments>
<assign>
<var>${BTS_PC_CONNECTION}</var>
</assign>
<msg timestamp="20171216 16:10:23.473" level="INFO">[telnet_common.py@306] Get Response: Welcome to Microsoft Telnet Service 

login:</msg>
<msg timestamp="20171216 16:10:23.473" level="INFO">[telnet_common.py@276] Execute command: tdlte-tester</msg>
<msg timestamp="20171216 16:10:23.473" level="INFO">[telnet_common.py@306] Get Response:  tdlte-tester
password:</msg>
<msg timestamp="20171216 16:10:23.473" level="INFO">[telnet_common.py@276] Execute command: btstest</msg>
<msg timestamp="20171216 16:10:23.473" level="INFO">[telnet_common.py@246]  

*===============================================================
Microsoft Telnet Server.
*===============================================================
C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20171216 16:10:23.474" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;</msg>
<status status="PASS" endtime="20171216 16:10:23.474" starttime="20171216 16:10:22.068"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171216 16:10:23.475" level="INFO">${BTS_PC_CONNECTION} = 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;</msg>
<status status="PASS" endtime="20171216 16:10:23.475" starttime="20171216 16:10:23.474"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>"Windows" in "${platform_version}"</arg>
<arg>Execute Shell Command</arg>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<kw name="Execute Shell Command" library="tdd_ev_robotws">
<doc>Execute a command on the remote system.</doc>
<arguments>
<arg>tlntadmn config timeoutactive\=no</arg>
</arguments>
<msg timestamp="20171216 16:10:24.667" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;</msg>
<msg timestamp="20171216 16:10:24.667" level="INFO">[telnet_common.py@276] Execute command: tlntadmn config timeoutactive=no</msg>
<msg timestamp="20171216 16:10:24.667" level="INFO">[telnet_common.py@306] Get Response: tlntadmn config timeoutactive=no
The settings were successfully updated.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20171216 16:10:24.667" starttime="20171216 16:10:23.479"></status>
</kw>
<status status="PASS" endtime="20171216 16:10:24.667" starttime="20171216 16:10:23.475"></status>
</kw>
<status status="PASS" endtime="20171216 16:10:24.667" starttime="20171216 16:10:22.057"></status>
</kw>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171216 16:10:24.671" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;.</msg>
<status status="PASS" endtime="20171216 16:10:24.672" starttime="20171216 16:10:24.668"></status>
</kw>
<status status="PASS" endtime="20171216 16:10:24.672" starttime="20171216 16:08:36.761"></status>
</kw>
<test id="s1-t1" name="FZFI_Addtional_SWDL_SW_upgrade_both">
<kw type="setup" name="Common Test Setup" library="common_resource">
<doc>this keyword create case name directory path as D:\TA_logs//ev_logs//D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836//</doc>
<kw name="Get Timestamp" library="tdd_ev_robotws">
<doc>This keyword return the time stamp, default format is: 'yyyymmddhhmmss'</doc>
<assign>
<var>${timestamp}</var>
</assign>
<msg timestamp="20171216 16:10:24.677" level="INFO">${timestamp} = 20171216161024</msg>
<status status="PASS" endtime="20171216 16:10:24.677" starttime="20171216 16:10:24.677"></status>
</kw>
<kw name="Catenate" library="BuiltIn">
<doc>Catenates the given items together and returns the resulted string.</doc>
<arguments>
<arg>SEPARATOR=${/}</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171216 16:10:24.678" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171216 16:10:24.678" starttime="20171216 16:10:24.677"></status>
</kw>
<kw name="Replace String" library="String">
<doc>Replaces ``search_for`` in the given ``string`` with ``replace_with``.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${SPACE}</arg>
<arg>_</arg>
</arguments>
<assign>
<var>${TEST_LOG_DIR}</var>
</assign>
<msg timestamp="20171216 16:10:24.679" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171216 16:10:24.679" starttime="20171216 16:10:24.678"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171216 16:10:24.680" level="INFO">${TEST_LOG_DIR} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171216 16:10:24.680" starttime="20171216 16:10:24.679"></status>
</kw>
<kw name="Create Directory" library="OperatingSystem">
<doc>Creates the specified directory.</doc>
<arguments>
<arg>${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171216 16:10:24.681" html="yes" level="INFO">Created directory '&lt;a href="file://D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both"&gt;D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both&lt;/a&gt;'.</msg>
<status status="PASS" endtime="20171216 16:10:24.681" starttime="20171216 16:10:24.680"></status>
</kw>
<kw name="Log" library="BuiltIn">
<doc>Logs the given message with the given level.</doc>
<arguments>
<arg>save log dir:${TEST_LOG_DIR}</arg>
</arguments>
<msg timestamp="20171216 16:10:24.682" level="INFO">save log dir:D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171216 16:10:24.682" starttime="20171216 16:10:24.681"></status>
</kw>
<kw name="Run Keyword Unless" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is false.</doc>
<arguments>
<arg>${BTS PC CONNECTION.connected}</arg>
<arg>Initial Connection With BTS PC</arg>
</arguments>
<status status="PASS" endtime="20171216 16:10:24.683" starttime="20171216 16:10:24.682"></status>
</kw>
<kw name="Get Log Save Directory" library="common_resource">
<doc>This keyword return useable LOG directory.</doc>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${TEST LOG DIR}</arg>
</arguments>
<assign>
<var>${case_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${TEST LOG DIR}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:10:24.685" starttime="20171216 16:10:24.685"></status>
</kw>
<msg timestamp="20171216 16:10:24.685" level="INFO">${case_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171216 16:10:24.685" starttime="20171216 16:10:24.684"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<assign>
<var>${suite_dir_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${SUITE LOG DIRECTORY}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:10:24.686" starttime="20171216 16:10:24.686"></status>
</kw>
<msg timestamp="20171216 16:10:24.686" level="INFO">${suite_dir_exist} = ('PASS', None)</msg>
<status status="PASS" endtime="20171216 16:10:24.686" starttime="20171216 16:10:24.685"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS'=='${case_dir_exist[0]}'</arg>
<arg>${TEST LOG DIR}</arg>
<arg>'FAIL'=='${case_dir_exist[0]}' and 'PASS'=='${suite_dir_exist[0]}'</arg>
<arg>${SUITE LOG DIRECTORY}</arg>
<arg>'FAIL'=='${suite_dir_exist[0]}'</arg>
<arg>${OUTPUT_DIR}</arg>
</arguments>
<assign>
<var>${log dir}</var>
</assign>
<msg timestamp="20171216 16:10:24.690" level="INFO">${log dir} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171216 16:10:24.690" starttime="20171216 16:10:24.687"></status>
</kw>
<kw name="Set Suite Variable" library="BuiltIn">
<doc>Makes a variable available everywhere within the scope of the current suite.</doc>
<arguments>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${log dir}</arg>
</arguments>
<msg timestamp="20171216 16:10:24.691" level="INFO">${SAVE LOG DIRECTORY} = D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both</msg>
<status status="PASS" endtime="20171216 16:10:24.691" starttime="20171216 16:10:24.690"></status>
</kw>
<status status="PASS" endtime="20171216 16:10:24.691" starttime="20171216 16:10:24.683"></status>
</kw>
<status status="PASS" endtime="20171216 16:10:24.691" starttime="20171216 16:10:24.676"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Reset_BTS_If_Not_Onair</arg>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Reset_BTS_If_Not_Onair" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameter_list}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171216 16:10:24.698" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;.</msg>
<status status="PASS" endtime="20171216 16:10:24.698" starttime="20171216 16:10:24.693"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20171216 16:10:28.885" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;</msg>
<msg timestamp="20171216 16:10:28.885" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20171216 16:10:28.885" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20171216 16:10:28.886" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20171216 16:10:28.886" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20171216 16:10:28.886" starttime="20171216 16:10:24.698"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:10:28.889" starttime="20171216 16:10:28.886"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171216 16:10:28.893" starttime="20171216 16:10:28.890"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Check_BTS_Onair_Status</arg>
</arguments>
<assign>
<var>${result}</var>
<var>${ret}</var>
</assign>
<kw name="Check_BTS_Onair_Status" library="SISO1 Resource">
<kw name="Start Infomodel" library="tdd_ev_robotws">
<doc>Setup InfoModel library and Connect to InfoModel.</doc>
<arguments>
<arg>port=${BTS_INFOMODEL_PORT}</arg>
</arguments>
<msg timestamp="20171216 16:10:37.249" level="INFO">[infomodel_control.py@156] set up infomodel with following info succeed .
    details: address=192.168.255.129, port=12345, definitions_file_path=None
             ftp_username=toor4nsn,ftp_password=oZPS0POrRieRtu</msg>
<msg timestamp="20171216 16:10:37.250" level="INFO">[infomodel_control.py@160] start infomodel succeed .</msg>
<msg timestamp="20171216 16:10:37.250" level="INFO">[infomodel_control.py@162] start infomodel logger succeed .</msg>
<status status="PASS" endtime="20171216 16:10:37.250" starttime="20171216 16:10:28.894"></status>
</kw>
<kw name="Query Infomodel" library="tdd_ev_robotws">
<doc>Query InfoModel with some `query`. Keyword will wait for successful result some `timeout` time or fail.</doc>
<arguments>
<arg>every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]</arg>
<arg>timeout=5</arg>
</arguments>
<msg timestamp="20171216 16:10:42.370" level="FAIL">InfoModelQueryTimeoutException: Query: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' doesn't pass in timeout=5.0. Object does not match given predicates.
/MRBTS-1/RAT-1/MCTRL-1/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-2 : {u'routingState': u'NotRoutable', u'bbCalcState': u'NotCalculated', u'rat': u'LTE', u'gainCalcState': u'NotCalculated', u'setupAllowed': False, u'carriersState': u'Uninitialized', u'testingState': u'Disabled', u'setupBlockingScenarios': [], u'delayCalculationState': u'NotCalculated', u'feedback': u'', u'configurationAgentsReadiness': False, u'stateInfo': {u'automaticBlockState': u'Unblocked', u'powerBreakLockingState': u'Unlocked', u'blockingState': u'Unblocked', u'administrativeState': u'Unlocked', u'reasoningStatus': [], u'proceduralState': u'Prevalidated', u'recoveryLockingState': u'Unlocked', u'operationalState': u'Disabled', u'availabilityStatus': u'Failed'}, u'deploymentCalcState': u'CalculationDone', u'timeDomainState': u'NotEnoughHardwareConfigured'}</msg>
<status status="FAIL" endtime="20171216 16:10:42.370" starttime="20171216 16:10:37.250"></status>
</kw>
<status status="FAIL" endtime="20171216 16:10:42.370" starttime="20171216 16:10:28.894"></status>
</kw>
<msg timestamp="20171216 16:10:42.371" level="INFO">${result} = FAIL</msg>
<msg timestamp="20171216 16:10:42.371" level="INFO">${ret} = InfoModelQueryTimeoutException: Query: 'every /MRBTS-1/RAT-1/MCTRL-*/BBTOP_M-1/MRBTS_M-1/LNBTS_M-1/CELL_M-* is [stateInfo.proceduralState=OnAirDone]' doesn't pass in timeout=5.0. Object does not match...</msg>
<status status="PASS" endtime="20171216 16:10:42.371" starttime="20171216 16:10:28.893"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Stop Infomodel" library="tdd_ev_robotws">
<doc>Disconnect from InfoModel and teardown InfoModel. Keyword will</doc>
<msg timestamp="20171216 16:10:42.642" level="INFO">Exit code: 1</msg>
<msg timestamp="20171216 16:10:42.642" level="INFO">STDOUT
</msg>
<msg timestamp="20171216 16:10:42.642" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:40443
</msg>
<msg timestamp="20171216 16:10:42.647" level="INFO">[infomodel_control.py@185] stop infomodel logger succeed .</msg>
<msg timestamp="20171216 16:10:42.647" level="INFO">[infomodel_control.py@197] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171216 16:10:42.648" starttime="20171216 16:10:42.375"></status>
</kw>
<status status="PASS" endtime="20171216 16:10:42.648" starttime="20171216 16:10:42.371"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'FAIL'=='${result}'</arg>
<arg>BTS_On_Air</arg>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="BTS_On_Air" library="SISO1 Resource">
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171216 16:10:42.659" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;.</msg>
<status status="PASS" endtime="20171216 16:10:42.659" starttime="20171216 16:10:42.652"></status>
</kw>
<kw name="Parse Ping Result" library="tdd_ev_robotws">
<doc>This keyword test the reachability of remote system.</doc>
<arguments>
<arg>192.168.255.1</arg>
</arguments>
<assign>
<var>${package_summary}</var>
<var>${ping_delay}</var>
</assign>
<msg timestamp="20171216 16:10:46.852" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;</msg>
<msg timestamp="20171216 16:10:46.853" level="INFO">[telnet_common.py@276] Execute command: ping  192.168.255.1</msg>
<msg timestamp="20171216 16:10:46.853" level="INFO">[telnet_common.py@306] Get Response: ping  192.168.255.1

Pinging 192.168.255.1 with 32 bytes of data:
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255
Reply from 192.168.255.1: bytes=32 time&lt;1ms TTL=255

Ping statistics for 192.168.255.1:
    Packets: Sent = 4, Received = 4, Lost = 0 (0% loss),
Approximate round trip times in milli-seconds:
    Minimum = 0ms, Maximum = 0ms, Average = 0ms

C:\Users\tdlte-tester&gt;
Total ping delay is: [1, 1, 1, 1]
Statistic ping delay is: [1, 1, 1, 1]
Valid ping delay is: [1, 1, 1, 1]</msg>
<msg timestamp="20171216 16:10:46.853" level="INFO">${package_summary} = ('4', '4', '0')</msg>
<msg timestamp="20171216 16:10:46.853" level="INFO">${ping_delay} = [1, 1, 1.0]</msg>
<status status="PASS" endtime="20171216 16:10:46.853" starttime="20171216 16:10:42.659"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Restart Device With Powerbreaker</arg>
<arg>${bts_powerbreak}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:10:46.857" starttime="20171216 16:10:46.853"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>${package_summary[2]}&gt;2</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171216 16:10:46.860" starttime="20171216 16:10:46.857"></status>
</kw>
<kw name="Modify And Upload Scf File" library="tdd_ev_robotws">
<doc>modify source_scf according parameter list and then upload to enb.</doc>
<arguments>
<arg>${source_scf}</arg>
<arg>${parameters_list}</arg>
</arguments>
<msg timestamp="20171216 16:11:40.627" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ssh_common.py@203] Last login: Sat Dec 16 16:11:20 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055C61E8&gt;</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs1
-bash-4.4#</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055C61E8&gt;</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ssh_common.py@203] Last login: Sat Dec 16 16:11:31 CST 2017 from 192.168.255.126 on pts/0
-bash-4.4#</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055C6A08&gt;</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs1;ls TargetBD*.xml</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs1;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_171215_071463.xml
-bash-4.4#</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x055C6A08&gt;</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/sshservice.html'</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableSsh.cgi?stamp=1513411904&amp;token=3b5dd4a0988ae3dd50b8ec3b76591479cb02e3a46eeaf908d73cbcae2f95d20b&amp;frame=sshservice'</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;SSH Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@210] login succeed !</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@65] request on FTM: 'https://192.168.255.129/protected/RndPortsService.html'</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@94] try: 1/1, http return code: 200</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@237] Calling CGI script on FTM: 'https://192.168.255.129/protected/enableRndPorts.cgi?stamp=1513411909&amp;token=26bde39545f47d30d4986d10b385ae1ec618279a8a3260f648393ba03615593a&amp;frame=RndPortsService'</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@94] try: 1/3, http return code: 200</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[ftm_control.py@266] &lt;!doctype html public "-//w3c//dtd html 4.0 transitional//en"&gt;
&lt;html&gt;
    &lt;head&gt;
    &lt;meta http-equiv="Content-Type" content="text/html; charset=iso-8859-1"&gt;
    &lt;meta http-equiv="expires" content="0"&gt;
    &lt;meta http-equiv="cache-control" content="public,no-cache"&gt;
    &lt;meta http-equiv="pragma" content="no-cache"&gt;
    &lt;/head&gt;
    &lt;body bgcolor="#E7E7E7"&gt;

    &lt;bgcolor="#00FF00" text="#000000" link="#A00000" vlink="#600000" alink="#A00000"&gt;

    &lt;h3&gt;&lt;FONT face="Arial, Helvetica, sans-serif"&gt;
&lt;p&gt;&lt;h3&gt;R&amp;D Ports Service Enabled Successfully&lt;/h3&gt;
&lt;/p&gt;&lt;/body&gt;
&lt;/html&gt;</msg>
<msg timestamp="20171216 16:11:40.627" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:11:40.658" level="FAIL">error: [Errno 10054] An existing connection was forcibly closed by the remote host</msg>
<status status="FAIL" endtime="20171216 16:11:40.659" starttime="20171216 16:10:46.860"></status>
</kw>
<status status="FAIL" endtime="20171216 16:11:40.659" starttime="20171216 16:10:42.652"></status>
</kw>
<status status="FAIL" endtime="20171216 16:11:40.659" starttime="20171216 16:10:42.648"></status>
</kw>
<status status="FAIL" endtime="20171216 16:11:40.659" starttime="20171216 16:10:24.692"></status>
</kw>
<status status="PASS" endtime="20171216 16:11:40.659" starttime="20171216 16:10:24.692"></status>
</kw>
<kw name="_Update_SW_to_BTS_Site">
<kw name="Kill Sitemanager Process" library="tdd_ev_robotws">
<doc>used to kill sitemanager process.</doc>
<msg timestamp="20171216 16:11:44.503" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;</msg>
<msg timestamp="20171216 16:11:44.503" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171216 16:11:44.503" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.poseidon.PoseidonStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\WIN7-631\ROOT\CIMV2:Win32_Process.Handle="5832"
Instance deletion successful.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20171216 16:11:44.503" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;</msg>
<msg timestamp="20171216 16:11:44.503" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171216 16:11:44.503" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%com.nokia.em.sitemgr.SitemgrStarter%%' and not commandline like '%wmic%'" delete
Deleting instance \\WIN7-631\ROOT\CIMV2:Win32_Process.Handle="5696"
Instance deletion successful.

C:\Users\tdlte-tester&gt;</msg>
<msg timestamp="20171216 16:11:44.503" level="INFO">[connection_mgr.py@208] Current connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;</msg>
<msg timestamp="20171216 16:11:44.503" level="INFO">[telnet_common.py@276] Execute command: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete</msg>
<msg timestamp="20171216 16:11:44.503" level="INFO">[telnet_common.py@306] Get Response: C:/WINDOWS/System32/Wbem/wmic process where "commandline like '%%alclient.jar%%' and not commandline like '%wmic%'" delete
No Instance(s) Available.

C:\Users\tdlte-tester&gt;</msg>
<status status="PASS" endtime="20171216 16:11:44.504" starttime="20171216 16:11:40.660"></status>
</kw>
<kw name="GUI SM Login" library="gui_resource">
<doc>This keyword used for login BTS Site Manager.</doc>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run keyword and ignore error</arg>
<arg>modify sem maxpermsize</arg>
</arguments>
<status status="PASS" endtime="20171216 16:11:44.510" starttime="20171216 16:11:44.510"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${CloseSEM}'=='Y'</arg>
<arg>Kill SiteManager Process</arg>
</arguments>
<status status="PASS" endtime="20171216 16:11:44.513" starttime="20171216 16:11:44.510"></status>
</kw>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>IPAddress=${IPAddress}</arg>
<arg>UserName=${UserName}</arg>
<arg>Password=${Password}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
<arg>CheckExist=${CheckExist}</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171216 16:11:44.514" level="INFO">${para_list} = [u'IPAddress=Local', u'UserName=Nemuadmin', u'Password=nemuuser', u'LogPath=D:\\TA_logs\\ev_logs\\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\\FZFI_Addtional_SWDL_SW_upgrade_both\\', u'CheckExi...</msg>
<status status="PASS" endtime="20171216 16:11:44.515" starttime="20171216 16:11:44.514"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>run qtp script</arg>
<arg>${siteman_test_path}Login</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:11:44.515" starttime="20171216 16:11:44.515"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}Login</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171216 16:15:36.043" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\Login ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
IPAddress="Local"
UserName="Nemuadmin"
Password="nemuuser"
LogPath="D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both\"
CheckExist="1"
&lt;QTP&gt; Save log to D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both\GUILog\qtp_log20171216161144\Report
&lt;QTP&gt; Start to run script...</msg>
<status status="PASS" endtime="20171216 16:15:36.043" starttime="20171216 16:11:44.515"></status>
</kw>
<status status="PASS" endtime="20171216 16:15:36.043" starttime="20171216 16:11:44.509"></status>
</kw>
<kw name="Sleep" library="BuiltIn">
<doc>Pauses the test executed for the given time.</doc>
<arguments>
<arg>30 sec</arg>
</arguments>
<msg timestamp="20171216 16:16:06.044" level="INFO">Slept 30 seconds</msg>
<status status="PASS" endtime="20171216 16:16:06.044" starttime="20171216 16:15:36.044"></status>
</kw>
<kw name="GUI SM MenuOperation" library="gui_resource">
<doc>This keyword is provid menu operation in BTS Site Manager</doc>
<arguments>
<arg>Software//Update SW to BTS Site...</arg>
<arg>UpdateSWToBTS</arg>
<arg>${bts_sw_dir}</arg>
</arguments>
<kw name="Create List" library="BuiltIn">
<doc>Returns a list containing given items.</doc>
<arguments>
<arg>MenuName=${MenuName}</arg>
<arg>OperationName=${OperationName}</arg>
<arg>JEditValue=${JEditValue}</arg>
<arg>JEditName=${JEditName}</arg>
<arg>LogPath=${SAVE LOG DIRECTORY}\\</arg>
</arguments>
<assign>
<var>${para_list}</var>
</assign>
<msg timestamp="20171216 16:16:06.054" level="INFO">${para_list} = [u'MenuName=Software//Update SW to BTS Site...', u'OperationName=UpdateSWToBTS', u'JEditValue=', u'JEditName=D:\\BTS_SW_trunk\\TL00_ENB_9999_171216_071524\\TL00_ENB_9999_171216_071524_release_BTSSM_do...</msg>
<status status="PASS" endtime="20171216 16:16:06.054" starttime="20171216 16:16:06.052"></status>
</kw>
<kw name="Run Qtp" library="tdd_ev_robotws">
<doc>This keyword used for run qtp script, if you use in robot please select run_qtp_script</doc>
<arguments>
<arg>${siteman_test_path}SiteMan_MenuOperation</arg>
<arg>${SAVE LOG DIRECTORY}</arg>
<arg>${para_list}</arg>
<arg>${qtpkeepopen}</arg>
<arg>7200</arg>
</arguments>
<msg timestamp="20171216 16:27:09.565" level="INFO">&lt;QTP&gt; Test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\SiteMan_MenuOperation is existence.
Start to kill QTP process.
Finshed to kill QTP process.
&lt;QTP&gt; Launched QTP successfully!

&lt;QTP&gt; instanciation was SUCCESSFUL!
&lt;QTP&gt; find java addin
&lt;QTP&gt; java addin isn't active
&lt;QTP&gt; start to set addins to active
&lt;QTP&gt; set addins to active successfully
&lt;QTP&gt; start to open test D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65\SiteMan\SiteMan_MenuOperation ...

&lt;QTP&gt; open test successfully at 2rd time!

&lt;QTP&gt; automated test case open was SUCCESSFUL!
&lt;QTP&gt; Start to launch QTP App run on the background...

&lt;QTP&gt; start to move current release lib path to active...

D:\TA\trunk_soam\tdd_ev_others\GUI_Databases\QTP\RL65
&lt;QTP&gt; Start to define parameters...

&lt;QTP&gt; Parameter as below:
MenuName="Software//Update SW to BTS Site..."
OperationName="UpdateSWToBTS"
JEditValue=""
JEditName="D:\BTS_SW_trunk\TL00_ENB_9999_171216_071524\TL00_ENB_9999_171216_071524_release_BTSSM_downloadable.zip"
LogPath="D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both\"
&lt;QTP&gt; Save log to D:\TA_logs\ev_logs\FZFI_Addtional_SWDL_SW_upgrade_both_20171216160836\FZFI_Addtional_SWDL_SW_upgrade_both\GUILog\qtp_log20171216161606\Report
&lt;QTP&gt; Start to run script...

(-2147023170, 'The remote procedure call failed.', None, None)
&lt;QTP&gt; run Failed.
Start to kill QTP process.
Finshed to kill QTP process.</msg>
<msg timestamp="20171216 16:27:09.568" level="FAIL">com_error: (-2147023174, 'The RPC server is unavailable.', None, None)</msg>
<status status="FAIL" endtime="20171216 16:27:09.568" starttime="20171216 16:16:06.055"></status>
</kw>
<status status="FAIL" endtime="20171216 16:27:09.569" starttime="20171216 16:16:06.051"></status>
</kw>
<status status="FAIL" endtime="20171216 16:27:09.569" starttime="20171216 16:11:40.660"></status>
</kw>
<kw type="teardown" name="Test_Tear_Down_Action" library="SISO1 Resource">
<doc>Action when case finishs</doc>
<kw name="Switch Host Connection" library="tdd_ev_robotws">
<doc>Switch to the connection identified by 'conn'.</doc>
<arguments>
<arg>${BTS_PC_CONNECTION}</arg>
</arguments>
<msg timestamp="20171216 16:27:09.574" level="INFO">[connection_mgr.py@147] Switch to connection: 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;.</msg>
<status status="PASS" endtime="20171216 16:27:09.575" starttime="20171216 16:27:09.570"></status>
</kw>
<kw name="Kill Qtp Process" library="tdd_ev_robotws">
<doc>This keyword is used to kill the processes related to QTP application.</doc>
<msg timestamp="20171216 16:27:10.008" level="INFO">Start to kill QTP process.
Finshed to kill QTP process.</msg>
<status status="PASS" endtime="20171216 16:27:10.008" starttime="20171216 16:27:09.575"></status>
</kw>
<kw name="Stop Bts Udp Log" library="tdd_ev_robotws">
<doc>This keyword stops BTS system(UDP) log catching.</doc>
<msg timestamp="20171216 16:27:10.016" level="INFO">[btslog_control.py@118] Warn: BTS log is not started ! details: 'NoneType' object has no attribute 'stop_btslog'</msg>
<status status="PASS" endtime="20171216 16:27:10.016" starttime="20171216 16:27:10.009"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${case_execute_log_name}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${case_execute_log_name}</arg>
</arguments>
<msg timestamp="20171216 16:27:10.023" level="FAIL">Variable ${case_execute_log_name} does not exist.</msg>
<status status="FAIL" endtime="20171216 16:27:10.023" starttime="20171216 16:27:10.016"></status>
</kw>
<msg timestamp="20171216 16:27:10.023" level="INFO">${return} = ('FAIL', u'Variable ${case_execute_log_name} does not exist.')</msg>
<status status="PASS" endtime="20171216 16:27:10.023" starttime="20171216 16:27:10.016"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Save Infomodel Log</arg>
<arg>${TEST_LOG_DIR}\\${case_execute_log_name}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:10.027" starttime="20171216 16:27:10.024"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:10.027" starttime="20171216 16:27:10.023"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Stop Infomodel</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:10.031" starttime="20171216 16:27:10.028"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:10.031" starttime="20171216 16:27:10.027"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Release_TM500_And_Colse_PA_Port</arg>
</arguments>
<kw name="Release_TM500_And_Colse_PA_Port" library="SISO1 Resource">
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>${return}</arg>
<arg>Run Keyword And Ignore Error</arg>
<arg>Variable Should Exist</arg>
<arg>${TM500_Use_Tag}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:10.032" starttime="20171216 16:27:10.032"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${TM500_Use_Tag}'=='used'</arg>
<arg>Set Attenuators Off</arg>
<arg>${ATT_ALL_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:10.033" starttime="20171216 16:27:10.033"></status>
</kw>
<kw name="Set_Allcells_Attenuation_Off" library="SISO1 Resource">
<kw type="for" name="${index} IN RANGE [ 1 | 10 ]">
<kw type="foritem" name="${index} = 1">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:10.035" starttime="20171216 16:27:10.034"></status>
</kw>
<msg timestamp="20171216 16:27:10.035" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171216 16:27:10.035" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171216 16:27:10.035" starttime="20171216 16:27:10.034"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:10.038" starttime="20171216 16:27:10.035"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171216 16:27:14.070" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20171216 16:27:14.070" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20171216 16:27:14.070" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20171216 16:27:14.070" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20171216 16:27:14.070" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20171216 16:27:14.071" starttime="20171216 16:27:10.039"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:14.071" starttime="20171216 16:27:10.033"></status>
</kw>
<kw type="foritem" name="${index} = 2">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:14.073" starttime="20171216 16:27:14.072"></status>
</kw>
<msg timestamp="20171216 16:27:14.073" level="INFO">${ret1} = PASS</msg>
<msg timestamp="20171216 16:27:14.073" level="INFO">${ret2} = None</msg>
<status status="PASS" endtime="20171216 16:27:14.073" starttime="20171216 16:27:14.071"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:14.076" starttime="20171216 16:27:14.073"></status>
</kw>
<kw name="Set Attenuation For One Cell" library="tdd_ev_robotws">
<doc>This keyword set attenuation value for one eNB cell.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
<arg>120</arg>
<arg>120</arg>
</arguments>
<msg timestamp="20171216 16:27:18.105" level="INFO">$TA,C,03F0*</msg>
<msg timestamp="20171216 16:27:18.105" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,03F0*', Receive&lt;-'$TA,C,03F0*'</msg>
<msg timestamp="20171216 16:27:18.105" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,03*', Receive&lt;-'$TA,C,03F0*'
$TA,C,04F0*</msg>
<msg timestamp="20171216 16:27:18.105" level="INFO">[attenuator_control.py@445] send-&gt;'$TA,C,04F0*', Receive&lt;-'$TA,C,04F0*'</msg>
<msg timestamp="20171216 16:27:18.105" level="INFO">[attenuator_control.py@450] send-&gt;'$TA,H,04*', Receive&lt;-'$TA,C,04F0*'</msg>
<status status="PASS" endtime="20171216 16:27:18.105" starttime="20171216 16:27:14.076"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:18.105" starttime="20171216 16:27:14.071"></status>
</kw>
<kw type="foritem" name="${index} = 3">
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<assign>
<var>${ret1}</var>
<var>${ret2}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${CELL${index}_ATT_INFO}</arg>
</arguments>
<msg timestamp="20171216 16:27:18.115" level="FAIL">Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="FAIL" endtime="20171216 16:27:18.115" starttime="20171216 16:27:18.107"></status>
</kw>
<msg timestamp="20171216 16:27:18.115" level="INFO">${ret1} = FAIL</msg>
<msg timestamp="20171216 16:27:18.115" level="INFO">${ret2} = Variable ${CELL3_ATT_INFO} does not exist.</msg>
<status status="PASS" endtime="20171216 16:27:18.115" starttime="20171216 16:27:18.106"></status>
</kw>
<kw name="Exit For Loop If" library="BuiltIn">
<doc>Stops executing the enclosing for loop if the ``condition`` is true.</doc>
<arguments>
<arg>'${ret1}'=='FAIL'</arg>
</arguments>
<msg timestamp="20171216 16:27:18.119" level="INFO">Exiting for loop altogether.</msg>
<status status="PASS" endtime="20171216 16:27:18.120" starttime="20171216 16:27:18.115"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:18.120" starttime="20171216 16:27:18.106"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:18.120" starttime="20171216 16:27:10.033"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:18.120" starttime="20171216 16:27:10.033"></status>
</kw>
<kw name="Tm500 Teardown" library="tdd_ev_robotws">
<doc>tm500 teardown.</doc>
<msg timestamp="20171216 16:27:18.121" level="FAIL">AliasError: Provided alias (default) doesn't exist. Please setup library before any other operation.</msg>
<status status="FAIL" endtime="20171216 16:27:18.122" starttime="20171216 16:27:18.121"></status>
</kw>
<kw name="Comment" library="BuiltIn">
<doc>Displays the given messages in the log file as keyword arguments.</doc>
<arguments>
<arg>Set Test Variable</arg>
<arg>${TM500_Use_Tag}</arg>
<arg>unused</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:18.122" starttime="20171216 16:27:18.122"></status>
</kw>
<status status="FAIL" endtime="20171216 16:27:18.122" starttime="20171216 16:27:10.032"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:18.122" starttime="20171216 16:27:10.031"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Variable Should Exist</arg>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<assign>
<var>${return}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${route_add_cpe_pc}</arg>
</arguments>
<msg timestamp="20171216 16:27:18.130" level="FAIL">Variable ${route_add_cpe_pc} does not exist.</msg>
<status status="FAIL" endtime="20171216 16:27:18.131" starttime="20171216 16:27:18.123"></status>
</kw>
<msg timestamp="20171216 16:27:18.131" level="INFO">${return} = ('FAIL', u'Variable ${route_add_cpe_pc} does not exist.')</msg>
<status status="PASS" endtime="20171216 16:27:18.131" starttime="20171216 16:27:18.123"></status>
</kw>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return[0]}'=='PASS'</arg>
<arg>Run Keyword If</arg>
<arg>'${route_add_cpe_pc}'=='true'</arg>
<arg>Execute Shell Command</arg>
<arg>route delete ${BTS_PC_INFO.IP} mask 255.255.255.255 ${UE1_INFO.ADDRESS}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:18.134" starttime="20171216 16:27:18.131"></status>
</kw>
<kw name="Alarm Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<msg timestamp="20171216 16:27:28.061" level="INFO">Exit code: 1</msg>
<msg timestamp="20171216 16:27:28.061" level="INFO">STDOUT
</msg>
<msg timestamp="20171216 16:27:28.061" level="INFO">STDERR
Started InfoModel server PYRO:default_infomodel_server@localhost:36406
</msg>
<msg timestamp="20171216 16:27:28.473" level="INFO">[infomodel_control.py@82] set up infomodel with following info succeed .
    details: address=192.168.255.1, port=12345, definitions_file_path=None</msg>
<msg timestamp="20171216 16:27:28.473" level="INFO">[infomodel_control.py@100] stop infomodel succeed .</msg>
<status status="PASS" endtime="20171216 16:27:28.473" starttime="20171216 16:27:18.135"></status>
</kw>
<kw name="Fatal Monitor" library="AlarmMonitor">
<arguments>
<arg>${TEST_LOG_DIR}</arg>
<arg>${OUTPUT_DIR}</arg>
<arg>alarm_monitor.csv</arg>
<arg>${TEST_NAME[:50]}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:28.474" starttime="20171216 16:27:28.473"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Should Contain</arg>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<assign>
<var>${return1}</var>
</assign>
<kw name="Should Contain" library="BuiltIn">
<doc>Fails if ``container`` does not contain ``item`` one or more times.</doc>
<arguments>
<arg>${TEST_NAME[:50]}</arg>
<arg>Fiber</arg>
</arguments>
<msg timestamp="20171216 16:27:28.475" level="FAIL">'FZFI_Addtional_SWDL_SW_upgrade_both' does not contain 'Fiber'</msg>
<status status="FAIL" endtime="20171216 16:27:28.475" starttime="20171216 16:27:28.475"></status>
</kw>
<msg timestamp="20171216 16:27:28.476" level="INFO">${return1} = ('FAIL', u"'FZFI_Addtional_SWDL_SW_upgrade_both' does not contain 'Fiber'")</msg>
<status status="PASS" endtime="20171216 16:27:28.476" starttime="20171216 16:27:28.474"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<assign>
<var>${all_fiber_link}</var>
</assign>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Get_All_Fiber_Link</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:28.480" starttime="20171216 16:27:28.476"></status>
</kw>
<msg timestamp="20171216 16:27:28.481" level="INFO">${all_fiber_link} = ('PASS', None)</msg>
<status status="PASS" endtime="20171216 16:27:28.481" starttime="20171216 16:27:28.476"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Connect_Fiber_Link</arg>
<arg>${all_fiber_link[1]}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:28.485" starttime="20171216 16:27:28.481"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:28.485" starttime="20171216 16:27:28.481"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Software Reboot Bts</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:28.488" starttime="20171216 16:27:28.485"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:28.489" starttime="20171216 16:27:28.485"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Sleep</arg>
<arg>60</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:28.492" starttime="20171216 16:27:28.489"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:28.493" starttime="20171216 16:27:28.489"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${return1[0]}'=='PASS'</arg>
<arg>Wait Until Units Startup</arg>
<arg>600</arg>
<arg>192.168.255.1</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:28.496" starttime="20171216 16:27:28.493"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:28.497" starttime="20171216 16:27:28.493"></status>
</kw>
<kw name="Common Test Teardown" library="common_resource">
<doc>[Caution] this keyword step:</doc>
<kw name="Get Os Platform Version" library="tdd_ev_robotws">
<doc>used to get operation system platform version, can be used to judge if</doc>
<arguments>
<arg>with_connection=${false}</arg>
</arguments>
<assign>
<var>${platform_version}</var>
</assign>
<msg timestamp="20171216 16:27:28.498" level="INFO">${platform_version} = Windows-7-6.1.7601-SP1</msg>
<status status="PASS" endtime="20171216 16:27:28.498" starttime="20171216 16:27:28.497"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${ONE_KEY_CAPTURE_LOGS_FLAG}'=='${True}'</arg>
<arg>One Key Capture Bts Logs</arg>
<arg>${SAVE_LOG_DIRECTORY}${/}capture_logs</arg>
<arg>${one_key_capture_logs_option}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:28.502" starttime="20171216 16:27:28.499"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:28.502" starttime="20171216 16:27:28.499"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:28.502" starttime="20171216 16:27:28.498"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Login</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:28.507" starttime="20171216 16:27:28.504"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:28.507" starttime="20171216 16:27:28.503"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:28.507" starttime="20171216 16:27:28.503"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Windows" in "${platform_version}"</arg>
<arg>GUI SM Save Snapshot</arg>
<arg>3</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:28.511" starttime="20171216 16:27:28.508"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:28.511" starttime="20171216 16:27:28.508"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:28.511" starttime="20171216 16:27:28.507"></status>
</kw>
<kw name="Get Active Bts Sw Version" library="tdd_ev_robotws">
<doc>get active BTS SW Build Version from enb targetBD file..</doc>
<assign>
<var>${version}</var>
</assign>
<msg timestamp="20171216 16:27:49.741" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:27:49.741" level="INFO">[ssh_common.py@203] -bash-4.4#</msg>
<msg timestamp="20171216 16:27:49.741" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Unknow Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0589CE90&gt;</msg>
<msg timestamp="20171216 16:27:49.741" level="INFO">[ssh_common.py@258] Execute command: readlink /ffs/run</msg>
<msg timestamp="20171216 16:27:49.742" level="INFO">[ssh_common.py@314] Get Response: readlink /ffs/run
/ffs/fs2
-bash-4.4#</msg>
<msg timestamp="20171216 16:27:49.742" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Unknow Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x0589CE90&gt;</msg>
<msg timestamp="20171216 16:27:49.742" level="INFO">[enb_command_control.py@33] argument host is: 192.168.255.1</msg>
<msg timestamp="20171216 16:27:49.742" level="INFO">[ssh_common.py@203] Last login: Sat Dec 16 16:28:11 CST 2017 from 192.168.255.126 on pts/1
-bash-4.4#</msg>
<msg timestamp="20171216 16:27:49.742" level="INFO">[connection_mgr.py@208] Current connection: 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05762C88&gt;</msg>
<msg timestamp="20171216 16:27:49.742" level="INFO">[ssh_common.py@258] Execute command: cd /ffs/fs2;ls TargetBD*.xml</msg>
<msg timestamp="20171216 16:27:49.742" level="INFO">[ssh_common.py@314] Get Response: cd /ffs/fs2;ls TargetBD*.xml
TargetBD_TL18_ENB_9999_171216_071524.xml
-bash-4.4#</msg>
<msg timestamp="20171216 16:27:49.742" level="INFO">[ssh_common.py@141] Disconnect from 192.168.255.1:22 DeviceType:Linux Timeout:10 seconds &lt;tdd_ev_robotws.CommonLib.connections.ssh_common.SshCommon instance at 0x05762C88&gt;</msg>
<msg timestamp="20171216 16:27:49.742" level="INFO">${version} = TL18_ENB_9999_171216_071524</msg>
<status status="PASS" endtime="20171216 16:27:49.742" starttime="20171216 16:27:28.512"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and "Linux" in "${platform_version}" and 'SBTS' not in "${version}"</arg>
<arg>semcli save snapshot</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:49.747" starttime="20171216 16:27:49.744"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:49.747" starttime="20171216 16:27:49.743"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:49.747" starttime="20171216 16:27:49.743"></status>
</kw>
<kw name="Run Keyword If Test Failed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if the test failed.</doc>
<arguments>
<arg>Run Keyword And Ignore Error</arg>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${AUTO_SNAPSHOT_FLAG}'=='${True}' and 'SBTS' in "${version}"</arg>
<arg>_soam_snapshot</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:49.751" starttime="20171216 16:27:49.748"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:49.751" starttime="20171216 16:27:49.748"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:49.751" starttime="20171216 16:27:49.747"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:49.752" starttime="20171216 16:27:28.497"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:49.752" starttime="20171216 16:27:09.570"></status>
</kw>
<tags>
<tag>owner-xingqiang.wu@nokia.com</tag>
<tag>QC_612238</tag>
</tags>
<status status="FAIL" endtime="20171216 16:27:49.752" critical="yes" starttime="20171216 16:10:24.672">com_error: (-2147023174, 'The RPC server is unavailable.', None, None)</status>
</test>
<kw type="teardown" name="Common Suite Teardown" library="common_resource">
<kw name="Run Keyword If" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if ``condition`` is true.</doc>
<arguments>
<arg>'${REMOVE_LOGS}'=='on'</arg>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:49.756" starttime="20171216 16:27:49.753"></status>
</kw>
<kw name="Disconnect All Hosts" library="tdd_ev_robotws">
<doc>Closes all existing telnet connections to remote hosts.</doc>
<msg timestamp="20171216 16:27:49.765" level="INFO">[telnet_common.py@188]</msg>
<msg timestamp="20171216 16:27:49.765" level="INFO">[telnet_common.py@189] Disconnect from 10.56.6.31:23 DeviceType:Windows Timeout:30 seconds &lt;tdd_ev_robotws.CommonLib.connections.telnet_common.TelnetCommon instance at 0x055C6760&gt;</msg>
<status status="PASS" endtime="20171216 16:27:49.765" starttime="20171216 16:27:49.756"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>variable should exist</arg>
<arg>${zip_pass_log}</arg>
</arguments>
<assign>
<var>${para_exist}</var>
</assign>
<kw name="Variable Should Exist" library="BuiltIn">
<doc>Fails unless the given variable exists within the current scope.</doc>
<arguments>
<arg>${zip_pass_log}</arg>
</arguments>
<msg timestamp="20171216 16:27:49.772" level="FAIL">Variable ${zip_pass_log} does not exist.</msg>
<status status="FAIL" endtime="20171216 16:27:49.773" starttime="20171216 16:27:49.766"></status>
</kw>
<msg timestamp="20171216 16:27:49.773" level="INFO">${para_exist} = ('FAIL', u'Variable ${zip_pass_log} does not exist.')</msg>
<status status="PASS" endtime="20171216 16:27:49.773" starttime="20171216 16:27:49.766"></status>
</kw>
<kw name="Set Variable If" library="BuiltIn">
<doc>Sets variable based on the given condition.</doc>
<arguments>
<arg>'PASS' == '${para_exist[0]}'</arg>
<arg>${zip_pass_log}</arg>
<arg>${True}</arg>
</arguments>
<assign>
<var>${zip_log}</var>
</assign>
<msg timestamp="20171216 16:27:49.776" level="INFO">${zip_log} = True</msg>
<status status="PASS" endtime="20171216 16:27:49.776" starttime="20171216 16:27:49.773"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<assign>
<var>${status}</var>
<var>${value}</var>
</assign>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>${zip_log} == ${True}</arg>
<arg>Zip File</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${SUITE_LOG_DIRECTORY}.zip</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:49.777" starttime="20171216 16:27:49.777"></status>
</kw>
<msg timestamp="20171216 16:27:49.777" level="INFO">${status} = PASS</msg>
<msg timestamp="20171216 16:27:49.778" level="INFO">${value} = None</msg>
<status status="PASS" endtime="20171216 16:27:49.778" starttime="20171216 16:27:49.777"></status>
</kw>
<kw name="Run Keyword And Ignore Error" library="BuiltIn">
<doc>Runs the given keyword with the given arguments and ignores possible error.</doc>
<arguments>
<arg>Run Keyword If All Tests Passed</arg>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<kw name="Run Keyword If All Tests Passed" library="BuiltIn">
<doc>Runs the given keyword with the given arguments, if all tests passed.</doc>
<arguments>
<arg>Run Keyword If</arg>
<arg>'${status}' == 'PASS' and ${zip_log} == ${True}</arg>
<arg>Remove Directory</arg>
<arg>${SUITE_LOG_DIRECTORY}</arg>
<arg>${True}</arg>
</arguments>
<status status="PASS" endtime="20171216 16:27:49.779" starttime="20171216 16:27:49.778"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:49.779" starttime="20171216 16:27:49.778"></status>
</kw>
<status status="PASS" endtime="20171216 16:27:49.779" starttime="20171216 16:27:49.753"></status>
</kw>
<doc>TD-LTE I&amp;V SISO1</doc>
<status status="FAIL" endtime="20171216 16:27:49.779" starttime="20171216 16:08:35.625"></status>
</suite>
<statistics>
<total>
<stat fail="1" pass="0">Critical Tests</stat>
<stat fail="1" pass="0">All Tests</stat>
</total>
<tag>
<stat fail="1" pass="0">owner-xingqiang.wu@nokia.com</stat>
<stat fail="1" pass="0">QC_612238</stat>
</tag>
<suite>
<stat fail="1" id="s1" name="FZFI Addtional SWDL SW upgrade both" pass="0">FZFI Addtional SWDL SW upgrade both</stat>
</suite>
</statistics>
<errors>
<msg timestamp="20171216 16:08:36.075" level="ERROR">Loading tdd_config has failed. Please check if: 
       1. you executed pybot with --variable CONFIGURATION:$your_tl_config 
          i.e. pybot --variable CONFIGURATION:Wroclaw.test 
       2. check if there is no problem with your configuration 
       Error msg: Variable ${CONFIGURATION} does not exist.
</msg>
</errors>
</robot>
